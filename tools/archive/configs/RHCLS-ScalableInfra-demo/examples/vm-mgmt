#!/usr/bin/env python
# A Ravello SDK example for management application VMs
#
# Copyright 2011-2016 Ravello Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

import ravello_sdk
import sys
import os
import json
from argparse import ArgumentParser
from common import *

log = logging.getLogger('main')

def mkparser():
	parser = ArgumentParser()
	parser.add_argument("-n", dest="app_id",default=0,type=int,help='application id')
	parser.add_argument("-a", dest="app_name",default=None,help='application name')
	parser.add_argument("-i", dest="vm_id",default=0,type=int,help='VM ID')
	parser.add_argument("-v", dest="vm_name",default=None,help='VM name')
	parser.add_argument("-u", dest="username",default=None,help='Ravello user account name')
	parser.add_argument("-l", dest="log_file", default='ravello.log',help='logfile name')
	parser.add_argument("command",default=None,choices=['start','stop','restart','poweroff','redeploy','repair','resetDisks'],help='command to execute')
	return parser

def validate_param(args):
        if args.app_id == 0 and not args.app_name: # Neither app ID nor app name are provided
                print("Error: Invalid parameters, either application name or ID must be provided")
                return False

        if args.vm_id == 0 and not args.vm_name: # Neither VM ID nor VM name are provided
                print("Error: Invalid parameters, either VM name or ID must be provided")
                return False

        if not args.command:
                print("Error: Invalid parameters, there is not command to execute")
                return False
		
        return True

def get_vm_id(app_id,vm_name,client):
	vm_id = 0
	vms = client.get_vms(app_id)
	for vm in vms:
		vm = client.get_vm(app_id,vm['id'],'deployment')
		if vm['name'].lower()==vm_name.decode('utf-8').lower():
			vm_id = vm['id']
	return vm_id

def execute_command(app_id,vm_id,command,client):
	if command == 'start':
		rc = start_vm(app_id,vm_id,client)
	elif command == 'stop':
		rc = stop_vm(app_id,vm_id,client)
	elif command == 'restart':
		rc = restart_vm(app_id,vm_id,client)
	elif command == 'poweroff':
		rc = poweroff_vm(app_id,vm_id,client)
	elif command == 'redeploy':
		rc = redeploy_vm(app_id,vm_id,client)
	elif command == 'repair':
		rc = repair_vm(app_id,vm_id,client)
	elif command == 'resetDisks':
		rc = reset_disks_vm(app_id,vm_id,client)
	else:
		log.error("Error: Invalid command {}".format(command))
		print("Error: Invalid command {}".format(command))
	return True

def start_vm(app_id,vm_id,client):
	vm = client.get_vm(app_id,vm_id,'deployment')
	vm_name = vm['name'].encode('utf-8')
	vm_state = vm['state']
	if vm_state == 'STOPPED':
		client.start_vm(app_id,vm_id)
		log.info('Starting VM {}'.format(vm_name))
		print('Starting VM {}'.format(vm_name))
		return True
	elif vm_state == 'STARTED' or vm_state == 'STARTING':
		log.info('VM {0} is in {1} state, skipping START command'.format(vm_name,vm_state))
		print('VM {0} is in {1} state, skipping START command'.format(vm_name,vm_state))
		return True
	else:
		log.info('VM {0} is in {1} state, canceling START command'.format(vm_name,vm_state))
		print('VM {0} is in {1} state, canceling START command'.format(vm_name,vm_state))
		return False	
		
def stop_vm(app_id,vm_id,client):
	vm = client.get_vm(app_id,vm_id,'deployment')
	vm_name = vm['name'].encode('utf-8')
	vm_state = vm['state']
	if vm_state == 'STARTED':
		client.stop_vm(app_id,vm_id)
		log.info('Stopping VM {}'.format(vm_name))
		print('Stopping VM {}'.format(vm_name))
		return True
	elif vm_state == 'STOPPED' or vm_state == 'STOPPING':
		log.info('VM {0} is in {1} state, skipping STOP command'.format(vm_name,vm_state))
		print('VM {0} is in {1} state, skipping STOP command'.format(vm_name,vm_state))
		return True
	else:
		log.info('VM {0} is in {1} state, canceling STOP command'.format(vm_name,vm_state))
		print('VM {0} is in {1} state, canceling STOP command'.format(vm_name,vm_state))
		return False

def restart_vm(app_id,vm_id,client):
	vm = client.get_vm(app_id,vm_id,'deployment')
	vm_name = vm['name'].encode('utf-8')
	vm_state = vm['state']
	if vm_state == 'STARTED' or vm_state == 'STOPPED':
		client.restart_vm(app_id,vm_id)
		log.info('Restarting VM {}'.format(vm_name))
		print('Restarting VM {}'.format(vm_name))
		return True
	else:
		log.info('VM {0} is in {1} state, canceling RESTART command'.format(vm_name,vm_state))
		print('VM {0} is in {1} state, canceling RESTART command'.format(vm_name,vm_state))
		return False

def poweroff_vm(app_id,vm_id,client):
	vm = client.get_vm(app_id,vm_id,'deployment')
	vm_name = vm['name'].encode('utf-8')
	vm_state = vm['state']
	client.poweroff_vm(app_id,vm_id)
	log.info('Powering off VM {}'.format(vm_name))
	print('Powering off VM {}'.format(vm_name))
	return True

def redeploy_vm(app_id,vm_id,client):
	vm = client.get_vm(app_id,vm_id,'deployment')
	vm_name = vm['name'].encode('utf-8')
	vm_state = vm['state']
	client.redeploy_vm(app_id,vm_id)
	log.info('Redeploying VM {}'.format(vm_name))
	print('Redeploying VM {}'.format(vm_name))
	return True

def repair_vm(app_id,vm_id,client):
	vm = client.get_vm(app_id,vm_id,'deployment')
	vm_name = vm['name'].encode('utf-8')
	vm_state = vm['state']
	client.repair_vm(app_id,vm_id)
	log.info('Trying to repair VM {}'.format(vm_name))
	print('Trying to repair VM {}'.format(vm_name))
	return True

def reset_disks_vm(app_id,vm_id,client):
	vm = client.get_vm(app_id,vm_id,'deployment')
	vm_name = vm['name'].encode('utf-8')
	vm_state = vm['state']
	client.reset_disks_vm(app_id,vm_id)
	log.info('Resetting disks to the last state of VM {}'.format(vm_name))
	print('Resetting disks to the last state of VM {}'.format(vm_name))
	return True
	
def main():
	parser = mkparser()
	args = parser.parse_args()

	initlog(args.log_file)

	if not validate_param(args):
		parser.print_help()
		exit(1)


	#Get user credentials
	username, password  = get_user_credentials(args.username)
	if not username or not password:
		exit(1)

	#Connect to Ravello
	client = connect(username, password)
	if not client:
		exit (1)

	app_id = args.app_id
	if app_id == 0:
		app_id = get_app_id(args.app_name,client)
		if app_id == 0:
			print("Error: Invalid application {}".format(args.app_name))	
			exit(1)

	vm_id = args.vm_id
	if vm_id == 0:
		vm_id = get_vm_id(app_id, args.vm_name, client)
		if vm_id == 0:
			print("Error: Invalid VM name {}".format(args.vm_name))	
			exit(1)

	rc = execute_command(app_id,vm_id,args.command,client)

	exit(rc)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        sys.stderr.write('Error: {!s}\n'.format(e))
