#!/usr/bin/env python
# A Ravello SDK example for creating creating an ephemeral access token     
#
# Copyright 2011-2016 Ravello Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

import ravello_sdk
import sys
import os
import json
import time
from argparse import ArgumentParser
from common import *

log = logging.getLogger('main')

def mkparser():
	parser = ArgumentParser()
	parser.add_argument("-i", dest="app_id",default=None,help='application id')
	parser.add_argument("-n", dest="app_name",default=None,help='application name')
	parser.add_argument("-d", dest="etoken_desc",default=None,help='ephemeral token description')
	parser.add_argument("-r", dest="resource_type", default='APPLICATION',help='resource type: APPLICATION, LIBRARY_VM, etc ')
	parser.add_argument("-p", dest="action_permissions", default=None,nargs='+',choices=['READ','CREATE','UPDATE','EXECUTE'],help='type action permissions separated by space')
	parser.add_argument("-t", dest="etoken_exp_time",default=0,type=int,help='ephemeral token expiration time in minutes')
	parser.add_argument("-u", dest="username",default=None,help='Ravello user account name')
	parser.add_argument("-l", dest="log_file", default='ravello.log',help='logfile name')
	parser.add_argument("etoken_name",nargs='?',default=None,help='ephemeral token name')

	return parser

def validate_param(args):
	if not args.app_name and not args.app_id: # Application name or ID must be provided 
		log.error("Invalid parameters, either application name or application ID must be provided")
		print("Error: Invalid parameters, either blue application name or application ID must be provided")
		return False

	if not args.etoken_name:
		log.error("Invalid parameters, ephemeral token name must be provided")
		print("Error: Invalid parameters, ephemeral token name must be provided")
		return False

	return True

def create_access_token(app_id,token_name,token_desc,resource_type,action_permissions,client):	
	if (not app_id or not token_name):
		return None

	if not resource_type:
		resource_type = 'APPLICATION'

	if not action_permissions: 
		if resource_type == 'APPLICATION' :
			action_permissions = ['READ','EXECUTE']
		else:
			return None

	token = {
		"name" :  token_name,
		"description" :  token_desc,
		"permissions" : [ {
			"actions" : action_permissions,
			"resourceType" : resource_type,
			"filterCriterion" : {
				"type" :  "COMPLEX",
				"operator" :  "And",
				"criteria" : [ {
					"type" :  "SIMPLE",
					"operator" :  "Equals",
					"propertyName" :  "ID",
					"operand" :  app_id
                    		}]
        		}
		} ]
	}

	log.info("Creating a new ephemeral access token {}".format(token_name))
	print("Creating a new ephemeral access token {}".format(token_name))
#	print (json.dumps(token,indent=5))
	access_token = client.create_ephemeral_access_token(token)
	if access_token:
		log.info("Ephemeral access token {} was created successfully".format(token_name))
		print("Ephemeral access token {} was created successfully".format(token_name))
		
	return access_token

def set_expiration_time(token_id,token_time,client):
	token = client.get_ephemeral_access_token(token_id)
	if token:	
		expiration_time = token['expirationTime']
		current_time = int(round(time.time() * 1000))
		expiration_time = current_time + token_time*60*1000
		token['expirationTime']=expiration_time
		client.update_ephemeral_access_token(token_id, token)
		updated_token = client.get_ephemeral_access_token(token_id)
		log.info ("Ephemeral token {0} expiration time is set to {1}".format(token['name'],(updated_token['expirationTime']-current_time)/(60*60*1000)))
		print ("Ephemeral token {0} expiration time is set to {1} hours".format(token['name'],(updated_token['expirationTime']-current_time)/(60*60*1000)))

	
def display_token(access_token):
	if access_token:
#		print(json.dumps(access_token,indent=5))
		token_id = access_token['token']
		app_id = access_token['permissions'][0]['filterCriterion']['criteria'][0]['operand']
		EndUserURL="https://access.ravellosystems.com/simple/#/"+token_id+"/apps/"+app_id
		RavelloURL="https://access.ravellosystems.com/#/"+token_id+"/apps/"+app_id
		print("End-user: {}".format(EndUserURL))
		print("Ravello UI: {}".format(RavelloURL))
		print("API Token: {}".format(token_id))
def main():
	parser = mkparser()
	args = parser.parse_args()

	if not validate_param(args):
		parser.print_help()
		exit(1)

	initlog(args.log_file)

	#Set user credentials
	username, password  = get_user_credentials(args.username)
	if not username or not password:
		exit(1)

	#Connect to Ravello
	client = connect(username, password)
	if not client:
		exit (1)


	app_id = args.app_id

	if not app_id:
		#Get application ID
		app_id = get_app_id(args.app_name,client)

	if app_id:
		#Create ephemeral access token
		access_token = create_access_token(app_id,args.etoken_name,args.etoken_desc,args.resource_type,args.action_permissions,client)


		if access_token:
			if args.etoken_exp_time != 0:	 #Update ephemeral token expiration time
				set_expiration_time(access_token['id'],args.etoken_exp_time,client)

#			print(access_token)
			display_token(access_token)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        sys.stderr.write('Error: {!s}\n'.format(e))
