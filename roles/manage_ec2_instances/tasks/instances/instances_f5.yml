---
############## f5 node ##############
- name: Create EC2 instances for f5 node (workshop_type f5)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info.f5node.size }}"
    image_id: "{{ f5_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    state: running
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_f5": "{{ ec2_name_prefix }}-f5"
    tags:
      Workshop_f5: "{{ ec2_name_prefix }}-f5"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{ student_total }}"
      username: "{{ ec2_info.f5node.username }}"
      short_name: "f5"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_type: "{{ ec2_info['f5node'].disk_volume_type }}"
          volume_size: "{{ ec2_info['f5node'].disk_space }}"
          iops: "{{ ec2_info['f5node'].disk_iops }}"
          throughput: "{{ ec2_info['f5node'].disk_throughput }}"
          delete_on_termination: true
  register: f5_test

- debug:
    msg: "{{ f5_test }}"

- name: grab instance ids to tag f5 node
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_f5": "{{ ec2_name_prefix }}-f5"
  register: f5_output

- name: Ensure tags are present for f5 node (workshop_type f5)
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-f5"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ f5_output.instances }}"
  when: f5_output.instances|length > 0

- name: Create EC2 instances for node1 node in VPC (workshop_type f5)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info.rhel8.size }}"
    image_id: "{{ node1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    state: running
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_node1": "{{ ec2_name_prefix }}-node1"
    tags:
      Workshop_node1: "{{ ec2_name_prefix }}-node1"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner for F5 workshop"
      Students: "{{ student_total }}"
      short_name: node1
      username: "{{ ec2_info[rhel].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info['rhel8'].disk_volume_type }}"
          volume_size: "{{ ec2_info['rhel8'].disk_space }}"
          iops: "{{ ec2_info['rhel8'].disk_iops }}"
          throughput: "{{ ec2_info['rhel8'].disk_throughput }}"
          delete_on_termination: true

- name: grab instance ids to tag node1
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node1": "{{ ec2_name_prefix }}-node1"
  register: node1_output

- name: Ensure tags are present for node1 node (workshop_type f5)
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node1"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node1_output.instances }}"
  when: node1_output.instances|length > 0

- name: Create EC2 instances for node2 node in VPC (workshop_type f5)
  amazon.aws.ec2_instance:
    key_name: "{{ ec2_name_prefix }}-key"
    security_group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_info.rhel8.size }}"
    image_id: "{{ node1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    state: running
    network:
      assign_public_ip: true
    filters:
      instance-state-name: running
      "tag:Workshop_node2": "{{ ec2_name_prefix }}-node2"
    tags:
      Workshop_node2: "{{ ec2_name_prefix }}-node2"
      Workshop: "{{ ec2_name_prefix }}"
      uuid: "{{ ec2_name_prefix }}"
      guid: "{{ ec2_name_prefix }}"
      Workshop_type: "{{ workshop_type }}"
      AWS_USERNAME: "{{ aws_user }}"
      owner: "{{ aws_user }}"
      Info: "AWS_USERNAME that provisioned this-> {{ aws_user }}"
      Linklight: "This was provisioned through the linklight provisioner for F5 workshop"
      Students: "{{ student_total }}"
      short_name: node2
      username: "{{ ec2_info[rhel].username }}"
      ansible-workshops: "true"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: "{{ ec2_info['rhel8'].disk_volume_type }}"
          volume_size: "{{ ec2_info['rhel8'].disk_space }}"
          iops: "{{ ec2_info['rhel8'].disk_iops }}"
          throughput: "{{ ec2_info['rhel8'].disk_throughput }}"
          delete_on_termination: true

- name: grab instance ids to tag node1
  amazon.aws.ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      "tag:Workshop_node2": "{{ ec2_name_prefix }}-node2"
  register: node2_output

- name: Ensure tags are present for node2 node (workshop_type f5)
  amazon.aws.ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{ item.1.instance_id }}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{ item.0 + 1 }}-node2"
      Index: "{{ item[0] }}"
      Student: "student{{ item.0 + 1 }}"
      launch_time: "{{ item.1.launch_time }}"
  with_indexed_items:
    - "{{ node2_output.instances }}"
  when: node2_output.instances|length > 0

############## eni check ##############

- name: grab all network interfaces for VPC 1 (workshop_type f5)
  amazon.aws.ec2_eni_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ ec2_vpc_id }}"
  register: eni_facts_1

- name: Disable Source/Dest check on instance {{ ec2_vpc_id }} (workshop_type f5)
  amazon.aws.ec2_eni:
    eni_id: "{{ item['network_interface_id'] }}"
    region: "{{ ec2_region }}"
    source_dest_check: false
  with_items:
    - "{{ eni_facts_1['network_interfaces'] }}"
