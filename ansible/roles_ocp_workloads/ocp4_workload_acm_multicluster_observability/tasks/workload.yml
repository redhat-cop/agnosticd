---
# Implement your Workload deployment tasks here
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- environment:
    KUBECONFIG: "{{ tmp_kubeconfig }}"
  block:
    - name: Create MultCluster Observability Namespace
      k8s:
        state: present
        definition: "{{ lookup('template','./templates/namespace_create.yml.j2') | from_yaml }}"

    - name: Get pull-secret from openshift-config
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: pull-secret
        namespace: openshift-config
      register: pullsecret
      retries: 10
      delay: 5
      until: pullsecret | length > 0

    - name: Get the original cred secrets
      set_fact:
        original_secret: "{{ item.data }}"
      with_items: "{{ pullsecret.resources }}"
      no_log: true

    - name: Get the dockerconfigjson info
      set_fact:
        secret_string: '{{ original_secret[".dockerconfigjson"] | b64decode | from_json }}'

    #- debug: var=r_secret
    #- debug: var=r_secret.resources[]."data"
    - debug: var=secret_string

    - name: Create new secret
      k8s:
        state: present
        definition:
          apiVersion: v1
          data:
            .dockerconfigjson: "{{ secret_string | to_json | b64encode }}"
          kind: Secret
          metadata:
            name: multiclusterhub-operator-pull-secret
            namespace: "{{ ocp4_workload_acm_multicluster_observability_namespace }}"
          type: kubernetes.io/dockerconfigjson
      when: need_update

  #  - name: Create secret pull secret in "{{ ocp4_workload_acm_multicluster_observability_namespace }}"
  #    k8s:
  #      state: present
  #      definition:
  #        apiVersion: v1
  #        kind: Secret
  #        metadata:
  #          name: multiclusterhub-operator-pull-secret
  #          namespace: "{{ ocp4_workload_acm_multicluster_observability_namespace }}"
  #        type: kubernetes.io/dockerconfigjson
  #        data:
  #           .dockerconfigjson: "{{ secret_string }}"
#
# DOCKER_CONFIG_JSON=`oc extract secret/pull-secret -n openshift-config --to=-`
# oc create secret generic multiclusterhub-operator-pull-secret \
#    -n "{{ ocp4_workload_acm_multicluster_observability_namespace }}" \
#    --from-literal=.dockerconfigjson="$DOCKER_CONFIG_JSON" \
#    --type=kubernetes.io/dockerconfigjson

    - name: Check ODF is ready
      k8s_info:
        api_key: "{{ ocp_key_hub }}"
        host: "{{ ocp_hub_api_url }}"
        validate_certs: false
        api_version: ocs.openshift.io/v1
        kind: StorageCluster
        name: ocs-storagecluster
        namespace: openshift-storage
      register: r_storagecluster
      until:
        - r_storagecluster.resources.0.status.phase == "Ready"
      retries: 30
      delay: 30

    - name: Check NooBaa is ready
      k8s_info:
        api_key: "{{ ocp_key_hub }}"
        host: "{{ ocp_hub_api_url }}"
        validate_certs: false
        api_version: noobaa.io/v1alpha1
        kind: NooBaa
        name: noobaa
        namespace: openshift-storage
      register: r_noobaa
      until:
        - r_noobaa.resources.0.status.phase == "Ready"
      retries: 30
      delay: 30

    #    - debug: var=r_noobaa

    - name: Create Object Bucket Claim
      k8s:
        state: present
        definition: "{{ lookup('template','./templates/obc-observability.yml.j2') | from_yaml }}"

#    - name: Get the Object Bucket Claim information
# [dev-admin@bastion ~]$ oc get cm observer-bucket -o yaml
# apiVersion: v1
# data:
#   BUCKET_HOST: s3.openshift-storage.svc
#   BUCKET_NAME: observer-bucket-b97174a1-214a-4af0-84d1-6c2e860bd452
#   BUCKET_PORT: "443"
#   BUCKET_REGION: ""
#   BUCKET_SUBREGION: ""
# 
# [dev-admin@bastion ~]$ oc get secret observer-bucket -o yaml
# apiVersion: v1
# data:
#   AWS_ACCESS_KEY_ID: S1EwaGROV0w3N1BBbVRSREhLMk0=
#   AWS_SECRET_ACCESS_KEY: aEtJSWJQK25VbG9TaHY0V3FzSEZmOHVQMnUxVVVEdWo4T3pwWUhGeg==
# 
# [dev-admin@bastion ~]$ echo 'S1EwaGROV0w3N1BBbVRSREhLMk0=' |base64 --decode
# KQ0hdNWL77PAmTRDHK2M[dev-admin@bastion ~]$ 
# [dev-admin@bastion ~]$ echo 'aEtJSWJQK25VbG9TaHY0V3FzSEZmOHVQMnUxVVVEdWo4T3pwWUhGeg==' | base64 --decode
# hKIIbP+nUloShv4WqsHFf8uP2u1UUDuj8OzpYHFz[dev-admin@bastion ~]$ 

    - name: Create Thanos Object Storage Secret
      k8s:
        state: present
        definition: "{{ lookup('template','./templates/thanos-object-storage-secret.yml.j2') | from_yaml }}"

    - name: Create MultiCluster Observability for ACM 
      k8s:
        state: present
        definition: "{{ lookup('template','./templates/multiclusterobservability-cr.yml.j2') | from_yaml }}"
   
  #  - name: Wait until MultiCluster Observability environment is created on ACM/hub cluster
  #    k8s_info:
  #      api_version: operators.coreos.com/v1alpha1
  #      kind: InstallPlan
  #      namespace: openshift-operators
  #    register: r_odfhubop
  #    vars:
  #      _query: >-
  #        [?starts_with(spec.clusterServiceVersionNames[0], 'odr-hub-operator')]
  #    retries: 30
  #    delay: 10
  #    until:
  #      - r_odfhubop.resources | length > 0
  #      - r_odfhubop.resources | to_json | from_json | json_query(_query)

#    - name: Wait until odf-multicluster-orchestrator is created
#      k8s_info:
#        api_version: operators.coreos.com/v1alpha1
#        kind: InstallPlan
#        namespace: openshift-operators
#      register: r_odfmoo
#    # - debug: var=r_odfmoo.resources
#    # - debug: var=r_odfmoo.resources.0
#    # - debug: var=r_odfmoo.resources.0.spec
#    # - debug: var=r_odfmoo.resources.0.spec.clusterServiceVersionNames[0]
#    # - debug: var=r_odfmoo.resources.0.spec.clusterServiceVersionNames[1]
#    # - debug: var=r_odfmoo.resources.0.spec.clusterServiceVersionNames
#    # - pause:
#      vars:
#        _query: >-
#          [?starts_with(spec.clusterServiceVersionNames[1], 'odf-multicluster-orchestrator.v4.11.3')]
#      retries: 2
#      delay: 3
#      until:
#        - r_odfmoo.resources.0 | length > 0
#        - r_odfmoo.resources.0 | to_json | from_json | json_query(_query)

    - name: Pause for 5 minutes for Observability setup to be completed.
      ansible.builtin.pause:
        minutes: 5

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
