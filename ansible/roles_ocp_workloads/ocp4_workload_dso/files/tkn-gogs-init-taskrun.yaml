apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gogs-
  namespace: ocp-workshop
spec:
  taskSpec:
    params:
    - name: GOGS_USER
      type: string
      description: Gogs admin username
      default: gogsadmin
    - name: GOGS_PASSWORD
      type: string
      description: Gogs admin password
      default: openshift
    stepTemplate:
      env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
    steps:
    - name: init-gogs
      image: quay.io/siamaksade/python-oc
      script: |
        #!/usr/bin/env python3

        import os
        import requests

        gogs_user = "$(params.GOGS_USER)"
        gogs_pwd = "$(params.GOGS_PASSWORD)"
        webhookURL = "http://" + os.popen('oc get route el-webhook -o template --template="{{.spec.host}}"').read()
        gogsURL = "http://" + os.popen('oc get svc gogs -o template --template="{{.spec.clusterIP}}"').read() + ":3000"

        # create admin user
        data_user = {
        'user_name': gogs_user,
        'password': gogs_pwd,
        'retype': gogs_pwd,
        'email': 'admin@gogs.com'
        }

        #resp = requests.post(url = gogsURL + "/user/sign_up", data = data_user)

        #if resp.status_code != 200:
        #  print("Error creating Gogs admin (status code: {})".format(resp.status_code))
        #  print(resp.content)
        #else:
        #  print("Created admin user {}:{}".format(gogs_user, gogs_pwd))

        # create git repo spring-petclinic
        data_repo = '{"clone_addr": "https://github.com/rcarrata/spring-petclinic", "uid": 1, "repo_name": "spring-petclinic"}'
        headers = {'Content-Type': 'application/json'}
        resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)

        if resp.status_code != 200 and resp.status_code != 201:
          print("Error creating git repo (status code: {})".format(resp.status_code))
          print(resp.content)
        else:
          print("Created git repo spring-petclinic")

        # configure webhook on spring-petclinic
        data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
        headers = {'Content-Type': 'application/json'}
        resp = requests.post(url = gogsURL + "/api/v1/repos/" + gogs_user + "/spring-petclinic/hooks",
                            headers = headers,
                            auth = (gogs_user, gogs_pwd),
                            data = data_webhook)

        if resp.status_code != 200 and resp.status_code != 201:
          print("Error configuring the webhook (status code: {})".format(resp.status_code))
          print(resp.content)
        else:
          print("Configured webhook: " + webhookURL)

        # create git repo spring-petclinic-config
        data_repo = '{"clone_addr": "https://github.com/rcarrata/spring-petclinic-config.git", "uid": 1, "repo_name": "spring-petclinic-config"}'
        headers = {'Content-Type': 'application/json'}
        resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)

        if resp.status_code != 200 and resp.status_code != 201:
          print("Error creating git repo (status code: {})".format(resp.status_code))
          print(resp.content)
        else:
          print("Created git repo spring-petclinic-config")
