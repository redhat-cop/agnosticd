---

- name: copy over sonarqube templates
  copy:
    src: "{{ item }}"
    dest: "{{ ocp4_dso_tmp_dir }}"
  loop:
    - sonarqube-persistent-template.yml
    - sonarqube-template.yml

- name: deploy sonarqube from template (persistent)
  shell: |
    {{ ocp4_dso_openshift_cli }} new-app -f {{ ocp4_dso_tmp_dir }}/sonarqube-persistent-template.yml \
        --param=SONARQUBE_MEMORY_LIMIT=2Gi \
        -n {{ ocp4_admin_project }}
  when: not ocp4_dso_ephemeral|bool

- name: deploy sonarqube from template (ephemeral)
  shell: |
    {{ ocp4_dso_openshift_cli }} new-app -f {{ ocp4_dso_tmp_dir }}/sonarqube-template.yml \
        --param=SONARQUBE_MEMORY_LIMIT=2Gi \
        -n {{ ocp4_admin_project }}
  when: ocp4_dso_ephemeral|bool

- name: get sonarqube route
  # yamllint disable-line rule:line-length
  shell: "{{ ocp4_dso_openshift_cli }} get route {{ ocp4_dso_sonarqube_service_name }} -o jsonpath='{ .spec.host }' -n {{ ocp4_dso_sonarqube_project_name }}"
  register: sonarqube_route_output
  changed_when: false

- set_fact:
    sonarqube_route: "{{ sonarqube_route_output.stdout }}"

- name: waiting for sonarqube pod to be available
  command: "{{ ocp4_dso_openshift_cli }} rollout status deployment/sonarqube -n {{ ocp4_admin_project }}"
  async: 300

- name: wait for sonarqube to be running
  uri:
    url: https://{{ ocp4_dso_sonarqube_urlprefix }}.{{ route_subdomain }}
    status_code: 200
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 30
  delay: 30
