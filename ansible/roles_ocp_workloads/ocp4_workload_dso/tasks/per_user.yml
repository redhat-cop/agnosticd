---

- name: per user
  become: true
  block:
    - set_fact:
        my_user: "{{ item }}"

    - name: per_user {{ my_user }} Tasks Started
      debug:
        msg: "per_user {{ my_user }} Tasks - Started"

    - name: check if workshop user's project for user "{{ my_user }}" exists
      shell: "{{ ocp4_dso_openshift_cli }} get project {{ my_user }}"
      register: user_project
      ignore_errors: true
      changed_when: false
      tags: always

    - name: create workshop user's project for user "{{ my_user }}"
      command: "{{ ocp4_dso_openshift_cli }} adm new-project {{ item }}"
      when: user_project is failed
      tags: always
      with_items:
        - "{{ my_user }}"
        - "{{ my_user }}-stage"
        - "{{ my_user }}-prod"

    - name: annotate the project as requested by user for user "{{ my_user }}"
      command: "{{ ocp4_dso_openshift_cli }} annotate namespace {{ item }} openshift.io/requester={{ my_user }} --overwrite"
      tags: always
      with_items:
        - "{{ my_user }}"
        - "{{ my_user }}-stage"
        - "{{ my_user }}-prod"

    - name: award admin permission for user "{{ my_user }}"
      command: "{{ ocp4_dso_openshift_cli }} adm policy add-role-to-user admin {{ my_user }} -n {{ item }}"
      tags: always
      with_items:
        - "{{ my_user }}"
        - "{{ my_user }}-stage"
        - "{{ my_user }}-prod"

    - name: create docker secret for quay
      command: "{{ ocp4_dso_openshift_cli }} create secret docker-registry quay --docker-server=quayecosystem-quay-quay-enterprise.{{ route_subdomain }} --docker-username={{ ocp4_dso_quay_user }} --docker-password={{ ocp4_dso_quay_user_password }} -n {{ my_user }}"

    - name: link secrets to service accounts
      command: "{{ ocp4_dso_openshift_cli }} secrets link {{ item }} quay -n {{ my_user }}"
      with_items:
        - default
        - builder

    - name: create configmap for owasp zap agent pod
      command: "{{ ocp4_dso_openshift_cli }} create -f {{ ocp4_dso_tmp_dir }}/files/owasp-cmap.yml -n {{ my_user }}"

    - name: create configmap for image management agent pod
      command: "{{ ocp4_dso_openshift_cli }} create -f {{ ocp4_dso_tmp_dir }}/files/image-mgmt-cmap.yml -n {{ my_user }}"

    - name: create an ephemeral jenkins instance
      command: "{{ ocp4_dso_openshift_cli }} new-app jenkins-ephemeral -p MEMORY_LIMIT=4Gi -p JENKINS_IMAGE_STREAM_TAG=custom-jenkins:latest -n {{ my_user }}"
      tags: always

    - name: allow proper formatting of archived html in jenkins and install plugins
      command: "{{ ocp4_dso_openshift_cli }} set env dc/jenkins JENKINS_JAVA_OVERRIDES=-Dhudson.model.DirectoryBrowserSupport.CSP= -n {{ my_user }}"

    - name: populate buildconfig templates
      template:
        src: "{{ item.src }}"
        dest: "{{ ocp4_dso_tmp_dir }}/files/{{ item.dest }}"
        mode: '0644'
      loop:
        - src: buildconfig.yml.j2
          dest: buildconfig.yaml
        - src: hardening-buildconfig.yml.j2
          dest: hardening-buildconfig.yaml

    - name: create build template
      command: "{{ ocp4_dso_openshift_cli }} create -f {{ ocp4_dso_tmp_dir }}/files/{{ item }} -n {{ my_user }}"
      tags: always
      ignore_errors: true
      loop:
        - buildconfig.yaml
        - hardening-buildconfig.yaml

    - name: create jenkins pipelines
      command: "{{ ocp4_dso_openshift_cli }} new-app {{ item }} -p INTERNAL_REGISTRY={{ ocp4_dso_ocp_registry_route }} -p BASTION={{ ocp4_dso_bastion }} -p APP_DOMAIN={{ route_subdomain }} -p API_ENDPOINT={{ openshift_master }} -p GUID={{ ocp4_dso_guid }} -p GOGS_USER={{ my_user }} -p SSH_PASSWORD={{ ocp4_dso_user_password }} -n {{ my_user }}"
      tags: always
      ignore_errors: true
      loop:
        - ecommerce-build-template
        - hardening-template

    - name: check if repository exists in git for user "{{ my_user }}"
      uri:
        url: http://{{ ocp4_dso_gogs_urlprefix }}.{{ route_subdomain }}/api/v1/repos/{{ my_user }}/{{ ocp4_dso_reponame_local }}
        user: "{{ my_user }}"
        password: "{{ ocp4_dso_gogs_user_password }}"
        force_basic_auth: true
        status_code: 200,404
      register: repo_result
      tags: gogs

    - name: create git repository for user "{{ my_user }}"
      uri:
        url: http://{{ ocp4_dso_gogs_urlprefix }}.{{ route_subdomain }}/api/v1/user/repos
        method: POST
        body: '{"name": "{{ ocp4_dso_reponame_local }}", "private": false}'
        body_format: json
        user: "{{ my_user }}"
        password: "{{ ocp4_dso_gogs_user_password }}"
        status_code: 200,201
        force_basic_auth: true
      when: repo_result.status != 200
      tags: gogs

    - name: update the pom.xml file
      replace:
        path: "{{ git_dir.path }}/{{ ocp4_dso_reponame }}/{{ ocp4_dso_demoapp_location }}/pom.xml"
        regexp: "user(.+)"
        replace: "{{ my_user }}</groupId>"
      tags: gogs

    - name: remove git metadata
      shell: |
        rm -fr .git
      args:
        chdir: "{{ git_dir.path }}/{{ ocp4_dso_reponame }}"
      tags: gogs

    - name: create new git repo
      shell: |
        rm -fr .git || true
        git init .
        git add *
        git commit -am "Initial checkin"
      args:
        chdir: "{{ git_dir.path }}/{{ ocp4_dso_reponame }}/{{ ocp4_dso_demoapp_location }}"
      tags: gogs

    - name: push catalog to git repository in Gogs for user "{{ my_user }}"
      shell: |
        git remote add {{ my_user }} http://{{ my_user }}:{{ ocp4_dso_gogs_user_password }}@{{ ocp4_dso_gogs_urlprefix }}.{{ route_subdomain }}/{{ my_user }}/{{ ocp4_dso_reponame_local }}.git
        git config --local user.email "{{ my_user }}@example.com"
        git config --local user.name "{{Â my_user }}"
        git push -f --all {{ my_user }}
      args:
        chdir: "{{ git_dir.path }}/{{ ocp4_dso_reponame }}/{{ ocp4_dso_demoapp_location }}"
      when: repo_result.status != 200
      tags: gogs

    - name: create user on bastion for openscap
      user:
        name: "{{ my_user }}"
        password: "{{ ocp4_dso_user_password | password_hash('sha512') }}"
        password_lock: no
        state: present
        append: yes
        groups:
          - docker
      ignore_errors: true

    - name: per_user {{ my_user }} Tasks Complete
      debug:
        msg: "per_user {{ my_user }} Tasks - Completed"
