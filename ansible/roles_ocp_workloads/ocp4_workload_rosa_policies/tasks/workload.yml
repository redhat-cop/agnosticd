---
# region={{ aws_region  }}

- name: Use Sandbox AWS credentials
  environment:
    AWS_ACCESS_KEY_ID: "{{ hostvars.localhost.rosa_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ hostvars.localhost.rosa_secret_access_key }}"
  block:
  - name: Get AWS caller information
    amazon.aws.aws_caller_info:
    register: r_caller_info

  - name: Print Account ID
    ansible.builtin.debug:
      msg: "{{ item }}"
    loop:
    - "Amazon Account ID: {{ r_caller_info.account }}"
    - "ARN: {{ r_caller_info.arn }}"
    - "Account Alias: {{ r_caller_info.account_alias }}"
    - "User ID: {{ r_caller_info.user_id }}"

  - name: Ensure AWS user does not exist
    amazon.aws.iam_user:
      state: absent
      name: "{{ ocp4_workload_rosa_policies_aws_user_name }}"

  - name: Create AWS user
    amazon.aws.iam_user:
      state: present
      name: "{{ ocp4_workload_rosa_policies_aws_user_name }}"
      managed_policies: []
    register: r_user

  - name: Debug user
    ansible.builtin.debug:
      msg: "{{ item }}"
    loop:
    - "User: {{ r_user.user.user_name }}"
    - "ARN: {{ r_user.user.arn }}"
    - "ID: {{ r_user.user.user_id }}"
    - "Account ID: {{ (r_user.user.arn | split(':'))[4] }}"

  - name: Set Student Account ID
    ansible.builtin.set_fact:
      student_aws_account_id: "{{ (r_user.user.arn | split(':'))[4] }}"

  - name: Create access key
    community.aws.iam_access_key:
      user_name: "{{ ocp4_workload_rosa_policies_aws_user_name }}"
      state: present
    register: r_access_key

  - name: Debug access key and secret
    ansible.builtin.debug:
      msg: "{{ item }}"
    loop:
    - "Access Key ID: {{ r_access_key.access_key_id }}"
    - "Secret Access Key: {{ r_access_key.secret_access_key }}"

  - name: Set Student Access Credentials
    ansible.builtin.set_fact:
      student_aws_access_key_id: "{{ r_access_key.access_key_id }}"
      student_aws_access_secret_access_key: "{{ r_access_key.secret_access_key }}"

  - name: Apply policy files
    amazon.aws.iam_policy:
      iam_type: user
      iam_name: "{{ ocp4_workload_rosa_policies_aws_user_name }}"
      policy_name: "{{ ocp4_workload_rosa_policies_aws_user_name }}-{{ item }}"
      state: present
      policy_json: "{{ lookup('file', item + '.json') }}"
    loop:
    - policy-cloudwatch
    - policy-iam

  - name: Get Authentication Object
    kubernetes.core.k8s_info:
      api_version: config.openshift.io/v1
      kind: Authentication
      name: cluster
    register: r_authentication

  - name: Set OIDC endpoint
    ansible.builtin.set_fact:
      oidc_endpoint: "{{ r_authentication.resources[0].spec.serviceAccountIssuer | replace('https://', '') }}"

  - name: Debug OIDC endpoint
    ansible.builtin.debug:
      msg: "OIDC Endpoint: {{ oidc_endpoint }}"

  - name: Apply ROSA student policy templates
    amazon.aws.iam_policy:
      iam_type: user
      iam_name: "{{ ocp4_workload_rosa_policies_aws_user_name }}"
      policy_name: "{{ ocp4_workload_rosa_policies_aws_user_name }}-{{ item }}"
      state: present
      policy_json: "{{ lookup('template', item + '.json.j2') }}"
    loop:
    - policy-dynamodb

  - name: Create AWS Roles
    community.aws.iam_role:
      name: "{{ item.name }}"
      assume_role_policy_document: "{{ lookup('template', item.policy_file) }}"
    loop:
    - name: "RosaCloudWatch-{{ guid }}"
      policy_file: trust-policy-cloudwatch.json.j2
    - name: "irsa-{{ guid }}"
      policy_file: trust-policy-microsweeper.json.j2

- name: Remove full AWS credentials
  become: true
  ansible.builtin.file:
    state: absent
    path: "/home/{{ ocp4_workload_rosa_policies_rhel_user_name }}/.aws/credentials"

- name: Setup restricted AWS credentials
  become: true
  ansible.builtin.blockinfile:
    path: "/home/{{ ocp4_workload_rosa_policies_rhel_user_name }}/.aws/credentials"
    create: true
    owner: "{{ ocp4_workload_rosa_policies_rhel_user_name }}"
    mode: "0600"
    block: |-
      [default]
      aws_access_key_id={{ student_aws_access_key_id }}
      aws_secret_access_key={{ student_aws_access_secret_access_key }}
      region={{ aws_region }}

- name: Save user data for student user
  agnosticd_user_info:
    data:
      rosa_aws_student_user: "{{ ocp4_workload_rosa_policies_aws_user_name }}"
      rosa_aws_student_user_account_id: "{{ student_aws_account_id }}"
      rosa_aws_student_user_access_key_id: "{{ student_aws_access_key_id }}"
      rosa_aws_student_user_secret_access_key: "{{ student_aws_access_secret_access_key }}"

- name: Print ROSA user data for student user
  when: print_agnosticd_user_info | default(true) | bool
  agnosticd_user_info:
    msg: |

      == AWS Student User (pre-configured for lab instructions):
      * AWS Username: {{ ocp4_workload_rosa_policies_aws_user_name }}
      * AWS Account ID: {{ student_aws_account_id }}
      * AWS Access Key ID: {{ student_aws_access_key_id }}
      * AWS Secret Access Key: {{ student_aws_access_secret_access_key }}
