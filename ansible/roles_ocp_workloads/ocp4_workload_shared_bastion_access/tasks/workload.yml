---
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

# Implement your workload deployment tasks here
# -------------------------------------------------------------------------

- name: Add user {{ ocp_username }} to groups {{ ocp4_workload_shared_bastion_access_user_groups }}
  when: ocp4_workload_shared_bastion_access_user_groups | default([]) | length > 0
  become: yes
  command: "oc adm groups add-users {{ item }} {{ ocp_username }}"
  loop: "{{ ocp4_workload_shared_bastion_access_user_groups }}"

- name: Add user {{ ocp_username }} to cluster roles {{ ocp4_workload_shared_bastion_access_user_cluster_roles }}
  when: ocp4_workload_shared_bastion_access_user_cluster_roles | default([]) | length > 0
  become: yes
  command: "oc adm policy add-cluster-role-to-user {{ item }} {{ ocp_username }}"
  loop: "{{ ocp4_workload_shared_bastion_access_user_cluster_roles }}"

- name: Create ClusterResourceQuota
  when: ocp4_workload_shared_bastion_access_create_quota | bool
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/cluster_resource_quota.j2' ) | from_yaml }}"

- name: Generate user password if not defined
  when:
  - ocp4_workload_shared_bastion_access_password | default("") | length == 0
  set_fact:
    ocp4_workload_shared_bastion_access_password_effective: "{{ lookup('password', '/dev/null length={{ ocp4_workload_shared_bastion_access_password_length }} chars=ascii_letters,digits') }}"

- name: Set user password if defined
  when:
  - ocp4_workload_shared_bastion_access_password | default("") | length > 0
  set_fact:
    ocp4_workload_shared_bastion_access_password_effective: "{{ ocp4_workload_shared_bastion_access_password }}"

# If we don't delete the user the next task fails if the user already exists
- name: Ensure user does not already exist
  become: true
  user:
    state: absent
    name: "{{ ocp_username }}"

- name: Remove user home directory if it exists
  become: true
  file:
    state: absent
    path: "/home/{{ ocp_username }}"

- name: Create user
  become: true
  user:
    state: present
    name: "{{ ocp_username }}"
    password: "{{ ocp4_workload_shared_bastion_access_password_effective | password_hash( 'sha512' ) }}"
    password_lock: yes
    group: users
    groups: "{{ 'wheel' if ocp4_workload_shared_bastion_access_allow_sudo | bool else '' }}"
    shell: /bin/bash

- name: Enable password authentication
  become: true
  lineinfile:
    line: PasswordAuthentication yes
    regexp: '^ *PasswordAuthentication'
    path: /etc/ssh/sshd_config

- name: Allow sudo for user
  when: ocp4_workload_shared_bastion_access_allow_sudo | bool
  become: true
  block:
  - name: Disable root password authentication
    lineinfile:
      line: PermitRootLogin without-password
      regexp: '^ *PermitRootLogin'
      path: /etc/ssh/sshd_config

  - name: Allow passwordless sudo
    become: true
    lineinfile:
      path: '/etc/sudoers'
      state: present
      line: "{{ ocp_username }}         ALL=(ALL)       NOPASSWD: ALL"
      insertafter: "'^{{ ansible_user }}"

- name: Restart sshd
  become: true
  service:
    name: sshd
    state: restarted

# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
