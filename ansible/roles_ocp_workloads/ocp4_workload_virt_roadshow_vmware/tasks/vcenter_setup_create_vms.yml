# vim: set ft=yaml.ansible
---

- name: Set connection info
  ansible.builtin.set_fact:
    connection_args:
      vcenter_hostname: "{{ vcenter_hostname }}"
      vcenter_username: "{{ vcenter_username }}"
      vcenter_password: "{{ vcenter_password }}"
      vcenter_validate_certs: "false"

- name: Get Cluster and Datastore IDs
  ansible.builtin.set_fact:
    cluster_id: "{{ lookup('vmware.vmware_rest.cluster_moid', '/' + vcenter_datacenter + '/host/' + vcenter_cluster, **connection_args) }}"
    datastore_id: >-
      {{ lookup('vmware.vmware_rest.datastore_moid',
      '/' + vcenter_datacenter + '/datastore/' + _ocp4_workload_virt_roadshow_vmware_datastore,
      **connection_args) }}

- name: Dump IDs
  ansible.builtin.debug:
    msg:
      - "Cluster ID: {{ cluster_id }}"
      - "Datastore ID: {{ datastore_id }}"

- name: Get Folder ID
  ansible.builtin.set_fact:
    folder_id: >-
      {{ lookup('vmware.vmware_rest.folder_moid',
      '/' + vcenter_datacenter + '/vm/Workloads/' + _ocp4_workload_virt_roadshow_vmware_vcenter_folder,
      **connection_args) }}

- name: List all Local Content Libraries
  environment:
    VMWARE_HOST: "{{ vcenter_hostname }}"
    VMWARE_USER: "{{ vcenter_username }}"
    VMWARE_PASSWORD: "{{ vcenter_password }}"
    VMWARE_VALIDATE_CERTS: "false"
  vmware.vmware_rest.content_locallibrary_info:
  register: all_content_libraries

- name: Debug all content libraries
  ansible.builtin.debug:
    msg: "{{ all_content_libraries }}"

- name: Get content library item
  # Content Library named funny.  Not just RHEL templates, all the Roadshow templates
  ansible.builtin.set_fact:
    content_library_item: >-
      {{ all_content_libraries.value | selectattr('name', 'equalto', 'RHEL Templates') | first }}

- name: List all the items in the RHEL Template library
  environment:
    VMWARE_HOST: "{{ vcenter_hostname }}"
    VMWARE_USER: "{{ vcenter_username }}"
    VMWARE_PASSWORD: "{{ vcenter_password }}"
    VMWARE_VALIDATE_CERTS: "false"
  vmware.vmware_rest.content_library_item_info:
    library_id: "{{ content_library_item.id }}"
  register: library_items

# - name: Use the template name to identify the template item
#   ansible.builtin.set_fact:
#     rhel_template_item_id: >-
#       {{ (library_items.value | selectattr('name', 'equalto', 'rhel93-tpl-l') | first).id }}

- name: Deploy a new VM based on the template
  environment:
    VMWARE_HOST: "{{ vcenter_hostname }}"
    VMWARE_USER: "{{ vcenter_username }}"
    VMWARE_PASSWORD: "{{ vcenter_password }}"
    VMWARE_VALIDATE_CERTS: "false"
  vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
    name: "{{ vm.name }}"
    library: '{{ content_library_item.id }}'
    # template_library_item: '{{ rhel_template_item.id }}'
    template_library_item: "{{ (library_items.value | selectattr('name', 'equalto', vm.template + '-l') | first).id }}"
    placement:
      cluster: "{{ cluster_id }}"
      # datastore: "{{ datastore_id }}"
      folder: "{{ folder_id }}"
    state: deploy
    power_on: false
  loop: "{{ ocp4_workload_virt_roadshow_vmware_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"
  register: r_vmc_instance

- name: Debug r_vmc_instance
  ansible.builtin.debug:
    msg: "{{ r_vmc_instance }}"
