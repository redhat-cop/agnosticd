apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: "add-ee"
spec:   
  description: >-
    Add execution environment to automation controller
  workspaces:
    - name: source
  params:
    - description: execution environment image pull policy
      name: POLICY
      default: missing
      type: string
    - description: execution environment credentials
      name: CREDENTIAL
      default: "null"
      type: string
    - description: execution environment organization
      name: ORGANIZATION
      default: "null"
      type: string
    - description: description of execution environment
      name: DESCRIPTION
      default: ""
      type: string
    - description: automation controller api host url
      name: API_URL
      type: string
    - description: name of the execution environment
      name: NAME
      type: string
    - description: automation controller username
      name: USER
      type: string
    - description: automation controller password 
      name: PASSWORD
      type: string
    - description: execution environment image url with tag
      name: IMAGE
      type: string
  results:
    - name: data
      description: ID to be passed to next task
  steps:
    - name: add-ee
      image: quay.io/rshah/jq
      workingDir: $(workspaces.source.path)
      resources: {}
      script: |
        #!/usr/bin/env bash

        HOST=$(params.API_URL)

        USER=$(params.USER)

        PASSWORD=$(params.PASSWORD)

        CRED_NAME=$(params.CREDENTIAL)

        NAME=$(params.NAME)

        DESCRIPTION=$(params.DESCRIPTION)

        ORGANIZATION=$(params.ORGANIZATION)

        IMAGE=$(params.IMAGE)

        POLICY=$(params.POLICY)
      
        CRED_LIST=$(curl -s -w "%{http_code}" -X GET \
          https://${HOST}/api/v2/credentials/ \
          -H 'Content-Type: application/json' \
          -u "${USER}:${PASSWORD}")

        if [ "${CRED_LIST: -3}" -eq "200" ]; then

            FIND_REG_CRED=$(echo ${CRED_LIST:: -3} |jq  -r " .results[] | select( .name == \"${CRED_NAME}\" ) | .id")

            if [ ! -z "${FIND_REG_CRED}" ]; then

                REG_CRED_ID=${FIND_REG_CRED}

            else

                echo "Error: ${1} ${CRED_NAME} - credential not found in automation controller"
                
                exit 1
            fi

        else

            echo "Error: API is not accessible"

            echo "Return status code: ${CRED_LIST: -3}"

            exit 1

        fi
       
        CREATE_EE=$(curl -s -w "%{http_code}" -X POST \
          https://${HOST}/api/v2/execution_environments/ \
          -H 'Content-Type: application/json' \
          -u "${USER}:${PASSWORD}" \
          -d "{ \"name\": \"${NAME}\", 
                \"description\": \"${DESCRIPTION}\", 
                \"organization\": ${ORGANIZATION},
                \"image\": \"${IMAGE}\",
                \"credential\": ${REG_CRED_ID},
                \"pull\": \"${POLICY}\"
              }"
          )

        if [ "${CREATE_EE: -3}" -eq "201" ]; then

          echo "${CREATE_EE:: -3}" > ee_data.json

          echo "${NAME} - execution environment has been created"

        else

            echo "Error: ${CREATE_EE:: -3}\e[0m"

            echo "Return status code: ${CREATE_EE: -3}"

            exit 1

        fi