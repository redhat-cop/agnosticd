---
# additional_fips must be set up in the AgnosticV config like this:
# additional_fips:
#   ocp_api_fip:
#     description: "API {{ cluster_name }}.{{ ocp4_base_domain }}"
#     network: "{{ provider_network }}"
#   ocp_ingress_fip:
#     description: "Ingress {{ cluster_name }}.{{ ocp4_base_domain }}"
#     network: "{{ provider_network }}"
#   ocp_managed_api_fip:
#     description: "API {{ guid }}-m.{{ ocp4_workload_adv_day2_ops_ilt_aws_domain }}"
#     network: "{{ provider_network }}"
#   ocp_managed_ingress_fip:
#     description: "Ingress {{ guid }}-m.{{ ocp4_workload_adv_day2_ops_ilt_aws_domain }}"
#     network: "{{ provider_network }}"

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Check that AWS credentials are provided
  assert:
    that:
      ocp4_workload_adv_dey2_ops_ilt_aws_key | default('') | length > 0
      ocp4_workload_adv_dey2_ops_ilt_aws_secret_key | default('') | length > 0
    quiet: true
    fail_msg: "AWS Credentials need to be provided."

- name: Get Floating IP for Managed API
  openstack.cloud.floating_ip_info:
    description: "API {{ guid }}-m.{{ ocp4_workload_adv_day2_ops_ilt_aws_domain }}"
  register: r_fip_api

- name: Get Floating IP for managed Ingress
  openstack.cloud.floating_ip_info:
    description: "Ingress {{ guid }}-m.{{ ocp4_workload_adv_day2_ops_ilt_aws_domain }}"
  register: r_fip_ingress

- name: Print Managed FIPs
  debug:
    msg:
    - "API FIP for Managed Cluster: {{ r_fip_api.floating_ips[0].floating_ip_address }}"
    - "Ingress FIP for Managed Cluster: {{ r_fip_ingress.floating_ips[0].floating_ip_address }}"

- name: Set FIP variables
  set_fact:
    managed_ip_api: "{{ r_fip_api.floating_ips[0].floating_ip_address }}"
    managed_ip_ingress: "{{ r_fip_ingress.floating_ips[0].floating_ip_address }}"

- name: AWS Generate CloudFormation Template
  template:
    src: cloudformation.yaml.j2
    dest: "/tmp/cloudformation-{{ guid }}.yaml"

- name: Launch CloudFormation template to create Route53 entries
  cloudformation:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    stack_name: "{{ guid }}-m"
    state: "present"
    region: "{{ aws_region_loop | d(aws_region) | d(region) | d('us-east-1')}}"
    # rollback is unreliable, it can make this task hang forever.
    disable_rollback: true
#    tags: "{{ cloud_tags_final }}"
  args:
    cloudform_location: local
    cloudform_args:
      template: "{{ cloudformation_template }}"
  register: r_cloudformation_out
  until: >-
    r_cloudformation_out is succeeded
    and (
      'output' in r_cloudformation_out
      and r_cloudformation_out.output in ["Stack CREATE complete", "Stack is already up-to-date."]
    )
  retries: 1
  delay: 30
  ignore_errors: true

# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
