---
- name: Get cluster version
  k8s_info:
    api_version: config.openshift.io/v1
    kind: ClusterVersion
    name: version
  register: r_cluster_version

# ------------------------------------
# Install Elasticsearch Operator
# ------------------------------------

- name: Check if Elasticsearch Operator is already installed
  k8s_info:
    api_version: v1
    kind: Deployment
    namespace: "openshift-operators-redhat"
    name: "elasticsearch-operator"
  register: r_eo_deployment_exists

- name: Install Elasticsearch Operator if not installed
  when: r_eo_deployment_exists.resources | length | int == 0
  block:

  - name: Get current stable channel for Elasticsearch
    k8s_info:
      api_version: packages.operators.coreos.com/v1
      kind: PackageManifest
      name: elasticsearch-operator
      namespace: openshift-marketplace
    register: r_eo_channel

  # Set Elasticsearch channel to the one matching the deployed cluster version.
  # If no matching channel available set to defaultChannel from the subscription.
  - name: Set Elasticsearch channel
    set_fact:
      logging_elasticsearch_channel: >-
        {{ t_version_match_channel | default(r_eo_channel.resources[0].status.defaultChannel, true) }}
    vars:
      t_cluster_version: >-
        {{ r_cluster_version.resources[0].spec.channel | regex_replace('.*-(\d+\.\d+)', '\1') }}
      t_version_match_query: "[?name=='{{ t_cluster_version }}']|[0].name"
      t_version_match_channel: >-
        {{ r_eo_channel.resources[0].status.channels | json_query(t_version_match_query) }}

  - name: Print Elasticsearch channel to be installed
    debug:
      msg: "Elasticsearch channel to be installed: {{ logging_elasticsearch_channel }}"

  - name: Install Elasticsearch operator prerequisites
    k8s:
      state: present
      definition: "{{ lookup('file', item ) | from_yaml }}"
    loop:
    - ./files/eo_namespace.yaml
    - ./files/eo_operatorgroup.yaml
    - ./files/eo_role.yaml
    - ./files/eo_rolebinding.yaml

  - name: Create Elasticsearch Catalogsource for use with catalog snapshot
    when: ocp4_workload_logging_use_catalog_snapshot | bool
    k8s:
      state: present
      definition: "{{ lookup('template', './templates/eo_catalogsource.j2' ) | from_yaml }}"

  - name: Install Elasticsearch subscription
    k8s:
      state: present
      definition: "{{ lookup('template', './templates/eo_subscription.j2' ) | from_yaml }}"

  - name: Wait until InstallPlan is created
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      namespace: openshift-operators-redhat
    register: r_install_plans
    vars:
      _query: >-
        [?starts_with(spec.clusterServiceVersionNames[0], 'elasticsearch-operator')]
    retries: 30
    delay: 5
    until:
    - r_install_plans.resources | length > 0
    - r_install_plans.resources | to_json | from_json | json_query(_query)

  - name: Set InstallPlan name
    set_fact:
      ocp4_workload_logging_elasticsearch_install_plan_name: "{{ r_install_plans.resources | to_json | from_json | json_query(query) }}"
    vars:
      query: >-
        [?starts_with(spec.clusterServiceVersionNames[0], 'elasticsearch-operator')].metadata.name|[0]

  - name: Get InstallPlan
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      name: "{{ ocp4_workload_logging_elasticsearch_install_plan_name }}"
      namespace: openshift-operators-redhat
    register: r_install_plan
    
  - name: Approve InstallPlan if necessary
    when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
    k8s:
      state: present
      definition: "{{ lookup( 'template', './templates/eo_installplan.j2' ) }}"

  - name: Get Installed CSV
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: Subscription
      name: "elasticsearch-operator-{{ logging_elasticsearch_channel }}"
      namespace: openshift-operators-redhat
    register: r_subscription
    retries: 30
    delay: 5
    until:
    - r_subscription.resources[0].status.currentCSV is defined
    - r_subscription.resources[0].status.currentCSV | length > 0

  - name: Wait until CSV is installed
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{ r_subscription.resources[0].status.currentCSV }}"
      namespace: openshift-operators-redhat
    register: r_csv
    retries: 15
    delay: 5
    until:
    - r_csv.resources[0].status.phase is defined
    - r_csv.resources[0].status.phase | length > 0
    - r_csv.resources[0].status.phase == "Succeeded"

# ------------------------------------
# Install Cluster Logging Operator
# ------------------------------------

- name: Get current stable channel for Cluster Logging
  k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: cluster-logging
    namespace: openshift-marketplace
  register: r_logging_channel

# Set Cluster Logging channel to the one matching the deployed cluster version.
# If no matching channel available set to defaultChannel from the subscription.
- name: Set Cluster Logging channel
  set_fact:
    logging_channel: >-
      {{ t_version_match_channel | default(r_logging_channel.resources[0].status.defaultChannel, true) }}
  vars:
    t_cluster_version: >-
      {{ r_cluster_version.resources[0].spec.channel | regex_replace('.*-(\d+\.\d+)', '\1') }}
    t_version_match_query: "[?name=='{{ t_cluster_version }}']|[0].name"
    t_version_match_channel: >-
      {{ r_logging_channel.resources[0].status.channels | json_query(t_version_match_query) }}

- name: Print Cluster Logging channel to be installed
  debug:
    msg: "Cluster Logging channel to be installed: {{ logging_channel }}"

- name: Install OpenShift Logging operator prerequisites
  k8s:
    state: present
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/logging_namespace.yaml
  - ./files/logging_operatorgroup.yaml

- name: Install Logging Curator config map for OCP 4.4 and earlier
  when: logging_channel is version_compare('4.4', '<=')
  k8s:
    state: present
    definition: "{{ lookup('file', './files/logging_curator_configmap.yaml' ) | from_yaml }}"
  
- name: Create Catalogsource for use with catalog snapshot
  when: ocp4_workload_logging_use_catalog_snapshot | bool
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/catalogsource.j2' ) | from_yaml }}"

- name: Install OpenShift Logging subscription
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/logging_subscription.j2' ) | from_yaml }}"

- name: Wait until InstallPlan is created
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: openshift-logging
  register: r_install_plans
  vars:
    _query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'clusterlogging')]
  retries: 30
  delay: 5
  until:
  - r_install_plans.resources | length > 0
  - r_install_plans.resources | to_json | from_json | json_query(_query)

- name: Set InstallPlan name
  set_fact:
    ocp4_workload_logging_install_plan_name: "{{ r_install_plans.resources | to_json | from_json | json_query(query) }}"
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'clusterlogging')].metadata.name|[0]

- name: Get InstallPlan
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ ocp4_workload_logging_install_plan_name }}"
    namespace: openshift-logging
  register: r_install_plan
  
- name: Approve InstallPlan if necessary
  when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
  k8s:
    state: present
    definition: "{{ lookup( 'template', './templates/installplan.j2' ) }}"

- name: Get Installed CSV
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: cluster-logging
    namespace: openshift-logging
  register: r_subscription
  retries: 30
  delay: 5
  until:
  - r_subscription.resources[0].status.currentCSV is defined
  - r_subscription.resources[0].status.currentCSV | length > 0

- name: Wait until CSV is installed
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ r_subscription.resources[0].status.currentCSV }}"
    namespace: openshift-logging
  register: r_csv
  retries: 15
  delay: 5
  until:
  - r_csv.resources[0].status.phase is defined
  - r_csv.resources[0].status.phase | length > 0
  - r_csv.resources[0].status.phase == "Succeeded"

# ------------------------------------
# Install Cluster Logging
# ------------------------------------

- name: Create OpenShift ClusterLogging
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/cluster_logging.j2' ) | from_yaml }}"

- name: Wait until Elasticsearch cluster status is green
  k8s_info:
    api_version: logging.openshift.io/v1
    kind: ClusterLogging
    name: instance
    namespace: openshift-logging
  register: r_logging
  retries: 30
  delay: 10
  ignore_errors: yes
  until: 
  - r_logging.resources[0].status.logStore.elasticsearchStatus[0].cluster.status is defined
  - r_logging.resources[0].status.logStore.elasticsearchStatus[0].cluster.status == "green"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
