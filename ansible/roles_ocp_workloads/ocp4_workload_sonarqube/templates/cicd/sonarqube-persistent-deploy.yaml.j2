kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
apiVersion: v1
items:
- apiVersion: v1
  data:
    database-name: c29uYXI=
    database-password: UGhFS05HMFJlamJxSnQyOA==
    database-user: dXNlcmRseHd1ZDQ3
  kind: Secret
  metadata:
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonardb
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  type: Opaque
- apiVersion: v1
  data:
    password: ""
    username: Y249RGlyZWN0b3J5IE1hbmFnZXI=
  kind: Secret
  metadata:
    name: sonar-ldap-bind-dn
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  type: kubernetes.io/basic-auth
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: sonarqube-data
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    storageClassName: gp2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonardb
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: sonardb
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          name: sonardb
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: sonardb
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonardb
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: sonardb
          image: image-registry.openshift-image-registry.svc:5000/openshift/postgresql
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              memory: 1Gi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: sonardb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonardb-data
          persistentVolumeClaim:
            claimName: sonardb
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: sonarqube
        deploymentconfig: sonarqube
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          app: sonarqube
          deploymentconfig: sonarqube
      spec:
        containers:
        - env:
          - name: JDBC_URL
            value: jdbc:postgresql://sonardb:5432/sonar
          - name: JDBC_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: sonardb
          - name: JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonardb
          - name: FORCE_AUTHENTICATION
            value: "false"
          - name: PROXY_HOST
          - name: PROXY_PORT
          - name: PROXY_USER
          - name: PROXY_PASSWORD
          - name: LDAP_URL
            value: ldaps://idm.example.com:636
          - name: LDAP_REALM
          - name: LDAP_AUTHENTICATION
            value: simple
          - name: LDAP_USER_BASEDN
            value: cn=accounts,dc=example,dc=com
          - name: LDAP_USER_REAL_NAME_ATTR
            value: displayname
          - name: LDAP_USER_EMAIL_ATTR
            value: mail
          - name: LDAP_USER_REQUEST
            value: (&(objectClass=inetOrgPerson)(uid={login}))
          - name: LDAP_GROUP_BASEDN
            value: cn=groups,cn=accounts,dc=example,dc=com
          - name: LDAP_GROUP_REQUEST
            value: (&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))
          - name: LDAP_GROUP_ID_ATTR
            value: cn
          - name: LDAP_CONTEXTFACTORY
            value: com.sun.jndi.ldap.LdapCtxFactory
          - name: SONAR_AUTOCREATE_USERS
            value: "true"
          - name: LDAP_BINDDN
            valueFrom:
              secretKeyRef:
                key: username
                name: sonar-ldap-bind-dn
          - name: LDAP_BINDPASSWD
            valueFrom:
              secretKeyRef:
                key: password
                name: sonar-ldap-bind-dn
          image: docker.io/kenmoini/openshift-sonarqube
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: sonarqube
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 200m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: sonar-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonar-data
          persistentVolumeClaim:
            claimName: sonarqube-data
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  spec:
    port:
      targetPort: 9000-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: sonarqube
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonardb
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  spec:
    ports:
    - name: postgresql
      port: 5432
    selector:
      name: sonardb
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
    selector:
      deploymentconfig: sonarqube
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: sonarqube
      template: postgresql-persistent-template
    name: sonardb
    namespace: {{ ocp4_workload_sonarqube_namespace }}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    storageClassName: gp2
