---
# use helm to deploy a showroom
# Implement your Pre Workload deployment tasks here

- name: Check for required variables
  assert:
    that:
    - guid is defined
    - guid != ''
    - showroom_git_repo is defined
    - showroom_git_repo != ''
    fail_msg: Required variables not defined

- name: Set the _deployer_domain for helm from OpenShift
  when: showroom_openshift_api_url is not defined
  block:

    - name: Retrieve Ingress config
      kubernetes.core.k8s_info:
        kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
        api_version: 'config.openshift.io/v1'
        kind: Ingress
        name: cluster
      register: r_ingress_config

    - name: Get OpenShift Apps Domain
      ansible.builtin.set_fact:
        _deployer_domain: r_ingress_config.resources[0].spec.domain

- name: Set the _deployer_domain for helm as given in showroom_openshift_api_url
  when: showroom_openshift_api_url is defined
  block:

    - name: Set _deployer_domain from showroom_openshift_api_url
      ansible.builtin.set_fact:
        _api_domain: "{{ showroom_openshift_api_url | urlsplit('hostname') | split('.', 1) }}"
        _deployer_domain: "apps.{{ _api_domain[1] }}"

- name: Debug the r_user_data
  ansible.builtin.set_fact:
    _user_data: "{{ r_user_data.content | b64decode | from_yaml }}"

- name: Debug the user_data
  ansible.builtin.debug:
    var: _user_data

# chart_ref is complex, so _chart_ref defined in vars
- name: Deploy helm chart with values
  kubernetes.core.helm_template:
    chart_ref: "{{ _chart_ref }}"
    # chart_ref: "/Users/jmaltin/ansible/showroom-deployer"
    # chart_ref: "{{ hostvars.localhost.output_dir ~ './showroom-deployer' }}"
    set_values:
    - value: "namespace={{ showroom_namespace }}"
      value_type: "string"
    - value: "general.guid={{ guid }}"
      value_type: "string"
    - value: "deployer.domain={{ _deployer_domain }}"
      value_type: "string"
    - value: 'content.user_data={"this":"json"}'
      value_type: "json"
    - value: "content.repoUrl={{ showroom_git_repo }}"
      value_type: "string"
  register: r_helm_templates
  vars:
    _chart_ref_a: "https://github.com/rhpds/showroom-deployer/releases/download/"
    _chart_ref_b: "showroom-{{ showroom_deployer_helm_version }}/"
    _chart_ref: "{{ _chart_ref_a }}{{ _chart_ref_b }}showroom-{{ showroom_deployer_helm_version}}.tgz"

      #- value: "content.user_data={{ _user_data | to_json }}"
      #value_type: "json"
        #- value: "content.user_data={{ hostvars.localhost.output_dir ~ '/user-data.yaml' }}"
        #value_type: "file"

- name: Render unto kuberntes the helm manifests
  kubernetes.core.k8s:
    kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
    definition: "{{ r_helm_templates.stdout | from_yaml_all }}"

- name: Get showroom route
  kubernetes.core.k8s_info:
    kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
    api_version: route.openshift.io/v1
    kind: Route
    name: showroom-proxy
    namespace: "{{ showroom_namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 60
  register: r_showroom_proxy_route

- name: Set agnosticd_user_info for showroom
  agnosticd_user_info:
    user: "{{ _showroom_user | default(omit) }}"
    msg: "Lab instructions: {{ _showroom_url }}"
    data:
      showroom_url: "{{ _showroom_url }}"
  vars:
    _route: "{{ r_showroom_proxy_route.resources[0] }}"
    _showroom_url: >-
      {{ 'https' if 'tls' in _route.spec else 'http' }}://{{ _route.spec.host }}/
