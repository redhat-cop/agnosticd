---
# use helm to deploy a showroom
# Implement your Pre Workload deployment tasks here
- name: Check for required variables
  assert:
    that:
    - guid is defined
    - guid != ''
    - showroom_git_repo is defined
    - showroom_git_repo != ''
    fail_msg: Required variables not defined

      #  - name: Helm template processing
      #    kuberenetes.core.helm_template:
      #      chart_ref: https://github.com/newgoliath/showroom/archive/refs/tags/v0.0.3.tar.gz
      #    register: _manifests
      #
      #  - name: Create resources
      #    kubernetes.core.k8s:
      #      definition: "{{ _manifests }}"

      #   new stuff

      #  - name: Retrieve OpenShift Ingress
      #    ansible.builtin.command: oc get ingresses.config.openshift.io cluster -o jsonpath='{.spec.domain}'
      #    register: r_ingress_url
      #
      #  - name: Set user data for OpenShift access
      #    ansible.builtin.debug:
      #      var: r_ingress_url

      #  - name: Clone git repo
      #    ansible.builtin.git:
      #      # repo: https://github.com/rhpds/showroom-deployer.git
      #      repo: "{{ showroom_git_repo }}"
      #      dest: "{{ hostvars.localhost.output_dir ~ './showroom-deployer' }}"

- name: Deploy helm chart with values
  kubernetes.core.helm_template:
    chart_ref: "{{ _chart_ref }}"
    # chart_ref: "/Users/jmaltin/ansible/showroom-deployer"
    # chart_ref: "{{ hostvars.localhost.output_dir ~ './showroom-deployer' }}"
    set_values:
      - value: "namespace={{ showroom_namespace }}"
        value_type: "string"
      - value: "general.guid={{ guid }}"
        value_type: "string"
      - value: "deployer.domain={{ _deployer_domain }}"
        value_type: "string"
      - value: "content.user_data={{ hostvars.localhost.output_dir ~ '/user-data.yaml.sample' }}"
        value_type: "file"
      - value: "content.repoUrl={{ showroom_git_repo }}"
        value_type: "string"
  register: r_helm_templates
  vars:
    _api_domain: "{{ showroom_openshift_api_url | urlsplit('hostname') | split('.', 1) }}"
    _deployer_domain: "apps.{{ _api_domain[1] }}"
    _chart_ref_a: "https://github.com/rhpds/showroom-deployer/releases/download/"
    _chart_ref_b: "showroom-{{ showroom_deployer_helm_version }}/"
    _chart_ref: "{{ _chart_ref_a }}{{ _chart_ref_b }}showroom-{{ showroom_deployer_helm_version}}.tgz"

- name: Render unto kuberntes the helm manifests
  kubernetes.core.k8s:
    kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
    definition: "{{ r_helm_templates.stdout | from_yaml_all }}"
    # definition: "{{ lookup('file', '/Users/jmaltin/ansible/manifests.yaml') | from_yaml_all }}"

- name: Get showroom route
  kubernetes.core.k8s_info:
    kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
    api_version: route.openshift.io/v1
    kind: Route
    name: showroom-proxy
    namespace: "{{ showroom_namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 60
  register: r_showroom_proxy_route

- name: Set agnosticd_user_info for showroom
  agnosticd_user_info:
    user: "{{ _showroom_user | default(omit) }}"
    msg: "Lab instructions: {{ _showroom_url }}"
    data:
      showroom_url: "{{ _showroom_url }}"
  vars:
    _route: "{{ r_showroom_proxy_route.resources[0] }}"
    _showroom_url: >-
      {{ 'https' if 'tls' in _route.spec else 'http' }}://{{ _route.spec.host }}/
