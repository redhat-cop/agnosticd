---

# First target is OCP with bastion
#
# if we're using the shared cluster
# .. create a kubeconfig file
# .. get the user-data.yaml
# .. create the namespace
# .. run the helm chart
#
# for a shared cluster with a serviceaccount user
# must create namespace here because
# helm chart cannot create the namespace
# because it doesn't respect ProjectRequest
#
# use _showroom_kubeconfig if showroom user was setup
# otherwise use default

# setup namespaces

- name: Prepare Generic Variables
  ansible.builtin.include_tasks: prepare-variables.yaml

    #- name: Detect presence of Argo
    #  kubernetes.core.k8s_info:
    #    api_version: argoproj.io/v1alpha1
    #    kind: ArgoCD
    #    name: openshfit-gitops
    #  register: r_argo_present

- name: Detect openshift-gitops namespace, assume it's running OK
  ansible.builtin.k8s_info:
    api_version: v1
    kind: Namespace
    name: openshift-gitops
  register: r_argo_present

- name: Deploy via Argo when present
  when: r_argo_present.resources | length > 0
  block:

    - name: Debug showroom_user data
      ansible.builtin.debug:
        var: _showroom_user_data

    - name: Install showroom Application (single user)
      when:
        - _showroom_user_data.users is undefined
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'application.yaml.j2') }}"

    - name: Set fact _user_count
      ansible.builtin.set_fact:
        _user_count: "{{ _showroom_user_data['users'] | length }}"

    - name: Install showroom ApplicationSet (multi user)
      when:
        - _showroom_user_data.users is defined
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'applicationset.yaml.j2') }}"

      # send it the number of users

- name: Argo NOT present, deploy via Helm
  when: r_argo_present.resources | length == 0
  block:

    - name: Deploy showroom via Helm for single user
      when:
        - _showroom_user_data.users is undefined
      ansible.builtin.include_tasks:
        file: deploy-showroom.yaml
      vars:
        _showroom_namespace: "{{ ocp4_workload_showroom_namespace }}"
        _showroom_user_info_messages: "{{ _showroom_user_info }}"
        _showroom_vars: "{{ _showroom_user_data | combine({'guid': guid}) }}"

    - name: Deploy showroom via Helm for users
      when:
        - _showroom_user_data.users is defined
      loop: >-
        {{ _showroom_user_data.users | dict2items }}
      loop_control:
        loop_var: _showroom_users_item
      ansible.builtin.include_tasks:
        file: deploy-showroom.yaml
      vars:
        _showroom_user: "{{ _showroom_users_item.key }}"
        _showroom_namespace: "{{ ocp4_workload_showroom_namespace }}-{{ _showroom_user }}"
        _showroom_user_info_messages: "{{ _showroom_vars.msg | default('') }}"
        _showroom_vars: "{{ _showroom_users_item.value | combine({'guid': guid, 'user': _showroom_user}) }}"

- name: Report Single User Variables to user_data
  ansible.builtin.include_tasks: report-variables.yaml
    # call with no loop, _showroom_namespace is ocp4_workload_showroom_namespace

- name: Report Multi User Variables to user_data
  ansible.builtin.include_tasks: report-variables.yaml
    # call no loop, _showroom_namespace is ocp4_workload_showroom_namespace + yser#

- name: Save code server information for each user
  agnosticd_user_info:
    user: "{{ ocp4_workload_codeserver_multi_user_username_base }}{{ n }}"
    data:
      codeserver_url: >-
        https://{{ ocp4_workload_codeserver_name }}-{{ ocp4_workload_codeserver_multi_user_namespace_base }}-{{
        ocp4_workload_codeserver_multi_user_username_base }}{{ n }}.{{ _ocp4_workload_codeserver_wildcard_domain }}
      codeserver_password: "{{ ocp4_workload_codeserver_password }}"
  loop: "{{ range(1, 1 + ocp4_workload_codeserver_multi_user_num_users | int) | list }}"
  loop_control:
    loop_var: n
    label: "{{ ocp4_workload_codeserver_multi_user_username_base }}{{ n }}"
