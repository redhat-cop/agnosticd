---
- name: Setting up workload for user
  ansible.builtin.debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

# To Do: Implement your workload deployment tasks here
# -------------------------------------------------------------------------

- name: Get showroom namespace
  kubernetes.core.k8s_info:
    kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
    api_version: project.openshift.io/v1
    kind: Project
    name: "{{ showroom_namespace }}"
  register: r_get_showroom_namespace
  failed_when: false

# Takes advantage of self-provisioner, if present
- name: Create showroom namespace
  when: r_get_showroom_namespace.resources | default([]) | length == 0
  kubernetes.core.k8s:
    kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
    definition:
      apiVersion: project.openshift.io/v1
      kind: ProjectRequest
      metadata:
        name: "{{ showroom_namespace }}"
  register: r_create_showroom_namespace
  # Work around https://github.com/ansible-collections/kubernetes.core/issues/623
  failed_when: >-
    r_create_showroom_namespace is failed and
    'AlreadyExists' not in r_create_showroom_namespace.msg | default('')
  until: r_create_showroom_namespace is successful
  retries: 10
  delay: 5
  ignore_errors: true

- name: Read user-data.yaml
  ansible.builtin.slurp:
    src: "{{ hostvars.localhost.output_dir ~ '/user-data.yaml' }}"
  delegate_to: localhost
  register: r_user_data

- name: Read user-info.yaml
  ansible.builtin.slurp:
    src: "{{ hostvars.localhost.output_dir ~ '/user-info.yaml' }}"
  delegate_to: localhost
  register: r_user_info

- name: Set fact for user data and info
  ansible.builtin.set_fact:
    _showroom_user_data: "{{ r_user_data.content | b64decode | from_yaml | default({}, true) }}"
    _showroom_user_info: '{{ r_user_info.content | b64decode | from_yaml | default([], true) | join("\n") }}'

- name: Deploy showroom for single user
  when:
  - _showroom_user_data.users is undefined
  ansible.builtin.include_tasks:
    file: deploy-showroom.yaml
  vars:
    _showroom_user_info_messages: "{{ _showroom_user_info }}"
    _showroom_vars: >-
      {{ _showroom_user_data | combine({'guid': guid}) }}

- name: Deploy showroom for users
  when:
  - _showroom_user_data.users is defined
  loop: >-
    {{ _showroom_user_data.users | dict2items }}
  loop_control:
    loop_var: _showroom_users_item
  ansible.builtin.include_tasks:
    file: deploy-showroom.yaml
  vars:
    _showroom_instance_name: "{{ showroom_name }}-{{ _showroom_user }}"
    _showroom_user: "{{ _showroom_users_item.key }}"
    _showroom_user_info_messages: "{{ _showroom_vars.msg | default('') }}"
    _showroom_vars: >-
      {{ _showroom_users_item.value | combine({'guid': guid, 'user': _showroom_user}) }}

# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  ansible.builtin.debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
