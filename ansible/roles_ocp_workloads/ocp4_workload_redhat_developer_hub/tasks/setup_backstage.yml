---
- name: Retrieve ArgoCD credentials
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: argocd-cluster
    namespace: janus-argocd
  register: r_argo_creds
  until:
  - r_argo_creds is defined
  - r_argo_creds.resources is defined
  - r_argo_creds.resources | length > 0

- name: Decode argo credentials
  ansible.builtin.set_fact:
    ocp4_workload_redhat_developer_hub_argocd_password: "{{ r_argo_creds.resources[0].data['admin.password'] | b64decode }}"

- name: Retrieve openshift gitops route
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: argocd-server
    namespace: janus-argocd
  register: r_argocd_route
  until:
  - r_argocd_route is defined
  - r_argocd_route.resources is defined
  - r_argocd_route.resources | length > 0

- name: Retrieve openshift gitops hostname
  ansible.builtin.set_fact:
    ocp4_workload_redhat_developer_hub_argocd_host: "{{ r_argocd_route.resources[0].spec.host }}"

- name: Create backstage pre-requisite resources
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - namespace-backstage.yml.j2
  - cluster-role-binding-default-sa-admin.yml.j2
  - cronjob-vault-es-fix.yml.j2
  - deployment-post-startup-fixes.yml.j2

- name: Get default token
  ansible.builtin.shell: >-
    set -o pipefail && oc get secret -n default | grep default-token | awk '{print $1}'
  register: r_default_token
  ignore_errors: true

# Change added for OCP 4.16 compatibility
- name: Check default token
  when: r_default_token is failed
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'secret-default-sa-token.yml') | from_yaml }}"

- name: Get default token
  ansible.builtin.shell: >-
    set -o pipefail && oc get secret $(oc get secret -n default | grep default-token | awk '{print $1}') -n default -o json | jq -r '.data.token'
  register: r_default_token

- name: Get Openshift REST API
  ansible.builtin.shell: oc config view -o jsonpath='{.clusters[0].cluster.server}'
  register: r_ocp_api

- name: Decode default token
  ansible.builtin.set_fact:
    ocp4_workload_redhat_developer_hub_ocp_default_sa_token: "{{ r_default_token.stdout | b64decode }}"
    ocp4_workload_redhat_developer_hub_ocp_api: "{{ r_ocp_api.stdout }}"

- name: Retrieve quay admin token
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: quay-admin-token
    namespace: quay-enterprise
  register: r_quay_token
  retries: 120
  delay: 10
  until:
  - r_quay_token is defined
  - r_quay_token.resources is defined
  - r_quay_token.resources | length > 0
  - r_quay_token.resources[0] is defined

- name: Decode quay admin token
  ansible.builtin.set_fact:
    ocp4_workload_redhat_developer_hub_quay_admin_token: "{{ r_quay_token.resources[0].data.token | b64decode }}"

- name: Extract S3 Details
  ansible.builtin.set_fact:
    ocp4_workload_redhat_developer_hub_minio_endpoint: "https://minio-{{
      ocp4_workload_redhat_developer_hub_minio_namespace }}.{{
      ocp4_workload_redhat_developer_hub_apps_domain }}"

- name: Setup Backstage Repo
  ansible.builtin.include_tasks:
    file: ./setup_backstage_repo.yml

- name: Create Backstage Gitops application
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'application-backstage-gitops.yml.j2') | from_yaml }}"

- name: Copy keycloak backstage secret
  ansible.builtin.shell: |
    oc get secret keycloak-client-secret-backstage -n {{
    ocp4_workload_redhat_developer_hub_keycloak_namespace }} -o json | \
    jq 'del(.metadata["namespace","creationTimestamp","resourceVersion","selfLink","uid","ownerReferences"])' | \
    oc apply -n {{ ocp4_workload_redhat_developer_hub_backstage_namespace }} -f -

- name: Create vault secret for common password
  kubernetes.core.k8s_exec:
    namespace: "{{ ocp4_workload_redhat_developer_hub_vault_namespace }}"
    pod: vault-0
    command: "vault kv put kv/secrets/janusidp/common_password password={{
     ocp4_workload_redhat_developer_hub_common_password }}"

- name: Create console link
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: console.openshift.io/v1
      kind: ConsoleLink
      metadata:
        name: backstage
      spec:
        applicationMenu:
          imageURL: '{{ ocp4_workload_redhat_developer_hub_backstage_icon }}'
          section: Red Hat Applications
        href: 'https://{{ ocp4_workload_redhat_developer_hub_backstage_host }}'
        location: ApplicationMenu
        text: Red Hat Developer Hub
