---
# Implement your Workload deployment tasks here
- name: Setting up workload for user
  ansible.builtin.debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Install Migration Toolkit for Virtualization Operator
  ansible.builtin.include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: mtv-operator
    install_operator_namespace: openshift-mtv
    install_operator_manage_namespaces:
    - openshift-mtv
    install_operator_channel: "{{ ocp4_workload_mtv_channel }}"
    install_operator_catalog: redhat-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_mtv_automatic_install_plan_approval | default(true) }}"
    install_operator_starting_csv: "{{ ocp4_workload_mtv_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_mtv_use_catalog_snapshot | default(false) }}"
    install_operator_catalogsource_name: "{{ ocp4_workload_mtv_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: openshift-mtv
    install_operator_catalogsource_image: "{{ ocp4_workload_mtv_catalog_snapshot_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_mtv_catalog_snapshot_image_tag | default('') }}"

- name: Update the forklift-controller image if necessary (patch should land in mtv 2.6.6)
  when: ocp4_workload_mtv_use_patched_forkliftcontroller_image | bool
  block:

  - name: Find the mtv operator csv name
    kubernetes.core.k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      namespace: "openshift-mtv"
      label_selectors:
      - operators.coreos.com/mtv-operator.openshift-mtv=
    register: _mtv_csv

  - name: Update the ForkliftController image
    kubernetes.core.k8s_json_patch:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{ _mtv_csv.resources[0].metadata.name }}"
      namespace: "openshift-mtv"
      patch:
      - op: add
        path: /spec/install/spec/deployments/0/spec/template/spec/containers/0/env
        value: >-
          {{ _mtv_csv.resources[0].spec.install.spec.deployments[0].spec.template.spec.containers[0].env
             | json_query("[?name!='RELATED_IMAGE_CONTROLLER']")
             + [{"name": "RELATED_IMAGE_CONTROLLER", "value": ocp4_workload_mtv_forkliftcontroller_image_ref }]
          }}
      - op: add
        path: /spec/relatedImages
        value: >-
          {{ _mtv_csv.resources[0].spec.relatedImages
           | json_query("[?name!='controller']")
           + [{"name":  "controller", "image": ocp4_workload_mtv_forkliftcontroller_image_ref }]
          }}

- name: Create the ForkliftController instance
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'forkliftcontroller.yaml.j2') }}"

- name: Wait until ForkliftController is installed
  when: ocp4_workload_mtv_wait_for_forkliftcontroller | bool
  kubernetes.core.k8s_info:
    api_version: forklift.konveyor.io/v1beta1
    kind: ForkliftController
    name: forklift-controller
    namespace: openshift-mtv
    wait: true
    wait_condition:
      reason: Successful
      status: 'True'
      type: Successful
    wait_sleep: 10
    wait_timeout: 600

# Leave this as the last task in the playbook.
- name: Workload tasks complete
  when: not silent|bool
  ansible.builtin.debug:
    msg: "Workload Tasks completed successfully."
