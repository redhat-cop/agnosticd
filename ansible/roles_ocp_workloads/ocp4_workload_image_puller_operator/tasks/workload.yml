---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Create project for the Kubernates Image Puller operator
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/project.yaml.j2' ) | from_yaml }}"

- name: Create Catalogsource for use with catalog snapshot
  when: ocp4_workload_image_puller_operator_use_catalog_snapshot | bool
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/catalogsource.yaml.j2' ) | from_yaml }}"

- name: Create OpenShift Objects for the Kubernetes Image Puller operator
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/operatorgroup.yaml.j2
  - ./templates/subscription.yaml.j2

- name: Wait until InstallPlan is created
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ ocp4_workload_image_puller_operator_namespace }}"
  register: r_install_plans
  vars:
    _query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'kubernetes-imagepuller-operator')]
  retries: 30
  delay: 5
  until:
  - r_install_plans.resources | length > 0
  - r_install_plans.resources | to_json | from_json | json_query(_query)

- name: Set InstallPlan Name
  set_fact:
    ocp4_workload_image_puller_operator_install_plan_name: >-
      {{ r_install_plans.resources | to_json | from_json | json_query(query) }}
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'kubernetes-imagepuller-operator')].metadata.name|[0]

- name: Get InstallPlan
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ ocp4_workload_image_puller_operator_install_plan_name }}"
    namespace: "{{ ocp4_workload_image_puller_operator_namespace }}"
  register: r_install_plan

- name: Approve InstallPlan if necessary
  when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
  k8s:
    state: present
    definition: "{{ lookup( 'template', './templates/installplan.yaml.j2' ) }}"

- name: Get Installed CSV
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: kubernetes-imagepuller-operator
    namespace: "{{ ocp4_workload_image_puller_operator_namespace }}"
  register: r_subscription
  retries: 30
  delay: 5
  until:
  - r_subscription.resources[0].status.currentCSV is defined
  - r_subscription.resources[0].status.currentCSV | length > 0

- name: Wait until CSV is Installed
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ r_subscription.resources[0].status.currentCSV }}"
    namespace: "{{ ocp4_workload_image_puller_operator_namespace }}"
  register: r_csv
  retries: 15
  delay: 5
  until:
  - r_csv.resources[0].status.phase is defined
  - r_csv.resources[0].status.phase | length > 0
  - r_csv.resources[0].status.phase == "Succeeded"

- name: Deploy Kubernetes Image Puller instance
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/kubernetes_image_puller.yaml.j2' ) | from_yaml }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
