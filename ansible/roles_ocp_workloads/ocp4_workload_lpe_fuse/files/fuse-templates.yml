apiVersion: v1
kind: List
items:
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-eap-camel-amq
  metadata:
    annotations:
      description: Red Hat Fuse on EAP Camel A-MQ quickstart. This example demonstrates
        using the camel-activemq component to connect to A-MQ xPaaS message broker
        running in OpenShift. It is assumed that the broker is already deployed. More
        more information, refer to the documentation for the A-MQ xPaaS image related
        to the amq63-basic template.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel A-MQ with EAP
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,javaee,java,jboss-fuse,fis
      version: "1.10"
    name: s2i-fuse710-eap-camel-amq
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    id: ${APP_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APP_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-eap-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: eap
            deploymentConfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
          name: ${APP_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APP_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: MQ_SERVICE_PREFIX_MAPPING
              value: ${MQ_SERVICE_PREFIX}=MQ
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: MQ_USERNAME
              value: ${MQ_USERNAME}
            - name: MQ_PASSWORD
              value: ${MQ_PASSWORD}
            - name: MQ_JNDI
              value: ${MQ_JNDI}
            - name: MQ_PROTOCOL
              value: tcp
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            image: ${APP_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-eap-camel-amq
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    required: true
    value: 5.8.0.fuse-7_10_1-00007
  - description: 'Custom hostname for http service route.  Leave blank for default
      hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname.
    name: HOSTNAME_HTTP
  - description: Git source URI for application.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/wildfly-extras/wildfly-camel-examples.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: GIT_REF
    value: wildfly-camel-examples-5.8.0.fuse-7_10_1-00007
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The prefix of the TCP service for the A-MQ broker without the protocol
      part. E.g for broker-amq-tcp the prefix is broker-amq. You may need to create
      a broker first.
    displayName: A-MQ Service Prefix
    name: MQ_SERVICE_PREFIX
    required: true
    value: broker-amq
  - description: The username used to authenticate with the broker. Leave it empty
      if authentication is disabled.
    displayName: A-MQ Username
    name: MQ_USERNAME
  - description: The password used to authenticate with the broker. Leave it empty
      if authentication is disabled.
    displayName: A-MQ Password
    name: MQ_PASSWORD
  - description: JNDI name for connection factory used by applications to connect
      to the broker, e.g. java:/ActiveMQConnectionFactory
    displayName: JMS Connection Factory JNDI Name
    name: MQ_JNDI
    value: java:/ActiveMQConnectionFactory
  - description: Queue names.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names.
    displayName: Topics
    name: MQ_TOPICS
  - description: A-MQ cluster admin password.
    displayName: A-MQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: JGroups cluster password.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically
      deployed.
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Additional arguments passed to mvn, e.g. for multi-module builds.
    displayName: Maven Arguments To Append
    name: MAVEN_ARGS_APPEND
    value: -pl camel-activemq -am
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment
      folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
    value: camel-activemq/target
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 1Gi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-eap-camel-cdi
  metadata:
    annotations:
      description: Red Hat Fuse on EAP Camel CDI quickstart. This example demonstrates
        using the camel-cdi component to integrate CDI beans with Camel routes.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel CDI with EAP
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,javaee,java,jboss-fuse,fis
      version: "1.10"
    name: s2i-fuse710-eap-camel-cdi
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    id: ${APP_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APP_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-eap-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: eap
            deploymentConfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
          name: ${APP_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APP_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            image: ${APP_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-eap-camel-cdi
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    required: true
    value: 5.8.0.fuse-7_10_1-00007
  - description: 'Custom hostname for http service route.  Leave blank for default
      hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname.
    name: HOSTNAME_HTTP
  - description: Git source URI for application.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/wildfly-extras/wildfly-camel-examples.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: GIT_REF
    value: wildfly-camel-examples-5.8.0.fuse-7_10_1-00007
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: Queue names.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names.
    displayName: Topics
    name: MQ_TOPICS
  - description: A-MQ cluster admin password.
    displayName: A-MQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: JGroups cluster password.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically
      deployed.
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Additional arguments passed to mvn, e.g. for multi-module builds.
    displayName: Maven Arguments To Append
    name: MAVEN_ARGS_APPEND
    value: -pl camel-cdi -am
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment
      folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
    value: camel-cdi/target
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 1Gi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-eap-camel-cxf-jaxrs
  metadata:
    annotations:
      description: Red Hat Fuse on EAP Camel CXF JAX-RS quickstart. This example demonstrates
        using the camel-cxf component to produce and consume JAX-RS REST services.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel CXF JAX-RS with EAP
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,javaee,java,jboss-fuse,fis
      version: "1.10"
    name: s2i-fuse710-eap-camel-cxf-jaxrs
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    id: ${APP_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APP_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-eap-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: eap
            deploymentConfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
          name: ${APP_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APP_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            image: ${APP_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-eap-camel-cxf-jaxrs
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    required: true
    value: 5.8.0.fuse-7_10_1-00007
  - description: 'Custom hostname for http service route.  Leave blank for default
      hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname.
    name: HOSTNAME_HTTP
  - description: Git source URI for application.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/wildfly-extras/wildfly-camel-examples.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: GIT_REF
    value: wildfly-camel-examples-5.8.0.fuse-7_10_1-00007
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: Queue names.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names.
    displayName: Topics
    name: MQ_TOPICS
  - description: A-MQ cluster admin password.
    displayName: A-MQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: JGroups cluster password.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically
      deployed.
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Additional arguments passed to mvn, e.g. for multi-module builds.
    displayName: Maven Arguments To Append
    name: MAVEN_ARGS_APPEND
    value: -pl camel-cxf-jaxrs -am
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment
      folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
    value: camel-cxf-jaxrs/target
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 1Gi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-eap-camel-cxf-jaxws
  metadata:
    annotations:
      description: Red Hat Fuse on EAP Camel CXF JAX-WS quickstart. This example demonstrates
        using the camel-cxf component to produce and consume JAX-WS web services.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel CXF JAX-WS with EAP
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,javaee,java,jboss-fuse,fis
      version: "1.10"
    name: s2i-fuse710-eap-camel-cxf-jaxws
  objects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      ports:
      - port: 8080
        targetPort: 8080
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The JGroups ping port for clustering.
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}-ping
    spec:
      clusterIP: None
      ports:
      - name: ping
        port: 8888
      selector:
        deploymentConfig: ${APP_NAME}
  - apiVersion: v1
    id: ${APP_NAME}-http
    kind: Route
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      host: ${HOSTNAME_HTTP}
      to:
        name: ${APP_NAME}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        contextDir: ${CONTEXT_DIR}
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-eap-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${GITHUB_WEBHOOK_SECRET}
        type: GitHub
      - generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: eap
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: eap
            deploymentConfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
          name: ${APP_NAME}
        spec:
          containers:
          - env:
            - name: JGROUPS_PING_PROTOCOL
              value: openshift.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: ${APP_NAME}-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            - name: MQ_CLUSTER_PASSWORD
              value: ${MQ_CLUSTER_PASSWORD}
            - name: MQ_QUEUES
              value: ${MQ_QUEUES}
            - name: MQ_TOPICS
              value: ${MQ_TOPICS}
            - name: JGROUPS_CLUSTER_PASSWORD
              value: ${JGROUPS_CLUSTER_PASSWORD}
            - name: AUTO_DEPLOY_EXPLODED
              value: ${AUTO_DEPLOY_EXPLODED}
            image: ${APP_NAME}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/livenessProbe.sh
              initialDelaySeconds: 60
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
            readinessProbe:
              exec:
                command:
                - /bin/bash
                - -c
                - /opt/eap/bin/readinessProbe.sh
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
          terminationGracePeriodSeconds: 75
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
      - type: ConfigChange
  parameters:
  - description: The name for the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-eap-camel-cxf-jaxws
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    required: true
    value: 5.8.0.fuse-7_10_1-00007
  - description: 'Custom hostname for http service route.  Leave blank for default
      hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
    displayName: Custom http Route Hostname.
    name: HOSTNAME_HTTP
  - description: Git source URI for application.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/wildfly-extras/wildfly-camel-examples.git
  - description: Git branch/tag reference
    displayName: Git Reference
    name: GIT_REF
    value: wildfly-camel-examples-5.8.0.fuse-7_10_1-00007
  - description: Path within Git project to build; empty for root project directory.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: Queue names.
    displayName: Queues
    name: MQ_QUEUES
  - description: Topic names.
    displayName: Topics
    name: MQ_TOPICS
  - description: A-MQ cluster admin password.
    displayName: A-MQ cluster password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: MQ_CLUSTER_PASSWORD
    required: true
  - description: GitHub trigger secret.
    displayName: Github Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic build trigger secret.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: ImageStream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: JGroups cluster password.
    displayName: JGroups Cluster Password
    from: '[a-zA-Z0-9]{8}'
    generate: expression
    name: JGROUPS_CLUSTER_PASSWORD
    required: true
  - description: Controls whether exploded deployment content should be automatically
      deployed.
    displayName: Deploy Exploded Archives
    name: AUTO_DEPLOY_EXPLODED
    value: "false"
  - description: Additional arguments passed to mvn, e.g. for multi-module builds.
    displayName: Maven Arguments To Append
    name: MAVEN_ARGS_APPEND
    value: -pl camel-cxf-jaxws -am
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: List of directories from which archives will be copied into the deployment
      folder. If unspecified, all archives in /target will be copied.
    displayName: Artifact Directories
    name: ARTIFACT_DIR
    value: camel-cxf-jaxws/target
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 1Gi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-karaf-camel-amq
  metadata:
    annotations:
      description: Camel route using AMQ in Karaf container. This quickstart demonstrates
        how to use Camel in a Karaf Container using Blueprint to connect to EnMasse
        (MaaS) and use JMS messaging between two Camel routes. It requires EnMasse
        to have been deployed and running first.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel A-MQ with Karaf
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,karaf,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-karaf-camel-amq
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-karaf-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: karaf
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_CAMEL_PROTOCOL
              value: ${AMQP_SERVICE_PROTOCOL}
            - name: AMQ_CAMEL_SERVICE_NAME
              value: ${AMQP_SERVICE_NAME}
            - name: AMQ_CAMEL_SERVICE_PORT_AMQP
              value: ${AMQP_SERVICE_PORT}
            - name: AMQ_CAMEL_SERVICE_PORT_AMQPS
              value: ${AMQP_SERVICE_PORT_SSL}
            - name: AMQ_CAMEL_USERNAME
              value: ${AMQP_USERNAME}
            - name: AMQ_CAMEL_PASSWORD
              value: ${AMQP_PASSWORD}
            - name: AMQ_CAMEL_PARAMETERS
              value: ${AMQP_PARAMETERS}
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /health-check
                port: 8181
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8181
              name: http
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /readiness-check
                port: 8181
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-karaf-camel-amq
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/karaf-camel-amq.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: karaf-camel-amq-7.10.0.fuse-sb2-7_10_1-00007
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: install -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: Set this to the route host name attached to the TCP service of the
      external 'messaging' route exposed by EnMasse. E.g messaging-enmasse.192.168.64.1.nip.io.
    displayName: EnMasse Service
    name: AMQP_SERVICE_NAME
    required: true
  - description: AMQP service port
    displayName: EnMasse Service Port
    name: AMQP_SERVICE_PORT
    required: true
    value: "5672"
  - description: AMQPS service port
    displayName: EnMasse SSL Service Port
    name: AMQP_SERVICE_PORT_SSL
    required: true
    value: "5671"
  - description: AMQPS service protocol to use, amqp or amqps
    displayName: EnMasse Service Protocol
    name: AMQP_SERVICE_PROTOCOL
    required: true
    value: amqps
  - description: The username used to authenticate with EnMasse.
    displayName: EnMasse Username
    name: AMQP_USERNAME
  - description: The password used to authenticate with EnMasse.
    displayName: EnMasse Password
    name: AMQP_PASSWORD
  - description: The parameters passed to EnMasse.
    displayName: EnMasse Parameters
    name: AMQP_PARAMETERS
    value: transport.trustAll=true&transport.verifyHost=false&amqp.idleTimeout=120000&amqp.saslMechanisms=PLAIN
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 128Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-karaf-camel-log
  metadata:
    annotations:
      description: A simple Camel route in Karaf container. This quickstart shows
        a simple Apache Camel application that logs a message to the server log every
        5th second.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel log with Karaf
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,karaf,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-karaf-camel-log
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-karaf-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: karaf
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /health-check
                port: 8181
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8181
              name: http
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /readiness-check
                port: 8181
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-karaf-camel-log
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/karaf-camel-log.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: karaf-camel-log-7.10.0.fuse-sb2-7_10_1-00007
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: install -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 128Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-karaf-camel-rest-sql
  metadata:
    annotations:
      description: Camel example using Rest DSL with SQL Database in Karaf container.
        This example demonstrates how to use SQL via JDBC along with Camel's REST
        DSL to expose a RESTful API. The OpenShift MySQL container image should already
        be installed and running on your OpenShift installation, one simple way to
        run a MySQL service is following the documentation of the OpenShift MySQL
        container image related to the mysql-ephemeral template..
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel REST SQL with Karaf
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,karaf,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-karaf-camel-rest-sql
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9411
        protocol: TCP
        targetPort: 8181
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-karaf-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: karaf
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MYSQL_SERVICE_NAME
              value: ${MYSQL_SERVICE_NAME}
            - name: MYSQL_SERVICE_DATABASE
              value: ${MYSQL_SERVICE_DATABASE}
            - name: MYSQL_SERVICE_USERNAME
              value: ${MYSQL_SERVICE_USERNAME}
            - name: MYSQL_SERVICE_PASSWORD
              value: ${MYSQL_SERVICE_PASSWORD}
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /health-check
                port: 8181
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8181
              name: http
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /readiness-check
                port: 8181
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-karaf-camel-rest-sql
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/karaf-camel-rest-sql.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: karaf-camel-rest-sql-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed Service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: s2i-karaf-camel-rest
  - description: Set this to the name of the TCP service of the MySQL server. You
      may need to create a server first.
    displayName: MySQL Server Service
    name: MYSQL_SERVICE_NAME
    required: true
    value: mysql
  - description: The database hosted by the MySQL server to be used by the application.
    displayName: MySQL Server Database
    name: MYSQL_SERVICE_DATABASE
    required: true
    value: sampledb
  - description: The username used to authenticate with the MySQL server. Leave it
      empty if authentication is disabled.
    displayName: MySQL Server Username
    name: MYSQL_SERVICE_USERNAME
  - description: The password used to authenticate with the MySQL server. Leave it
      empty if authentication is disabled.
    displayName: MySQL Server Password
    name: MYSQL_SERVICE_PASSWORD
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: install -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 128Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-karaf-cxf-rest
  metadata:
    annotations:
      description: REST example using CXF in Karaf container. This quickstart demonstrates
        how to create a RESTful (JAX-RS) web service using CXF and expose it through
        the OSGi HTTP Service
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel CXF REST with Karaf
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,karaf,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-karaf-cxf-rest
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: java
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9412
        protocol: TCP
        targetPort: 8181
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: fuse7-karaf-openshift:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        container: karaf
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            container: karaf
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /health-check
                port: 8181
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8181
              name: http
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /readiness-check
                port: 8181
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-karaf-cxf-rest
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/karaf-cxf-rest.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: karaf-cxf-rest-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed Service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: s2i-fuse710-karaf-cxf-rest
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: install -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 128Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel
  metadata:
    annotations:
      description: Spring Boot 2 and Camel QuickStart. This example demonstrates how
        you can use Apache Camel with Spring Boot 2 on OpenShift. The quickstart uses
        Spring Boot to configure an application which includes a Camel route that
        triggers a message every 5th second, and routes the message to a log.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel with Spring Boot 2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-7.10.0.fuse-sb2-7_10_1-00007
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-amq
  metadata:
    annotations:
      description: Spring Boot 2, Camel and EnMasse (MaaS) QuickStart. This quickstart
        demonstrates how to connect a Spring Boot 2 application to a EnMasse (MaaS)
        and use JMS messaging between two Camel routes using OpenShift. It requires
        EnMasse to have been deployed and running first.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel AMQP with Spring Boot 2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-amq
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMQ_CAMEL_PROTOCOL
              value: ${AMQP_SERVICE_PROTOCOL}
            - name: AMQ_CAMEL_SERVICE_NAME
              value: ${AMQP_SERVICE_NAME}
            - name: AMQ_CAMEL_SERVICE_PORT_AMQP
              value: ${AMQP_SERVICE_PORT}
            - name: AMQ_CAMEL_SERVICE_PORT_AMQPS
              value: ${AMQP_SERVICE_PORT_SSL}
            - name: AMQ_CAMEL_USERNAME
              value: ${AMQP_USERNAME}
            - name: AMQ_CAMEL_PASSWORD
              value: ${AMQP_PASSWORD}
            - name: AMQ_CAMEL_PARAMETERS
              value: ${AMQP_PARAMETERS}
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel-amq
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-amq.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-amq-7.10.0.fuse-sb2-7_10_1-00007
  - description: Set this to the route host name attached to the TCP service of the
      external 'messaging' route exposed by EnMasse. E.g messaging-enmasse.192.168.64.1.nip.io.
    displayName: EnMasse Service
    name: AMQP_SERVICE_NAME
    required: true
  - description: AMQP service port
    displayName: EnMasse Service Port
    name: AMQP_SERVICE_PORT
    required: true
    value: "5672"
  - description: AMQPS service port
    displayName: EnMasse SSL Service Port
    name: AMQP_SERVICE_PORT_SSL
    required: true
    value: "5671"
  - description: AMQPS service protocol to use, amqp or amqps
    displayName: EnMasse Service Protocol
    name: AMQP_SERVICE_PROTOCOL
    required: true
    value: amqps
  - description: The username used to authenticate with EnMasse.
    displayName: EnMasse Username
    name: AMQP_USERNAME
  - description: The password used to authenticate with EnMasse.
    displayName: EnMasse Password
    name: AMQP_PASSWORD
  - description: The parameters passed to EnMasse.
    displayName: EnMasse Parameters
    name: AMQP_PARAMETERS
    value: transport.trustAll=true&transport.verifyHost=false&amqp.idleTimeout=120000&amqp.saslMechanisms=PLAIN
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-config
  metadata:
    annotations:
      description: 'Spring Boot 2 and Camel using ConfigMaps and Secrets. This quickstart
        demonstrates how to configure a Spring Boot 2 application using OpenShift
        ConfigMaps and Secrets. This example requires that a ConfigMap named camel-config
        and a Secret named camel-config are present in the namespace before the application
        is deployed, instruction about how to manually create them can be found here:
        https://github.com/fabric8-quickstarts/spring-boot-camel-config/blob/master/README.md '
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel + ConfigMap with Spring Boot
        2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-config
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: SPRING_CLOUD_KUBERNETES_SECRETS_NAME
              value: ${SECRET_NAME}
            - name: SPRING_CLOUD_KUBERNETES_CONFIG_NAME
              value: ${CONFIGMAP_NAME}
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
            volumeMounts:
            - mountPath: /etc/secrets/camel-config
              name: camel-config
              readOnly: true
          serviceAccountName: ${SERVICE_ACCOUNT_NAME}
          volumes:
          - name: camel-config
            secret:
              secretName: ${SECRET_NAME}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel-config
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-config.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-config-7.10.0.fuse-sb2-7_10_1-00007
  - description: The Service Account that will be used to run the container. It must
      be already present in OpenShift and have the view role.
    displayName: Service Account
    name: SERVICE_ACCOUNT_NAME
    required: true
    value: qs-camel-config
  - description: The name of the OpenShift Secret that will be used to configure the
      application. It must be already present in OpenShift.
    displayName: Secret Name
    name: SECRET_NAME
    required: true
    value: camel-config
  - description: The name of the OpenShift ConfigMap that will be used to configure
      the application. It must be already present in OpenShift.
    displayName: ConfigMap Name
    name: CONFIGMAP_NAME
    required: true
    value: camel-config
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-drools
  metadata:
    annotations:
      description: Spring Boot 2, Camel and JBoss BRMS QuickStart. This example demonstrates
        how you can use Apache Camel and JBoss BRMS with Spring Boot 2 on OpenShift.
        Camel routes, defined via Spring, are used to pass (insert) the Body of the
        message as a POJO to a Drools engine for execution. A Kie Server should be
        deployed and configured before running the application, more information about
        how to configure it can be found at https://github.com/fabric8-quickstarts/spring-boot-camel-drools/blob/master/README.md
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel + Drools with Spring Boot
        2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-drools
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KIESERVER_SERVICE
              value: ${KIESERVER_SERVICE}
            - name: KIESERVER_USERNAME
              value: ${KIESERVER_USERNAME}
            - name: KIESERVER_PASSWORD
              value: ${KIESERVER_PASSWORD}
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel-drools
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-drools.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-drools-7.10.0.fuse-sb2-7_10_1-00007
  - description: Set this to the name of the Decision Server. You may need to create
      an instance before.
    displayName: Decision Server Name
    name: KIESERVER_SERVICE
    required: true
    value: kie-app
  - description: The username used to authenticate with the Decision Server.
    displayName: Decision Server Username
    name: KIESERVER_USERNAME
    required: true
    value: kieserver
  - description: The password used to authenticate with the Decision Server.
    displayName: Decision Server Password
    name: KIESERVER_PASSWORD
    required: true
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-infinispan
  metadata:
    annotations:
      description: Spring Boot 2, Camel and JBoss Data Grid QuickStart. This quickstart
        demonstrates how to connect a Spring Boot 2 application to a JBoss Data Grid
        (or Infinispan) server using the Hot Rod protocol. It requires that the data
        grid server (or cluster) has been deployed first, one simple way to run a
        JDG service is following the documentation of the JDG xPaaS image for OpenShift
        related to the datagrid65-basic template.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel + JDG with Spring Boot 2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-infinispan
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: INFINISPAN_SERVICE
              value: ${INFINISPAN_SERVICE}
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel-infinispan
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-infinispan.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-infinispan-7.10.0.fuse-sb2-7_10_1-00007
  - description: Set this to the name of the Hot Rod service of the JBoss Data Grid.
      You may need to create the data grid first.
    displayName: JBoss Data Grid Service (Hot Rod)
    name: INFINISPAN_SERVICE
    required: true
    value: datagrid-app-hotrod
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-rest-3scale
  metadata:
    annotations:
      description: Spring Boot 2, Camel REST DSL and 3Scale QuickStart. This example
        demonstrates how to use Camel's REST DSL to expose a RESTful API and expose
        it to 3scale.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel REST DSL and 3Scale
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse,3scale
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-rest-3scale
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9411
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8080
              name: http
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel-rest-3scale
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-rest-3scale.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-rest-3scale-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: camel-rest-3scale
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-rest-sql
  metadata:
    annotations:
      description: Spring Boot 2, Camel REST DSL and MySQL QuickStart. This quickstart
        demonstrates how to connect a Spring Boot 2 application to a MySQL database
        and expose a REST API with Camel on OpenShift. In this example we will use
        two containers, one container to run as a MySQL server, and another as a client
        to the database, where the Camel routes are running. This quickstart requires
        the MySQL server to be deployed and started first, one simple way to run a
        MySQL service is following the documentation of the OpenShift MySQL container
        image related to the mysql-ephemeral template.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel REST SQL with Spring Boot
        2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-rest-sql
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9411
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MYSQL_SERVICE_NAME
              value: ${MYSQL_SERVICE_NAME}
            - name: MYSQL_SERVICE_DATABASE
              value: ${MYSQL_SERVICE_DATABASE}
            - name: MYSQL_SERVICE_USERNAME
              value: ${MYSQL_SERVICE_USERNAME}
            - name: MYSQL_SERVICE_PASSWORD
              value: ${MYSQL_SERVICE_PASSWORD}
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8080
              name: http
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel-rest-sql
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-rest-sql.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-rest-sql-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: camel-rest-sql
  - description: Set this to the name of the TCP service of the MySQL server. You
      may need to create a server first.
    displayName: MySQL Server Service
    name: MYSQL_SERVICE_NAME
    required: true
    value: mysql
  - description: The database hosted by the MySQL server to be used by the application.
    displayName: MySQL Server Database
    name: MYSQL_SERVICE_DATABASE
    value: sampledb
  - description: The username used to authenticate with the MySQL server. Leave it
      empty if authentication is disabled.
    displayName: MySQL Server Username
    name: MYSQL_SERVICE_USERNAME
  - description: The password used to authenticate with the MySQL server. Leave it
      empty if authentication is disabled.
    displayName: MySQL Server Password
    name: MYSQL_SERVICE_PASSWORD
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-xa
  metadata:
    annotations:
      description: 'Spring Boot 2, Camel and XA Transactions. This example demonstrates
        how to run a Camel Service on Spring-Boot 2 that supports XA transactions
        on two external transactional resources: a JMS resource (A-MQ) and a database
        (PostgreSQL). This quickstart requires the PostgreSQL database and the A-MQ
        broker have been deployed and running first, one simple way to run them is
        to use the templates provided in the Openshift service catalog'
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel on Spring Boot 2 with XA
        Transactions
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-xa
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      lookupPolicy:
        local: true
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      annotations:
        # yamllint disable-line rule:line-length
        image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"${APP_NAME}:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${APP_NAME}\")].image"}]'
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      podManagementPolicy: Parallel
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}
          group: quickstarts
          provider: s2i
      serviceName: ${APP_NAME}-headless
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: CLUSTER_RECOVERY_ENABLED
              value: "true"
            - name: CLUSTER_BASE_DIR
              value: /var/transaction/data
            - name: CLUSTER_NAME
              value: ${APP_NAME}
            - name: CLUSTER_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: BROKER_HOST
              value: ${BROKER_HOST}
            - name: BROKER_USERNAME
              value: ${BROKER_USERNAME}
            - name: BROKER_PASSWORD
              value: ${BROKER_PASSWORD}
            - name: DATABASE_HOST
              value: ${DATABASE_HOST}
            - name: DATABASE_USERNAME
              value: ${DATABASE_USERNAME}
            - name: DATABASE_PASSWORD
              value: ${DATABASE_PASSWORD}
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: ${APP_NAME}:latest
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: "1.0"
                memory: 256Mi
              requests:
                cpu: "0.2"
                memory: 256Mi
            securityContext:
              privileged: false
            volumeMounts:
            - mountPath: /var/transaction/data
              name: ${APP_NAME}-data
          serviceAccountName: ${APP_NAME}
          terminationGracePeriodSeconds: 180
          volumes:
          - name: ${APP_NAME}-data
            persistentVolumeClaim:
              claimName: ${APP_NAME}
      updateStrategy:
        type: RollingUpdate
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}-headless
    spec:
      clusterIP: None
      ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APP_NAME}
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    roleRef:
      name: edit
    subjects:
    - kind: ServiceAccount
      name: ${APP_NAME}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${VOLUME_SIZE}
  parameters:
  - description: The name assigned to the application (max 20 characters).
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-sb2-xa
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/jboss-fuse/spring-boot-camel-xa.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-xa-7.10.0.fuse-sb2-7_10_1-00007
  - description: Set this to the name of the TCP service of the A-MQ broker. You may
      need to create a broker first.
    displayName: A-MQ Broker Service
    name: BROKER_HOST
    required: true
    value: broker-amq-tcp
  - description: The username used to authenticate with the A-MQ broker.
    displayName: A-MQ Broker Username
    name: BROKER_USERNAME
    required: true
  - description: The password used to authenticate with the A-MQ broker.
    displayName: A-MQ Broker Password
    name: BROKER_PASSWORD
    required: true
  - description: Set this to the name of the PostgreSQL service. You may need to create
      the database first.
    displayName: PostgreSQL Service
    name: DATABASE_HOST
    required: true
    value: postgresql
  - description: The username used to authenticate with the PostgreSQL database.
    displayName: PostgreSQL Username
    name: DATABASE_USERNAME
    required: true
  - description: The password used to authenticate with the PostgreSQL database.
    displayName: PostgreSQL Password
    name: DATABASE_PASSWORD
    required: true
  - description: The size of the volume used to store the transaction log.
    displayName: Volume size for transaction log
    name: VOLUME_SIZE
    required: true
    value: 1Gi
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the Fuse S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-camel-xml
  metadata:
    annotations:
      description: Spring Boot 2 and Camel Xml QuickStart. This example demonstrates
        how you can use Apache Camel with Spring Boot 2 on OpenShift. The quickstart
        uses Spring Boot 2 to configure an application which includes a Camel route
        (in Spring xml) that triggers a message every 5th second, and routes the message
        to a log.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 Camel XML DSL with Spring Boot
        2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-camel-xml
  objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-camel-xml
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-camel-xml.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-camel-xml-7.10.0.fuse-sb2-7_10_1-00007
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-cxf-jaxrs
  metadata:
    annotations:
      description: Spring Boot 2 and CXF JAX-RS QuickStart. This example demonstrates
        how you can use Apache CXF JAX-RS with Spring Boot 2 on OpenShift. The quickstart
        uses Spring Boot 2 to configure a CXF application which includes a JAX-RS
        endpoint with Swagger enabled.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 CXF JAX-RS with Spring Boot 2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-cxf-jaxrs
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9413
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-cxf-jaxrs
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-cxf-jaxrs.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-cxf-jaxrs-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: cxf-jaxrs
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-cxf-jaxrs-xml
  metadata:
    annotations:
      description: Spring Boot 2 and CXF JAX-RS QuickStart. This example demonstrates
        how you can use Apache CXF JAX-RS with Spring Boot 2 on OpenShift. The quickstart
        uses Spring Boot 2 to launch a Spring configuration file based CXF application
        which includes a JAX-RS endpoint with Swagger enabled.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 CXF JAX-RS with Spring Boot 2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-cxf-jaxrs-xml
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9413
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-cxf-jaxrs-xml
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-cxf-jaxrs-xml.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-cxf-jaxrs-xml-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: cxf-jaxrs-xml
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-cxf-jaxws
  metadata:
    annotations:
      description: Spring Boot 2 and CXF JAX-WS QuickStart. This example demonstrates
        how you can use Apache CXF JAX-WS with Spring Boot 2 on OpenShift. The quickstart
        uses Spring Boot 2 to configure a CXF application which includes a JAX-WS
        endpoint.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 CXF JAX-WS with Spring Boot 2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-cxf-jaxws
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9414
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-cxf-jaxws
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-cxf-jaxws.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-cxf-jaxws-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: cxf-jaxws
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G
- apiVersion: template.openshift.io/v1
  kind: Template
  labels:
    template: s2i-fuse710-spring-boot-2-cxf-jaxws-xml
  metadata:
    annotations:
      description: Spring Boot 2 and CXF JAX-WS QuickStart. This example demonstrates
        how you can use Apache CXF JAX-WS with Spring Boot 2 on OpenShift. The quickstart
        uses Spring Boot 2 to launch a Spring configuration file based CXF application
        which includes a JAX-WS endpoint.
      iconClass: icon-rh-integration
      openshift.io/display-name: Red Hat Fuse 7.10 CXF JAX-WS XML with Spring Boot
        2
      openshift.io/provider-display-name: Red Hat, Inc.
      tags: quickstart,java,springboot,fis,jboss-fuse
      version: "1.10"
    name: s2i-fuse710-spring-boot-2-cxf-jaxws-xml
  objects:
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}-route
    spec:
      to:
        kind: Service
        name: ${SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: {}
      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${SERVICE_NAME}
    spec:
      clusterIP: None
      deprecatedPublicIPs: []
      ports:
      - port: 9414
        protocol: TCP
        targetPort: 8080
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
  - apiVersion: v1
    kind: ImageStream
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec: {}
    status:
      dockerImageRepository: ""
  - apiVersion: v1
    kind: BuildConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      resources:
        limits:
          memory: ${BUILD_MEMORY_LIMIT}
        requests:
          memory: ${BUILD_MEMORY_REQUEST}
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        sourceStrategy:
          env:
          - name: BUILD_LOGLEVEL
            value: "5"
          - name: ARTIFACT_DIR
            value: ${ARTIFACT_DIR}
          - name: MAVEN_ARGS
            value: ${MAVEN_ARGS}
          - name: MAVEN_ARGS_APPEND
            value: ${MAVEN_ARGS_APPEND}
          - name: MAVEN_MIRROR_URL
            value: ${MAVEN_MIRROR_URL}
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${BASE_IMAGE_NAME}:${BUILDER_VERSION}
            namespace: ${IMAGE_STREAM_NAMESPACE}
          incremental: true
        type: Source
      triggers:
      - github:
          secret: ${BUILD_SECRET}
        type: GitHub
      - generic:
          secret: ${BUILD_SECRET}
        type: Generic
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
    status:
      lastVersion: 0
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:

      labels:
        app: ${APP_NAME}
        component: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        component: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
        group: quickstarts
        provider: s2i
        version: ${APP_VERSION}
      template:
        metadata:

          labels:
            app: ${APP_NAME}
            com.company: Red_Hat
            component: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
            group: quickstarts
            provider: s2i
            rht.comp: ${APP_NAME}
            rht.comp_ver: ${APP_VERSION}
            rht.prod_name: Red_Hat_Integration
            rht.prod_ver: "7.10"
            version: ${APP_VERSION}
        spec:
          containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: library/${APP_NAME}:latest
            livenessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 180
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
            readinessProbe:
              httpGet:
                path: /actuator/health
                port: 8081
              initialDelaySeconds: 10
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange
  parameters:
  - description: The name assigned to the application.
    displayName: Application Name
    name: APP_NAME
    required: true
    value: s2i-fuse710-spring-boot-2-cxf-jaxws-xml
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: GIT_REPO
    required: true
    value: https://github.com/fabric8-quickstarts/spring-boot-cxf-jaxws-xml.git
  - description: Set this to a branch name, tag or other ref of your repository if
      you are not using the default branch.
    displayName: Git Reference
    name: GIT_REF
    value: spring-boot-cxf-jaxws-xml-7.10.0.fuse-sb2-7_10_1-00007
  - description: Exposed service name.
    displayName: Service Name
    name: SERVICE_NAME
    value: cxf-jaxws-xml
  - description: The base image used. Default is fuse7-java-openshift which is JDK8
      based; fuse7-java11-openshift is JDK11 based
    displayName: Base Image Name, JDK11 or JDK8
    name: BASE_IMAGE_NAME
    value: fuse7-java-openshift
  - description: The version of the FIS S2I builder image to use.
    displayName: Builder version
    name: BUILDER_VERSION
    value: "1.10"
  - description: The application version.
    displayName: Application Version
    name: APP_VERSION
    value: 7.10.0.fuse-sb2-7_10_1-00007
  - description: Arguments passed to mvn in the build.
    displayName: Maven Arguments
    name: MAVEN_ARGS
    value: package -DskipTests -Djkube.skip -e -B
  - description: Extra arguments passed to mvn, e.g. for multi-module builds.
    displayName: Extra Maven Arguments
    name: MAVEN_ARGS_APPEND
  - description: Maven mirror to use for S2I builds.
    displayName: Maven mirror URL
    name: MAVEN_MIRROR_URL
  - description: Directory of the artifact to be built, e.g. for multi-module builds.
    displayName: Maven build directory
    name: ARTIFACT_DIR
  - description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
      are normally installed in the openshift namespace. You should only need to modify
      this if you've installed the ImageStreams in a different namespace/project.
    displayName: Image Stream Namespace
    name: IMAGE_STREAM_NAMESPACE
    required: true
    value: openshift
  - description: The secret needed to trigger a build.
    displayName: Git Build Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: BUILD_SECRET
  - description: The amount of CPU to request.
    displayName: CPU request
    name: CPU_REQUEST
    required: true
    value: "0.2"
  - description: The amount of memory required for the container to run.
    displayName: Memory request
    name: MEMORY_REQUEST
    required: true
    value: 256Mi
  - description: The amount of CPU the container is limited to use.
    displayName: CPU limit
    name: CPU_LIMIT
    required: true
    value: "1.0"
  - description: The amount of memory the container is limited to use.
    displayName: Memory limit
    name: MEMORY_LIMIT
    required: true
    value: 256Mi
  - description: The amount of memory to request for builds.
    displayName: Build Memory request
    name: BUILD_MEMORY_REQUEST
    required: true
    value: 0.7G
  - description: The amount of memory the build container is limited to use.
    displayName: Build Memory limit
    name: BUILD_MEMORY_LIMIT
    required: true
    value: 1G