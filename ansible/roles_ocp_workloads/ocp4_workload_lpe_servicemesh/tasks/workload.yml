---
# Implement your Workload deployment tasks here
- name: setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}."

- name: install Openshift Elasticsearch Operator
  include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: elasticsearch-operator
    install_operator_namespace: openshift-operators
    install_operator_channel: "{{ ocp4_workload_lpe_servicemesh_es_channel }}"
    install_operator_csv_nameprefix: elasticsearch-operator
    install_operator_catalog: redhat-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_lpe_servicemesh_es_auto_approval | default(true) }}"
    install_operator_starting_csv: "{{ ocp4_workload_lpe_servicemesh_es_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_lpe_servicemesh_es_use_catalog_snapshot | default(false)}}"
    install_operator_catalogsource_name: "{{ ocp4_workload_lpe_servicemesh_es_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: openshift-operators
    install_operator_catalogsource_image: "{{ ocp4_workload_lpe_servicemesh_es_catalog_snapshot_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_lpe_servicemesh_es_catalog_snapshot_image_tag | default('') }}"

- name: install OpenShift Distributed Tracing (Jaeger) Operator
  include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: jaeger-product
    install_operator_namespace: openshift-distributed-tracing
    install_operator_channel: "{{ ocp4_workload_lpe_servicemesh_jaeger_channel }}"
    install_operator_csv_nameprefix: jaeger
    install_operator_catalog: redhat-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_lpe_servicemesh_jaeger_auto_approval | default(true) }}"
    install_operator_starting_csv: "{{ ocp4_workload_lpe_servicemesh_jaeger_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_lpe_servicemesh_jaeger_use_catalog_snapshot | default(false)}}"
    install_operator_catalogsource_name: "{{ ocp4_workload_lpe_servicemesh_jaeger_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: openshift-operators
    install_operator_catalogsource_image: "{{ ocp4_workload_lpe_servicemesh_jaeger_catalog_snapshot_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_lpe_servicemesh_jaeger_catalog_snapshot_image_tag | default('') }}"

- name: install Kiali Operator
  include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: kiali-ossm
    install_operator_namespace: openshift-operators
    install_operator_channel: "{{ ocp4_workload_lpe_servicemesh_kiali_channel }}"
    install_operator_csv_nameprefix: kiali
    install_operator_catalog: redhat-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_lpe_servicemesh_kiali_auto_approval | default(true) }}"
    install_operator_starting_csv: "{{ ocp4_workload_lpe_servicemesh_kiali_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_lpe_servicemesh_kiali_use_catalog_snapshot | default(false)}}"
    install_operator_catalogsource_name: "{{ ocp4_workload_lpe_servicemesh_kiali_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: openshift-operators
    install_operator_catalogsource_image: "{{ ocp4_workload_lpe_servicemesh_kiali_catalog_snapshot_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_lpe_servicemesh_kiali_catalog_snapshot_image_tag | default('') }}"

- name: install OpenShift Service Mesh Operator
  include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: servicemeshoperator
    install_operator_namespace: openshift-operators
    install_operator_channel: "{{ ocp4_workload_lpe_servicemesh_ossm_channel }}"
    install_operator_csv_nameprefix: servicemesh
    install_operator_catalog: redhat-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_lpe_servicemesh_ossm_auto_approval | default(true) }}"
    install_operator_starting_csv: "{{ ocp4_workload_lpe_servicemesh_ossm_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_lpe_servicemesh_ossm_use_catalog_snapshot | default(false)}}"
    install_operator_catalogsource_name: "{{ ocp4_workload_lpe_servicemesh_ossm_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: openshift-operators
    install_operator_catalogsource_image: "{{ ocp4_workload_lpe_servicemesh_ossm_catalog_snapshot_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_lpe_servicemesh_ossm_catalog_snapshot_image_tag | default('') }}"

- name: choose to install ServiceMeshControlPlane
  set_fact:
    install_smcp: "{{ ocp4_workload_lpe_servicemesh_smcp_install | default(false) }}"

- name: create Namespace for ServiceMeshControlPlane
  kubernetes.core.k8s:
    state: present
    kind: Namespace
    name: "{{ ocp4_workload_lpe_servicemesh_smcp_namespace }}"
  when: install_smcp | bool

- name: pause 60 seconds until servicemesh is ready
  pause:
    seconds: 60

- name: create ServiceMeshControlPlane
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'smcp-basic.yaml.j2') }}"
  when: install_smcp | bool

- name: pause 10 seconds until SMCP is created
  pause:
    seconds: 10

- name: wait until SMCP is ready
  kubernetes.core.k8s_info:
    api_version: maistra.io/v2
    kind: ServiceMeshControlPlane
    name: smcp-basic
    namespace: "{{ ocp4_workload_lpe_servicemesh_smcp_namespace }}"
  register: r_smcp
  until: (r_smcp is defined) and (r_smcp.resources[0].status.readiness.components.pending | length == 0)
  delay: 5
  retries: 15
  when: install_smcp | bool

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
