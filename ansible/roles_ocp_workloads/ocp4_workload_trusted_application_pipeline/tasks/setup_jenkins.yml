---
- name: Copy global config files to host
  ansible.builtin.copy:
    src: files/jenkins-global-config.xml
    dest: /tmp/jenkins-global-config.xml

- name: Transfer pipeline files to container
  shell: |
    JENKINS_POD=$(oc get pod -l deployment=jenkins -n jenkins --no-headers | awk '{ print $1 }')
    oc cp /tmp/jenkins-global-config.xml {{ ocp4_workload_trusted_application_pipeline_jenkins_namespace
    }}/$JENKINS_POD:/var/lib/jenkins/org.jenkinsci.plugins.configfiles.GlobalConfigFiles.xml -c jenkins
    oc delete pod $JENKINS_POD -n {{ ocp4_workload_trusted_application_pipeline_jenkins_namespace
    }}

- name: Create Jenkins Secrets
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', item) | from_yaml }}"
    namespace: "{{ ocp4_workload_trusted_application_pipeline_jenkins_namespace }}"
  loop:
  - external-secret-trustification.yml
  - external-secret-gitlab-webhook.yml
  - external-secret-common-password.yml
  - external-secret-stackrox-token.yml

- name: Create Jenkins Job Runner Resources
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - cluster-role-binding-job-runner-sa-cluster-edit.yml.j2
  - sa-jenkins-job-runner.yml.j2

- name: Retrieve cosign signing secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: signing-secrets
    namespace: "{{ ocp4_workload_trusted_application_pipeline_pipelines_namespace }}"
  register: r_signing_secrets
  retries: 120
  delay: 10
  until:
  - r_signing_secrets is defined
  - r_signing_secrets.resources is defined
  - r_signing_secrets.resources | length > 0

- name: Creating Cosign Signing Secret
  shell: |
    oc create secret generic signing-secrets -n {{
    ocp4_workload_trusted_application_pipeline_jenkins_namespace }} \
    --from-literal=cosign.key={{ r_signing_secrets.resources[0].data['cosign.key'] }} \
    --from-literal=cosign.pub={{ r_signing_secrets.resources[0].data['cosign.pub'] }} \
    --from-literal=cosign.password={{ r_signing_secrets.resources[0].data['cosign.password'] | b64decode }}