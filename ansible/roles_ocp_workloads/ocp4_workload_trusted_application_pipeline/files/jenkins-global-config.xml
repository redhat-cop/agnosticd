<?xml version='1.1' encoding='UTF-8'?>
<org.jenkinsci.plugins.configfiles.GlobalConfigFiles plugin="config-file-provider@959.vcff671a_4518b_">
  <configs class="sorted-set">
    <comparator class="org.jenkinsci.plugins.configfiles.ConfigByIdComparator"/>
    <org.jenkinsci.plugins.configfiles.custom.CustomConfig>
      <id>create.att.predicate.sh</id>
      <name>create.att.predicate.sh</name>
      <comment></comment>
      <content>#
# Create attestation predicate for RHTAP Jenkins builds
#
# Useful references:
# - https://slsa.dev/spec/v1.0/provenance
# - https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables
# - http://localhost:8080/env-vars.html/
#   (Replace localhost with your Jenkins instance)
#
yq -o=json -I=0 &lt;&lt; EOT
---
buildDefinition:
  buildType: &quot;https://redhat.com/rhtap/slsa-build-types/${CI_TYPE}-build/v1&quot;
  externalParameters: {}
  internalParameters: {}
  resolvedDependencies:
    - uri: &quot;git+${GIT_URL}&quot;
      digest:
        gitCommit: &quot;${GIT_COMMIT}&quot;

runDetails:
  builder:
    id: &quot;${NODE_NAME}&quot;
    builderDependencies: []
    version:
      # Not sure if this is the right place for these...
      buildNumber: &quot;${BUILD_NUMBER}&quot;
      jobName: &quot;${JOB_NAME}&quot;
      executorNumber: &quot;${EXECUTOR_NUMBER}&quot;
      jenkinsHome: &quot;${JENKINS_HOME}&quot;
      buildUrl: &quot;${BUILD_URL}&quot;
      jobUrl: &quot;${JOB_URL}&quot;

  metadata:
    invocationID: &quot;${BUILD_TAG}&quot;
    startedOn: &quot;$(cat $RESULTS/init/START_TIME)&quot;
    # Inaccurate, but maybe close enough
    finishedOn: &quot;$(date +%Y-%m-%dT%H:%M:%SZ)&quot;

  byproducts:
    - name: SBOM_BLOB
      uri: &quot;$(cat &quot;$BASE_RESULTS&quot;/buildah-rhtap/SBOM_BLOB_URL)&quot;

EOT</content>
      <providerId>org.jenkinsci.plugins.configfiles.custom.CustomConfig</providerId>
      <customizedCredentialMappings/>
    </org.jenkinsci.plugins.configfiles.custom.CustomConfig>
    <org.jenkinsci.plugins.configfiles.custom.CustomConfig>
      <id>merge.sboms.py</id>
      <name>merge.sboms.py</name>
      <comment></comment>
      <content>#!/bin/python3
import hashlib
import json
import os
import re

### load SBOMs ###

with open(os.getenv(&quot;TEMP_DIR&quot;) + &quot;/files/sbom-image.json&quot;) as f:
  image_sbom = json.load(f)

with open(os.getenv(&quot;TEMP_DIR&quot;) + &quot;/files/sbom-source.json&quot;) as f:
  source_sbom = json.load(f)


### attempt to deduplicate components ###

component_list = image_sbom.get(&quot;components&quot;, [])
existing_purls = [c[&quot;purl&quot;] for c in component_list if &quot;purl&quot; in c]

for component in source_sbom.get(&quot;components&quot;, []):
  if &quot;purl&quot; in component:
    if component[&quot;purl&quot;] not in existing_purls:
      component_list.append(component)
      existing_purls.append(component[&quot;purl&quot;])
  else:
    # We won&apos;t try to deduplicate components that lack a purl.
    # This should only happen with operating-system type components,
    # which are only reported in the image SBOM.
    component_list.append(component)

component_list.sort(key=lambda c: c[&quot;type&quot;] + c[&quot;name&quot;])
image_sbom[&quot;components&quot;] = component_list


### write the CycloneDX unified SBOM ###

with open(os.getenv(&quot;TEMP_DIR&quot;) + &quot;/files/sbom-cyclonedx.json&quot;, &quot;w&quot;) as f:
  json.dump(image_sbom, f, indent=4)


### write the SBOM blob URL result ###

with open(os.getenv(&quot;TEMP_DIR&quot;) + &quot;/files/sbom-cyclonedx.json&quot;, &quot;rb&quot;) as f:
  sbom_digest = hashlib.file_digest(f, &quot;sha256&quot;).hexdigest()

# https://github.com/opencontainers/distribution-spec/blob/main/spec.md?plain=1#L160
tag_regex = &quot;[a-zA-Z0-9_][a-zA-Z0-9._-]{0,127}&quot;

# the tag must be after a colon, but always at the end of the string
# this avoids conflict with port numbers
image_without_tag = re.sub(f&quot;:{tag_regex}\$&quot;, &quot;&quot;, os.getenv(&quot;IMAGE&quot;))

sbom_blob_url = f&quot;{image_without_tag}@sha256:{sbom_digest}&quot;

with open(os.getenv(&quot;RESULT_PATH&quot;), &quot;w&quot;) as f:
  f.write(sbom_blob_url)</content>
      <providerId>org.jenkinsci.plugins.configfiles.custom.CustomConfig</providerId>
      <customizedCredentialMappings/>
    </org.jenkinsci.plugins.configfiles.custom.CustomConfig>
  </configs>
</org.jenkinsci.plugins.configfiles.GlobalConfigFiles>