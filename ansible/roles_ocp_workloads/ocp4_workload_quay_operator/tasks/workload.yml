---
- name: Setting up workload for user {{ ocp_username }}
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Generate Quay Superuser Password
  when: ocp4_workload_quay_operator_superuser_password | default("") | length == 0
  set_fact:
    _ocp4_workload_quay_operator_superuser_password: "{{ lookup('password', '/dev/null length={{ ocp4_workload_quay_operator_superuser_password_length }} chars=ascii_letters') }}"

- name: Use provided Quay Superuser Password
  when: ocp4_workload_quay_operator_superuser_password | default("") | length > 0
  set_fact:
    _ocp4_workload_quay_operator_superuser_password: "{{ ocp4_workload_quay_operator_superuser_password }}"

- name: Use provided key file
  when: ocp4_workload_quay_operator_ssl_key | default("") | length > 0
  set_fact:
    _ocp4_workload_quay_operator_ssl_key: ocp4_workload_quay_operator_ssl_key

- name: Otherwise check if key file exist on bastion VM
  become: yes
  become_user: root
  when: ocp4_workload_quay_operator_ssl_key | default("") | length == 0
  block:
  - name: Check for Key file on Bastion
    stat:
      path: "/home/{{ ansible_user }}/certificates/privkey.pem"
    register: r_ssl_key
  - name: Read Key file from Bastion
    when: r_ssl_key.stat.exists
    slurp:
      src: "/home/{{ ansible_user }}/certificates/privkey.pem"
    register: _quay_ssl_key_file
  - name: Set ocp4_workload_quay_operator_ssl_key
    when: r_ssl_key.stat.exists
    set_fact:
      _ocp4_workload_quay_operator_ssl_key: "{{ _quay_ssl_key_file['content'] }}"

- name: Use provided certificate file
  when: ocp4_workload_quay_operator_ssl_certificate | default("") | length > 0
  set_fact:
    _ocp4_workload_quay_operator_ssl_certificate: ocp4_workload_quay_operator_ssl_certificate

- name: Otherwise check if certificate file exist on bastion VM
  become: yes
  become_user: root
  when: ocp4_workload_quay_operator_ssl_certificate | default("") | length == 0
  block:
  - name: Check for Certificate file on Bastion
    stat:
      path: "/home/{{ ansible_user }}/certificates/fullchain.pem"
    register: r_ssl_cert
  - name: Read Certificate file from Bastion
    when: r_ssl_cert.stat.exists
    slurp:
      src: "/home/{{ ansible_user }}/certificates/fullchain.pem"
    register: _quay_ssl_cert_file
  - name: Set ocp4_workload_quay_operator_ssl_certificate
    when: r_ssl_cert.stat.exists
    set_fact:
      _ocp4_workload_quay_operator_ssl_certificate: "{{ _quay_ssl_cert_file['content'] }}"

- name: Determine Cluster Base Domain for Quay Route
  k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: r_ingress_config

- name: Use Provided Quay route
  when: ocp4_workload_quay_operator_route | default("") | length > 0
  set_fact:
    _ocp4_workload_quay_operator_quay_route: "{{ ocp4_workload_quay_operator_route }}"

- name: Otherwise use quay-{{guid}}.basedomain for the Quay route
  when: ocp4_workload_quay_operator_route | default("") | length == 0
  set_fact:
    _ocp4_workload_quay_operator_quay_route: "quay-{{ guid }}.{{ r_ingress_config.resources[0].spec.domain }}"

- name: Create Quay Operator Project
  k8s:
    state: present
    definition:  "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/project.j2
  - ./templates/operatorgroup.j2

- name: Create Catalogsource for use with catalog snapshot
  when: ocp4_workload_quay_operator_use_catalog_snapshot | bool
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/catalogsource.j2' ) | from_yaml }}"

- name: Create Quay Operator Resources
  k8s:
    state: present
    definition:  "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/operatorgroup.j2
  - ./templates/subscription.j2
  - ./templates/pull_secret.j2
  - ./templates/quay_superuser_secret.j2
  - ./templates/quay_config_secret.j2

- name: Create OpenShift Objects for Red Hat Quay Registry Certificates
  when:
  - _ocp4_workload_quay_operator_ssl_certificate | length > 0
  - _ocp4_workload_quay_operator_ssl_key | length > 0
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/quay_ssl_certificate_secret.j2

- name: Wait until InstallPlan is created
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ ocp4_workload_quay_operator_project }}"
  register: r_install_plans
  vars:
    _query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'red-hat-quay')]
  retries: 30
  delay: 5
  until:
  - r_install_plans.resources | length > 0
  - r_install_plans.resources | to_json | from_json | json_query(_query)

- name: Set InstallPlan Name
  set_fact:
    ocp4_workload_quay_operator_install_plan_name: "{{ r_install_plans.resources | to_json | from_json | json_query(query) }}"
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'red-hat-quay')].metadata.name|[0]

- name: Get InstallPlan
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ ocp4_workload_quay_operator_install_plan_name }}"
    namespace: "{{ ocp4_workload_quay_operator_project }}"
  register: r_install_plan
  
- name: Approve InstallPlan if necessary
  when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
  k8s:
    state: present
    definition: "{{ lookup( 'template', './templates/installplan.j2' ) }}"

- name: Get Installed CSV
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: quay-operator
    namespace: "{{ ocp4_workload_quay_operator_project }}"
  register: r_subscription
  retries: 30
  delay: 5
  until:
  - r_subscription.resources[0].status.currentCSV is defined
  - r_subscription.resources[0].status.currentCSV | length > 0

- name: Wait until CSV is Installed
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ r_subscription.resources[0].status.currentCSV }}"
    namespace: "{{ ocp4_workload_quay_operator_project }}"
  register: r_csv
  retries: 15
  delay: 5
  until:
  - r_csv.resources[0].status.phase is defined
  - r_csv.resources[0].status.phase | length > 0
  - r_csv.resources[0].status.phase == "Succeeded"

- name: Create Red Hat Quay Registry
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/quay.j2' ) | from_yaml }}"

- name: Verify successful rollout
  when: ocp4_workload_quay_operator_verify_deployment | default( true) | bool
  block:
  - name: Wait for Quay App Pod to appear
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ ocp4_workload_quay_operator_project }}"
      label_selectors:
      - app=quay-operator
      - quay-enterprise-component=app
    register: r_quay_pod
    until: r_quay_pod.resources | length > 0
    retries: 30
    delay: 10

  - name: Pause 10 seconds to give containers a chance to initialize
    pause:
      seconds: 10

  - name: Wait for Quay App Pod Status to be Ready
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ ocp4_workload_quay_operator_project }}"
      label_selectors:
      - app=quay-operator
      - quay-enterprise-component=app
    register: r_running_quay_pod
    until: >-
      r_running_quay_pod.resources[0].status.containerStatuses[0].ready | bool
    ignore_errors: true
    retries: 25
    delay: 5

- name: Get Quay Hostname
  k8s_info:
    api_version: redhatcop.redhat.io/v1alpha1
    kind: QuayEcosystem
    name: "{{ ocp4_workload_quay_operator_name }}"
    namespace: "{{ ocp4_workload_quay_operator_project }}"
  register: r_quay

- name: Print student user info
  agnosticd_user_info:
    msg: "{{ item }}"
  loop:
  - ""
  - "Red Hat Quay is available at https://{{r_quay.resources[0].status.hostname }}"
  - "The Red Hat Quay Super User is {{ ocp4_workload_quay_operator_superuser_username }} with password {{ _ocp4_workload_quay_operator_superuser_password }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
