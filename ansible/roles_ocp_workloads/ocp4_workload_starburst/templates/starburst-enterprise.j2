kind: StarburstEnterprise
apiVersion: charts.starburstdata.com/v1alpha1
metadata:
  name: {{ ocp4_workload_starburst_enterprise_name }}
  namespace: {{ ocp4_workload_starburst_namespace }}
spec:
  additionalVolumes: []
  cache:
    diskUsagePercentage: 80
    enabled: false
    ttl: 7d
    volume:
      emptyDir: {}
  catalogs:
    tpch: |-
      connector.name=tpch
      tpch.splits-per-node=4
  commonLabels: {}
  starburstPlatformLicense: {{ ocp4_workload_starburst_secret }}
  coordinator:
    additionalProperties: ''
    affinity: {}
    deploymentAnnotations: {}
    envFrom: []
    etcFiles:
      jvm.config: |
        -server
        -XX:G1HeapRegionSize=32M
        -XX:+ExplicitGCInvokesConcurrent
        -XX:+ExitOnOutOfMemoryError
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:-OmitStackTraceInFastThrow
        -XX:ReservedCodeCacheSize=512M
        -XX:PerMethodRecompilationCutoff=10000
        -XX:PerBytecodeRecompilationCutoff=10000
        -Djdk.attach.allowAttachSelf=true
        -Djdk.nio.maxCachedBufferSize=2000000
        -XX:+UnlockDiagnosticVMOptions
        -XX:+UseAESCTRIntrinsics
        --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
        --add-opens=java.base/java.nio=ALL-UNNAMED
        --add-opens=java.base/java.lang=ALL-UNNAMED
        --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED
        -XX:-UseBiasedLocking
        -XX:+UseG1GC
      other: {}
      properties:
        config.properties: |
          insights.jdbc.url=jdbc:postgresql://postgresql.{{ ocp4_workload_starburst_namespace }}.svc.cluster.local:5432/starburst_query_logger
          insights.jdbc.user=starburst
          insights.jdbc.password=starburst
          insights.persistence-enabled=true
        log.properties: |
          # Enable verbose logging from Starburst Enterprise
          #io.trino=DEBUG
          #com.starburstdata.presto=DEBUG
        {% raw %}
        node.properties: |
          node.environment={{ include "starburst.environment" . }}
        {% endraw %}
          node.data-dir=/data/starburst
          plugin.dir=/usr/lib/starburst/plugin
          node.server-log-file=/var/log/starburst/server.log
          node.launcher-log-file=/var/log/starburst/launcher.log
    heapHeadroomPercentage: 30
    heapSizePercentage: 90
    initContainers: []
    nodeMemoryHeadroom: 2Gi
    nodeSelector: {}
    podAnnotations: {}
    priorityClassName: null
    resources:
      cpu: 3
      memory: 12Gi
    securityContext: {}
    sidecars: []
    tolerations: []
  environment: null
  expose:
    clusterIp:
      name: starburst
      ports:
        http:
          port: 8080
    ingress:
      annotations: {}
      host: null
      ingressClassName: null
      ingressName: coordinator-ingress
      path: /
      pathType: ImplementationSpecific
      serviceName: starburst
      servicePort: 8080
      tls:
        enabled: true
        secretName: null
    loadBalancer:
      IP: ''
      annotations: {}
      name: starburst
      ports:
        http:
          port: 8080
      sourceRanges: []
    nodePort:
      extraLabels: {}
      name: starburst
      ports:
        http:
          nodePort: 30080
          port: 8080
    type: clusterIp
  externalSecrets:
    enabled: false
    goDaddy:
      backendType: secretsManager
    secretPrefix: external0
    type: goDaddy
  extraArguments: []
  extraSecret:
    file: null
    name: null
  image:
    pullPolicy: IfNotPresent
    repository: registry.connect.redhat.com/starburst/starburst-enterprise
    tag: 402-e.1
  imagePullSecrets: null
  initFile: ''
  initImage:
    pullPolicy: IfNotPresent
    repository: registry.connect.redhat.com/starburst/starburst-enterprise-init
    tag: 1.3.2
  internal:
    ports:
      http:
        port: 8080
      https:
        port: 8443
  internalTls: false
  licenseManager:
    cronjob:
      affinity: {}
      nodeSelector: {}
      priorityClassName: null
      securityContext: {}
      tolerations: []
    image:
      pullPolicy: IfNotPresent
      repository: registry.connect.redhat.com/starburst/license-manager
      tag: 0.0.2
    url: 'https://license-api.dogfood.eng.starburstdata.net/test/license/checkout'
  livenessProbe: null
  prometheus:
    agent:
      config: /etc/starburst/telemetry/prometheus.yaml
      port: 8081
      version: 0.16.1
    enabled: true
    rules:
      - attrNameSnakeCase: true
        name: $1
        pattern: trino.execution<name=QueryManager><>(running_queries|queued_queries)
        type: GAUGE
      - name: failed_queries
        pattern: trino.execution<name=QueryManager><>FailedQueries\.TotalCount
        type: COUNTER
  query:
    maxConcurrentQueries: 3
  readinessProbe: null
  registryCredentials:
    enabled: false
    password: null
    registry: null
    username: null
  securityContext: {}
  sharedSecret: null
  siac:
    additionalHeapSizePercentage: 15
    enabled: false
  spilling:
    enabled: false
    volume:
      emptyDir: {}
  startupProbe: null
  usageMetrics:
    enabled: false
    usageClient:
      initialDelay: 1m
      interval: 1m
  userDatabase:
    enabled: false
    users:
      - password: 46991b33f7a75ff79213c0dc0e610610
        username: admin
  worker:
    additionalProperties: ''
    affinity: {}
    autoscaling:
      enabled: false
      maxReplicas: 100
      minReplicas: 1
      targetCPUUtilizationPercentage: 80
    deploymentAnnotations: {}
    deploymentTerminationGracePeriodSeconds: 300
    envFrom: []
    etcFiles:
      jvm.config: |
        -server
        -XX:G1HeapRegionSize=32M
        -XX:+ExplicitGCInvokesConcurrent
        -XX:+ExitOnOutOfMemoryError
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:-OmitStackTraceInFastThrow
        -XX:ReservedCodeCacheSize=512M
        -XX:PerMethodRecompilationCutoff=10000
        -XX:PerBytecodeRecompilationCutoff=10000
        -Djdk.attach.allowAttachSelf=true
        -Djdk.nio.maxCachedBufferSize=2000000
        -XX:+UnlockDiagnosticVMOptions
        -XX:+UseAESCTRIntrinsics
        --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
        --add-opens=java.base/java.nio=ALL-UNNAMED
        --add-opens=java.base/java.lang=ALL-UNNAMED
        --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED
        -XX:-UseBiasedLocking
        -XX:+UseG1GC
      other: {}
      properties:
        config.properties: |
          coordinator=false
          http-server.http.port=8080
          discovery.uri=http://coordinator:8080
        log.properties: |
          # Enable verbose logging from Starburst Enterprise
          #io.trino=DEBUG
          #com.starburstdata.presto=DEBUG
        {% raw %}
        node.properties: |
          node.environment={{ include "starburst.environment" . }}
        {% endraw %}
          node.data-dir=/data/starburst
          plugin.dir=/usr/lib/starburst/plugin
          node.server-log-file=/var/log/starburst/server.log
          node.launcher-log-file=/var/log/starburst/launcher.log
    heapHeadroomPercentage: 30
    heapSizePercentage: 90
    initContainers: []
    kedaScaler:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        repository: registry.connect.redhat.com/starburst/keda-trino-scaler
        tag: 0.1.7
      port: 8021
      scaledObjectSpec:
        advanced: {}
        cooldownPeriod: 300
        idleReplicaCount: 0
        maxReplicaCount: 100
        minReplicaCount: 1
        pollingInterval: 30
        scaleTargetRef:
          name: worker
        triggers:
          - metadata:
              numberOfQueriesPerWorker: '10'
              scaleInToIdleReplicaCountIfNoQueuedQueriesLeft: 'true'
              scaleMethod: query_queue
            type: external
    nodeMemoryHeadroom: 2Gi
    nodeSelector: {}
    podAnnotations: {}
    priorityClassName: null
    replicas: 2
    resources:
      cpu: 3
      memory: 12Gi
    securityContext: {}
    sidecars: []
    starburstWorkerShutdownGracePeriodSeconds: 120
    tolerations: []
