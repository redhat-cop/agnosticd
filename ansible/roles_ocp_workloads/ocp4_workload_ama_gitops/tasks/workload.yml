---
- name: Download Crane CLI to bastion
  become: true
  ansible.builtin.get_url:
    url: "{{ ocp4_workload_ama_gitops_crane_url }}"
    dest: /usr/bin/crane
    owner: root
    group: root
    mode: 0775

- name: Retrieve Gitea instance
  kubernetes.core.k8s_info:
    api_version: gpte.opentlc.com/v1
    kind: Gitea
    name: "{{ ocp4_workload_ama_gitops_gitea_instance }}"
    namespace: "{{ ocp4_workload_ama_gitops_gitea_project }}"
  register: r_gitea

- name: Set Gitea repo variables
  set_fact:
    _ocp4_workload_ama_gitops_gitea_repo_url: >-
      {{ r_gitea.resources[0].spec.giteaSsl | bool | ternary( 'https', 'http' ) }}://{{
      ocp4_workload_ama_gitops_gitea_user | urlencode }}:{{
      ocp4_workload_ama_gitops_gitea_user_password | urlencode }}@{{
      r_gitea.resources[0].status.giteaHostname }}/{{
      ocp4_workload_ama_gitops_gitea_user }}/{{ ocp4_workload_ama_gitops_gitea_repo }}
    _ocp4_workload_ama_gitops_gitea_repo_route_url: >-
      {{ r_gitea.resources[0].status.giteaRoute }}

- name: Make sure cloned repo directory does not exist
  ansible.builtin.file:
    path: "~{{ ansible_user }}/appmod-enablement"
    state: absent

- name: Clone application source code
  ansible.builtin.git:
    accept_hostkey: true
    force: true
    repo: "{{ _ocp4_workload_ama_gitops_gitea_repo_url }}"
    dest: "~{{ ansible_user }}/appmod-enablement"
    version: "{{ ocp4_workload_ama_gitops_gitea_repo_branch }}"
  environment:
    GIT_TERMINAL_PROMPT: false

- name: Update ~/appmod-enablement/argocd/customers-application.yaml
  lineinfile:
    path: "~{{ ansible_user }}/appmod-enablement/argocd/customers-application.yaml"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
  - regexp: "^    repoURL:"
    line: "    repoURL: {{ _ocp4_workload_ama_gitops_gitea_repo_url }}"
  - regexp: "^  namespace: retail"
    line: "  namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"
  - regexp: "^    namespace: retail"
    line: "    namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"

- name: Update ~/appmod-enablement/argocd/frontend-application.yaml
  lineinfile:
    path: "~{{ ansible_user }}/appmod-enablement/argocd/frontend-application.yaml"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
  - regexp: "^    repoURL:"
    line: "    repoURL: {{ _ocp4_workload_ama_gitops_gitea_repo_url }}"
  - regexp: "^  namespace: retail"
    line: "  namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"
  - regexp: "^    namespace: retail"
    line: "    namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"

- name: Set ocp4_workload_ama_gitops_tomcat_ip from previous workload
  when:
  - hostvars.localhost.ocp4_workload_ama_rhev_vm_tomcat_vm_ip_address is defined
  - hostvars.localhost.ocp4_workload_ama_rhev_vm_tomcat_vm_ip_address | length > 0
  set_fact:
    ocp4_workload_ama_gitops_tomcat_ip: "{{ hostvars.localhost.ocp4_workload_ama_rhev_vm_tomcat_vm_ip_address }}"

# Point gateway to use customer service on RHEV
# Skip if no IP address available
- name: Update ~/appmod-enablement/argocd/gateway-application.yaml
  when: ocp4_workload_ama_gitops_tomcat_ip | length > 0
  lineinfile:
    path: "~{{ ansible_user }}/appmod-enablement/argocd/gateway-application.yaml"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
  # Ends with customers
  - regexp: '.*\.$customers$'
    line: "    url: http://{{ ocp4_workload_ama_gitops_tomcat_ip }}:8080/customers/customers"

- name: Update ~/appmod-enablement/gateway/helm/config/application.yaml
  lineinfile:
    path: "~{{ ansible_user }}/appmod-enablement/gateway/helm/config/application.yaml"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
  - regexp: "^    repoURL:"
    line: "    repoURL: {{ _ocp4_workload_ama_gitops_gitea_repo_url }}"
  - regexp: "^  namespace: retail"
    line: "  namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"
  - regexp: "^    namespace: retail"
    line: "    namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"

- name: Update ~/appmod-enablement/argocd/inventory-application.yaml
  lineinfile:
    path: "~{{ ansible_user }}/appmod-enablement/argocd/inventory-application.yaml"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
  - regexp: "^    repoURL:"
    line: "    repoURL: {{ _ocp4_workload_ama_gitops_gitea_repo_url }}"
  - regexp: "^  namespace: retail"
    line: "  namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"
  - regexp: "^    namespace: retail"
    line: "    namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"

- name: Update ~/appmod-enablement/argocd/orders-application.yaml
  lineinfile:
    path: "~{{ ansible_user }}/appmod-enablement/argocd/orders-application.yaml"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
  - regexp: "^    repoURL:"
    line: "    repoURL: {{ _ocp4_workload_ama_gitops_gitea_repo_url }}"
  - regexp: "^  namespace: retail"
    line: "  namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"
  - regexp: "^    namespace: retail"
    line: "    namespace: {{ ocp4_workload_ama_gitops_demo_namespace }}"

- name: Commit changes to the repository
  command:
    chdir: "~{{ ansible_user }}/appmod-enablement"
    cmd: >-
      git commit -a -m 'Updates for starting scenario.'

- name: Push all changes back to the {{ ocp4_workload_ama_gitops_gitea_repo }} repository
  command:
    chdir: "~{{ ansible_user }}/appmod-enablement"
    cmd: >-
      git push https://{{ ocp4_workload_ama_gitops_gitea_user
      }}:{{ ocp4_workload_ama_gitops_gitea_user_password
      }}@{{ _ocp4_workload_ama_gitops_gitea_repo_route_url | urlsplit('hostname')
      }}/{{ ocp4_workload_ama_gitops_gitea_user }}/{{ ocp4_workload_ama_gitops_gitea_repo }}

- name: Create k8s resources
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - namespace-pipeline.yaml.j2
  - namespace-demo.yaml.j2
  - gitea-secret.yaml.j2
  - rolebinding-clusterview.yaml.j2
  - rolebinding-retail-pipeline.yaml.j2
  - service-account.yaml.j2

- name: Deploy tekton resources
  kubernetes.core.k8s:
    state: present
    namespace: "{{ ocp4_workload_ama_gitops_pipeline_namespace }}"
    src: "{{ item }}"
  loop:
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/build-bot-sa.yaml"
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/git-user-secret.yaml"
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/buildah-task.yaml"
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/git-clone-task.yaml"
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/maven-with-subdir-task.yaml"
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/update-manifest-task.yaml"
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/customers-workspace-pvc.yaml"
  - "~{{ ansible_user }}/appmod-enablement/customers-tomcat-gitops/tekton/customers-deployment-pipeline.yaml"

- name: Create PipelineRun
  when: ocp4_workload_ama_gitops_pipeline_execute | bool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'pipelinerun.yaml.j2' ) | from_yaml }}"

- name: Create ArgoCD instance
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'argocd.yaml.j2' ) | from_yaml }}"

- name: Create orders PostgreSQL database
  vars:
    _ocp4_workload_ama_gitops_db_app_name: "{{ ocp4_workload_ama_gitops_orders_db_app_name }}"
    _ocp4_workload_ama_gitops_db_name: "{{ ocp4_workload_ama_gitops_orders_db_name }}"
    _ocp4_workload_ama_gitops_db_user: "{{ ocp4_workload_ama_gitops_orders_db_user }}"
    _ocp4_workload_ama_gitops_db_password: "{{ ocp4_workload_ama_gitops_orders_db_password }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - postgresql/secret.yaml.j2
  - postgresql/pvc.yaml.j2
  - postgresql/deployment.yaml.j2
  - postgresql/service.yaml.j2

- name: Create inventory PostgreSQL database
  vars:
    _ocp4_workload_ama_gitops_db_app_name: "{{ ocp4_workload_ama_gitops_inventory_db_app_name }}"
    _ocp4_workload_ama_gitops_db_name: "{{ ocp4_workload_ama_gitops_inventory_db_name }}"
    _ocp4_workload_ama_gitops_db_user: "{{ ocp4_workload_ama_gitops_inventory_db_user }}"
    _ocp4_workload_ama_gitops_db_password: "{{ ocp4_workload_ama_gitops_inventory_db_password }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - postgresql/secret.yaml.j2
  - postgresql/pvc.yaml.j2
  - postgresql/deployment.yaml.j2
  - postgresql/service.yaml.j2

- name: Create ArgoCD applications
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
  - "~{{ ansible_user }}/appmod-enablement/argocd/customers-application.yaml"
  - "~{{ ansible_user }}/appmod-enablement/argocd/orders-application.yaml"
  - "~{{ ansible_user }}/appmod-enablement/argocd/inventory-application.yaml"
  - "~{{ ansible_user }}/appmod-enablement/argocd/gateway-application.yaml"
  - "~{{ ansible_user }}/appmod-enablement/argocd/frontend-application.yaml"
