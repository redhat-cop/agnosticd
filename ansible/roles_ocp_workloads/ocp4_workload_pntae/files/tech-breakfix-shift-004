#!/bin/bash
#
# kc-XXX	Knowledge Checkpoint break script for XXXX
#
# description: This utility will make local system changes  \
#              that reproduce XXXX issues.  The broken system \
#	       can then be used by GSS support engineers and \
#	       Red Hat support partners along with self-paced \
#	       training modules to grow XXXX troubleshooting knowledge.
#
# processname: kc-XXXX
#
#
# Last Modified:
#	xxxxxxx <xxxx@redhat.com> xx/xx/2014
#
# Usage: ./kc-XXXX <KCID>
# <KCID> can be one of the following:
# break1 - used to reproduce a system that has issue XXXX
# grade1 - used to grade a system after resolving the XXXX issue
#
# Error exit codes:
# 0: exited successfully
# 1: wrong hostname
# 2: syntax command usage
# 3: need to run as root user

bold=`tput bold`
normal=`tput sgr0`
black=`tput setaf 0`
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
magenta=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`


MYHOSTNAME=`hostname`
MYNAME=`whoami`

# startup
logger -p local0.notice "Initiating $0 with option(s) $@"
echo "Initiating $0 with option(s) $@"

cat > /var/tmp/hello-openshift.yaml << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-openshift
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-openshift
  template:
    metadata:
      labels:
        app: hello-openshift
    spec:
      containers:
      - name: hello-openshift1
        image: openshift/hello-openshift:latest
        ports:
        - containerPort: 80
      - name: hello-openshift2
        image: openshift/hello-openshift:latest
        ports:
        - containerPort: 80

EOF

get_creds() {


        #check to see if login is working
        export GUID=`hostname | awk -F. '{print $2}'`
        mykube=`readlink -f ~/.kube/config`
        if [[ -f ${mykube} ]]; then
                echo "Using KUBECONFIG=${mykube}"
                export KUBECONFIG=${mykube}
        else
                echo "Couldn't locate kubeconfig, tried ${mykube}"
                read -p "Enter the absolute path to the kubeconfig to use: " KUBECONFIG
                if [[ -f $KUBECONFIG ]]; then
                        export KUBECONFIG=$KUBECONFIG
                else
                        echo "Couldn't locate kubeconfig $KUBECONFIG"
                        exit 7
                fi
        fi

        # determining kubeadmin password
	echo -n "Extracting kubeadmin password. "
	kubepassfile=`sudo find /home | grep kubeadmin-password | head -1`
	KUBEPASS=`sudo cat $kubepassfile`
        if [[ -z ${KUBEPASS} ]]; then
                echo "Couldn't locate kubeadmin password file, tried $kubepassfile"
                read -p "Enter the kubeadmin password to use: " KUBEPASS
	else
	        echo "Found $KUBEPASS"
        fi

}

setup() {
	# insert your break code here
INSTALLER_VERSION=v0.16.1
OC_CLI_VERSION=4.0.22

	echo "Ravello environment not detected."
	echo "Unable to setup."

}


break() {

	if ! [ -f  /var/tmp/tech-breakfix-shift-004/.break_techbreakfixshift004 ]
        then
		echo "...."
	else
                echo "Don't run break multiple times. Try to fix or else re-provision the environment."
                exit 7
        fi

	mkdir -p /var/tmp/tech-breakfix-shift-004
	get_creds &>/dev/null

        # trying oc login else fail
#        echo -ne "Logging in as admin.\t\t\t"
#        oc login -u kubeadmin -p ${KUBEPASS} >/dev/null 2>failed-login
#        if [[ $? -eq 0 ]]; then
#                echo "${green}SUCCESS${normal}"
#        else
#                echo "${red}FAILED${normal}"
#                echo "Make sure your cluster was successfully installed and available."
#                echo "Tried to run oc login -u kubeadmin -p ${KUBEPASS} but got:"
#                cat failed-login 2>/dev/null
#                exit 7
#        fi

	echo -ne "Applying break.\t\t\t\t"

	oc project -q myfrontend >/dev/null 2>failed-login
	if [[ $? -eq 0 ]]; then
		oc project myfrontend &>/dev/null
		oc delete pods --all &>/dev/null
		DEPLOY=$(oc get all -o wide | grep -i deployment.apps | awk '{print $1}' 2>/dev/null)
	        oc delete $DEPLOY &>/dev/null
	        oc create -f hello-openshift.yaml &>/dev/null
        	echo "${green}DONE${normal}"

	else
		oc new-project myfrontend &>/dev/null
		oc project myfrontend &>/dev/null
		oc create -f hello-openshift.yaml &>/dev/null
        	echo "${green}DONE${normal}"
	fi

	echo -ne "Testing (one minute please)."
	myCOUNT=0
	while [[ $myCOUNT -lt 6 ]]
	do
		echo -n "."
		sleep 10
		# this should fail even after a full minute
		DC=$(oc get all -o wide | grep -io "deployment.apps/hello-openshift" 2>/dev/null)
		STATUS1=$(oc get pods -o wide | awk '{print $3}' | grep -i "CrashLoopBackOff" 2>/dev/null)
		STATUS2=$(oc get pods -o wide | awk '{print $3}' | grep -i "Error" 2>/dev/null)
		if [[ $DC == "deployment.apps/hello-openshift" && $STATUS1 == "CrashLoopBackOff" || $STATUS2 == "Error" ]]; then
			BREAK="succeed"
		else
			BREAK="failed"
		fi
		myCOUNT=$((myCOUNT+1))
	done
        if [[ $BREAK == "succeed" ]]; then
                echo -e "\t${green}SUCCESS${normal}"
		# cleanup so that grade cant be gamed
		# oc login -u kubeadmin -p ${KUBEPASS} &>/dev/null
		touch /var/tmp/tech-breakfix-shift-004/.break_techbreakfixshift004
	else
                echo -e "\t${red}FAILED${normal}"
                echo "Unable to break properly.  Please cleanup or re-provision the environment."
        fi
}

grade() {
        STATUS="success"
        echo "Grading.  Please wait."

	      if  ! [ -f  /var/tmp/tech-breakfix-shift-004/.break_techbreakfixshift004 ]
	      then
		        echo "It seems like break was not run successfully.  Run $0 break first."
		        exit 7
	      fi

        # insert your grade code here and set STATUS="success" if the lesson criteria is met.

        get_creds &>/dev/null
#       echo -ne "Logging in as admin.\t\t\t"
#       oc login -u kubeadmin -p ${KUBEPASS} >/dev/null 2>failed-login
#       if [[ $? -eq 0 ]]; then
#         echo "${green}SUCCESS${normal}"
#       else
#         echo "${red}FAILED${normal}"
#		      STATUS="failed"
#       fi

	      oc project myfrontend &>/dev/null

        echo -ne "Checking containers status.\t\t"
	      READY=$(oc get pods -o wide | awk '{print $2}' | grep -io "2/2" 2>/dev/null)
	      STATE=$(oc get pods -o wide | awk '{print $3}' | grep -io "Running" 2>/dev/null)
	      if [[ $READY == "2/2" && $STATE == "Running" ]]; then
		        echo "${green}SUCCESS${normal}"
	      else
            echo "${red}FAILED${normal}"
            echo "Containers are not in running state."
            STATUS="failed"
        fi

	# end your grading code here

        if [[ $STATUS == "success" ]]
        then
                echo "Success."
                echo "${bold}COMPLETION CODE: CONTPORTTOPODCONT${normal}"
        else
                echo "Sorry.  There still seems to be a problem"
        fi
}

fix() {

        STATUS="success"

	      if  ! [ -f  /var/tmp/tech-breakfix-shift-004/.break_techbreakfixshift004 ]
	      then
		        echo "It seems like break was not run successfully.  Run $0 break first."
		        exit 7
	      fi

	      get_creds &>/dev/null

#       trying oc login else fail
#       echo -ne "Logging in as admin.\t\t\t"
#	      oc login -u kubeadmin -p ${KUBEPASS} >/dev/null 2>failed-login
#       if [[ $? -eq 0 ]]; then
#          echo "${green}SUCCESS${normal}"
#       else
#          echo "${red}FAILED${normal}"
#          echo "Make sure your cluster was successfully installed and available."
#          echo "Tried to run oc login -u kubeadmin -p ${KUBEPASS} but got:"
#          cat failed-login 2>/dev/null
#          exit 7
#       fi

	echo -ne "Removing break."
	oc project myfrontend &>/dev/null
	oc delete pods --all &>/dev/null
	DEPLOY=$(oc get all -o wide | grep -i deployment.apps | awk '{print $1}' 2>/dev/null)
	oc delete $DEPLOY &>/dev/null
	oc project myfrontend &>/dev/null
        oc create -f hello-openshift.yaml &>/dev/null

	sleep 5 && echo -n "."
        sleep 5 && echo -n "."
        sleep 5 && echo -n "."
        sleep 5 && echo -n "."
        sleep 2 && echo -ne ".\t\t\t"
	echo "${green}DONE${normal}"

	echo -ne "Applying solution."

	oc set env deployment hello-openshift --containers="hello-openshift2" PORT=9090 &>/dev/null
	oc set env deployment hello-openshift --containers="hello-openshift2" SECOND_PORT=9999 &>/dev/null

	sleep 5 && echo -n "."
        sleep 5 && echo -n "."
        sleep 5 && echo -n "."
        sleep 5 && echo -n "."
        sleep 2 && echo -ne ".\t\t\t"

	echo "${green}DONE${normal}"

	echo -ne "Testing.\t\t\t\t"

	READY=$(oc get pods -o wide | awk '{print $2}' | grep -io "2/2" 2>/dev/null)
        STATE=$(oc get pods -o wide | awk '{print $3}' | grep -io "Running" 2>/dev/null)
        if [[ $READY == "2/2" && $STATE == "Running" ]]; then
                echo "${green}SUCCESS${normal}"
        else
                echo "${red}FAILED${normal}"
                echo "Containers are not running."
                STATUS="failed"
        fi

	echo -ne "Fixing.\t\t"

        if [[ $STATUS == "success" ]]; then
                echo -e "\t\t\t${green}SUCCESS${normal}"
		# cleanup so that grade cant be gamed
		rm -f /var/tmp/tech-breakfix-shift-004/.break_techbreakfixshift004
		oc login -u kubeadmin -p ${KUBEPASS} &>/dev/null
	else
                echo -e "\t\t\t${red}FAILED${normal}"
                echo "Unable to fix. Contact training team."
        fi
}

case "$1" in
        break)
                break
		;;
	fix)
		fix
                ;;
	grade)
		grade
		;;
	*)
		echo $"Usage: $0 {break|fix|grade}"
		exit 2
esac


# ending
logger -p local0.notice "Completed $0 with option(s) $@ successfully"
echo "Completed $0 with option(s) $@ successfully"
exit 0
