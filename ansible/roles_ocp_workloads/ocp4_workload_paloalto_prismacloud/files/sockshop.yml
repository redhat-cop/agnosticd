---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  namespace: sock-shop
  labels:
    name: carts-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts-db
  template:
    metadata:
      labels:
        name: carts-db
    spec:
      containers:
      - name: carts-db
        image: centos/mongodb-34-centos7
        ports:
        - name: mongo
          containerPort: 27017
        env:
        - name: MONGODB_USER
          value: sock-user
        - name: MONGODB_PASSWORD
          value: password
        - name: MONGODB_DATABASE
          value: data
        - name: MONGODB_ADMIN_PASSWORD
          value: admin
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: carts-db
  labels:
    name: carts-db
spec:
  ports:
    # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    name: carts-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  namespace: sock-shop
  labels:
    name: carts
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts
  template:
    metadata:
      labels:
        name: carts
    spec:
      containers:
      - name: carts
        image: weaveworksdemos/carts:0.4.8
        ports:
        - containerPort: 80
        env:
        - name: ZIPKIN
          value: zipkin
        - name: JAVA_OPTS
          value: >-
            -Xms64m -Xmx128m -XX:PermSize=32m
            -XX:MaxPermSize=64m -XX:+UseG1GC
            -Djava.security.egd=file:/dev/urandom
        - name: db
          value: sock-user:password@carts-db
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: carts
  labels:
    name: carts
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: carts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: catalogue-db
  labels:
    name: catalogue-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue-db
  template:
    metadata:
      labels:
        name: catalogue-db
    spec:
      containers:
      - name: catalogue-db
        image: quay.io/redhat-gpst/sockshop-catalogue-db:0.1
        env:
        - name: MYSQL_USER
          value: catalogue_user
        - name: MYSQL_PASSWORD
          value: default_password
        - name: MYSQL_DATABASE
          value: socksdb
        - name: MYSQL_ROOT_PASSWORD
          value: fake_password
        - name: MYSQL_OPERATIONS_USER
          value: opuser
        - name: MYSQL_OPERATIONS_PASSWORD
          value: opuser_password
        ports:
        - name: mysql
          containerPort: 3306
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: catalogue-db
  labels:
    name: catalogue-db
spec:
  ports:
    # the port that this service should serve on
  - port: 3306
    targetPort: 3306
  selector:
    name: catalogue-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: catalogue
  labels:
    name: catalogue
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue
  template:
    metadata:
      labels:
        name: catalogue
    spec:
      containers:
      - name: catalogue
        image: quay.io/redhat-gpst/sockshop-catalogue:0.1
        #image: weaveworksdemos/catalogue:0.3.5
        #env:
        #- name: ZIPKIN
        #  value: http://zipkin:9411/api/v1/spans
        ports:
        - containerPort: 80
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: catalogue
  labels:
    name: catalogue
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: catalogue
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: front-end
spec:
  replicas: 1
  selector:
    matchLabels:
      name: front-end
  template:
    metadata:
      labels:
        name: front-end
        version: v1
    spec:
      containers:
      - name: front-end
        image: quay.io/redhat-gpst/sockshop-front-end:0.1
        ports:
        - containerPort: 8079
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: front-end
  labels:
    name: front-end
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 80
    targetPort: 8079
    protocol: TCP
  selector:
    name: front-end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: orders-db
  labels:
    name: orders-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders-db
  template:
    metadata:
      labels:
        name: orders-db
    spec:
      containers:
      - name: orders-db
        image: centos/mongodb-34-centos7
        ports:
        - name: mongo
          containerPort: 27017
        env:
        - name: MONGODB_USER
          value: sock-user
        - name: MONGODB_PASSWORD
          value: password
        - name: MONGODB_DATABASE
          value: data
        - name: MONGODB_ADMIN_PASSWORD
          value: admin
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: orders-db
  labels:
    name: orders-db
spec:
  ports:
    # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    name: orders-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: orders
  labels:
    name: orders
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders
  template:
    metadata:
      labels:
        name: orders
    spec:
      containers:
      - name: orders
        image: weaveworksdemos/orders:0.4.7
        env:
        - name: ZIPKIN
          value: zipkin
        - name: JAVA_OPTS
          value: >-
            -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m
            -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        - name: db
          value: sock-user:password@orders-db
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: orders
  labels:
    name: orders
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: orders
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: payment
  labels:
    name: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      name: payment
  template:
    metadata:
      labels:
        name: payment
    spec:
      containers:
      - name: payment
        image: weaveworksdemos/payment:0.4.3
        env:
        - name: ZIPKIN
          value: http://zipkin:9411/api/v1/spans
        ports:
        - containerPort: 80
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: payment
  labels:
    name: payment
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: queue-master
  labels:
    name: queue-master
spec:
  replicas: 1
  selector:
    matchLabels:
      name: queue-master
  template:
    metadata:
      labels:
        name: queue-master
    spec:
      containers:
      - name: queue-master
        image: weaveworksdemos/queue-master:0.3.1
        ports:
        - containerPort: 80
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: queue-master
  labels:
    name: queue-master
  annotations:
    prometheus.io/path: "/prometheus"
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: queue-master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: rabbitmq
  labels:
    name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      name: rabbitmq
  template:
    metadata:
      labels:
        name: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.6.8
        ports:
        - containerPort: 5672
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: rabbitmq
  labels:
    name: rabbitmq
spec:
  ports:
    # the port that this service should serve on
  - port: 5672
    targetPort: 5672
    name: "amq"
  - port: 4369
    name: "epmd"
  selector:
    name: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: shipping
  labels:
    name: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      name: shipping
  template:
    metadata:
      labels:
        name: shipping
    spec:
      containers:
      - name: shipping
        image: weaveworksdemos/shipping:0.4.8
        env:
        - name: ZIPKIN
          value: zipkin
        - name: JAVA_OPTS
          value: >-
            -Xms64m -Xmx128m -XX:PermSize=32m
            -XX:MaxPermSize=64m -XX:+UseG1GC
            -Djava.security.egd=file:/dev/urandom
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: shipping
  labels:
    name: shipping
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: shipping
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: user-db
  labels:
    name: user-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user-db
  template:
    metadata:
      labels:
        name: user-db
    spec:
      containers:
      - name: user-db
        image: quay.io/redhat-gpst/sockshop-user-db:0.1
        #image: centos/mongodb-34-centos7
        ports:
        - name: mongo
          containerPort: 27017
        env:
        - name: MONGODB_USER
          value: sock-user
        - name: MONGODB_PASSWORD
          value: password
        - name: MONGODB_DATABASE
          value: users
        - name: MONGODB_ADMIN_PASSWORD
          value: admin
        - name: MONGODB_BACKUP_USER
          value: bkuser
        - name: MONGODB_BACKUP_PASSWORD
          value: password
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: user-db
  labels:
    name: user-db
spec:
  ports:
    # the port that this service should serve on
  - port: 27017
    targetPort: 27017
  selector:
    name: user-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: sock-shop
  name: user
  labels:
    name: user
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user
  template:
    metadata:
      labels:
        name: user
    spec:
      containers:
      - name: user
        image: weaveworksdemos/user:0.4.7
        ports:
        - containerPort: 80
        env:
        - name: MONGO_USER
          value: sock-user
        - name: MONGO_PASS
          value: password
        - name: MONGO_HOST
          value: user-db:27017
        - name: ZIPKIN
          value: http://zipkin:9411/api/v1/spans
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  namespace: sock-shop
  name: user
  labels:
    name: user
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 80
  selector:
    name: user
