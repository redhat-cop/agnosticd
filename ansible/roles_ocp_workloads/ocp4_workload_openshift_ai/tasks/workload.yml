---
# Implement your Workload deployment tasks here
- name: Create the projects
  kubernetes.core.k8s:
    state: present
    kind: Namespace
    name: "{{ item }}"
  loop: "{{ ocp4_workload_openshift_ai_namespace_list }}"

- name: Create OpenShift AI Operator Group
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', './templates/redhat-ods-operator-group.yaml.j2' ) | from_yaml  }}"

- name: Create OpenShift AI Operator
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', './templates/redhat-ods-operator-subscription.yaml.j2' ) | from_yaml  }}"
  register: r_ai_operator

- debug:
    msg: r_ai_operator
    verbosity: 2

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Wait until InstallPlan is created"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ ocp4_workload_openshift_ai_namespace }}"
  register: r_install_plans
  vars:
    _query: >-
      [?contains(spec.clusterServiceVersionNames[] | join(',', @), '{{ ocp4_workload_openshift_ai_csv_nameprefix }}') && status.phase ]
  retries: 50
  delay: 10
  until:
  - r_install_plans.resources | default([]) | length > 0
  - r_install_plans.resources | to_json | from_json | json_query(_query)

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Set InstallPlan name"
  set_fact:
    install_operator_install_plan_name: "{{ r_install_plans.resources | to_json | from_json | json_query(query) }}"
  vars:
    query: >-
      [?contains(spec.clusterServiceVersionNames[] | join(',', @), '{{ ocp4_workload_openshift_ai_csv_nameprefix }}')].metadata.name|[0]

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Print InstallPlan"
  debug:
    msg: "InstallPlan: {{ install_operator_install_plan_name }}"

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Get InstallPlan"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ install_operator_install_plan_name }}"
    namespace: "{{ ocp4_workload_openshift_ai_namespace }}"
  register: r_install_plan

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Approve InstallPlan if necessary"
  when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup( 'template', 'installplan.yaml.j2' ) }}"

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Get Installed CSV"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: "{{ ocp4_workload_openshift_ai_operator_name }}"
    namespace: "{{ ocp4_workload_openshift_ai_namespace }}"
  register: r_subscription
  retries: 30
  delay: 10
  until:
  - r_subscription.resources[0].status.currentCSV is defined
  - r_subscription.resources[0].status.currentCSV | length > 0

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Print CSV version to be installed"
  when: install_operator_starting_csv is defined
  debug:
    msg: "Starting CSV: {{ ocp4_workload_openshift_ai_startingCSV: }}"

- name: "{{ ocp4_workload_openshift_ai_operator_name }} - Wait until CSV is installed"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ r_subscription.resources[0].status.currentCSV }}"
    namespace: "{{ ocp4_workload_openshift_ai_namespace }}"
  register: r_csv
  retries: 60
  delay: 30
  until:
  - r_csv.resources[0].status.phase is defined
  - r_csv.resources[0].status.phase | length > 0
  - r_csv.resources[0].status.phase == "Succeeded"
  ignore_errors: "{{ ocp4_workload_openshift_ai_install_csv_ignore_error }}"

- name: Create OpenShift AI Data Science Cluster
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', './templates/redhat-datasciencecluster.yaml.j2' ) | from_yaml  }}"
  register: r_ds_cluster
  until: not r_ds_cluster.failed
  retries: 10
  delay: 30

- debug:
    msg: r_ds_cluster
    verbosity: 2

- name: Update the OpenShift AI config to allow all users
  kubernetes.core.k8s:
    api_version: v1
    kind: ConfigMap
    namespace: "{{ item }}"
    name: rhods-groups-config
    definition:
      labels:
        opendatahub.io/modified: "true"
      data:
        allowed_groups: system:authenticated
  loop: "{{ ocp4_workload_openshift_ai_namespace_list }}"

- name: Get the OpenShift AI dashboard route
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: rhods-dashboard
    namespace: "{{ ocp4_workload_openshift_ai_applications_namespace }}"
  register: r_odh_dashboard_route
  until:
  - r_odh_dashboard_route.resources is defined
  - r_odh_dashboard_route.resources | length > 0
  - r_odh_dashboard_route.resources.0.status.ingress.0.host is defined
  - r_odh_dashboard_route.resources.0.status.ingress.0.host | length > 0
  retries: 30
  delay: 30

- debug: var=r_odh_dashboard_route.resources.0.status.ingress.0.host

- name: Get the OpenShift console route
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: console
    namespace: openshift-console
  register: r_console_route

- name: Remove core-resource-limits for rhods related projects.
  kubernetes.core.k8s:
    api_version: v1
    kind: LimitRange
    name: rhods-notebooks-core-resource-limits
    namespace: rhods-notebooks
    state: absent

- name: Report demo user info (for provisioner)
  agnosticd_user_info:
    msg: "{{ item }}"
  loop:
  - ""
  - "RedHat OpenShift AI Dashboard: https://{{ r_odh_dashboard_route.resources[0].spec.host }}"

- name: Report demo user info (for student)
  agnosticd_user_info:
    msg: |
      Password for user is : 'openshift'
#      ODH Dddashboard: https://{{ r_odh_dashboard_route.resources[0].spec.host }}
    data:
      rhodh_dashboard: "https://{{ r_odh_dashboard_route.resources[0].spec.host }}"
      rhodh_password: openshift

- name: Report demo user info (for multi-user)
  when: ocp4_workload_openshift_ai_is_workshop | bool
  agnosticd_user_info:
    user: "{{ ocp4_workload_authentication_htpasswd_user_base }}{{ item }}"
    msg:
    - "Please open the lab guide first, and follow the instructions you find there."
    - ""
    - "Red Hat OpenShift AI  Dashboard:     https://{{ r_odh_dashboard_route.resources[0].spec.host }}"
    - "OpenShift console: https://{{ r_console_route.resources[0].spec.host }}"
    - ""
    - "Username:          {{ ocp4_workload_openshift_ai_workshop_username_base }}{{ item }}"
    - "Password:          {{ ocp4_workload_openshift_ai_workshop_password }}"
    - "GUID:              {{ guid }}"
  loop: "{{ range(1, 1 + ocp4_workload_openshift_ai_workshop_num_users | int) | list }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
