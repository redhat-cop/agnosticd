---
# vim: set ft=ansible
# Implement your Workload deployment tasks here
- name: Create the projects
  k8s:
    state: present
    kind: Namespace
    name: "{{ item }}"
  loop: "{{ ocp4_workload_rhods_olm_namespace_list }}"

- name: Create the modh puller secret in various namespaces
  k8s:
    state: present
    namespace: "{{ item }}"
    definition: "{{ lookup('template', './templates/pullsecret.yaml.j2' ) | from_yaml }}"
  loop: "{{ ocp4_workload_rhods_olm_namespace_list }}"

- name: Create the modh puller secret in openshift-marketplace
  k8s:
    state: present
    namespace: "openshift-marketplace"
    definition: "{{ lookup('template', './templates/pullsecret.yaml.j2' ) | from_yaml }}"

- name: Create RHODS Pagerduty Secret
  k8s:
    state: present
    definition: "{{ lookup('template', 'pagerduty-secret.yaml.j2' ) }}"

- name: Create CatalogSource for use with catalog snapshot
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/catalogsource.yaml.j2' ) | from_yaml }}"

- name: Create RHODS OperatorGroup
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/operatorgroup.yaml.j2' ) | from_yaml }}"

- name: Create RHODS Operator Subscription
  k8s:
    state: present
    definition: "{{ lookup('template', 'subscription.yaml.j2' ) }}"

- name: Wait until InstallPlan is created
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ ocp4_workload_rhods_olm_odh_namespace }}"
  register: r_install_plans
  vars:
    _query: >-
      [?contains(spec.clusterServiceVersionNames[0], 'rhods-operator')]
  retries: 30
  delay: 5
  until:
  - r_install_plans.resources | length > 0
  - r_install_plans.resources | to_json | from_json | json_query(_query)

- name: Set InstallPlan Name
  set_fact:
    ocp4_workload_rhods_olm_install_plan_name: "{{ r_install_plans.resources | to_json | from_json | json_query(query) }}"
  vars:
    query: >-
      [?contains(spec.clusterServiceVersionNames[0], 'rhods-operator')].metadata.name|[0]

- name: Get InstallPlan
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ ocp4_workload_rhods_olm_install_plan_name }}"
    namespace: "{{ ocp4_workload_rhods_olm_odh_namespace }}"
  register: r_install_plan

- name: Approve InstallPlan if necessary
  when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
  k8s:
    state: present
    definition: "{{ lookup( 'template', './templates/installplan.j2' ) }}"

- name: Get Installed CSV
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: addon-managed-odh
    namespace: "{{ ocp4_workload_rhods_olm_odh_namespace }}"
  register: r_subscription
  retries: 30
  delay: 5
  until:
  - r_subscription.resources[0].status.currentCSV is defined
  - r_subscription.resources[0].status.currentCSV | length > 0

- name: Wait until CSV is Installed
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ r_subscription.resources[0].status.currentCSV }}"
    namespace: "{{ ocp4_workload_rhods_olm_odh_namespace }}"
  register: r_csv
  retries: 15
  delay: 5
  until:
  - r_csv.resources[0].status.phase is defined
  - r_csv.resources[0].status.phase | length > 0
  - r_csv.resources[0].status.phase == "Succeeded"

- name: Get the ODH dashboard route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: odh-dashboard
    namespace: "{{ ocp4_workload_rhods_olm_applications_namespace }}"
  register: r_odh_dashboard_route

- name: Report demo user info
  agnosticd_user_info:
    msg: "{{ item }}"
  loop:
    - ""
    - "Here are the URLs that you need for the demo (open each in a browser tab):"
    - ""
    - "ODH Dashboard: https://{{ r_odh_dashboard_route.resources[0].spec.host }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
