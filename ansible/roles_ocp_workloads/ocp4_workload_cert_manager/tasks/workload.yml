---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  ansible.builtin.debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Install Red Hat Cert Manager operator
  ansible.builtin.include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_namespace: cert-manager-operator
    install_operator_name: openshift-cert-manager-operator
    install_operator_csv_nameprefix: cert-manager-operator
    install_operator_manage_namespaces:
    - cert-manager-operator
    install_operator_channel: "{{ ocp4_workload_cert_manager_channel }}"
    install_operator_catalog: redhat-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_cert_manager_automatic_install_plan_approval | default(true) }}"
    install_operator_starting_csv: "{{ ocp4_workload_cert_manager_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_cert_manager_use_catalog_snapshot | default(false) }}"
    install_operator_catalogsource_name: "{{ ocp4_workload_cert_manager_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: cert-manager-operator
    install_operator_catalogsource_image: "{{ ocp4_workload_cert_manager_catalog_snapshot_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_cert_manager_catalog_snapshot_image_tag | default('') }}"

- name: Update CertManager for EC2 or GCP to use external DNS
  when: >
    ocp4_workload_cert_manager_cloud_provider == "ec2" or
    ocp4_workload_cert_manager_cloud_provider == "gcp"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'certmanager.yaml.j2') }}"

- name: Determine API server URL
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
  register: r_api_url

- name: Determine cluster wildcard domain
  kubernetes.core.k8s_info:
    api_version: operator.openshift.io/v1
    kind: IngressController
    name: default
    namespace: openshift-ingress-operator
  register: r_ingress_controller

- name: Set DNS facts
  ansible.builtin.set_fact:
    _ocp4_workload_cert_manager_api_hostname: >-
      {{ r_api_url.resources[0].status.apiServerURL | urlsplit('hostname') }}
    _ocp4_workload_cert_manager_wildcard_domain: >-
      {{ r_ingress_controller.resources[0].status.domain }}

- name: Print API and wildcard domain
  ansible.builtin.debug:
    msg: >-
      API: {{ _ocp4_workload_cert_manager_api_hostname }},
      Wildcard Domain: *.{{ _ocp4_workload_cert_manager_wildcard_domain }}

- name: Wait until CertManager is ready
  kubernetes.core.k8s_info:
    api_version: operator.openshift.io/v1alpha1
    kind: CertManager
    name: cluster
    wait: true
    wait_sleep: 5
    wait_timeout: 800
    wait_condition:
      type: "cert-manager-controller-deploymentAvailable"
      status: "True"
  register: r_cert_manager

- name: Create ZeroSSL credentials secret for cert manager
  when: ocp4_workload_cert_manager_provider == "zerossl"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'secret-zerossl-credentials.yaml.j2') }}"

- name: Set up cloud provider specific prerequisites for cert manager
  ansible.builtin.include_tasks: "cert_manager_{{ ocp4_workload_cert_manager_cloud_provider }}.yml"

- name: Set up ClusterIssuer and request certificates
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) }}"
  loop:
  - clusterissuer.yaml.j2
  - certificate-ingress.yaml.j2
  - certificate-api.yaml.j2

- name: Install Ingress controller certificate
  when: ocp4_workload_cert_manager_install_ingress_certificates | bool
  vars:
    ingress_cert_retry_counter: 0
    ingress_cert_max_retries: 3
  block:

  - name: Run ingress controller certificate check task
    ansible.builtin.include_tasks: cert_manager_ingress_cert_check.yml
    with_sequence: start=0 end={{ ingress_cert_max_retries }}

  - name: Update Ingress controller to use certificate
    when: not r_certificate_ingress is failed
    kubernetes.core.k8s:
      state: present
      definition: "{{ lookup('template', 'default-ingress-controller.yaml.j2') }}"

- name: Install API Server certificate
  when: ocp4_workload_cert_manager_install_api_certificates | bool
  vars:
    api_cert_retry_counter: 0
    api_cert_max_retries: 3
  block:

  - name: Run API certificate check task
    ansible.builtin.include_tasks: cert_manager_api_cert_check.yml
    with_sequence: start=0 end={{ api_cert_max_retries }}

  - name: API Certificate successfull
    when: not r_certificate_api is failed
    block:
    - name: Update API server to use certificate
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'api-server.yaml.j2') }}"

    # It takes about 4 minutes per API Server to
    # restart with certificates (due to AWS
    # Load Balancer). Can't really check the cluster operator because once the updates have rolled out
    # subsequent checks will fail. :-(. Need to just sleep.
    - name: Wait for Cluster Operator kube-apiserver to finish rolling out
      ansible.builtin.pause:
        minutes: "{{ ocp4_workload_cert_manager_wait_after_api_cert_setup | int }}"

    - name: Find all Kube Configs
      become: true
      ansible.builtin.find:
        file_type: file
        hidden: true
        paths:
        - /root
        - /home
        contains: "^ +certificate-authority-data:"
        patterns: "*config*"
        recurse: true
      register: r_config_files

    - name: Fix Kube Configs
      become: true
      ansible.builtin.replace:
        path: "{{ item.path }}"
        regexp: "^ +certificate-authority-data:.*"
      loop: "{{ r_config_files.files }}"

    - name: Make sure API calls succeed
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: Ingress
        name: cluster
      register: r_ingress_config
      retries: 30
      delay: 10
      until: not r_ingress_config.failed

# Leave this as the last task in the playbook.
- name: Workload tasks complete
  when: not silent | bool
  ansible.builtin.debug:
    msg: "Workload Tasks completed successfully."
