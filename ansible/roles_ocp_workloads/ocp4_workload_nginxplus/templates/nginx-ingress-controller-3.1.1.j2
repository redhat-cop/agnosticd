apiVersion: charts.nginx.org/v1alpha1
kind: NginxIngress
metadata:
  name: {{ ocp4_workload_nginxplus_ic_instance_name }}
  namespace: {{ ocp4_workload_nginxplus_namespace }}
spec:
  controller:
    kind: deployment
    annotations: {}
    nginxplus: true
    nginxReloadTimeout: 60000
    appprotect:
      enable: false
      # logLevel: fatal
    appprotectdos:
      enable: false
      debug: false
      maxWorkers: 0
      maxDaemons: 0
      memory: 0
    hostNetwork: false
    dnsPolicy: ClusterFirst
    nginxDebug: false
    logLevel: 1
    customPorts: []
    image:
      repository: {{ ocp4_workload_nginxplus_registry_url }}
      tag: {{ ocp4_workload_nginxplus_image_tag }}
      # digest: "sha256:CHANGEME"
      pullPolicy: IfNotPresent
    lifecycle: {}
    customConfigMap: ""
    config:
      # name: nginx-config
      annotations: {}
      entries: {}
    defaultTLS:
      secret: {{ ocp4_workload_nginxplus_namespace }}/default-server-secret
    wildcardTLS:
      secret:
    # nodeSelector: {}
    terminationGracePeriodSeconds: 30
    autoscaling:
      enabled: false
      annotations: {}
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
    # limits:
    #   cpu: 1
    #   memory: 1Gi
    tolerations: []
    affinity: {}
    # topologySpreadConstraints: {}
    ## The additional environment variables to be set on the Ingress Controller pods.
    env: []
    # - name: MY_VAR
    #   value: myvalue
    volumes: []
    # - name: extra-conf
    #   configMap:
    #     name: extra-conf
    volumeMounts: []
    # - name: extra-conf
    #   mountPath: /etc/nginx/conf.d/extra.conf
    #   subPath: extra.conf
    initContainers: []
    # - name: init-container
    #   image: busybox:1.34
    #   command: ['sh', '-c', 'echo this is initial setup!']
    minReadySeconds: 0
    ## Pod disruption budget for the Ingress Controller pods.
    podDisruptionBudget:
      ## Enables PodDisruptionBudget.
      enabled: false
      ## The annotations of the Ingress Controller pod disruption budget.
      annotations: {}
      ## The number of Ingress Controller pods that should be available. This is a mutually exclusive setting with "maxUnavailable".
      # minAvailable: 1
      ## The number of Ingress Controller pods that can be unavailable. This is a mutually exclusive setting with "minAvailable".
      # maxUnavailable: 1

    strategy: {}
    extraContainers: []
    # - name: container
    #   image: busybox:1.34
    #   command: ['sh', '-c', 'echo this is a sidecar!']
    replicaCount: 1
    ingressClass: nginx
    setAsDefaultIngress: false
    watchNamespace: ""
    watchNamespaceLabel: ""
    watchSecretNamespace: ""
    enableCustomResources: true
    enablePreviewPolicies: false
    enableOIDC: false
    includeYear: false
    enableTLSPassthrough: false
    enableCertManager: false
    enableExternalDNS: false
    globalConfiguration:
      create: false
      spec: {}
        # listeners:
        # - name: dns-udp
        #   port: 5353
        #   protocol: UDP
        # - name: dns-tcp
        #   port: 5353
        #   protocol: TCP
    enableSnippets: false
    healthStatus: false
    healthStatusURI: "/nginx-health"
    nginxStatus:
      enable: true
      port: 8080
      allowCidrs: "{{ ocp4_workload_nginxplus_ic_cidr }}"
    service:
      create: true
      type: LoadBalancer
      externalTrafficPolicy: Local
      annotations: {}
      extraLabels: {}
      loadBalancerIP: ""
      externalIPs: []
      loadBalancerSourceRanges: []
      # name: nginx-ingress
      # allocateLoadBalancerNodePorts: false
      # ipFamilyPolicy: SingleStack
      # ipFamilies:
      #   - IPv6
      httpPort:
        enable: true
        port: 80
        # nodePort: 80
        targetPort: 80
      httpsPort:
        enable: true
        port: 443
        # nodePort: 443
        targetPort: 443
      customPorts: []
    serviceAccount:
      annotations: {}
      # name: nginx-ingress
      imagePullSecretName: ""
    serviceMonitor:
      create: false
      # name: nginx-ingress
      labels: {}
      selectorMatchLabels: {}
      endpoints: []
    reportIngressStatus:
      enable: true
      # externalService: nginx-ingress
      ## controller.reportIngressStatus.enable must be set to true.
      ingressLink: ""
      enableLeaderElection: true
      # leaderElectionLockName: "nginx-ingress-leader-election"
      annotations: {}
    pod:
      annotations: {}
      extraLabels: {}
    # priorityClassName: ""
    readyStatus:
      enable: true
      port: 8081
      initialDelaySeconds: 0
    enableLatencyMetrics: false
    disableIPV6: false
  ## Configure root filesystem as read-only and add volumes for temporary data.
  readOnlyRootFilesystem: false
  rbac:
    create: true
  prometheus:
    create: true
    port: 9113
    secret: ""
    scheme: http
  serviceInsight:
    create: false
    port: 9114
    secret: ""
    scheme: http
  nginxServiceMesh:
    enable: false
    enableEgress: false