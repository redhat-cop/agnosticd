---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    template.openshift.io/expose-password: '{.data[''database-password'']}'
  name: redis
stringData:
  database-password: redis

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
  name: redis
spec:
  ports:
  - name: redis
    nodePort: 0
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    name: redis
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  name: redis
spec:
  replicas: 1
  selector:
    name: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: redis
    spec:
      containers:
      - capabilities: {}
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: redis
        image: ' '
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: 6379
          timeoutSeconds: 1
        name: redis
        ports:
        - containerPort: 6379
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: 1Gi
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/redis/data
          name: redis-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - redis
      from:
        kind: ImageStreamTag
        name: redis:5
        namespace: openshift
      lastTriggeredImage: ""
    type: ImageChange
  - type: ConfigChange
