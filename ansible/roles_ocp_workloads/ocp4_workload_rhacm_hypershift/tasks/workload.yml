---
# Implement your Workload deployment tasks here
- name: Setting up workload for user
  ansible.builtin.debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

#############################################################################
# Prerequisite Checks
#############################################################################

- name: Ensure RHACM MultiClusterHub is deployed
  kubernetes.core.k8s_info:
    api_version: "operator.open-cluster-management.io/v1"
    kind: MultiClusterHub
    name: multiclusterhub
    namespace: open-cluster-management
  register: r_rhacm_multiclusterhub

- name: Assert that MultiClusterHub is available
  ansible.builtin.assert:
    that:
    - r_rhacm_multiclusterhub.resources | length == 1
    - r_rhacm_multiclusterhub.resources[0].status.phase is defined
    - r_rhacm_multiclusterhub.resources[0].status is defined
    - r_rhacm_multiclusterhub.resources[0].status.phase == "Running"
    # quiet: true
    fail_msg: "MultiClusterHub not found on cluster. Can not continue."
    success_msg: "MultiClusterHub found on cluster. Ready to set up Hypershift."

- name: Assert that MultiClusterHub is version 2.9.0 or higher
  ansible.builtin.assert:
    that: "r_rhacm_multiclusterhub.resources[0].status.currentVersion is version('2.9.0', '>=')"
    quiet: true
    fail_msg: "MultiClusterHub not at version 2.9.0 or higher. Please upgrade your RHACM. Can not continue."
    success_msg: "MultiClusterHub found on cluster in version 2.9.0 or higher. Ready to set up Hypershift."

#############################################################################
# AWS S3 bucket setup
#############################################################################

# WK: amazon.aws.s3_bucket does not work because of unmet k8s virtualenv dependencies
- name: Create AWS S3 bucket
  # amazon.aws.s3_bucket:
  s3_bucket:
    name: "{{ ocp4_workload_rhacm_hypershift_s3_bucket_name }}"
    region: "{{ ocp4_workload_rhacm_hypershift_s3_bucket_region }}"
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    # public_access:
    #   block_public_acls: false
    #   block_public_policy: false
    #   ignore_public_acls: true
    #   restrict_public_buckets: false

- name: Update s3 bucket
  ansible.builtin.command:
    cmd: >-
      aws s3api delete-public-access-block
        --bucket {{ ocp4_workload_rhacm_hypershift_s3_bucket_name }}

- name: Copy policy file
  ansible.builtin.template:
    src: bucket-policy.json.j2
    dest: /tmp/bucket-policy.json

- name: Apply bucket policy
  ansible.builtin.command:
    chdir: /tmp
    cmd: >-
      aws s3api put-bucket-policy
        --bucket {{ ocp4_workload_rhacm_hypershift_s3_bucket_name }}
        --policy file://bucket-policy.json

- name: Remove temporary policy file
  ansible.builtin.file:
    state: absent
    path: /tmp/bucket-policy.json

#############################################################################
# Enable HyperShift Tech Preview
#############################################################################

# - name: Enable HyperShift Tech Preview
#   kubernetes.core.k8s:
#     state: patched
#     api_version: multicluster.openshift.io/v1
#     kind: MultiClusterEngine
#     name: multiclusterengine
#     definition:
#       spec:
#         overrides:
#           components:
#           - name: hypershift-preview
#             enabled: true
#           - name: hypershift-local-hosting
#             enabled: true

# - name: Create ManagedClusterAddon
#   kubernetes.core.k8s:
#     state: present
#     definition: "{{ lookup('file', 'managedclusteraddon.yaml') }}"

#############################################################################
# Configure HyperShift
#############################################################################

- name: Create s3 credentials secret
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'secret-s3-credentials.yaml.j2') }}"

- name: Generate an OpenSSH keypair for HyperShift
  community.crypto.openssh_keypair:
    path: "~{{ ansible_user }}/.ssh/{{ ocp4_workload_rhacm_key_pair_name }}"
  register: r_hypershift_key

- name: Read private key from filesystem
  ansible.builtin.slurp:
    src: "~{{ ansible_user }}/.ssh/{{ ocp4_workload_rhacm_key_pair_name }}"
  register: r_hypershift_private_key

- name: Read public key from filesystem
  ansible.builtin.slurp:
    src: "~{{ ansible_user }}/.ssh/{{ ocp4_workload_rhacm_key_pair_name }}.pub"
  register: r_hypershift_public_key

- name: Create hypershift aws credentials secret
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'secret-aws-credentials.yaml.j2') }}"

#############################################################################
# Install HCP CLI
#############################################################################

- name: Wait until HCP CLI download deployment is ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    namespace: multicluster-engine
    name: hcp-cli-download
  register: r_hcp_cli_deployment
  retries: 60
  delay: 30
  until:
  - r_hcp_cli_deployment.resources | length | int > 0
  - r_hcp_cli_deployment.resources[0].status.readyReplicas is defined
  - r_hcp_cli_deployment.resources[0].status.readyReplicas | int == r_hcp_cli_deployment.resources[0].spec.replicas | int

- name: Get HCP CLI download URL
  kubernetes.core.k8s_info:
    api_version: console.openshift.io/v1
    kind: ConsoleCLIDownload
    name: hcp-cli-download
  register: r_hcp_cli_download
  retries: 20
  delay: 10
  until: r_hcp_cli_download.resources | length > 0

- name: Set HCP CLI download URL
  when: r_hcp_cli_download.resources | length > 0
  ansible.builtin.set_fact:
    _ocp4_workload_rhacm_hcp_cli_url: >-
      {{ r_hcp_cli_download.resources[0] | to_json | from_json
      | json_query("spec.links[?contains(href,'/linux/amd64')].href") | first }}

- name: Download HCP CLI
  ansible.builtin.get_url:
    url: "{{ _ocp4_workload_rhacm_hcp_cli_url }}"
    validate_certs: false
    dest: /tmp/hcp.tar.gz
    mode: 0660
  register: r_hcp_cli
  until: r_hcp_cli is success
  retries: 10
  delay: 10

# - name: Get currently installed RHACM version
#   kubernetes.core.k8s_info:
#     api_version: operators.coreos.com/v1alpha1
#     kind: ClusterServiceVersion
#     namespace: open-cluster-management
#     label_selectors:
#     - "operators.coreos.com/advanced-cluster-management.open-cluster-management ="
#   register: r_rhacm_csv

- name: Install HCP CLI on bastion
  become: true
  ansible.builtin.unarchive:
    src: /tmp/hcp.tar.gz
    remote_src: true
    dest: /usr/bin
    mode: "0775"
    owner: root
    group: root
  args:
    creates: /usr/bin/hcp

- name: Remove downloaded file
  ansible.builtin.file:
    state: absent
    path: /tmp/hcp.tar.gz

- name: Setup HCP CLI bash completion
  become: true
  ansible.builtin.shell: "/usr/bin/hcp completion bash >/etc/bash_completion.d/hcp"
  args:
    creates: /etc/bash_completion.d/hcp

#############################################################################
# Set up RHDP Configuration
# Automatically configure newly deployed HCP clusters
#############################################################################

- name: Set up RHDP Configuration
  when: ocp4_workload_rhacm_hypershift_rhdp_policies_setup | bool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) }}"
  loop:
  - rhdp/clusterrolebinding.yaml.j2
  - rhdp/namespace-channels.yaml.j2
  - rhdp/namespace-applications.yaml.j2
  - rhdp/namespace-policies.yaml.j2
  - rhdp/secret.yaml.j2
  - rhdp/channel.yaml.j2
  - rhdp/placement.yaml.j2
  - rhdp/subscription.yaml.j2
  - rhdp/application.yaml.j2
  - rhdp/managedclustersetbinding.yaml.j2

#############################################################################
# Set up ManagedClusterSet Policies
#############################################################################

- name: Set up ManagedClusterSet
  when: ocp4_workload_rhacm_hypershift_managed_cluster_set_setup | bool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) }}"
  loop:
  - managedclusterset/namespace-submariner-broker.yaml.j2
  - managedclusterset/managedclusterset.yaml.j2
  - managedclusterset/managedclustersetbinding.yaml.j2

#############################################################################
# Wait for ConfigMap kube-public/oidc-storage-provider-s3-config to be
# available before proceeding
#############################################################################

- name: Wait for ConfigMap kube-public/oidc-storage-provider-s3-config
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: oidc-storage-provider-s3-config
    namespace: kube-public
  register: r_oidc_configmap
  until:
  - r_oidc_configmap.resources is defined
  - r_oidc_configmap.resources | length > 0
  retries: 60
  delay: 10

#############################################################################
# Deploy managed HyperShift clusters
#############################################################################

- name: Deploy Hypershift clusters
  when: ocp4_workload_rhacm_hypershift_deploy_clusters | length > 0
  ansible.builtin.include_tasks: create_hypershift_cluster.yml
  vars:
    _ocp4_workload_rhacm_hypershift_cluster_name: "{{ cluster.name }}"
    _ocp4_workload_rhacm_hypershift_cluster_infra_id: "{{ cluster.infra_id }}"
    _ocp4_workload_rhacm_hypershift_cluster_ocp_release: "{{ cluster.ocp_release }}"
    _ocp4_workload_rhacm_hypershift_cluster_control_plane_availability: "{{ cluster.control_plane_availability | default('SingleReplica') }}"
    _ocp4_workload_rhacm_hypershift_cluster_infra_availability: "{{ cluster.infra_availability | default('SingleReplica') }}"
    _ocp4_workload_rhacm_hypershift_cluster_etc_storage_class: "{{ cluster.etcd_storage_class | default('gp3-csi') }}"
    _ocp4_workload_rhacm_hypershift_cluster_nodepool_replicas: "{{ cluster.nodepool_replicas }}"
    _ocp4_workload_rhacm_hypershift_cluster_worker_instance_type: "{{ cluster.worker_instance_type }}"
    _ocp4_workload_rhacm_hypershift_cluster_root_volume_type: "{{ cluster.root_volume_type | default('gp3') }}"
    _ocp4_workload_rhacm_hypershift_cluster_root_volume_size: "{{ cluster.root_volume_size | default('120') }}"
    _ocp4_workload_rhacm_hypershift_cluster_network_type: "{{ cluster.network_type | default('OVNKubernetes') }}"
    _ocp4_workload_rhacm_hypershift_cluster_region: "{{ cluster.region }}"
    _ocp4_workload_rhacm_hypershift_cluster_zones: "{{ cluster.zones | default([]) }}"
    _ocp4_workload_rhacm_hypershift_cluster_labels: "{{ cluster.labels | default([]) }}"
  loop: "{{ ocp4_workload_rhacm_hypershift_deploy_clusters }}"
  loop_control:
    label: "{{ cluster.name }}"
    loop_var: cluster

#############################################################################
# AgnosticD User Data
#############################################################################

- name: Save access information for all deployed clusters
  when: ocp4_workload_rhacm_hypershift_deploy_clusters | length > 0
  ansible.builtin.include_tasks:
    file: get_cluster_credentials.yml
  vars:
    _ocp4_workload_rhacm_hypershift_cluster_name: "{{ item.name }}"
  loop: "{{ ocp4_workload_rhacm_hypershift_deploy_clusters }}"
  loop_control:
    label: "{{ item.name }}"

- name: Save user data for S3 bucket
  agnosticd_user_info:
    data:
      hypershift_s3_bucket_name: "{{ ocp4_workload_rhacm_hypershift_s3_bucket_name }}"
      hypershift_s3_region: "{{ ocp4_workload_rhacm_hypershift_s3_bucket_region }}"
      hypershift_s3_access_key_id: "{{ aws_access_key_id }}"
      hypershift_s3_secret_access_key: "{{ aws_secret_access_key }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
