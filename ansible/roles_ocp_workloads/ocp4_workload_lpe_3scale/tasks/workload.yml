---
# Install the 3scale Operator
- name: Install Operator
  include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: "{{ ocp4_workload_lpe_3scale_operator_package_name }}"
    install_operator_namespace: "{{ ocp4_workload_lpe_3scale_namespace }}"
    install_operator_channel: "{{ ocp4_workload_lpe_3scale_current_channel | default('')}}"
    install_operator_csv_nameprefix: "{{ ocp4_workload_lpe_3scale_operator_package_name }}"
    install_operator_catalog: redhat-operators
    install_operator_automatic_install_plan_approval: "true"
    install_operator_starting_csv: "{{ ocp4_workload_lpe_3scale_current_csv | default('')}}"
    install_operator_catalogsource_setup: "false"
    install_operator_manage_namespaces: 
    - "{{ ocp4_workload_lpe_3scale_namespace }}"

# Install minio object storage for s3
- name: Include Minio Deployment & S3 Configuration
  include_tasks: 
    file: ./files/minio_s3_config.yml

# Deploy 3scale API manager
- name: Deploy 3scale API Manager (with Minio S3)
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/smtp.yml.j2
  - ./templates/apimanager-s3.yml.j2

# Wait to APIManager resource creation
- name: Wait for 3scale pods to be ready
  k8s_facts:
    api_version: v1
    kind: DeploymentConfig
    namespace: "{{ ocp4_workload_lpe_3scale_namespace }}"
    name: apicast-production
  register: r_dc
  until:
    - r_dc is defined
    - r_dc.resources is defined
    - r_dc.resources | list | length > 0
    - r_dc.resources[0].status is defined
    - r_dc.resources[0].status.readyReplicas is defined
    - r_dc.resources[0].status.readyReplicas | int >= 1
  retries: 60
  delay: 15

  # Get the Master Access Token
- name: Get the Master Access Token
  shell: >
    oc get secret system-seed -o json -n "{{ ocp4_workload_lpe_3scale_namespace }}" | jq -r .data.MASTER_ACCESS_TOKEN | base64 -d
  register: ocp4_workload_lpe_3scale_system_seed_master_token_stdout
  ignore_errors: True

# Get the Master Password
- name: Get the Master Password
  shell: >
    oc get secret system-seed -o json -n "{{ ocp4_workload_lpe_3scale_namespace }}" | jq -r .data.MASTER_PASSWORD | base64 -d
  register: ocp4_workload_lpe_3scale_system_seed_master_password_stdout
  ignore_errors: True

# Get the Provider Tenant Admin Password
- name: Get the Provider Admin Password
  shell: >
    oc get secret system-seed -o json -n "{{ ocp4_workload_lpe_3scale_namespace }}" | jq -r .data.ADMIN_PASSWORD | base64 -d
  register: ocp4_workload_lpe_3scale_system_seed_admin_password_stdout
  ignore_errors: True

- set_fact:
    ocp4_workload_lpe_3scale_master_access_token: '{{ocp4_workload_lpe_3scale_system_seed_master_token_stdout["stdout"]}}'

- set_fact:
    ocp4_workload_lpe_3scale_master_password: '{{ocp4_workload_lpe_3scale_system_seed_master_password_stdout["stdout"]}}'

- set_fact:
    ocp4_workload_lpe_3scale_admin_password: '{{ocp4_workload_lpe_3scale_system_seed_admin_password_stdout["stdout"]}}'

- set_fact:
    ocp4_workload_lpe_3scale_master_api_host: "https://{{ ocp4_workload_lpe_3scale_master_access_token }}@master.{{ocp4_workload_lpe_3scale_ocp_apps_domain}}"

- set_fact:
    ocp4_workload_lpe_3scale_create_tenant_url: "https://master.{{ocp4_workload_lpe_3scale_ocp_apps_domain}}/master/api/providers.xml"

- name: Update notification email information
  shell: oc set env dc/system-sidekiq NOTIFICATION_EMAIL={{ ocp4_workload_lpe_3scale_admin_email_user }}@{{ ocp4_workload_lpe_3scale_admin_email_domain }} -n "{{ ocp4_workload_lpe_3scale_namespace }}"

- name: Update support email information
  shell: oc set env dc/system-app SUPPORT_EMAIL={{ ocp4_workload_lpe_3scale_admin_email_user }}@{{ ocp4_workload_lpe_3scale_admin_email_domain }} -n "{{ ocp4_workload_lpe_3scale_namespace }}"

# Start creating the default tenant
- block:
  - name: "Tenant prep"
    include_tasks: 
      file: ./files/3scale_single_tenant.yml
  when: ocp4_workload_lpe_3scale_create_tenant|bool