---
- name: create namespace {{ ocp4_workload_app_mod_demo_legacy_namespace }}
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ ocp4_workload_app_mod_demo_legacy_namespace }}"
    definition:
      metadata:
        name: "{{ ocp4_workload_app_mod_demo_legacy_namespace }}"
        annotations:
          openshift.io/description: "Legacy Applications"
          openshift.io/display-name: "Legacy Applications"

- name: create namespace {{ ocp4_workload_app_mod_demo_modern_namespace }}
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ ocp4_workload_app_mod_demo_modern_namespace }}"
    definition:
      metadata:
        name: "{{ ocp4_workload_app_mod_demo_modern_namespace }}"
        annotations:
          openshift.io/description: "Modernized Applications"
          openshift.io/display-name: "Modernized Applications"

- name: create oracle and tomcat vms
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - kubevirt/vm-oracle.yaml.j2
  - kubevirt/vm-tomcat.yaml.j2
  - kubevirt/service-oracle.yaml.j2
  - kubevirt/service-tomcat.yaml.j2

- name: create postgresql database orders
  vars:
    postgresql_service_name: postgresql-orders
    postgresql_database_name: orders
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - postgresql/pvc.yaml.j2
  - postgresql/secret.yaml.j2
  - postgresql/deployment.yaml.j2
  - postgresql/service.yaml.j2

- name: create postgresql database inventory
  vars:
    postgresql_service_name: postgresql-inventory
    postgresql_database_name: inventory
    postgresql_database_user: inventory
    postgresql_database_password: inventory
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - postgresql/pvc.yaml.j2
  - postgresql/secret.yaml.j2
  - postgresql/deployment.yaml.j2
  - postgresql/service.yaml.j2

- name: create service orders
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - orders/configmap.yaml.j2
  - orders/secret.yaml.j2
  - orders/deployment.yaml.j2
  - orders/service.yaml.j2

- name: create service inventory
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - inventory/rolebinding.yaml.j2
  - inventory/configmap.yaml.j2
  - inventory/deployment.yaml.j2
  - inventory/service.yaml.j2

- name: create service gateway
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - gateway/configmap.yaml.j2
  - gateway/deployment.yaml.j2
  - gateway/service.yaml.j2

- name: create service frontend modern
  vars:
    frontend_gateway_url: http://gateway:8080
    frontend_namespace: "{{ ocp4_workload_app_mod_demo_modern_namespace }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - frontend/configmap.yaml.j2
  - frontend/deployment.yaml.j2
  - frontend/service.yaml.j2
  - frontend/route.yaml.j2

- name: create service frontend legacy
  vars:
    frontend_gateway_url: http://tomcat:8080
    frontend_namespace: "{{ ocp4_workload_app_mod_demo_legacy_namespace }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - frontend/configmap.yaml.j2
  - frontend/deployment.yaml.j2
  - frontend/service.yaml.j2
  - frontend/route.yaml.j2

# The download of the qcow2 image takes too long when the cluster is not
# colocated in the same region as the s3 bucket (us-east-2).
# One possible solution is to set up bucket cross replication.
- name: wait for vm oracle is ready
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachine
    name: oracle
    namespace: "{{ ocp4_workload_app_mod_demo_legacy_namespace }}"
  register: vm_oracle
  retries: 100
  delay: 30
  until:
  - vm_oracle.resources[0].status is defined
  - vm_oracle.resources[0].status.ready is true

- name: start vm tomcat
  kubernetes.core.k8s:
    state: patched
    kind: VirtualMachine
    name: tomcat
    namespace: "{{ ocp4_workload_app_mod_demo_legacy_namespace }}"
    definition:
      spec:
        running: true

- name: wait for vm tomcat is ready
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachine
    name: tomcat
    namespace: "{{ ocp4_workload_app_mod_demo_legacy_namespace }}"
  register: vm_tomcat
  retries: 100
  delay: 30
  until:
  - vm_tomcat.resources[0].status is defined
  - vm_tomcat.resources[0].status.ready is true
