authenticator: null
bombastic:
  bucket: bombastic
  topics:
    failed: sbom-failed
    indexed: sbom-indexed
    stored: sbom-stored
tracing:
  enabled: false
# Enables using cluster's TLS certificates for services communication, this is
# required for TPA on OpenShift given it will rely on TLS for internal
# communication.
openshift:
  useServiceCa: true
ingress:
  className: openshift-default
# TPA's file storage (S3).
minio:
  enabled: true
  # Minio's administrator (root) password
  rootPassword: {{ ocp4_workload_trusted_profile_analyzer_minio_root_password }}
  podSecurityContext:
    enabled: false
  containerSecurityContext:
    enabled: false
  persistence:
    # MinIO PVC size.
    size: 5Gi
# Bitnami's Keycloak IAM.
keycloak:
  enabled: true
  production: true
  # Rely on cluster's TLS for the Keycloak's ingress/routes, each endpoint is
  # "re-encrypted" (`reencrypt`) with cluster's SSL capabilities.
  proxy: reencrypt
  podSecurityContext:
    enabled: false
  containerSecurityContext:
    enabled: false
  auth:
    adminUser: admin
    # Keycloak's administrator (admin) password.
    adminPassword: {{ ocp4_workload_trusted_profile_analyzer_keycloak_admin_password }}
  tls:
    enabled: true
    existingSecret: sso-tls
    usePem: true
  service:
    annotations:
      # OpenShift's annotation to use the named Secret for SSL communication,
      # the Secret contains the certificate and key pair for Keycloak.
      service.beta.openshift.io/serving-cert-secret-name: sso-tls
  ingress:
    enabled: true
    ingressClassName: openshift-default
    servicePort: https
    annotations:
      # Following the same approach taken for Ingress routes on OpenShift,
      # making sure the endpoint is "re-encrypted" (`reencrypt`).
      route.openshift.io/termination: reencrypt
  # PostgreSQL database for TPA and GUAC.
  postgresql:
    auth:
      # PostgreSQL's administrator (postgres) password.
      postgresPassword: {{ ocp4_workload_trusted_profile_analyzer_postgres_password }}
      # Additional user for TPA's database.
      username: trusted-profile-analyzer
      # TPA's database user password.
      password: {{ ocp4_workload_trusted_profile_analyzer_postgres_tpa_password }}
    primary:
      containerSecurityContext:
        enabled: false
      podSecurityContext:
        enabled: false
# TPA's event-bus using Kafka.
kafka:
  enabled: true
  kraft:
    clusterId: "3nA2qspzReOmcxqlkmITAA"
  controller:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
  provisioning:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
# TPA's file storage configuration, points back to Minio, defined previously.
storage:
  endpoint: http://tpa-infrastructure-minio:9000
  accessKey:
    valueFrom:
      secretKeyRef:
        name: tpa-infrastructure-minio
        key: root-user
  secretKey:
    valueFrom:
      secretKeyRef:
        name: tpa-infrastructure-minio
        key: root-password
# TPA's event-bus configuration, points back to Kafka, defined previously.
eventBus:
  type: kafka
  bootstrapServers: tpa-infrastructure-kafka:9092
  config:
    securityProtocol: SASL_PLAINTEXT
    username: "user1"
    password:
      valueFrom:
        secretKeyRef:
          name: tpa-infrastructure-kafka-user-passwords
          key: client-passwords
    mechanism: PLAIN
# TPA's OIDC (OpenID Connect) configuration.
oidc:
  clients:
    frontend: {}
    walker:
      clientSecret:
        # OIDC client secret for the Walker module.
        value: {{ ocp4_workload_trusted_profile_analyzer_walker_client_secret }}
    testingUser:
      clientSecret:
        # OIDC client secret for the Testing User module.
        value: {{ ocp4_workload_trusted_profile_analyzer_testing_user_client_secret }}
    testingManager:
      clientSecret:
        # OIDC client secret for the Testing Manager module.
        value: {{ ocp4_workload_trusted_profile_analyzer_testing_manager_client_secret }}
# TPA's modules configuration.
modules:
  bombasticWalker:
    sources:
      redhat:
        url: https://access.redhat.com/security/data/sbom/beta/
        signingKeyUrl: https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4
        acceptV3Signatures: true
        fixLicenses: true
        job:
          schedule: "0 * * * *"
  vexinationWalker:
    sources:
      redhat:
        url: https://www.redhat.com/.well-known/csaf/provider-metadata.json
        acceptV3Signatures: true
        ignoreDistributions:
          - https://access.redhat.com/security/data/csaf/v2/advisories/
        job:
          schedule: "0 * * * *"
# TPA's GUAC (Graph for Understanding Artifact Composition) configuration.
guac:
  database:
    name: guac
    host: tpa-infrastructure-postgresql
    sslMode: disable
    username: guac
    # GUAC administrator (guac) password.
    password: {{ ocp4_workload_trusted_profile_analyzer_guac_password }}
  initDatabase:
    name: postgres
    host: tpa-infrastructure-postgresql
    username: postgres
    sslMode: disable
    password:
      valueFrom:
        secretKeyRef:
          name: tpa-infrastructure-postgresql
          key: postgres-password
v11y:
  bucket: v11y
  topics:
    failed: v11y-failed
    indexed: v11y-indexed
    stored: v11y-stored
vexination:
  bucket: vexination
  topics:
    failed: vex-failed
    indexed: vex-indexed
    stored: vex-stored
{% if ocp4_workload_trusted_profile_analyzer_install_stage == 'infra' %}
keycloakPostInstall:
  disabled: false
  image: docker.io/bitnami/keycloak:23
  kcadmPath: /opt/bitnami/keycloak/bin/kcadm.sh
  realmAdmin:
    name: admin
    password: {{ ocp4_workload_trusted_profile_analyzer_keycloak_realm_admin_password }}
  redirectUrls: []
  identityProviders:
    github: {}
{% endif %}