---
# Implement your Workload deployment tasks here
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

# Download SSH proxy container creator script
- name: Download SSH proxy container creator script
  get_url:
    url: https://raw.githubusercontent.com/eparis/ssh-bastion/3b0e2565534424e216f995254b0b048c632c4edc/deploy/deploy.sh
    dest: "/home/{{ ansible_user }}/windows_node_scripts/deploy-sshproxy.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

# Copy over ssh command script
- name: Download SSH proxy container creator script
  copy:
    src: sshcmd.sh
    dest: "/home/{{ ansible_user }}/windows_node_scripts/sshcmd.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

# Extract the AWS secret key from OpenShift
- name: Get the OpenShift cluster ID
  k8s_info:
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
    namespace: default
  register: cluster_id_fact
  retries: 50
  delay: 10
  until:
    - cluster_id_fact.resources[0].status.infrastructureName is defined

# Set the Openshift ID as a fact for later use
- name: Set the Openshift ID as a fact for later use
  set_fact:
    cluster_id: "{{ cluster_id_fact.resources[0].status.infrastructureName }}"

# Extract OpenShift machineSet region and first availablity zone
- name: Extract OpenShift machineSet region and first availablity zone
  k8s_info:
    api_version: machine.openshift.io/v1beta1
    kind: MachineSet
    namespace: openshift-machine-api
  register: machineset_list
  retries: 50
  delay: 10
  until:
    - machineset_list.resources[0].spec.template.spec.providerSpec.value.placement.region is defined
    - machineset_list.resources[0].spec.template.spec.providerSpec.value.placement.availabilityZone is defined

# Get the region for the cluster
- name: Get the region for the cluster and set it as a fact for later use
  set_fact:
    cluster_region: "{{ machineset_list.resources[0].spec.template.spec.providerSpec.value.placement.region }}"

# Get the first availability zone for the cluster
- name: Get the first availability zone for the cluster and set it as a fact for later use
  set_fact:
    cluster_az: "{{ machineset_list.resources[0].spec.template.spec.providerSpec.value.placement.availabilityZone }}"

# Get the latest Windows Server 2019 with Containers
- name: Extract the latest Windows Server 2019 with Containers Image
  ec2_ami_info:
    region: "{{ cluster_region }}"
    aws_access_key: "{{ ocp_access_key }}"
    aws_secret_key: "{{ ocp_secret_key }}"
    filters:
      name: 'Windows_Server-2019*English*Full*Containers*'
  register: wami_fact

# Get the latest Windows Server 2019 with Containers AMI
- name: Set the latest Windows Server 2019 with Containers AMI as a fact for later use
  set_fact:
    windows_ami: "{{ (wami_fact.images | sort(attribute='creation_date') | last).image_id }}"

# Slurp SSH key to use for secret
- name: Slurp SSH key to use for secret
  slurp:
    src: "{{ ocp4_workload_windows_node_cloud_private_key }}"
  register: ssh_key

# Create the Namespace for the Operator
- name: Create the Namespace for the Operator
  k8s:
    state: present
    definition: "{{ lookup('template', 'namespace.j2' ) }}"

# Create Secret with the contents of the ssh key
- name: Create Secret with the contents of the ssh key
  k8s:
    state: present
    definition: "{{ lookup('template', 'sshsecrets.j2' ) }}"

# Create the Operator group
- name: Create the Operator group
  k8s:
    state: present
    definition: "{{ lookup('template', 'operatorgroup.j2' ) }}"

# Create the Subscription
- name: Create the Subscription
  k8s:
    state: present
    definition: "{{ lookup('template', 'subscription.j2' ) }}"

# Wait for the operator to come up
- name: Wait for the operator to come up
  k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: windows-machine-config-operator
    namespace: "{{ ocp4_workload_windows_node_namespace }}"
  register: wcoperator
  retries: 50
  delay: 10
  until:
    - wcoperator.resources[0].status.readyReplicas is defined
    - wcoperator.resources[0].status.readyReplicas == 1

# Create the Windows Node MachineSet
- name: Create the Windows Node MachineSet
  k8s:
    state: present
    definition: "{{ lookup('template', 'windows-ms.j2' ) }}"

# Save Windows MachineSet manifeset for the user
- name: Save Windows MachineSet manifeset for the user
  template:
    src: windows-ms.j2
    dest: "/home/{{ ansible_user }}/windows_node_artifacts/windows-ms.yaml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

# Wait for the Window machine to come up
- name: Wait for the Window machine to come up (this may take some time)
  k8s_info:
    api_version: machine.openshift.io/v1beta1
    kind: Machine
    label_selectors:
      - machine.openshift.io/os-id = Windows
    namespace: openshift-machine-api
  register: wnmstatus
  retries: 50
  delay: 30
  until:
    - wnmstatus.resources[0].status.phase is defined
    - wnmstatus.resources[0].status.phase == "Running"

# Deploy documentation namespace
- name: Deploy documentation namespace
  k8s:
    state: present
    definition: "{{ lookup('template', 'doc-namespace.j2' ) }}"

# Deploy documentation deployment
- name: Deploy documentation deployment
  k8s:
    state: present
    definition: "{{ lookup('template', 'doc-deploy.j2' ) }}"

# Wait for the documentation deployment to come up
- name: Wait for the documentation deployment to come up
  k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: "{{ ocp4_workload_windows_node_doc_app }}"
    namespace: "{{ ocp4_workload_windows_node_doc_namespace }}"
  register: windocd
  retries: 50
  delay: 10
  until:
    - windocd.resources[0].status.readyReplicas is defined
    - windocd.resources[0].status.readyReplicas == 1

# Deploy documentation service
- name: Deploy documentation service
  k8s:
    state: present
    definition: "{{ lookup('template', 'doc-svc.j2' ) }}"

# Wait for the documentation service to come up
- name: Wait for the documentation service to come up
  k8s_info:
    api_version: v1
    kind: Service
    name: "{{ ocp4_workload_windows_node_doc_svc }}"
    namespace: "{{ ocp4_workload_windows_node_doc_namespace }}"
  register: windocs
  retries: 50
  delay: 10
  until:
    - windocs.resources[0].spec.clusterIP is defined

# Deploy documentation route
- name: Deploy documentation route
  k8s:
    state: present
    definition: "{{ lookup('template', 'doc-route.j2' ) }}"

# Wait for the documentation route to come up
- name: Wait for the documentation route to come up
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ ocp4_workload_windows_node_doc_route }}"
    namespace: "{{ ocp4_workload_windows_node_doc_namespace }}"
  register: windocr
  retries: 50
  delay: 10
  until:
    - windocr.resources[0].status.ingress[0].host is defined

# Get the running Windows Node
- name: Get the running Windows Node
  k8s_info:
    api_version: v1
    kind: Node
    namespace: default
    label_selectors:
      - kubernetes.io/os = windows
  register: winnode
  retries: 50
  delay: 10
  until:
    - winnode.resources[0].metadata.name is defined

- name: Set Windows Nodename as a fact for later use
  set_fact:
    windows_node: "{{ winnode.resources[0].metadata.name }}"

# Create the job that prepulls the Windows container image
- name: Create the job that prepulls the Windows container image
  k8s:
    state: present
    definition: "{{ lookup('template', 'job-image-pull.j2' ) }}"

# Wait for the job to be created (best effort today)
- name: Wait for the job to be created (best effort today)
  k8s_info:
    api_version: batch/v1
    kind: Job
    name: windows-image-pull
    namespace: "{{ ocp4_workload_windows_node_namespace }}"
  register: windowsjob
  retries: 50
  delay: 10
  until:
    - windowsjob.resources[0].status.startTime is defined

# Create the winc-ssh that allows for ssh into the Windows node
- name: Create the winc-ssh that allows for ssh into the Windows node
  k8s:
    state: present
    definition: "{{ lookup('template', 'winc-deploy.j2' ) }}"

# Wait for the winc-ssh to come up
- name: Wait for the winc-ssh to come up
  k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: winc-ssh
    namespace: "{{ ocp4_workload_windows_node_namespace }}"
  register: wincssh
  retries: 50
  delay: 10
  until:
    - wincssh.resources[0].status.readyReplicas is defined
    - wincssh.resources[0].status.readyReplicas == 1

# Add the route for user info
- name: Add userinfo of the route
  agnosticd_user_info:
    msg: "{{ item }}"
  loop:
    - "Windows Containers Quickstart Guide: http://{{ windocr.resources[0].spec.host }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool

##
##
