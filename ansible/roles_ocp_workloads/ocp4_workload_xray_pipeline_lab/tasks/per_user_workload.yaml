---
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user {{ t_user }}"

- name: Add user {{ t_user}} to groups "{{ ocp4_workload_xray_pipeline_lab_user_groups }}"
  when: ocp4_workload_xray_pipeline_lab_user_groups | default([]) | length > 0
  command: "oc adm groups add-users {{ item }} {{ t_user }}"
  loop: "{{ ocp4_workload_xray_pipeline_lab_user_groups }}"

- name: Set up user permissions to view common projects
  when: ocp4_workload_xray_pipeline_lab_user_project_permissions | default([]) | length > 0
  k8s:
    state: present
    definition: "{{ lookup('template', 'user/rolebinding.yaml.j2') | from_yaml }}"
  vars:
    _ocp4_workload_xray_pipeline_lab_user_project: "{{ item.project }}"
    _ocp4_workload_xray_pipeline_lab_user_role: "{{ item.role }}"
    _ocp4_workload_xray_pipeline_lab_user_name: "{{ t_user }}"
  loop: "{{ ocp4_workload_xray_pipeline_lab_user_project_permissions }}"
  loop_control:
    label: "{{ item.project }} - {{ item.role }}"

- name: Set up user project
  k8s:
    state: present
    definition: "{{ lookup('template', 'user/user-project.yaml.j2') | from_yaml }}"

- name: Set up user permissions to user projects
  k8s:
    state: present
    definition: "{{ lookup('template', 'user/rolebinding.yaml.j2') | from_yaml }}"
  vars:
    _ocp4_workload_xray_pipeline_lab_user_project: "{{ t_user_project }}"
    _ocp4_workload_xray_pipeline_lab_user_role: admin
    _ocp4_workload_xray_pipeline_lab_user_name: "{{ t_user }}"

- name: Set up bookbag service account permissions to user projects
  k8s:
    state: present
    definition: "{{ lookup('template', 'user/rolebinding.yaml.j2') | from_yaml }}"
  vars:
    _ocp4_workload_xray_pipeline_lab_user_project: "{{ t_user_project }}"
    _ocp4_workload_xray_pipeline_lab_user_role: admin
    _ocp4_workload_xray_pipeline_lab_user_name: "system:serviceaccount:bookbag-{{ t_user }}:bookbag"

- name: Create Limit Ranges for user projects
  k8s:
    state: present
    definition: "{{ lookup('template', 'user/limitrange.yaml.j2') | from_yaml }}"

- name: Create ResourceQuota
  when: ocp4_workload_xray_pipeline_lab_user_create_quota | bool
  k8s:
    state: present
    definition: "{{ lookup('template', 'user/resource_quota.yaml.j2' ) | from_yaml }}"

- name: Wait for Limit ranges to be created
  k8s_info:
    api_version: v1
    kind: LimitRange
    name: core-resource-limits
    namespace: "{{ t_user_project }}"
  register: limit_range
  retries: 30
  delay: 10
  until: limit_range|length > 0
  ignore_errors: false

- name: Install Grafana Operator
  include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: "{{ ocp4_workload_xray_pipeline_lab_grafana_operator_name }}"
    install_operator_namespace: "{{ t_user_project }}"
    install_operator_channel: "{{ ocp4_workload_xray_pipeline_lab_grafana_channel }}"
    install_operator_catalog: community-operators
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_xray_pipeline_lab_grafana_automatic_install_plan_approval | default(true) }}"
    install_operator_manage_namespaces:
      - "{{ t_user_project }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_setup | default(false)}}"
    install_operator_catalogsource_name: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_namespace | default('') }}"
    install_operator_catalogsource_image: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_image_tag | default('') }}"

- name: Create Grafana instance
  k8s:
    state: present
    definition: "{{ lookup('template', 'grafana/grafana-instance.yaml.j2') | from_yaml }}"
  vars:
    namespace: "{{ t_user_project }}"

- name: Wait for Service Account to be created with all specs
  k8s_info:
    api_version: v1
    kind: ServiceAccount
    name: grafana-serviceaccount
    namespace: "{{ t_user_project }}"
  register: grafana_serviceaccount
  retries: 30
  delay: 10
  until: >-
    grafana_serviceaccount
    | to_json
    | from_json
    | json_query('resources[0].secrets[?starts_with(name,`grafana-serviceaccount-token`)]')
    | default('', true) != ''
  ignore_errors: false

- name: Service Account secret name
  set_fact:
    grafana_serviceaccount_secret_name: >-
      {{ grafana_serviceaccount
      | to_json
      | from_json
      | json_query('resources[0].secrets[?starts_with(name, `grafana-serviceaccount-token`)].name')
      | first }}

# yamllint disable rule:line-length
- name: Add cluster monitoring role
  shell: >-
    oc adm policy add-cluster-role-to-user cluster-monitoring-view -z grafana-serviceaccount -n {{ t_user_project }}
# yamllint enable rule:line-length

- name: Get Grafana SA secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ grafana_serviceaccount_secret_name }}"
    namespace: "{{ t_user_project }}"
  register: grafana_serviceaccount_secret
  retries: 30
  delay: 10
  until: >-
    grafana_serviceaccount_secret
    | to_json
    | from_json
    | json_query('resources[0].data.token') | default('', true) != ''
  ignore_errors: false

- name: Extract bearer token
  set_fact:
    grafana_bearer_token: "{{ grafana_serviceaccount_secret.resources[0].data.token | b64decode }}"

- name: Create Grafana Prometheus DataSource
  k8s:
    state: present
    definition: "{{ lookup('template', 'grafana/prometheus-datasource.yaml.j2') }}"
  vars:
    namespace: "{{ t_user_project }}"
    grafana_bearer_token: "{{ grafana_bearer_token }}"

- name: Create S3 user
  shell: >-
    oc exec -n openshift-storage
    $(oc get pods -n openshift-storage | grep rook-ceph-tools | grep Running | awk '{print $1}')
    -- radosgw-admin user create --uid="{{ t_user }}" --display-name="{{ t_user }}"
  register: user_create_output

- name: Register AWS_KEY
  set_fact:
    S3_access_key: "{{ user_create_output.stdout | from_json | json_query('keys[0].access_key')}}"
    S3_secret_key: "{{ user_create_output.stdout | from_json | json_query('keys[0].secret_key')}}"

- name: Create Secret with S3 credentials in user namespace
  k8s:
    state: present
    definition: "{{ lookup('template', 's3/s3_secret.yaml.j2') }}"
  vars:
    namespace: "{{ t_user_project }}"
    AWS_ACCESS_KEY_ID: "{{ S3_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ S3_secret_key }}"

- name: Get RGW route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: openshift-storage
    name: s3-rgw
  register: r_rgw_url_external

- name: Get Web Console route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: openshift-console
    name: console
  register: r_console_route

- name: Get API server URL
  k8s_info:
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
  register: r_api_url

- name: Deploy bookbag
  include_role:
    name: ocp4_workload_bookbag_user
  vars:
    ocp4_workload_bookbag_user_project: "bookbag-{{ t_user }}"
    ocp4_workload_bookbag_user_project_display: "Bookbag for user {{ t_user }}"
    ocp4_workload_bookbag_user_deployment_name: bookbag
    ocp4_workload_bookbag_user_image_tag: latest
    ocp4_workload_bookbag_user_image_namespace: bookbag
    ocp4_workload_bookbag_user_image_name: >-
      image-registry.openshift-image-registry.svc:5000/{{ ocp4_workload_bookbag_user_image_namespace }}/xraylab-bookbag
    ocp4_workload_bookbag_user_console_deploy: true
    ocp4_workload_bookbag_user_console_branding: openshift
    ocp4_workload_bookbag_user_role: admin
    ocp4_workload_bookbag_user_auth_username: "*"
    ocp4_workload_bookbag_user_create_pvc: false
    ocp4_workload_bookbag_user_userinfo_enable: "{{ t_user_num | int > 1 }}"
    ocp4_workload_bookbag_user_userinfo_user: "{{ t_user }}"
    ocp4_workload_bookbag_user_custom_workshop_vars:
      guid: "{{ t_user }}"
      web_console_url: "https://{{ r_console_route.resources[0].spec.host }}"
      api_url: "{{ r_api_url.resources[0].status.apiServerURL }}"
      login_command: "oc login -u {{ t_user }} {{ r_api_url.resources[0].status.apiServerURL }}"
      rgw_url_external: "https://{{ r_rgw_url_external.resources[0].spec.host }}"
      S3_access_key: "{{ S3_access_key }}"
      S3_secret_key: "{{ S3_secret_key }}"
      ocp_username: "{{ t_user }}"


# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
