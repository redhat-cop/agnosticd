--- 
- 
  debug: 
    msg: "Setting up workload for user {{ t_user }}"
  name: "Setting up workload for user"
- 
  command: "oc adm groups add-users {{ item }} {{ t_user }}"
  loop: "{{ ocp4_workload_xray_pipeline_lab_user_groups }}"
  name: "Add user {{ t_user}} to groups \"{{ ocp4_workload_xray_pipeline_lab_user_groups }}\""
  when: "ocp4_workload_xray_pipeline_lab_user_groups | default([]) | length > 0"
- 
  k8s: 
    definition: "{{ lookup('template', 'user/rolebinding.yaml.j2') | from_yaml }}"
    state: present
  loop: "{{ ocp4_workload_xray_pipeline_lab_user_project_permissions }}"
  loop_control: 
    label: "{{ item.project }} - {{ item.role }}"
  name: "Set up user permissions to view common projects"
  vars: 
    _ocp4_workload_xray_pipeline_lab_user_name: "{{ t_user }}"
    _ocp4_workload_xray_pipeline_lab_user_project: "{{ item.project }}"
    _ocp4_workload_xray_pipeline_lab_user_role: "{{ item.role }}"
  when: "ocp4_workload_xray_pipeline_lab_user_project_permissions | default([]) | length > 0"
- 
  k8s: 
    definition: "{{ lookup('template', 'user/user-project.yaml.j2') | from_yaml }}"
    state: present
  name: "Set up user project"
- 
  k8s: 
    definition: "{{ lookup('template', 'user/rolebinding.yaml.j2') | from_yaml }}"
    state: present
  name: "Set up user permissions to user projects"
  vars: 
    _ocp4_workload_xray_pipeline_lab_user_name: "{{ t_user }}"
    _ocp4_workload_xray_pipeline_lab_user_project: "{{ t_user_project }}"
    _ocp4_workload_xray_pipeline_lab_user_role: admin
- 
  k8s: 
    definition: "{{ lookup('template', 'user/rolebinding.yaml.j2') | from_yaml }}"
    state: present
  name: "Set up bookbag service account permissions to user projects"
  vars: 
    _ocp4_workload_xray_pipeline_lab_user_name: "system:serviceaccount:bookbag-{{ t_user }}:bookbag"
    _ocp4_workload_xray_pipeline_lab_user_project: "{{ t_user_project }}"
    _ocp4_workload_xray_pipeline_lab_user_role: admin
- 
  k8s: 
    definition: "{{ lookup('template', 'user/limitrange.yaml.j2') | from_yaml }}"
    state: present
  name: "Create Limit Ranges for user projects"
- 
  k8s: 
    definition: "{{ lookup('template', 'user/resource_quota.yaml.j2' ) | from_yaml }}"
    state: present
  name: "Create ResourceQuota"
  when: "ocp4_workload_xray_pipeline_lab_user_create_quota | bool"
- 
  delay: 10
  ignore_errors: false
  k8s_info: 
    api_version: v1
    kind: LimitRange
    name: core-resource-limits
    namespace: "{{ t_user_project }}"
  name: "Wait for Limit ranges to be created"
  register: limit_range
  retries: 30
  until: "limit_range|length > 0"
- 
  include_role: 
    name: install_operator
  name: "Install Grafana Operator"
  vars: 
    install_operator_action: install
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_xray_pipeline_lab_grafana_automatic_install_plan_approval | default(true) }}"
    install_operator_catalog: community-operators
    install_operator_catalogsource_image: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_image_tag | default('') }}"
    install_operator_catalogsource_name: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_name | default('') }}"
    install_operator_catalogsource_namespace: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_namespace | default('') }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_xray_pipeline_lab_catalogsource_setup | default(false)}}"
    install_operator_channel: "{{ ocp4_workload_xray_pipeline_lab_grafana_channel }}"
    install_operator_manage_namespaces: 
      - "{{ t_user_project }}"
    install_operator_name: "{{ ocp4_workload_xray_pipeline_lab_grafana_operator_name }}"
    install_operator_namespace: "{{ t_user_project }}"
- 
  k8s: 
    definition: "{{ lookup('template', 'grafana/grafana-instance.yaml.j2') | from_yaml }}"
    state: present
  name: "Create Grafana instance"
  vars: 
    namespace: "{{ t_user_project }}"
- 
  delay: 10
  ignore_errors: false
  k8s_info: 
    api_version: v1
    kind: ServiceAccount
    name: grafana-serviceaccount
    namespace: "{{ t_user_project }}"
  name: "Wait for Service Account to be created with all specs"
  register: grafana_serviceaccount
  retries: 30
  until: "grafana_serviceaccount | to_json | from_json | json_query('resources[0].secrets[?starts_with(name,`grafana-serviceaccount-token`)]') | default('', true) != ''"
- 
  name: "Service Account secret name"
  set_fact: 
    grafana_serviceaccount_secret_name: "{{ grafana_serviceaccount | to_json | from_json | json_query('resources[0].secrets[?starts_with(name, `grafana-serviceaccount-token`)].name') | first }}"
- 
  name: "Add cluster monitoring role"
  shell: "oc adm policy add-cluster-role-to-user cluster-monitoring-view -z grafana-serviceaccount -n {{ t_user_project }}"
- 
  delay: 10
  ignore_errors: false
  k8s_info: 
    api_version: v1
    kind: Secret
    name: "{{ grafana_serviceaccount_secret_name }}"
    namespace: "{{ t_user_project }}"
  name: "Get Grafana SA secret"
  register: grafana_serviceaccount_secret
  retries: 30
  until: "grafana_serviceaccount_secret | to_json | from_json | json_query('resources[0].data.token') | default('', true) != ''"
- 
  name: "Extract bearer token"
  set_fact: 
    grafana_bearer_token: "{{ grafana_serviceaccount_secret.resources[0].data.token | b64decode }}"
- 
  k8s: 
    definition: "{{ lookup('template', 'grafana/prometheus-datasource.yaml.j2') }}"
    state: present
  name: "Create Grafana Prometheus DataSource"
  vars: 
    grafana_bearer_token: "{{ grafana_bearer_token }}"
    namespace: "{{ t_user_project }}"
- 
  name: "Create S3 user"
  register: user_create_output
  shell: "oc exec -n openshift-storage $(oc get pods -n openshift-storage | grep rook-ceph-tools | grep Running | awk '{print $1}') -- radosgw-admin user create --uid=\"{{ t_user }}\" --display-name=\"{{ t_user }}\""
- 
  name: "Register AWS_KEY"
  set_fact: 
    S3_access_key: "{{ user_create_output.stdout | from_json | json_query('keys[0].access_key')}}"
    S3_secret_key: "{{ user_create_output.stdout | from_json | json_query('keys[0].secret_key')}}"
- 
  k8s: 
    definition: "{{ lookup('template', 's3/s3_secret.yaml.j2') }}"
    state: present
  name: "Create Secret with S3 credentials in user namespace"
  vars: 
    AWS_ACCESS_KEY_ID: "{{ S3_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ S3_secret_key }}"
    namespace: "{{ t_user_project }}"
- 
  k8s_info: 
    api_version: route.openshift.io/v1
    kind: Route
    name: s3-rgw
    namespace: openshift-storage
  name: "Get RGW route"
  register: r_rgw_url_external
- 
  k8s_info: 
    api_version: route.openshift.io/v1
    kind: Route
    name: console
    namespace: openshift-console
  name: "Get Web Console route"
  register: r_console_route
- 
  k8s_info: 
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
  name: "Get API server URL"
  register: r_api_url
- 
  include_role: 
    name: ocp4_workload_bookbag_user
  name: "Deploy bookbag"
  vars: 
    ocp4_workload_bookbag_user_auth_username: "*"
    ocp4_workload_bookbag_user_console_branding: openshift
    ocp4_workload_bookbag_user_console_deploy: true
    ocp4_workload_bookbag_user_create_pvc: false
    ocp4_workload_bookbag_user_custom_workshop_vars: 
      S3_access_key: "{{ S3_access_key }}"
      S3_secret_key: "{{ S3_secret_key }}"
      api_url: "{{ r_api_url.resources[0].status.apiServerURL }}"
      guid: "{{ t_user }}"
      login_command: "oc login -u {{ t_user }} {{ r_api_url.resources[0].status.apiServerURL }}"
      ocp_username: "{{ t_user }}"
      rgw_url_external: "https://{{ r_rgw_url_external.resources[0].spec.host }}"
      web_console_url: "https://{{ r_console_route.resources[0].spec.host }}"
    ocp4_workload_bookbag_user_deployment_name: bookbag
    ocp4_workload_bookbag_user_image_name: "image-registry.openshift-image-registry.svc:5000/{{ ocp4_workload_bookbag_user_image_namespace }}/xraylab-bookbag"
    ocp4_workload_bookbag_user_image_namespace: bookbag
    ocp4_workload_bookbag_user_image_tag: latest
    ocp4_workload_bookbag_user_project: "bookbag-{{ t_user }}"
    ocp4_workload_bookbag_user_project_display: "Bookbag for user {{ t_user }}"
    ocp4_workload_bookbag_user_role: admin
    ocp4_workload_bookbag_user_userinfo_enable: "{{ t_user_num | int > 1 }}"
    ocp4_workload_bookbag_user_userinfo_user: "{{ t_user }}"
- 
  debug: 
    msg: "Workload Tasks completed successfully."
  name: "workload tasks complete"
  when: "not silent|bool"
