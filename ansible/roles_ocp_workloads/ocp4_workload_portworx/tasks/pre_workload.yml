---

- name: Gather aws security group info
  amazon.aws.ec2_group_info:
    filters:
      "tag:Name": "*worker*"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: sg_info

- name: Add aws security group rules for {{ ocp4_workload_portworx_namespace }} operator
  amazon.aws.ec2_group:
    name: "{{ sg_info.security_groups[0].group_name }}"
    description: "Edited by Ansible installer"
    purge_rules: false
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports: 17001 - 17020
        rule_desc: "{{ ocp4_workload_portworx_namespace }}"
        group_id: "{{ sg_info.security_groups[0].group_id }}"
      - proto: udp
        ports: 17002
        rule_desc: "{{ ocp4_workload_portworx_namespace }}"
        group_id: "{{ sg_info.security_groups[0].group_id }}"

## Converted to aws cli commands due to community.aws not supported in AgD core
##
# - name: find all existing IAM roles
#  anansible
#     aws_access_key: "{{ aws_access_key_id }}"
#     aws_secret_key: "{{ aws_secret_access_key }}"
#     region: "{{ aws_region }}"
#   register: r_aws_iam_role_info

- name: find all existing IAM roles
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  shell: "aws iam list-roles --query 'Roles[].RoleName' --output text"
  register: r_aws_iam_role_names

- set_fact:
    # yamllint disable-line rule:line-length
    ocp4_workload_portworx_iam_worker_role: "{{ r_aws_iam_role_names.stdout | regex_search('cluster-[a-z0-9]*-[a-z0-9]*-worker-role') }}"

- debug:
    msg: "{{ ocp4_workload_portworx_iam_worker_role }}"

- name: Create aws_policy.json from aws_policy.j2 template
  template:
    src: aws_policy.j2
    dest: /tmp/aws_policy.json

## Converted to aws cli commands due to community.aws not supported in AgD core
##
# - name: Assign {{ ocp4_workload_portworx_policy_name }} policy to {{ ocp4_workload_portworx_iam_worker_role }}
#   community.aws.iam_policy:
#     iam_type: role
#     iam_name: "{{ ocp4_workload_portworx_iam_worker_role }}"
#     policy_name: "{{ ocp4_workload_portworx_policy_name }}"
#     state: present
#     policy_json: "{{ lookup('template', 'aws_policy.j2') }}"
#     aws_access_key: "{{ aws_access_key_id }}"
#     aws_secret_key: "{{ aws_secret_access_key }}"

- name: Assign {{ ocp4_workload_portworx_policy_name }} policy to {{ ocp4_workload_portworx_iam_worker_role }}
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  shell: |
    aws iam put-role-policy \
      --role-name "{{ ocp4_workload_portworx_iam_worker_role }}" \
      --policy-name "{{ ocp4_workload_portworx_policy_name }}" \
      --policy-document file:///tmp/aws_policy.json

- name: pre_workload Tasks Complete
  debug:
    msg: "Pre-Software checks completed successfully"
