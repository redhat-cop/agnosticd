---
- name: Gather EC2 instances with "worker" in their Name tag
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "*worker*"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: ec2_info

- name: Extract VPC ID from the first worker instance
  ansible.builtin.set_fact:
    vpc_id: "{{ ec2_info.instances[0].vpc_id }}"

- name: Extract security group info with "node" in the group name
  ansible.builtin.set_fact:
    # yamllint disable-line rule:line-length
    node_sg_info: "{{ ec2_info.instances | map(attribute='security_groups') | flatten | selectattr('group_name', 'search', 'node') | unique | list }}"

- name: Extract security group IDs from node_sg_info
  ansible.builtin.set_fact:
    node_sg_id: "{{ node_sg_info | map(attribute='group_id') | list }}"

- name: Extract security group names from node_sg_info
  ansible.builtin.set_fact:
    # yamllint disable-line rule:line-length
    node_sg_name: "{{ node_sg_info | map(attribute='group_name') | map('trim') | list }}"

- name: Add aws security group rules
  amazon.aws.ec2_group:
    name: "{{ node_sg_name[0] }}"
    description: "Edited by Ansible installer"
    purge_rules: false
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        ports: 111
        rule_desc: "{{ ocp4_workload_portworx_namespace }}"
        group_id: "{{ node_sg_id }}"
      - proto: tcp
        ports: 2049
        rule_desc: "{{ ocp4_workload_portworx_namespace }}"
        group_id: "{{ node_sg_id }}"
      - proto: tcp
        ports: 20048
        rule_desc: "{{ ocp4_workload_portworx_namespace }}"
        group_id: "{{ node_sg_id }}"
      - proto: tcp
        ports: 17001 - 17020
        rule_desc: "{{ ocp4_workload_portworx_namespace }}"
        group_id: "{{ node_sg_id }}"
      - proto: udp
        ports: 17002
        rule_desc: "{{ ocp4_workload_portworx_namespace }}"
        group_id: "{{ node_sg_id }}"

- name: Find all existing IAM roles
  ansible.builtin.shell: "aws iam list-roles --query 'Roles[].RoleName' --output text"
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  register: r_aws_iam_role_names
  changed_when: r_aws_iam_role_names != 0

- name: Set fact for iam worker role
  ansible.builtin.set_fact:
    # yamllint disable-line rule:line-length
    ocp4_workload_portworx_iam_worker_role: "{{ r_aws_iam_role_names.stdout | regex_search('cluster-[a-z0-9]*-[a-z0-9]*-worker-role') }}"

- name: Create aws_policy.json from aws_policy.j2 template
  ansible.builtin.template:
    src: aws_policy.j2
    dest: /tmp/aws_policy.json
    mode: '0644'

- name: Assign policy to {{ ocp4_workload_portworx_iam_worker_role }}
  ansible.builtin.shell: |
    aws iam put-role-policy \
      --role-name "{{ ocp4_workload_portworx_iam_worker_role }}" \
      --policy-name "{{ ocp4_workload_portworx_policy_name }}" \
      --policy-document file:///tmp/aws_policy.json
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  register: r_aws_policy_output
  changed_when: r_aws_policy_output != 0

- name: pre_workload Tasks Complete
  ansible.builtin.debug:
    msg: "Pre-Software checks completed successfully"
