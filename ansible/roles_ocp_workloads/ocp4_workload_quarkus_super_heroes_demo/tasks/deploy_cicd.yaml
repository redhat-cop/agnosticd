---
- name: Retrieve Gitea instance
  kubernetes.core.k8s_info:
    api_version: gpte.opentlc.com/v1
    kind: Gitea
    name: "{{ ocp4_workload_gitea_operator_name }}"
    namespace: "{{ ocp4_workload_gitea_operator_project }}"
  register: r_gitea

- name: set gitea repos url
  ansible.builtin.set_fact:
    # yamllint disable-line rule:line-length
    _git_url: "{{ r_gitea.resources[0].status.giteaRoute }}"
    # yamllint disable-line rule:line-length
    _git_url_user: "{{ r_gitea.resources[0].status.giteaRoute }}/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_user }}"
    # yamllint disable-line rule:line-length
    _git_url_repo_source: "{{ r_gitea.resources[0].status.giteaRoute }}/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_user }}/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_repo_name }}"
    # yamllint disable-line rule:line-length
    _git_url_repo_gitops: "{{ r_gitea.resources[0].status.giteaRoute }}/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_user }}/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_repo_name }}-deploy"

- name: "[{{ t_project_name_argocd }}] - create namespace"
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ t_project_name_argocd }}"
    definition:
      metadata:
        name: "{{ t_project_name_argocd }}"
        annotations:
          openshift.io/description: "Quarkus Superheroes ArgoCD"
          openshift.io/display-name: "Quarkus Superheroes ArgoCD"

- name: "[{{ t_project_name_argocd }}] - create argocd instance"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'argocd/argocd.yaml.j2') }}"

- name: "[{{ t_project_name_argocd }}] - create argocd repo secret"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'argocd/argocd-repo-secret.yaml.j2') }}"

- name: "[{{ t_project_name_test }}] - create namespace"
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ t_project_name_test }}"
    definition:
      metadata:
        annotations:
          openshift.io/description: "Quarkus Superheroes Test Environment"
          openshift.io/display-name: "Quarkus Superheroes Test Environment"
        labels:
          argocd.argoproj.io/managed-by: "{{ t_project_name_argocd }}"

- name: "[{{ t_project_name_test }}] - create argocd rolebinding"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'argocd/argocd-rolebinding.yaml.j2') }}"

- name: "[{{ t_project_name_test }}] - deploy Kafka"
  kubernetes.core.k8s:
    namespace: "{{ t_project_name_test }}"
    state: present
    # yamllint disable-line rule:line-length
    definition: "{{ lookup('file', '../files/amqstreams_instance.yaml') | from_yaml_all | list }}"

- name: "[{{ t_project_name_test }}] - install Prometheus"
  vars:
    t_project_name: "{{ t_project_name_test }}"
  include_tasks: install_prometheus.yml
  when: ocp4_workload_quarkus_super_heroes_demo_install_prometheus | bool

- name: "[{{ t_project_name_test }}] - install Grafana"
  vars:
    t_project_name: "{{ t_project_name_test }}"
  include_tasks: install_grafana.yml
  when: ocp4_workload_quarkus_super_heroes_demo_install_grafana | bool

- name: "[{{ t_project_name_test }}] - create imagestreams"
  kubernetes.core.k8s:
    state: present
    api_version: image.openshift.io/v1
    kind: ImageStream
    definition:
      metadata:
        name: "{{ item }}"
        namespace: "{{ t_project_name_test }}"
  loop:
  - rest-fights

- name: "[{{ t_project_name_test }}] - create buildconfigs"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'tekton/buildconfig.yaml.j2') }}"
  loop:
  - rest-fights

- name: "[{{ t_project_name_pipelines }}] - create namespace"
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ t_project_name_pipelines }}"
    definition:
      metadata:
        annotations:
          openshift.io/description: "Quarkus Superheroes Pipelines"
          openshift.io/display-name: "Quarkus Superheroes Pipelines"
        name: "{{ t_project_name_pipelines }}"

- name: create gitea token
  ansible.builtin.uri:
    # yamllint disable-line rule:line-length
    url: "{{ _git_url }}/api/v1/users/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_user }}/tokens"
    method: POST
    force_basic_auth: true
    user: "{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_user }}"
    password: "{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_password }}"
    return_content: true
    headers:
      accept: application/json
    body_format: json
    body: |
      {
        "name": "pipeline_tkn_{{ 1000 | random }}"
      }
    status_code: [201]
  register: r_gitea_token

- name: "[{{ t_project_name_pipelines }}] - create secret gitea-token"
  vars:
    _gitea_token_username: "{{ r_gitea_token.json.name }}"
    _gitea_token_password: "{{ r_gitea_token.json.sha1 }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'tekton/secret-gitea-token.yaml.j2') }}"

- name: "[{{ t_project_name_pipelines }}] - link gitea-token service account pipeline"
  kubernetes.core.k8s:
    state: patched
    kind: ServiceAccount
    name: pipeline
    namespace: "{{ t_project_name_pipelines }}"
    definition:
      secrets:
      - name: gitea-token

- name: "[{{ t_project_name_pipelines }}] - create tekton tasks"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', '{{ item }}') }}"
  loop:
  - tekton/pvc.yaml.j2
  - tekton/rolebinding.yaml.j2
  - tekton/task-s2i-binary.yaml.j2
  - tekton/task-update-kustomize-image.yaml.j2
  - tekton/task-update-kustomize-swagger.yaml.j2
  - tekton/task-generate-tag.yaml.j2

- name: "[{{ t_project_name_pipelines }}] - delete taskrun update-kustomize-swagger"
  kubernetes.core.k8s:
    state: absent
    api_version: tekton.dev/v1beta1
    kind: TaskRun
    name: update-kustomize-swagger
    namespace: "{{ t_project_name_pipelines }}"

- name: "[{{ t_project_name_pipelines }}] - create taskrun update-kustomize-swagger"
  kubernetes.core.k8s:
    state: present
    api_version: tekton.dev/v1beta1
    kind: TaskRun
    definition:
      metadata:
        name: update-kustomize-swagger
        namespace: "{{ t_project_name_pipelines }}"
      spec:
        taskRef:
          name: update-kustomize-swagger
        params:
        - name: restFightsOpenapiServers
          value: http:\/\/rest-fights-{{ t_project_name_test }}.{{ route_subdomain }}
        - name: restHeroesOpenapiServers
          value: http:\/\/rest-heroes-{{ t_project_name_test }}.{{ route_subdomain }}
        - name: restVillainsOpenapiServers
          value: http:\/\/rest-villains-{{ t_project_name_test }}.{{ route_subdomain }}
    wait: true
    wait_condition:
      reason: Succeeded
      status: 'True'
      type: Succeeded
    wait_sleep: 5
    wait_timeout: 180

- name: "[{{ t_project_name_pipelines }}] - create tekton pipeline quarkus-superheroes"
  vars:
    _app_name: rest-fights
    _source_git_revision: "{{ ocp4_workload_quarkus_super_heroes_demo_release_tag }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'tekton/pipeline.yaml.j2') }}"

- name: "[{{ t_project_name_pipelines }}] - create tekton triggers"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', '{{ item }}') }}"
  loop:
  - tekton/trigger-template.yaml.j2
  - tekton/trigger-binding.yaml.j2
  - tekton/trigger-eventlistener.yaml.j2
  - tekton/trigger-eventlistener-route.yaml.j2

- name: create gitea webook
  ansible.builtin.uri:
    # yamllint disable-line rule:line-length
    url: "{{ _git_url }}/api/v1/repos/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_user }}/{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_repo_name }}/hooks"
    method: POST
    force_basic_auth: true
    user: "{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_user }}"
    password: "{{ ocp4_workload_quarkus_super_heroes_demo_clone_repo_gitea_password }}"
    headers:
      accept: application/json
    body_format: json
    body: |
      {
        "active": true,
        "branch_filter": "*",
        "config": {
          "url": "http://el-{{ t_project_name_pipelines }}.{{ route_subdomain }}",
          "http_method": "POST",
          "content_type": "json"
        },
        "events": [
          "push"
        ],
        "type": "gitea"
      }
    status_code: [201]

- name: "[{{ t_project_name_pipelines }}] - delete pipelinerun quarkus-superheroes"
  kubernetes.core.k8s:
    state: absent
    api_version: tekton.dev/v1beta1
    kind: PipelineRun
    name: quarkus-superheroes
    namespace: "{{ t_project_name_pipelines }}"

- name: "[{{ t_project_name_pipelines }}] - create pipelinerun quarkus-superheroes"
  kubernetes.core.k8s:
    state: present
    api_version: tekton.dev/v1beta1
    kind: PipelineRun
    definition:
      metadata:
        name: quarkus-superheroes
        namespace: "{{ t_project_name_pipelines }}"
      spec:
        pipelineRef:
          name: quarkus-superheroes
        workspaces:
        - name: app-source
          persistentVolumeClaim:
            claimName: workspace-pvc
        - name: maven-settings
          emptyDir: {}

- name: "[{{ t_project_name_pipelines }}] - wait for pipelinerun quarkus-superheroes"
  kubernetes.core.k8s_info:
    api_version: tekton.dev/v1beta1
    kind: PipelineRun
    name: quarkus-superheroes
    namespace: "{{ t_project_name_pipelines }}"
  register: r_pipelinerun_superheroes
  retries: 90
  delay: 10
  until:
  - r_pipelinerun_superheroes.resources[0].status is defined
  - r_pipelinerun_superheroes.resources[0].status.conditions[0].status is defined
  - r_pipelinerun_superheroes.resources[0].status.conditions[0].reason is defined
  - r_pipelinerun_superheroes.resources[0].status.conditions[0].status is match("True")
  - r_pipelinerun_superheroes.resources[0].status.conditions[0].reason is match("Succeeded")

- name: "[{{ t_project_name_argocd }}] - wait argocd ready"
  kubernetes.core.k8s_info:
    api_version: argoproj.io/v1alpha1
    kind: ArgoCD
    name: argocd
    namespace: "{{ t_project_name_argocd }}"
  register: result
  until: result | json_query("resources[0].status.phase=='Available'")
  retries: 10
  delay: 5

- name: "[{{ t_project_name_argocd }}] - create argocd application"
  vars:
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'argocd/argocd-application.yaml.j2') }}"
