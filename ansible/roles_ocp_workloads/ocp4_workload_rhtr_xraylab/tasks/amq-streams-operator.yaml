---
- name: Set state
  set_fact:
    state: present
  when: not ocp4_workload_rhtr_xraylab_workload_destroy|bool

- name: Set state
  set_fact:
    state: absent
  when: ocp4_workload_rhtr_xraylab_workload_destroy|bool

- name: Create AMQ Streams Subscription
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('template', 'amq-streams-operator/subscription.yaml.j2' ) }}"

- name: Wait until InstallPlan is created
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: openshift-operators
  register: r_install_plans
  vars:
    _query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'amqstreams')]
  retries: 30
  delay: 5
  until:
  - r_install_plans.resources | length > 0
  - r_install_plans.resources | to_json | from_json | json_query(_query)

- name: Set InstallPlan Name
  set_fact:
    ocp4_workload_rhtr_xraylab_amqstreams_install_plan_name: >-
      {{ r_install_plans.resources | to_json | from_json | json_query(query) }}
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'amqstreams')].metadata.name|[0]

- name: Get InstallPlan
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ ocp4_workload_rhtr_xraylab_amqstreams_install_plan_name }}"
    namespace: openshift-operators
  register: r_install_plan

- name: Approve InstallPlan if necessary
  when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
  k8s:
    state: present
    definition: "{{ lookup( 'template', './templates/general/installplan.yaml.j2' ) }}"
  vars:
    name: "{{ ocp4_workload_rhtr_xraylab_amqstreams_install_plan_name }}"
    namespace: openshift-operators

- name: Wait for the CRD to be available
  when: not ocp4_workload_rhtr_xraylab_workload_destroy|bool
  k8s_facts:
    api_version: "apiextensions.k8s.io/v1beta1"
    kind: CustomResourceDefinition
    name: "{{ item }}"
  loop:
  - kafkas.kafka.strimzi.io
  register: r_crds
  until: r_crds.resources|length > 0
  retries: 30
  delay: 10
