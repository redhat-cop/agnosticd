---
# Implement your Workload deployment tasks here

- name: Make sure project "{{ t_user_project }}" is there
  k8s:
    state: present
    name: "{{ t_user_project }}"
    kind: Project
    api_version: project.openshift.io/v1

- name: Create Catalog Source for use with catalog snapshot
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/catalogsource.j2' ) | from_yaml }}"
  vars:
    namespace: "{{ t_user_project }}"

- name: Assign "{{ t_user }}" as admin
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/rbac.j2' ) }}"
  vars:
    name: "{{ t_user }}"
    namespace: "{{ t_user_project }}"

# - name: Install RH SSO operator in {{ t_user_project }}
#   k8s:
#     state: present
#     definition: "{{ lookup('template', './templates/rhsso_operator.j2' ) }}"

# - name: Wait until InstallPlan is created
#   k8s_info:
#     api_version: operators.coreos.com/v1alpha1
#     kind: InstallPlan
#     namespace: "{{ t_user_project }}"
#   register: r_install_plans
#   vars:
#     _query: >-
#       [?starts_with(spec.clusterServiceVersionNames[0], 'rhsso')]
#   retries: 30
#   delay: 5
#   until:
#   - r_install_plans.resources | length > 0
#   - r_install_plans.resources | to_json | from_json | json_query(_query)

# - name: Set InstallPlan Name
#   set_fact:
#     ocp4_workload_serverless_ml_workshop_rhsso_install_plan_name: "{{ r_install_plans.resources | to_json | from_json | json_query(query) }}"
#   vars:
#     query: >-
#       [?starts_with(spec.clusterServiceVersionNames[0], 'rhsso')].metadata.name|[0]

# - name: Get InstallPlan
#   k8s_info:
#     api_version: operators.coreos.com/v1alpha1
#     kind: InstallPlan
#     name: "{{ ocp4_workload_serverless_ml_workshop_rhsso_install_plan_name }}"
#     namespace: "{{ t_user_project }}"
#   register: r_install_plan

# - name: Approve InstallPlan if necessary
#   when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
#   k8s:
#     state: present
#     definition: "{{ lookup( 'template', './templates/rhsso_installplan.j2' ) }}"

# - name: Get Installed CSV
#   k8s_info:
#     api_version: operators.coreos.com/v1alpha1
#     kind: Subscription
#     name: rhsso-operator
#     namespace: "{{ t_user_project }}"
#   register: r_subscription
#   retries: 30
#   delay: 5
#   until:
#   - r_subscription.resources[0].status.currentCSV is defined
#   - r_subscription.resources[0].status.currentCSV | length > 0

# - name: Wait until CSV is Installed
#   k8s_info:
#     api_version: operators.coreos.com/v1alpha1
#     kind: ClusterServiceVersion
#     name: "{{ r_subscription.resources[0].status.currentCSV }}"
#     namespace: "{{ t_user_project }}"
#   register: r_csv
#   retries: 15
#   delay: 5
#   until:
#   - r_csv.resources[0].status.phase is defined
#   - r_csv.resources[0].status.phase | length > 0
#   - r_csv.resources[0].status.phase == "Succeeded"

# - name: Make sure project "{{ t_user_serverless_project }}"" is there
#   k8s:
#     state: present
#     name: "{{ t_user_serverless_project }}"
#     kind: Project
#     api_version: project.openshift.io/v1

# - name: Assign "{{ t_user }}" as admin
#   k8s:
#     state: present
#     definition: "{{ lookup('template', './templates/rbac.j2' ) }}"
#   vars:
#     name: "{{ t_user }}"
#     namespace: "{{ t_user_serverless_project}}"

# - name: Make sure to delete any limit ranges in {{ t_user_serverless_project }}
#   k8s:
#     state: absent
#     name: "{{ t_user_serverless_project }}"
#     kind: LimitRange

# - name: Create service mesh control plane in {{ t_user_serverless_project }}
#   k8s:
#     state: present
#     definition: "{{ lookup('template', './templates/serverless_controlplane.j2' ) }}"
#   vars:
#     namespace: "{{ t_user_serverless_project}}"

# - name: Wait for Service Mesh Control Plane to finish installation
#   k8s_info:
#     api_version: maistra.io/v2
#     kind: serverlessControlPlane
#     name: workshop-install
#     namespace: "{{ t_user_serverless_project }}"
#   register: r_smcp
#   retries: 40
#   delay: 10
#   until:
#   - r_smcp.resources[0].status.readiness.components is defined
#   - r_smcp.resources[0].status.readiness.components.pending | length == 0
#   - r_smcp.resources[0].status.readiness.components.unready | length == 0

# - name: Add {{ t_user_project }} as a member to its corresponding service mesh project
#   k8s:
#     state: present
#     definition: "{{ lookup('template', './templates/serverless_memberroll.j2' ) }}"
#   vars:
#     namespace: "{{ t_user_serverless_project}}"
#     user_namespace: "{{ t_user_project }}"

# - name: Wait for Service Mesh Member Roll to configure completely
#   k8s_info:
#     api_version: maistra.io/v1
#     kind: serverlessMemberRoll
#     name: default
#     namespace: "{{ t_user_serverless_project }}"
#   register: r_smmr
#   retries: 15
#   delay: 5
#   until:
#   - r_smmr.resources[0].spec.members is defined
#   - r_smmr.resources[0].spec.members | length > 0

# - name: Create network policy to allow traffic into {{ t_user_project }}
#   k8s:
#     state: present
#     definition: "{{ lookup('template', './templates/netpol.j2' ) }}"

# ## This is hacky, but there's no field in the Service Mesh Control Plane to modify this easily right now
# - name: Get amqstreams Config Map
#   k8s_info:
#     api_version: v1
#     kind: ConfigMap
#     name: amqstreams
#     namespace: "{{ t_user_serverless_project }}"
#   register: r_amqstreams_cm

# - name: Remove DeploymentConfig from excluded workloads
#   set_fact:
#     r_amqstreams_cm_config: "{{ r_amqstreams_cm.resources[0].data['config.yaml'] | replace('- DeploymentConfig\n', '') }}"

# - name: Apply new Config Map
#   k8s:
#     state: present
#     definition:
#       apiVersion: v1
#       kind: ConfigMap
#       metadata:
#         name: amqstreams
#         namespace: "{{ t_user_serverless_project}}"
#       data:
#         'config.yaml': "{{ r_amqstreams_cm_config }}"

# - name: Scale amqstreams down
#   k8s_scale:
#     api_version: v1
#     kind: Deployment
#     name: amqstreams
#     namespace: "{{ t_user_serverless_project }}"
#     replicas: 0
#     wait: no

# - name: Wait for scale down
#   k8s_info:
#     api_version: v1
#     kind: Deployment
#     name: amqstreams
#     namespace: "{{ t_user_serverless_project }}"
#   register: r_amqstreams_deployment
#   retries: 15
#   delay: 5
#   until:
#   - r_amqstreams_deployment.resources | json_query('[*].status.conditions[?type==`Available`][].status') | select ('match','True') | list | length == 1

# - name: Restart amqstreams for config map change to take effect
#   k8s_scale:
#     api_version: v1
#     kind: Deployment
#     name: amqstreams
#     namespace: "{{ t_user_serverless_project }}"
#     replicas: 1
#     wait: no

# - name: Wait for scale up
#   k8s_info:
#     api_version: v1
#     kind: Deployment
#     name: amqstreams
#     namespace: "{{ t_user_serverless_project }}"
#   register: r_amqstreams_deployment
#   retries: 15
#   delay: 5
#   until:
#   - r_amqstreams_deployment.resources | json_query('[*].status.conditions[?type==`Available`][].status') | select ('match','True') | list | length == 1

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
