---
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user = {{ ocp4_username }}"

- name: Set up namespace
  k8s:
    state: present
    definition: "{{ lookup('template',  'namespace-ci.yml.j2' ) | from_yaml }}"

- name: Retrieve Quay instance
  kubernetes.core.k8s_info:
    kind: Route
    name: quay-quay
    namespace: quay-enterprise
  register: r_quay
  retries: 60
  delay: 5
  until: r_quay.resources | length > 0

- name: Set docker registry
  set_fact:
    ocp4_workload_multicluster_devsecops_validated_pattern_docker_registry: "{{ r_quay.resources[0].spec.host }}"

- name: Check cosign installation
  shell: cosign version
  register: rc_cosign
  ignore_errors: true

- name: Install cosign if not previously installed
  when: rc_cosign.rc != 0
  shell: >-
    wget "https://github.com/sigstore/cosign/releases/download/v1.6.0/cosign-linux-amd64" &&
    mv cosign-linux-amd64 /usr/local/bin/cosign &&
    chmod +x /usr/local/bin/cosign
  become: true

- name: Create auth file
  ansible.builtin.copy:
    content: "{{ ocp4_token }}"
    dest: /tmp/auth.json

- name: Write cosign key file
  ansible.builtin.copy:
    content: "{{ lookup('file', 'files/cosign.key') }}"
    dest: /tmp/cosign.key

- name: Copy database image to quay repository
  shell: >-
    podman login -u {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_username }} -p {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_password }} {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_registry }} &&
    podman pull --authfile /tmp/auth.json registry.redhat.io/rhel8/postgresql-10 &&
    podman tag registry.redhat.io/rhel8/postgresql-10 {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_registry }}/{{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_username }}/postgresql-10 &&
    podman push --remove-signatures {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_registry }}/{{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_username }}/postgresql-10

- name: Sign quay repository database image
  shell: >-
    cosign login -u {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_username }} -p {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_password }} {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_registry }} &&
    COSIGN_PASSWORD={{ ocp4_workload_multicluster_devsecops_validated_pattern_cosign_password }} cosign sign --key /tmp/cosign.key --force {{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_registry }}/{{ ocp4_workload_multicluster_devsecops_validated_pattern_docker_username }}/postgresql-10

- name: Create Sonarqube and Stackrox resources
  include_tasks: "{{ item }}"
  loop:
  - sonarqube_create_resources.yml
  - stackrox_create_secrets.yml

- name: Retrieve Gitea instance
  kubernetes.core.k8s_info:
    api_version: gpte.opentlc.com/v1
    kind: Gitea
    name: gitea
    namespace: gitea
  register: r_gitea

- name: Set Gitea repo variables
  set_fact:
    _ocp4_workload_multicluster_devsecops_validated_pattern_gitea_hostname: >-
      {{ r_gitea.resources[0].status.giteaHostname }}
    _ocp4_workload_multicluster_devsecops_validated_pattern_gitea_route_url: >-
      {{ r_gitea.resources[0].status.giteaRoute }}
    _ocp4_workload_multicluster_devsecops_validated_pattern_gitea_repo_inventory_url: >-
      {{ r_gitea.resources[0].spec.giteaSsl | bool | ternary( 'https', 'http' ) }}://{{
      ocp4_workload_multicluster_devsecops_validated_pattern_gitea_username | urlencode }}:{{
      ocp4_workload_multicluster_devsecops_validated_pattern_gitea_password | urlencode }}@{{
      r_gitea.resources[0].status.giteaHostname }}/{{
      ocp4_workload_multicluster_devsecops_validated_pattern_gitea_username }}/inventory
    _ocp4_workload_multicluster_devsecops_validated_pattern_gitea_repo_devsecops_url: >-
      {{ r_gitea.resources[0].spec.giteaSsl | bool | ternary( 'https', 'http' ) }}://{{
      ocp4_workload_multicluster_devsecops_validated_pattern_gitea_username | urlencode }}:{{
      ocp4_workload_multicluster_devsecops_validated_pattern_gitea_password | urlencode }}@{{
      r_gitea.resources[0].status.giteaHostname }}/{{
      ocp4_workload_multicluster_devsecops_validated_pattern_gitea_username }}/multicluster-devsecops-pattern

- name: Register webhook and token in Gitea and Update devsecops repository
  include_tasks: "{{ item }}"
  loop:
  - update_gitea_requirements.yaml
  - update_devsecops_repository.yaml

- name: Set up inventory pipeline application
  k8s:
    state: present
    definition: "{{ lookup('template',  'templates/application-app-inventory-pipeline.yml.j2' ) | from_yaml }}"

# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
