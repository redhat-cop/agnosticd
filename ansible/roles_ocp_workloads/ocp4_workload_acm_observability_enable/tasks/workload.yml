---
# Implement your Workload deployment tasks here
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- environment:
    KUBECONFIG: "{{ tmp_kubeconfig }}"
  block:
    - name: Check ODF is ready
      k8s_info:
        api_key: "{{ ocp_key_primary }}"
        host: "{{ ocp_primary_api_url }}"
        validate_certs: false
        api_version: ocs.openshift.io/v1
        kind: StorageCluster
        name: ocs-storagecluster
        namespace: openshift-storage
      register: r_storagecluster
      until:
        - r_storagecluster.resources.0.status.phase == "Ready"
      retries: 30
      delay: 30

    - name: Check NooBaa is ready
      k8s_info:
        api_key: "{{ ocp_key_primary }}"
        host: "{{ ocp_primary_api_url }}"
        validate_certs: false
        api_version: noobaa.io/v1alpha1
        kind: NooBaa
        name: noobaa
        namespace: openshift-storage
      register: r_noobaa
      until:
        - r_noobaa.resources.0.status.phase == "Ready"
      retries: 30
      delay: 30

    #    - debug: var=r_noobaa

    - name: Create Object Bucket Claim
      k8s:
        state: present
        definition: "{{ lookup('template','./templates/obc-observability.yml.j2') | from_yaml }}"

    - name: Get the Object Bucket Claim information

    - name: Create Thanos Object Storage Secret
      k8s:
        state: present
        definition: "{{ lookup('template','./templates/thanos-object-storage-secret.yml.j2') | from_yaml }}"

    - name: Create MultiCluster Observability for ACM 
      k8s:
        state: present
        definition: "{{ lookup('template','./templates/multiclusterobservability-cr.yml.j2') | from_yaml }}"
   
    - name: Wait until MultiCluster Observability environment is created on ACM/hub cluster
  #    k8s_info:
  #      api_version: operators.coreos.com/v1alpha1
  #      kind: InstallPlan
  #      namespace: openshift-operators
  #    register: r_odfhubop
  #    vars:
  #      _query: >-
  #        [?starts_with(spec.clusterServiceVersionNames[0], 'odr-hub-operator')]
  #    retries: 30
  #    delay: 10
  #    until:
  #      - r_odfhubop.resources | length > 0
  #      - r_odfhubop.resources | to_json | from_json | json_query(_query)

#    - name: Wait until odf-multicluster-orchestrator is created
#      k8s_info:
#        api_version: operators.coreos.com/v1alpha1
#        kind: InstallPlan
#        namespace: openshift-operators
#      register: r_odfmoo
#    # - debug: var=r_odfmoo.resources
#    # - debug: var=r_odfmoo.resources.0
#    # - debug: var=r_odfmoo.resources.0.spec
#    # - debug: var=r_odfmoo.resources.0.spec.clusterServiceVersionNames[0]
#    # - debug: var=r_odfmoo.resources.0.spec.clusterServiceVersionNames[1]
#    # - debug: var=r_odfmoo.resources.0.spec.clusterServiceVersionNames
#    # - pause:
#      vars:
#        _query: >-
#          [?starts_with(spec.clusterServiceVersionNames[1], 'odf-multicluster-orchestrator.v4.11.3')]
#      retries: 2
#      delay: 3
#      until:
#        - r_odfmoo.resources.0 | length > 0
#        - r_odfmoo.resources.0 | to_json | from_json | json_query(_query)

    - name: Pause for 5 minutes for Observability setup to be completed.
      ansible.builtin.pause:
        minutes: 5

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
