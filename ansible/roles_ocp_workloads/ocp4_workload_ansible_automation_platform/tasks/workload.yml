---
# Implement your Workload deployment tasks here

- name: Setup environment vars
  environment:
    KUBECONFIG: "{{ ocp4_workload_ansible_automation_platform_tmp_kubeconfig }}"
  block:

    - name: Create Project {{ ocp4_workload_ansible_automation_platform_project }}
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'namespace.j2' ) }}"
      register: r_createproject
      until: r_createproject is succeeded
      retries: 5

    - name: Create Operator group, secret and Install operator
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', item ) }}"
      loop:
        - operatorgroup.j2
        - admin_secret.j2
        - subscription.j2

    - name: Wait until subscription is created
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: InstallPlan
        namespace: "{{ ocp4_workload_ansible_automation_platform_project }}"
      register: r_aap_operator
      vars:
        _query: >-
          [?starts_with(spec.clusterServiceVersionNames[0], 'aap-operator')]
      retries: 30
      delay: 10
      until:
        - r_aap_operator.resources | length > 0
        - r_aap_operator.resources | to_json | from_json | json_query(_query)

    - name: Get Installed CSV
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        name: ansible-automation-platform-operator
        namespace: "{{ ocp4_workload_ansible_automation_platform_project }}"
      register: r_subscription
      retries: 30
      delay: 10
      until:
        - r_subscription.resources[0].status.currentCSV is defined
        - r_subscription.resources[0].status.currentCSV | length > 0

    - name: Wait until CSV is Installed
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        name: "{{ r_subscription.resources[0].status.currentCSV }}"
        namespace: "{{ ocp4_workload_ansible_automation_platform_project }}"
      register: r_csv
      retries: 30
      delay: 10
      until:
        - r_csv.resources[0].status.phase is defined
        - r_csv.resources[0].status.phase | length > 0
        - r_csv.resources[0].status.phase == "Succeeded"

    - name: Create Automation Controller
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'automationcontroller.j2' ) }}"

    - name: Retrieve created route
      kubernetes.core.k8s_info:
        api_version: "route.openshift.io/v1"
        kind: Route
        name: "{{ ocp4_workload_ansible_automation_platform_app_name }}"
        namespace: "{{ ocp4_workload_ansible_automation_platform_project }}"
      register: r_route
      until: r_route.resources[0].spec.host is defined
      retries: 30
      delay: 45

    - name: Get automation_controller route hostname
      ansible.builtin.set_fact:
        automation_controller_hostname: "{{ r_route.resources[0].spec.host }}"

    - name: Wait for automation_controller to be running
      ansible.builtin.uri:
        url: http://{{ ocp4_workload_ansible_automation_platform_hostname }}/api/v2/ping/
        status_code: 200
      register: r_result
      until: r_result.json.version is defined
      retries: 60
      delay: 45

    # TODO: Can this pause be replaced with something "better"?

    - name: Pause for 5 minutes for AC to be ready
      ansible.builtin.pause:
        minutes: 5

    - name: Display version
      when: not silent | bool
      ansible.builtin.debug:
        msg: "{{ r_result.json.version }}"

    - name: Print Access information
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
        - "Automation Controller Web URL: https://{{ automation_controller_hostname }}"
        - "Login Name:  admin"
        - "Login Password: {{ ocp4_workload_ansible_automation_platform_admin_password }}"

    - name: Print Access information
      agnosticd_user_info:
        data:
          ac_web_url: >-
            https://{{ ocp4_workload_ansible_automation_platform_hostname | default(automation_controller_hostname) }}
          ac_user: "{{ ocp4_workload_ansible_automation_platform_admin_username | default('admin') }}"
          ac_password: "{{ ocp4_workload_ansible_automation_platform_admin_password }}"

# Leave this as the last task in the playbook.

- name: workload tasks complete
  when: not silent | bool
  ansible.builtin.debug:
    msg: "Workload Tasks completed successfully."
