---
- name: get ingress controler
  kubernetes.core.k8s_info:
    kind: IngressController
    name: default
    namespace: openshift-ingress-operator
  register: r_ingress

- name: get openshift api url
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
  register: r_infra

- name: set _ocp4_workload_gitops_bootstrap_deployer_values
  ansible.builtin.set_fact:
    _ocp4_workload_gitops_bootstrap_deployer_values:
      deployer:
        domain: "{{ r_ingress.resources[0].status.domain }}"
        apiUrl: "{{ r_infra.resources[0].status.apiServerURL }}"

- name: print _ocp4_workload_gitops_bootstrap_deployer_values
  ansible.builtin.debug:
    msg: "{{ _ocp4_workload_gitops_bootstrap_deployer_values | to_yaml }}"

- name: create bootstrap argocd application
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'application.yaml.j2') | from_yaml }}"

- name: wait bootstrap argocd application is healthy and synced
  kubernetes.core.k8s_info:
    api_version: argoproj.io/v1alpha1
    kind: Application
    name: bootstrap
    namespace: openshift-gitops
  register: argocd_bootstrap
  retries: "{{ ocp4_workload_gitops_bootstrap_health_retries }}"
  delay: 10
  until:
  - argocd_bootstrap is defined
  - argocd_bootstrap.resources is defined
  - argocd_bootstrap.resources | length > 0
  - argocd_bootstrap.resources[0].status is defined
  - argocd_bootstrap.resources[0].status.health.status == "Healthy"
  - argocd_bootstrap.resources[0].status.sync.status == "Synced"
  ignore_errors: "{{ ocp4_workload_gitops_bootstrap_health_ignore | bool }}"

- name: Pause for a minute while the bootstrap app deploys
  ansible.builtin.pause:
    seconds: 60

- name: Debug all applications with our label in any namespace
  when: ocp4_workload_gitops_bootstrap_application_wait | bool
  vars:
    query: "[*].{App: metadata.name, Health: status.health.status, Sync: status.sync.status}"
  ansible.builtin.debug:
    msg: "{{ _all_apps.resources | json_query(query)}}"

- name: Validate all applications with our label in any namespace are healthy and synced
  when: ocp4_workload_gitops_bootstrap_application_wait | bool
  kubernetes.core.k8s_info:
    api_version: argoproj.io/v1alpha1
    kind: Application
    label_selectors:
    - "demo.redhat.com/application"
  register: _all_apps
  delay: 10
  retries: "{{ ocp4_workload_gitops_bootstrap_application_health_retries }}"
  until:
  - _all_apps is defined
  - _all_apps.resources is defined
  # json_query: length of list of resources found == length of list of those with good status
  - _all_apps.resources | json_query('length([?status.health.status==`Healthy`]) == length(@)')
  - _all_apps.resources | json_query('length([?status.sync.status==`Synced`]) == length(@)')

#######
####### Begin processing GitOps output
#######

- name: Retrieve configmaps with the demo.redhat.com/userinfo label
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    label_selectors:
    - "demo.redhat.com/userinfo"
  register: cm_userinfo

# # Sample multi-user configmap
# # "data.users_json:" is what this workload looks for to import multi-user data
#
# apiVersion: v1
# data:
#   users_json: '{"users": {"user1": { "kiali_url": "https://kiali-istio-system.apps.rosa-9gp6n.6jcc.p1.openshiftapps.com",
#     "sample_first_key": "sample_first_value" },"user2": { "kiali_url": "https://kiali-istio-system.apps.rosa-9gp6n.6jcc.p1.openshiftapps.com",
#     "sample_first_key": "sample_first_value" }}}'
#   sample_global_value: "global_values"
#   sample_global_yaml: |
#     sample_global_yaml:
#       sample_yaml_key: sample_yaml_value
# kind: ConfigMap
# metadata:
#   labels:
#     app.kubernetes.io/instance: uplift
#     demo.redhat.com/userinfo: ""
#   name: userinfo-users-json
#   namespace: istio-system
#

- name: If configmaps were found, process them
  when:
  - cm_userinfo.resources is defined
  - cm_userinfo.resources | length | int > 0
  block:

  - name: Add to agnosticd_user_info all data from configmaps except configmap.data.users_json data
    agnosticd_user_info:
      data: >-
        {{ item | dict2items | selectattr('key', 'ne', 'users_json') | items2dict }}
    loop: "{{ cm_userinfo.resources | map(attribute='data') }}"

  - name: Prepare data_user_json to add to agnosticd_user_info
    ansible.builtin.debug:
      msg: "Prepare data_user_json to add to agnosticd_user_info"

  - name: Merge list of all users_json data from all configmaps that have data.users_json
    set_fact:
      data_users_json: "{{ data_users_json | default([]) | combine(item.data.users_json | from_json, recursive=True) }}"
    loop: "{{ cm_userinfo.resources }}"
    when: item.data.users_json is defined

  - name: Handle data_users_json data
    when: data_users_json is defined
    block:
    - name: Debug merged data_users_json data
      ansible.builtin.debug:
        msg: "{{ data_users_json }}"

    - name: Add to agnosticd_user_info all configmap.data.users_json configmap data
      agnosticd_user_info:
        user: "{{ item.key }}"
        data:
          "{{ item.value }}"
      loop: "{{ data_users_json.users | dict2items }}"
      when: data_users_json is defined

- name: Debug user_data
  ansible.builtin.debug:
    msg: "{{ lookup('agnosticd_user_data', '*') }}"
