---
# Implement your Workload deployment tasks here
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Create Catalogsource for use with catalog snapshot
  when: ocp4_workload_serverless_use_catalog_snapshot | bool
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/catalogsource.j2' ) | from_yaml }}"

- name: Determine channel for Serverless operator is no channel specified
  when: ocp4_workload_serverless_channel | default("") | length == 0
  block:
  - name: Get cluster version
    k8s_info:
      api_version: config.openshift.io/v1
      kind: ClusterVersion
      name: version
    register: r_cluster_version

  - name: Get current stable channel for Serverless operator
    k8s_info:
      api_version: packages.operators.coreos.com/v1
      kind: PackageManifest
      name: serverless-operator
      namespace: openshift-marketplace
    register: r_so_channel

  # Set Serverless channel to the one matching the deployed cluster version.
  # If no matching channel available set to defaultChannel from the subscription.
  - name: Set Serverless operator channel
    set_fact:
      ocp4_workload_serverless_channel: >-
        {{ t_version_match_channel | default(r_so_channel.resources[0].status.defaultChannel, true) }}
    vars:
      t_cluster_version: >-
        {{ r_cluster_version.resources[0].spec.channel | regex_replace('.*-(\d+\.\d+)', '\1') }}
      t_version_match_query: "[?name=='{{ t_cluster_version }}']|[0].name"
      t_version_match_channel: >-
        {{ r_so_channel.resources[0].status.channels | json_query(t_version_match_query) }}

- name: Print Serverless operator channel to be installed
  debug:
    msg: "Serverless operator channel to be installed: {{ ocp4_workload_serverless_channel }}"

- name: Create OpenShift Serverless subscription
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/subscription.j2' ) | from_yaml }}"

- name: Wait until InstallPlan is created
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: openshift-operators
  register: r_install_plans
  vars:
    _query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'serverless-operator')]
  retries: 30
  delay: 5
  until:
  - r_install_plans.resources | length > 0
  - r_install_plans.resources | to_json | from_json | json_query(_query)

- name: Set InstallPlan Name
  set_fact:
    ocp4_workload_serverless_install_plan_name: "{{ r_install_plans.resources | to_json | from_json | json_query(query) }}"
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'serverless-operator')].metadata.name|[0]

- name: Get InstallPlan
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    name: "{{ ocp4_workload_serverless_install_plan_name }}"
    namespace: openshift-operators
  register: r_install_plan
  
- name: Approve InstallPlan if necessary
  when: r_install_plan.resources[0].status.phase is match("RequiresApproval")
  k8s:
    state: present
    definition: "{{ lookup( 'template', './templates/installplan.j2' ) }}"

- name: Get Installed CSV
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: serverless-operator
    namespace: openshift-operators
  register: r_subscription
  retries: 30
  delay: 5
  until:
  - r_subscription.resources[0].status.currentCSV is defined
  - r_subscription.resources[0].status.currentCSV | length > 0

- name: Wait until CSV is Installed
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ r_subscription.resources[0].status.currentCSV }}"
    namespace: openshift-operators
  register: r_csv
  retries: 30
  delay: 5
  until:
  - r_csv.resources[0].status.phase is defined
  - r_csv.resources[0].status.phase | length > 0
  - r_csv.resources[0].status.phase == "Succeeded"

- name: Create knative-serving namespace and KNative Serving object
  k8s:
    state: present
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/ns-knative-serving.yaml
  - ./files/knative_serving.yaml

- name: Wait until KNative Serving installation is complete
  when: ocp4_workload_serverless_wait_for_deploy | bool
  k8s_info:
    api_version: operator.knative.dev/v1alpha1
    kind: KnativeServing
    name: knative-serving
    namespace: knative-serving
  register: r_kn_serving
  retries: 30
  delay: 10
  until:
  - r_kn_serving.resources[0].status.conditions[0].status is defined
  - r_kn_serving.resources[0].status.conditions[0].status == "True"
  - r_kn_serving.resources[0].status.conditions[1].status is defined
  - r_kn_serving.resources[0].status.conditions[1].status == "True"
  - r_kn_serving.resources[0].status.conditions[2].status is defined
  - r_kn_serving.resources[0].status.conditions[2].status == "True"
  - r_kn_serving.resources[0].status.conditions[3].status is defined
  - r_kn_serving.resources[0].status.conditions[3].status == "True"

- name: Install KNative Eventing
  when: ocp4_workload_serverless_install_eventing | bool
  block:
  - name: Create knative-eventing namespace and KNative Eventing object
    k8s:
      state: present
      definition: "{{ lookup('file', item ) | from_yaml }}"
    loop:
    - ./files/ns-knative-eventing.yaml
    - ./files/knative_eventing.yaml

  - name: Wait until KNative Eventing installation is complete
    when: ocp4_workload_serverless_wait_for_deploy | bool
    k8s_info:
      api_version: operator.knative.dev/v1alpha1
      kind: KnativeEventing
      name: knative-eventing
      namespace: knative-eventing
    register: r_kn_eventing
    retries: 30
    delay: 10
    until:
    - r_kn_eventing.resources[0].status.conditions[0].status is defined
    - r_kn_eventing.resources[0].status.conditions[0].status == "True"
    - r_kn_eventing.resources[0].status.conditions[1].status is defined
    - r_kn_eventing.resources[0].status.conditions[1].status == "True"

- name: Get kn download route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: kn-cli-downloads
    namespace: knative-serving
  register: r_kn_download

- name: Install kn CLI on bastion
  become: true
  unarchive:
    src: "http://{{ r_kn_download.resources[0].status.ingress[0].host }}/amd64/linux/kn-linux-amd64.tar.gz"
    remote_src: yes
    dest: /usr/bin
    mode: 0775
    owner: root
    group: root
  args:
    creates: /usr/bin/kn
  retries: 10
  delay: 10

- name: Create kn bash completion file
  become: true
  command: /usr/bin/kn completion bash >/etc/bash_completion.d/kn
  args: 
    creates: /etc/bash_completion.d/kn

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
