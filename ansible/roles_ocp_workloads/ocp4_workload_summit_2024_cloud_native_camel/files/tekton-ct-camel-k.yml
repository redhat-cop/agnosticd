apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: kamel-run
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Deployment
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: cli
    tekton.dev/platforms: "linux/amd64"
    tekton.dev/displayName: "kamel run"
spec:
  description: |-
    Run a Camel Integration.
    Kamel-run task creates a Camel K Integration which will be taken and operated by Camel K operator.
  params:
    - default: 'docker.io/apache/camel-k:2.2.0'
      description: The location of Camel K CLI image.
      name: camel-k-image
      type: string
    - description: the Integration source we want to run
      name: filename
      type: string
    - default: ''
      description: the namespace where to run the integration
      name: namespace
      type: string
    - default: ''
      description: '-t traits'
      name: traits
      type: string
    - default: ''
      description: '-d dependencies'
      name: dependencies
      type: string
    - default: ''
      description: the custom container image to use (if the build was performed as part of previous tasks)
      name: container-image
      type: string
    - default: 'false'
      description: wait for the Integration to run before exiting the task
      name: wait
      type: string
  results:
    - description: The name of the integration created
      name: integration-name
      type: string
    - description: The phase of the integration created (when used with input `wait` parameter)
      name: integration-phase
      type: string
  steps:
    - image: $(params.camel-k-image)
      name: execute
      resources: {}
      script: |-
        #!/usr/bin/env bash

        kamel version

        echo "Kamel command > kamel run $(params.dependencies) $(params.traits) $(params.filename) -n $(params.namespace) --wait"

        kamel_output=$(kamel run $(params.dependencies) $(params.traits) $(params.filename) -n $(params.namespace) --wait)

        echo "$kamel_output"
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source