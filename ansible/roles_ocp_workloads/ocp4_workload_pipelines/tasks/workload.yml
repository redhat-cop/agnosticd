---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Install OpenShift Pipelines operator
  include_role:
    name: install_operator
  vars:
    install_operator_action: install
    install_operator_name: openshift-pipelines-operator
    install_operator_namespace: openshift-operators
    install_operator_channel: "{{ ocp4_workload_pipelines_channel }}"
    install_operator_catalog: redhat-operators
    install_operator_packagemanifest_name: openshift-pipelines-operator-rh
    install_operator_automatic_install_plan_approval: "{{ ocp4_workload_pipelines_automatic_install_plan_approval }}"
    install_operator_csv_nameprefix: "{{ ocp4_workload_pipelines_csv_nameprefix }}"
    install_operator_starting_csv: "{{ ocp4_workload_pipelines_starting_csv }}"
    install_operator_catalogsource_setup: "{{ ocp4_workload_pipelines_use_catalog_snapshot }}"
    install_operator_catalogsource_name: "{{ ocp4_workload_pipelines_catalogsource_name }}"
    install_operator_catalogsource_namespace: openshift-operators
    install_operator_catalogsource_image: "{{ ocp4_workload_pipelines_catalog_snapshot_image | default('') }}"
    install_operator_catalogsource_image_tag: "{{ ocp4_workload_pipelines_catalog_snapshot_image_tag }}"

- name: Wait until pipeline controller pods are ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    namespace: openshift-pipelines
    name: tekton-pipelines-controller
  register: r_pipeline_controller_deployment
  retries: 40
  delay: 10
  until:
  - r_pipeline_controller_deployment.resources | length | int > 0
  - r_pipeline_controller_deployment.resources[0].status.readyReplicas is defined
  - r_pipeline_controller_deployment.resources[0].status.readyReplicas | int == r_pipeline_controller_deployment.resources[0].spec.replicas | int

- name: Wait until tkn cli download deployment is ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    namespace: openshift-pipelines
    name: tkn-cli-serve
  register: r_pipeline_tkn_cli_deployment
  retries: 60
  delay: 30
  until:
  - r_pipeline_tkn_cli_deployment.resources | length | int > 0
  - r_pipeline_tkn_cli_deployment.resources[0].status.readyReplicas is defined
  - r_pipeline_tkn_cli_deployment.resources[0].status.readyReplicas | int == r_pipeline_controller_deployment.resources[0].spec.replicas | int

- name: Get tkn ConsoleCLIDownload
  kubernetes.core.k8s_info:
    api_version: console.openshift.io/v1
    kind: ConsoleCLIDownload
    name: tkn
  register: r_tkn_cli_download
  retries: 20
  delay: 10
  ignore_errors: true
  until:
  - r_tkn_cli_download.resources is defined
  - r_tkn_cli_download.resources | length > 0

- name: Get tkn download URL from ConsoleCLIDownload
  when: r_tkn_cli_download.resources | length > 0
  set_fact:
    _ocp4_workload_pipelines_tkn_url: >-
      {{ r_tkn_cli_download.resources[0] | to_json | from_json
       | json_query("spec.links[?contains(href,'-linux-amd64')].href") | first }}

- name: Download tkn cli tool
  get_url:
    url: "{{ _ocp4_workload_pipelines_tkn_url }}"
    validate_certs: false
    dest: /tmp/tkn-linux-amd64.tar.gz
    mode: 0660
  register: r_tkn
  until: r_tkn is success
  retries: 10
  delay: 10

- name: Install tkn CLI on bastion
  become: true
  unarchive:
    src: /tmp/tkn-linux-amd64.tar.gz
    remote_src: true
    dest: /usr/bin
    mode: 0775
    owner: root
    group: root
  args:
    creates: /usr/bin/tkn

- name: Remove downloaded file
  file:
    state: absent
    path: /tmp/tkn-linux-amd64.tar.gz

# command: does not work here - somehow the parameters don't get passed properly
- name: Setup tkn bash completion
  become: true
  shell: "/usr/bin/tkn completion bash >/etc/bash_completion.d/tkn"
  args:
    creates: /etc/bash_completion.d/tkn

- name: Setup tkn-pac bash completion
  become: true
  shell: "/usr/bin/tkn-pac completion bash >/etc/bash_completion.d/tkn-pac"
  args:
    creates: /etc/bash_completion.d/tkn-pac
  # Ignore errors for older pipelines versions
  ignore_errors: true

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
