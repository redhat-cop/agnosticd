---
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user = {{ ocp4_username }}"

- name: Set up namespace
  k8s:
    state: present
    definition: "{{ lookup('template',  'namespace-ci.yml.j2' ) | from_yaml }}"

- name: Retrieve Quay instance
  kubernetes.core.k8s_info:
    kind: Route
    name: quay-quay
    namespace: quay-enterprise
  register: r_quay
  retries: 60
  delay: 5
  until: r_quay.resources | length > 0

- name: Set docker registry
  set_fact:
    ocp4_workload_devsecops_validated_pattern_docker_registry: "{{ r_quay.resources[0].spec.host }}"

- name: Create Sonarqube and Stackrox resources
  include_tasks: "{{ item }}"
  loop:
  - sonarqube_create_resources.yml
  - stackrox_create_secrets.yml

- name: Retrieve Gitea instance
  kubernetes.core.k8s_info:
    api_version: gpte.opentlc.com/v1
    kind: Gitea
    name: gitea
    namespace: gitea
  register: r_gitea

- name: Set Gitea repo variables
  set_fact:
    _ocp4_workload_devsecops_validated_pattern_gitea_hostname: >-
      {{ r_gitea.resources[0].status.giteaHostname }}
    _ocp4_workload_devsecops_validated_pattern_gitea_route_url: >-
      {{ r_gitea.resources[0].status.giteaRoute }}
    _ocp4_workload_devsecops_validated_pattern_gitea_repo_globex_ui_url: >-
      {{ r_gitea.resources[0].spec.giteaSsl | bool | ternary( 'https', 'http' ) }}://{{
      ocp4_workload_devsecops_validated_pattern_gitea_username | urlencode }}:{{
      ocp4_workload_devsecops_validated_pattern_gitea_password | urlencode }}@{{
      r_gitea.resources[0].status.giteaHostname }}/{{
      ocp4_workload_devsecops_validated_pattern_gitea_username }}/globex-ui
    _ocp4_workload_devsecops_validated_pattern_gitea_repo_devsecops_url: >-
      {{ r_gitea.resources[0].spec.giteaSsl | bool | ternary( 'https', 'http' ) }}://{{
      ocp4_workload_devsecops_validated_pattern_gitea_username | urlencode }}:{{
      ocp4_workload_devsecops_validated_pattern_gitea_password | urlencode }}@{{
      r_gitea.resources[0].status.giteaHostname }}/{{
      ocp4_workload_devsecops_validated_pattern_gitea_username }}/devsecops-validated-pattern

- name: Register webhook and token in Gitea and Update devsecops repository
  include_tasks: "{{ item }}"
  loop:
  - update_gitea_requirements.yaml
  - update_devsecops_repository.yaml

- name: Set up globex-ui pipeline application
  k8s:
    state: present
    definition: "{{ lookup('template',  'templates/application-globex-ui-pipeline.yml.j2' ) | from_yaml }}"

- name: Wait for pipeline to be deployed
  kubernetes.core.k8s_info:
    api_version: tekton.dev/v1beta1
    kind: Pipeline
    name: app-globex-ui-pipeline
    namespace: "{{ ocp4_workload_devsecops_validated_pattern_ci_namespace }}"
  register: r_pipeline
  retries: 60
  delay: 5
  until: r_pipeline.resources | length > 0

- name: Generate UID
  set_fact:
    _ocp4_workload_devsecops_validated_pattern_pipline_uid: "{{ 9999999999999999999999 | random | to_uuid }}"

- name: Trigger pipeline run
  include_tasks: trigger_globex_webhook.yaml

- name: Wait for pipeline to finish run
  kubernetes.core.k8s_info:
    api_version: tekton.dev/v1beta1
    kind: PipelineRun
    namespace: "{{ ocp4_workload_devsecops_validated_pattern_ci_namespace }}"
    label_selectors:
    - tekton.dev/pipeline = app-globex-ui-pipeline
  register: r_pipeline
  retries: 60
  delay: 10
  until:
  - r_pipeline.resources | length > 0
  - r_pipeline.resources | json_query('[*].status.conditions[?reason==`Succeeded`][].status') | select ('match','True') | list | length == 1

- name: Apply acm manifests
  include_tasks: update_acm_requirements.yaml

# Leave this as the last task in the playbook.
# --------------------------------------------
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
