---
- name: Retrieve Vault Pod
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: "{{ ocp4_workload_devsecops_validated_pattern_vault_namespace }}"
  register: r_vault
  retries: 60
  delay: 5
  until:
  - r_vault.resources is defined
  - r_vault.resources | length > 0
  - r_vault.resources[0].status is defined
  - r_vault.resources[0].status.phase is defined
  - r_vault.resources[0].status.phase == 'Running'

- name: Retrieve vault sealing keys
  shell: >-
    oc exec -it -n {{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }}  vault-0 -c vault -- cat /vault/data/vault-auto-unseal-keys.txt > /home/ec2-user/vault-auto-unseal-keys.txt

- name: Get login token
  shell: >-
    grep -A 0 root_token /home/ec2-user/vault-auto-unseal-keys.txt | sed 's/root_token: //g'
  register: r_token

- name: Get unsealing key 1
  shell: >-
    grep -A 5 unseal_keys_b64 /home/ec2-user/vault-auto-unseal-keys.txt |head -2|tail -1|sed 's/- //g'
  register: r_unsealing_key_1

- name: Get unsealing key 2
  shell: >-
    grep -A 5 unseal_keys_b64 /home/ec2-user/vault-auto-unseal-keys.txt |head -3|tail -1|sed 's/- //g'
  register: r_unsealing_key_2

- name: Get unsealing key 3
  shell: >-
    grep -A 5 unseal_keys_b64 /home/ec2-user/vault-auto-unseal-keys.txt |head -4|tail -1|sed 's/- //g'
  register: r_unsealing_key_3

- name: Set vault token fact
  set_fact:
    ocp4_workload_devsecops_validated_pattern_vault_token: "{{ r_token.stdout }}"
    ocp4_workload_devsecops_validated_pattern_vault_unsealing_key_1: "{{ r_unsealing_key_1.stdout }}"
    ocp4_workload_devsecops_validated_pattern_vault_unsealing_key_2: "{{ r_unsealing_key_2.stdout }}"
    ocp4_workload_devsecops_validated_pattern_vault_unsealing_key_3: "{{ r_unsealing_key_3.stdout }}"

- name: Login to vault
  shell: >-
    oc exec vault-0 --namespace={{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} --stdin --tty -- vault login token={{ ocp4_workload_devsecops_validated_pattern_vault_token }}

- name: Enable Kubernetes Auth
  shell: >-
    oc exec vault-0 --namespace={{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} --stdin --tty -- vault auth enable kubernetes &&
    TOKEN=$(oc exec vault-0 --namespace={{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} -- /bin/sh -c 'echo $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)') &&
    KUBERNETES_PORT_443_TCP_ADDR=$(oc exec vault-0 --namespace={{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} -- /bin/sh -c 'echo $KUBERNETES_PORT_443_TCP_ADDR') &&
    oc exec vault-0 --namespace={{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} --stdin --tty -- vault write auth/kubernetes/config kubernetes_host=https://$KUBERNETES_PORT_443_TCP_ADDR:443 &&
    token_reviewer_jwt=$TOKEN kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

- name: Label namespace and enable v2 of KV Secrets Engine
  shell: >-
    oc label namespace {{ ocp4_workload_devsecops_validated_pattern_vault_namespace }} vault.hashicorp.com/agent-webhook=enabled &&
    oc exec vault-0 --namespace={{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} --stdin --tty -- vault secrets enable -path=secret kv-v2

- name: Create the vault policy
  shell: >-
    oc exec -it vault-0 -n {{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} -- /bin/sh -c 'echo path \"secret/data/cosign/config\" {capabilities = [\"read\"]} > /tmp/my_policy.hcl' &&
    oc exec -it vault-0 -n {{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} -- vault policy write cosign /tmp/my_policy.hcl &&
    oc exec -it vault-0 -n {{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} -- vault write auth/kubernetes/role/cosign bound_service_account_names=pipeline bound_service_account_namespaces=ci policies=cosign ttl=96h

- name: Create vault cosign secret
  shell: >-
    oc exec -it vault-0 -n {{ ocp4_workload_devsecops_validated_pattern_vault_namespace
    }} -- vault kv put secret/cosign/config cosign_key="{{ lookup('file', 'files/cosign.key')
    }}" cosign_password={{ ocp4_workload_devsecops_validated_pattern_cosign_password }}

- name: Create token secret
  k8s:
    state: present
    definition: "{{ lookup('template',  'acm-vault-token-secret.yaml.j2' ) | from_yaml }}"