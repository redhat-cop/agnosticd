apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: {{ _app_name }}-{{ cluster.name }}
  namespace: {{ ocp4_workload_devsecops_validated_pattern_openshift_gitops_namespace }}
spec:
  generators:
    - clusterDecisionResource:
        configMapRef: acm-placement
        labelSelector:
          matchLabels:
            cluster.open-cluster-management.io/placement: {{ _app_name }}-{{ cluster.name }}
        requeueAfterSeconds: 30
  template:
    metadata:
      name: {{ _app_name }}-{{ '{{name}}' }}
      labels:
        velero.io/exclude-from-backup: "true"
    spec:
      destination:
        namespace: {{ _namespace }}
        server: "{{ '{{server}}' }}"
      project: default
      source:
{% if _app_name == 'applications' %}
        path: gitops/charts/{{ cluster.name }}
        repoURL: {{ _ocp4_workload_devsecops_validated_pattern_gitea_repo_devsecops_url }}
        targetRevision: main
        helm:
          parameters:
            - name: {{ cluster.purpose }}.repoUrl
              value: "{{ _ocp4_workload_devsecops_validated_pattern_gitea_repo_devsecops_url }}"
            - name: {{ cluster.purpose }}.globex.namespace
              value: "{{ ocp4_workload_devsecops_validated_pattern_app_namespace }}"
            - name: {{ cluster.purpose }}.globex.contextDir
              value: gitops/application/globex/overlays/{{ cluster.name }}
{% if cluster.purpose == 'development' %}
            - name: {{ cluster.purpose }}.globexUnsigned.namespace
              value: "{{ ocp4_workload_devsecops_validated_pattern_app_namespace }}"
            - name: {{ cluster.purpose }}.globexUnsigned.contextDir
              value: gitops/application/globex/overlays/fail
{% endif %}
            - name: {{ cluster.purpose }}.kafka.namespace
              value: "{{ ocp4_workload_devsecops_validated_pattern_kafka_namespace }}"
            - name: {{ cluster.purpose }}.kafka.contextDir
              value: gitops/application/kafka/overlays/{{ cluster.name }}
{% else %}
        path: config/pipeline/charts/globex-ui
        repoURL: {{ _ocp4_workload_devsecops_validated_pattern_gitea_repo_devsecops_url }}
        targetRevision: main
        helm:
          parameters:
            - name: globex.registry.imageRepo
              value: "{{ _internal_image_repo }}"
            - name: globex.registry.dockerConfigJson
              value: "{{ _internal_docker_config }}"
            - name: globex.gitea.manifestRepo
              value: "{{ _internal_manifest_repo }}"
            - name: globex.gitea.manifestFile
              value: "{{ _internal_manifest_file_dev }}"
            - name: globex.gitea.manifestFileProd
              value: "{{ _internal_manifest_file_prod }}"
            - name: globex.gitea.manifestRepoName
              value: "{{ _internal_manifest_repo_name }}"
            - name: globex.gitea.gitRepoHost
              value: "{{ _internal_git_repo_host }}"
            - name: globex.gitea.manifestFileFail
              value: "{{ _internal_manifest_file_fail }}"
            - name: globex.gitea.webhookSecretKey
              value: "{{ _internal_webhook_secret_key }}"
            - name: globex.gitea.token
              value: "{{ _internal_gitea_token }}"
            - name: globex.sonarqube.hostUrl
              value: "{{ _internal_sonarqube_host_url }}"
            - name: globex.cosign.privateKey
              value: "{{ _internal_cosign_key }}"
            - name: globex.cosign.password
              value: "{{ _internal_cosign_password }}"
            - name: globex.cosign.publicKey
              value: "{{ _internal_cosign_pub }}"
      ignoreDifferences:
        - kind: "ServiceAccount"
          jsonPointers:
          - /imagePullSecrets
{% endif %}
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
          - PruneLast=true
        retry:
          limit: 100
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 3m0s
