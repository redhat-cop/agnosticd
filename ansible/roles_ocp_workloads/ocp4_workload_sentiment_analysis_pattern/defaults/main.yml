become_override: false
silent: false

# ------------------------------------------------
# AMQ Streams Operator
# ------------------------------------------------

amq_streams_operator_channel: ""
amq_streams_operator_automatic_install_plan_approval: true
amq_streams_operator_starting_csv: ""
amq_streams_operator_name: amq-streams
amq_streams_operator_namespace: openshift-operators
amq_streams_operator_catalog: redhat-operators
amq_streams_operator_csv_prefix: amqstreams
amq_streams_operator_wait_for_deploy: true
amq_streams_operator_use_catalog_snapshot: false
amq_streams_operator_catalogsource_name: ""
amq_streams_operator_catalog_snapshot_image: ""
amq_streams_operator_catalog_snapshot_image_tag: ""

# ------------------------------------------------
# Red Hat SSO Operator
# ------------------------------------------------

rhsso_operator_namespace: rhsso
rhsso_operator_channel: ""
rhsso_operator_automatic_install_plan_approval: true
rhsso_operator_starting_csv: ""
rhsso_operator_wait_for_deploy: true
rhsso_operator_use_catalog_snapshot: false
rhsso_operator_catalogsource_name: ""
rhsso_operator_catalog_snapshot_image: ""
rhsso_operator_catalog_snapshot_image_tag: ""

# ------------------------------------------------
# OpenShift Gitops
# ------------------------------------------------

openshift_gitops_channel: latest
openshift_gitops_automatic_install_plan_approval: true
openshift_gitops_starting_csv: ""
openshift_gitops_pipelines_csv_prefix: openshift-pipelines-operator-rh

openshift_gitops_setup_cluster_admin: true

openshift_gitops_update_route_tls: true

openshift_gitops_update_resources: true

# ApplicationSet Controller
openshift_gitops_applicationset_controller_update: false
openshift_gitops_applicationset_controller_requests_cpu: 250m
openshift_gitops_applicationset_controller_requests_memory: 512Mi
openshift_gitops_applicationset_controller_limits_cpu: "2"
openshift_gitops_applicationset_controller_limits_memory: 1Gi

# Application Controller
openshift_gitops_controller_update: true
openshift_gitops_controller_requests_cpu: "2"
openshift_gitops_controller_requests_memory: 4Gi
openshift_gitops_controller_limits_cpu: "4"
openshift_gitops_controller_limits_memory: 4Gi
# Setting a default value for reconcile timeout as it needs to be configurable
# Reduce this value if you want to sync more frequently
openshift_gitops_controller_app_sync: 3m

openshift_gitops_controller_remove_memory_limits: true

# Redis
openshift_gitops_redis_update: false
openshift_gitops_redis_requests_cpu: 250m
openshift_gitops_redis_requests_memory: 128Mi
openshift_gitops_redis_limits_cpu: 500m
openshift_gitops_redis_limits_memory: 256Mi

# Repo Server
openshift_gitops_repo_update: true
openshift_gitops_repo_requests_cpu: 500m
openshift_gitops_repo_requests_memory: 512Mi
openshift_gitops_repo_limits_cpu: "2"
openshift_gitops_repo_limits_memory: 2Gi

# DEX
openshift_gitops_dex_update: false
openshift_gitops_dex_requests_cpu: 125m
openshift_gitops_dex_requests_memory: 128Mi
openshift_gitops_dex_limits_cpu: 500m
openshift_gitops_dex_limits_memory: 256Mi

# Server
openshift_gitops_server_update: false
openshift_gitops_server_requests_cpu: 250m
openshift_gitops_server_requests_memory: 128Mi
openshift_gitops_server_limits_cpu: 500m
openshift_gitops_server_limits_memory: 256Mi

openshift_gitops_resource_customizations: |
  operators.coreos.com/Subscription:
    health.lua: |
      health_status = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          numDegraded = 0
          numPending = 0
          msg = ""
          for i, condition in pairs(obj.status.conditions) do
            msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
            if condition.type == "InstallPlanPending" and condition.status == "True" then
              numPending = numPending + 1
            elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
              numDegraded = numDegraded + 1
            elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed") and condition.status == "True" then
              numDegraded = numDegraded + 1
            end
          end
          if numDegraded == 0 and numPending == 0 then
            health_status.status = "Healthy"
            health_status.message = msg
            return health_status
          elseif numPending > 0 and numDegraded == 0 then
            health_status.status = "Progressing"
            health_status.message = "An install plan for a subscription is pending installation"
            return health_status
          else
            health_status.status = "Degraded"
            health_status.message = msg
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "An install plan for a subscription is pending installation"
      return health_status

# ------------------------------------------------
# Serverless Operator
# ------------------------------------------------

serverless_operator_channel: ""
serverless_operator_automatic_install_plan_approval: true
serverless_operator_starting_csv: ""
serverless_operator_name: serverless-operator
serverless_operator_namespace: openshift-serverless
serverless_operator_catalog: redhat-operators
serverless_operator_csv_prefix: serverless-operator
serverless_operator_wait_for_deploy: true
serverless_operator_use_catalog_snapshot: false
serverless_operator_catalogsource_name: ""
serverless_operator_catalog_snapshot_image: ""
serverless_operator_catalog_snapshot_image_tag: ""

serverless_serving_namespace: knative-serving
serverless_eventing_namespace: knative-eventing
serverless_serving_name: knative-serving
serverless_eventing_name: knative-eventing
serverless_serving_wait_for_deploy: true
serverless_eventing_wait_for_deploy: true

# ------------------------------------------------
# Red Hat SSO
# ------------------------------------------------

rhsso_application_namespace: openshift-gitops
rhsso_application_name: rhsso
rhsso_namespace: "{{ rhsso_operator_namespace }}"
rhsso_gitops_repo: https://github.com/rh-soln-pattern-sentiment-analysis/helm.git
rhsso_gitops_repo_tag: main
rhsso_gitops_repo_path: globex-sentiment-analysis/globex-rhsso

rhsso_cr_name: rhsso
rhsso_external_access: false
rhsso_host: sso
rhsso_max_time_to_wait: 600000
rhsso_realm: globex
rhsso_web_gateway_client: globex-web-gateway

# ------------------------------------------------
# Globex
# ------------------------------------------------

globex_namespace: globex
globex_mw_namespace: globex-mw

globex_application_name: globex
globex_application_namespace: openshift-gitops

globex_application_repo: https://github.com/rh-soln-pattern-sentiment-analysis/helm.git
globex_application_repo_tag: main
globex_application_repo_path: globex-sentiment-analysis/globex

kafka_broker_name: kafka
kafka_security_protocol: SASL_PLAINTEXT
kafka_sasl_mechanism: SCRAM-SHA-512
kafka_client_id: globex
kafka_client_secret: globex

globex_user_password: openshift

# ------------------------------------------------
# Globex Sentiment Analysis
# ------------------------------------------------

globex_sentiment_analysis_namespace: sentiment-analysis

globex_sentiment_analysis_application_name: sentiment-analysis
globex_sentiment_analysis_application_namespace: openshift-gitops

globex_sentiment_analysis_application_repo: https://github.com/rh-soln-pattern-sentiment-analysis/helm.git
globex_sentiment_analysis_application_repo_tag: main
globex_sentiment_analysis_application_repo_path: globex-sentiment-analysis/sentiment-analysis
