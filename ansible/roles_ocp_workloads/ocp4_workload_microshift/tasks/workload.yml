---
- name: create namespace {{ ocp4_workload_microshift_namespace }}
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ ocp4_workload_microshift_namespace }}"
        annotations:
          openshift.io/description: "MicroShift Virtual Machine"
          openshift.io/display-name: "MicroShift Virtual Machine"

- name: register pull-secret from openshift-config
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: pull-secret
    namespace: openshift-config
  register: ocp_pull_secret

- name: create pull-secret in {{ ocp4_workload_microshift_namespace }}
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: openshift-pull-secret
        namespace: "{{ ocp4_workload_microshift_namespace }}"
      type: Opaque
      data:
        openshift-pull-secret: "{{ ocp_pull_secret.resources[0].data['.dockerconfigjson'] }}"

- name: create openssh keypair for the microshift vm
  community.crypto.openssh_keypair:
    path: /home/{{ ansible_user }}/.ssh/microshift
  register: r_microshift_key

- name: read the public key from filesystem
  ansible.builtin.slurp:
    src: /home/{{ ansible_user }}/.ssh/microshift.pub
  register: r_microshift_public_key

- name: create microshfit vm
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - vm-microshift-pvc.yaml.j2
  - vm-microshift.yaml.j2
  - vm-microshift-service.yaml.j2
  - vm-microshift-route-ingress.yaml.j2
  - vm-microshift-route-api.yaml.j2

# The download of the vm image takes too long when the cluster is not
# colocated in the same region as the s3 bucket (us-east-2).
# One possible solution is to set up bucket cross replication.
- name: wait for vm microshift is ready
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachine
    name: microshift
    namespace: "{{ ocp4_workload_microshift_namespace }}"
  register: vm_microshift
  retries: 100
  delay: 30
  until:
  - vm_microshift.resources[0].status is defined
  - vm_microshift.resources[0].status.ready is true

# needs a pause here or better wait / readiness probe for vm
- name: pause until microshift vm is ready
  pause:
    seconds: 90

- name: setup microshift .kube/config
  ansible.builtin.shell: >-
    virtctl ssh
    cloud-user@microshift.{{ ocp4_workload_microshift_namespace }}
    --identity-file=/home/{{ ansible_user }}/.ssh/microshift
    --local-ssh-opts="-o StrictHostKeyChecking=no"
    --command='{{ item }}'
  loop:
    - sudo cat /var/lib/microshift/resources/kubeadmin/kubeconfig > ~/.kube/config
    - chmod go-r ~/.kube/config

- name: copy microshift .kube/config to the bastion
  ansible.builtin.shell: >-
    virtctl scp
    cloud-user@microshift.{{ ocp4_workload_microshift_namespace }}:/home/cloud-user/.kube/config
    /home/{{ ansible_user }}/.kube/microshift
    --identity-file=/home/{{ ansible_user }}/.ssh/microshift
    --local-ssh-opts="-o StrictHostKeyChecking=no"

- name: setup .kube/microshift in the bastion
  ansible.builtin.replace:
    path: /home/{{ ansible_user }}/.kube/microshift
    regexp: 'https://127.0.0.1:6443'
    replace: "https://api-{{ ocp4_workload_microshift_namespace }}.{{ _ocp4_workload_microshift_wildcard_domain }}"

- name: create namespace {{ ocp4_workload_microshift_cluster_namespace }}
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ ocp4_workload_microshift_cluster_namespace }}"
        annotations:
          openshift.io/description: "MicroShift Managed Cluster"
          openshift.io/display-name: "MicroShift Managed Cluster"

- name: create cluster management resources
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - managed-clusterset.yaml.j2
  - managed-clusterset-binding.yaml.j2
  - placement.yaml.j2
  - gitops-cluster.yaml.j2
  - managed-cluster.yaml.j2
  - klusterlet-addon-config.yaml.j2

- name: create managed cluster
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'managed-cluster.yaml.j2') | from_yaml }}"

# yamllint disable rule:line-length
- name: obtain klusterlet-crd.yaml and import.yaml from hub cluster
  ansible.builtin.shell: |-
    set -euxo pipefail
    mkdir -p /tmp/microshift
    oc get secret {{ ocp4_workload_microshift_cluster_namespace }}-import -n {{ ocp4_workload_microshift_cluster_namespace }} -o jsonpath={.data.crds\\.yaml} | base64 --decode > /tmp/microshift/klusterlet-crd.yaml
    oc get secret {{ ocp4_workload_microshift_cluster_namespace }}-import -n {{ ocp4_workload_microshift_cluster_namespace }} -o jsonpath={.data.import\\.yaml} | base64 --decode > /tmp/microshift/import.yaml
# yamllint enable rule:line-length

- name: copy klusterlet-crd.yaml and import.yaml to microshift
  ansible.builtin.shell: >-
    virtctl scp -r
    /tmp/microshift
    cloud-user@microshift.{{ ocp4_workload_microshift_namespace }}:/tmp/microshift
    --identity-file=/home/{{ ansible_user }}/.ssh/microshift
    --local-ssh-opts="-o StrictHostKeyChecking=no"

- name: oc apply klusterlet-crd.yaml and import.yaml to microshift
  ansible.builtin.shell: >-
    virtctl ssh
    cloud-user@microshift.{{ ocp4_workload_microshift_namespace }}
    --identity-file=/home/{{ ansible_user }}/.ssh/microshift
    --local-ssh-opts="-o StrictHostKeyChecking=no"
    --command='oc apply -f {{ item }}'
  loop:
    - /tmp/microshift/klusterlet-crd.yaml
    - /tmp/microshift/import.yaml

- name: create klusterlet-addon-config
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'klusterlet-addon-config.yaml.j2') | from_yaml }}"

- name: create rhacm application hello microshift
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'acm-application.yaml.j2') | from_yaml_all | list }}"
