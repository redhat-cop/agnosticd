#!/bin/bash
#
# kc-XXX	Knowledge Checkpoint break script for XXXX
#
# description: This utility will make local system changes  \
#              that reproduce XXXX issues.  The broken system \
#	       can then be used by GSS support engineers and \
#	       Red Hat support partners along with self-paced \
#	       training modules to grow XXXX troubleshooting knowledge.
#
# processname: kc-XXXX
#
#
# Last Modified:
#	xxxxxxx <xxxx@redhat.com> xx/xx/2014
#
# Usage: ./kc-XXXX <KCID>
# <KCID> can be one of the following:
# break1 - used to reproduce a system that has issue XXXX
# grade1 - used to grade a system after resolving the XXXX issue
#
# Error exit codes:
# 0: exited successfully
# 1: wrong hostname
# 2: syntax command usage
# 3: need to run as root user

bold=`tput bold`
normal=`tput sgr0`
black=`tput setaf 0`
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
magenta=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`


MYHOSTNAME=`hostname`
MYNAME=`whoami`

if [[ ! "$MYNAME" == "lab-user" ]]
then
	echo "${cyan}$0 needs to be run by the lab-user.${normal}"
	exit 3
fi

# startup
logger -p local0.notice "Initiating $0 with option(s) $@"
echo "Initiating $0 with option(s) $@"


get_creds() {


        #check to see if login is working
        export GUID=`hostname | awk -F. '{print $2}'`
	myrelativekube=`find . | grep kubeconfig | head -1`
	mykube=`readlink -f $myrelativekube`
        if [[ -f ${mykube} ]]; then
                echo "Using ${mykube}"
                export KUBECONFIG=${mykube}
        else
                echo "Couldn't locate kubeconfig, tried ${mykube}"
                read -p "Enter the absolute path to the kubeconfig to use: " KUBECONFIG
                if [[ -f $KUBECONFIG ]]; then
                        export KUBECONFIG=$KUBECONFIG
                else
                        echo "Couldn't locate kubeconfig $KUBECONFIG"
                        exit 7
                fi
        fi

        # determining kubeadmin password from install log

        myrelativeinstall=`find . | grep openshift_install.log | head -1`
        myinstall=`readlink -f $myrelativeinstall`


        if [[ -f ${myinstall} ]]; then
                echo "Inspecting $myinstall"
                KUBEPASS=`grep "kubeadmin, password:" $myinstall | awk '{print substr($NF,1,length($NF)-1)}'`
        else
                echo "Couldn't locate openshift_install.log, tried $myinstall"
                read -p "Enter the full path to the openshift_install.log: " INSTALL_LOG
                if [[ -f "${INSTALL_LOG}" ]]; then
                        KUBEPASS=`grep "kubeadmin, password:" $INSTALL_LOG | awk '{print substr($NF,1,length($NF)-1)}'`
                else
                        echo "Couldn't locate openshift_install.log, tried ${INSTALL_LOG}"
                        read -p "Enter the kubeadmin password to use: " KUBEPASS
                fi
        fi


}


create_htpasswd() {


	# this will create an htpasswd file with userX/redhat cee/RHrocks
cat << 'EOF' > ~/ceecf112.htpasswd
user1:$2y$05$.JxJ5XuI1kxLimqgQkTT4e6vE4IJK2x93uYfr6EK78Oe0rSeO3jsS
user2:$2y$05$REj9ikswsieFq13P9L0siOCBWUeiowUOEzQ1nF4xxl7fZtHuff5CG
user3:$2y$05$urTDanCD7mVChq.5Zz.zNeB0CX/Cu4EyInnpoSzaOw1Asw2JSk4yu
user4:$2y$05$vQ1./gsG/qE1aDwvcII0tetcU3q694CD3EkQfkdKmaKolqM4s6Se.
user5:$2y$05$sM6gVXsKUMKbIzY6XTkCTuYqJhX/T8wMvsm4HdApxyF3sAALmcNwu
cee:$2y$05$OId8ApSKzbjI2yr4nNflquUzYdOnFniG677BJsGfXXgRsDZC6y9VC
EOF


}


create_cr() {

	# this will create an identityProvider cr file
cat << EOF > ~/ceecf112-cr.yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: ceecf112_provider
    mappingMethod: claim
    type: HTPasswd
    htpasswd:
      fileData:
        name: ceecf112
EOF

}

setup() {
	# insert your break code here
INSTALLER_VERSION=v0.16.1
OC_CLI_VERSION=4.0.22

	echo "Ravello environment not detected."
	echo "Unable to setup."

}


break() {
        mkdir -p /var/tmp/cee-cf-112
	get_creds &>/dev/null

	KUBEPASS=`cat /home/lab-user/cluster-$GUID/auth/kubeadminpassword`
        
        # trying oc login else fail
        echo -ne "Logging in as admin.\t\t\t"
        oc login -u kubeadmin -p ${KUBEPASS} >/dev/null 2>failed-login
        if [[ $? -eq 0 ]]; then
                echo "${green}SUCCESS${normal}"
        else
                echo "${red}FAILED${normal}"
                echo "Make sure your cluster was successfully installed and available."
                echo "Tried to run oc login -u kubeadmin -p ${KUBEPASS} but got:"
                cat failed-login 2>/dev/null
                exit 7
        fi
        echo -n "Applying configuration."

	# first make sure there isn't crud on there that we will use
	oc patch oauths.config.openshift.io/cluster --type=merge -p '{"spec": {"identityProviders":null}}' &>/dev/null
	oc delete secret -n openshift-config ceecf112 &>/dev/null
	sleep 10 && echo -n "."
        sleep 10 && echo -n "."
        sleep 10 && echo -n "."
        sleep 5 && echo -n "."
        sleep 2 && echo -ne ".\t\t"

	# create the necessary htpassword and cr files:
	create_htpasswd
	create_cr
        echo "${green}DONE${normal}"

        echo -ne "Applying break.\t\t\t\t"
	# note the secret is using the key "passwd" instead of "htpasswd", so the identity provider will not take this:
        oc create secret generic ceecf112 --from-file=passwd=ceecf112.htpasswd -n openshift-config &>/dev/null
	oc apply -f ~/ceecf112-cr.yaml &>/dev/null
        echo "${green}DONE${normal}"


	echo -n "Testing (one minute please)."
	myCOUNT=0
	while [[ $myCOUNT -lt 6 ]]
	do
		echo -n "."
		sleep 10
		# this should fail even after a full minute
		oc login -u cee -p RHrocks &>/dev/null
		if [[ $? -eq 0 ]]; then
			LOGIN="succeed"
		else
			LOGIN="failed"
		fi
		myCOUNT=$((myCOUNT+1))
	done
        if [[ $LOGIN == "failed" ]]; then
                echo -e "\t${green}SUCCESS${normal}"
		# cleanup so that grade cant be gamed
		oc login -u kubeadmin -p ${KUBEPASS} &>/dev/null
		touch /var/tmp/cee-cf-112/.break_ceecf112
	else
                echo -e "\t${red}FAILED${normal}"
                echo "Unable to break properly.  Please cleanup or re-provision the environment."
        fi




}

grade() {
        STATUS="success"
        echo "Grading.  Please wait."
	
        KUBEPASS=`cat /home/lab-user/cluster-$GUID/auth/kubeadminpassword`
	
        if  ! [ -f  /var/tmp/cee-cf-112/.break_ceecf112 ]
	then
		echo "It seems like break was not run successfully.  Run $0 break first."
		exit 7
	fi


        # insert your grade code here and set STATUS="success" if the lesson criteria is met.
        # trying oc login else fail
        echo -ne "Trying to login as cee user..\t\t"
	oc login -u cee -p RHrocks &>/dev/null
        if [[ $? -eq 0 ]]; then
                echo "${green}SUCCESS${normal}"
        else
                echo "${red}FAILED${normal}"
		STATUS="failed"
        fi

        echo -ne "Logging in as admin.\t\t\t"
        get_creds &>/dev/null
        oc login -u kubeadmin -p ${KUBEPASS} >/dev/null 2>failed-login
        if [[ $? -eq 0 ]]; then
                echo "${green}SUCCESS${normal}"
        else
                echo "${red}FAILED${normal}"
		STATUS="failed"
        fi

	# making sure the identityprovider is still using ceecf112_provider:

        echo -ne "Checking identityProvider.\t\t"
	ID_PROVIDER=`oc get oauths.config.openshift.io/cluster -o jsonpath='{.spec.identityProviders[*].htpasswd.fileData.name}' 2>/dev/null`
	if [[ "$ID_PROVIDER" =~ "ceecf112" ]]; then
		echo "${green}SUCCESS${normal}"
	else
                echo "${red}FAILED${normal}"
                echo "Couldn't find ceecf112_provider in 'oauths.config.openshift.io/cluster'"
                STATUS="failed"
        fi


	# end your grading code here

        if [[ $STATUS == "success" ]]
        then
                echo "Success."
                echo "${bold}COMPLETION CODE: JAWS79LIFE${normal}"
        else
                echo "Sorry.  There still seems to be a problem"
        fi
}

fix() {

	get_creds &>/dev/null

	KUBEPASS=`cat /home/lab-user/cluster-$GUID/auth/kubeadminpassword`
        
        # trying oc login else fail
        echo -ne "Logging in as admin.\t\t"
	oc login -u kubeadmin -p ${KUBEPASS} >/dev/null 2>failed-login
        if [[ $? -eq 0 ]]; then
                echo "${green}SUCCESS${normal}"
        else
                echo "${red}FAILED${normal}"
                echo "Make sure your cluster was successfully installed and available."
                echo "Tried to run oc login -u kubeadmin -p ${KUBEPASS} but got:"
                cat failed-login 2>/dev/null
                exit 7
        fi


	echo -ne "Removing break.\t\t\t"
	oc patch oauths.config.openshift.io/cluster --type=merge -p '{"spec": {"identityProviders":null}}' &>/dev/null
	oc delete secret -n openshift-config ceecf112 &>/dev/null
	echo "${green}DONE${normal}"

	echo -ne "Applying solution.\t\t"
	create_htpasswd
	oc create secret generic ceecf112 --from-file=htpasswd=ceecf112.htpasswd -n openshift-config &>/dev/null
	create_cr
	oc apply -f ~/ceecf112-cr.yaml &>/dev/null
        echo "${green}DONE${normal}"


	echo -n "Testing."
	myCOUNT=0
	while [[ $myCOUNT -lt 6 ]]
	do
		echo -n "."
		sleep 10
		oc login -u cee -p RHrocks &>/dev/null
		if [[ $? -eq 0 ]]; then
			myCOUNT=50
		else
			myCOUNT=$((myCOUNT+1))
		fi
	done
        if [[ $myCOUNT -eq 50 ]]; then
                echo -e "\t\t\t${green}SUCCESS${normal}"
		# cleanup so that grade cant be gamed
		rm -f /var/tmp/cee-cf-112/.break_ceecf112
		oc login -u kubeadmin -p ${KUBEPASS} &>/dev/null
	else
                echo -e "\t\t\t${red}FAILED${normal}"
                echo "Unable to fix login.  Tried ${bold}cee${normal} user."
        fi


}



case "$1" in
	setup)
                if [[ -f /etc/ravello/vm.json ]]; then
                        echo "Ravello-based learning environment detected."
                else
                        setup
                fi
		;;
        break)
                break
		;;
	fix)
		fix
                ;;
	grade)
		grade
		;;
	*)
		echo $"Usage: $0 {setup|break|fix|grade}"
		exit 2
esac


# ending
logger -p local0.notice "Completed $0 with option(s) $@ successfully"
echo "Completed $0 with option(s) $@ successfully"
exit 0
