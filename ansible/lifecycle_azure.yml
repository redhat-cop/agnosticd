---
- environment:
    AZURE_CLIENT_ID: "{{azure_service_principal}}"
    AZURE_TENANT: "{{azure_tenant}}"
    AZURE_SECRET: "{{azure_password}}"
    AZURE_SUBSCRIPTION_ID: "{{azure_subscription_id}}"
    AZURE_CONFIG_DIR: "{{ output_dir }}/.azure-{{project_tag}}"
  block:
    - name: Ensure az is installed
      command: which az
      register: az_result

    - name: Fail if az not available
      fail:
        msg: you need azure-cli installed
      when: az_result is failed

    - name: Login to Azure
      command: >-
        az login --service-principal
        -u {{ azure_service_principal | quote }}
        -p {{ azure_password | quote }}
        --tenant {{ azure_tenant | quote }}

    - name: Get all resource groups
      azure.azcollection.azure_rm_resourcegroup_info:
        auth_source: env
        tenant: "{{ azure_tenant }}"
      register: allresourcegroups

    - set_fact:
        rgs: []

    - name: Build a list of RGs with the GUID
      when:
        - allresourcegroups.resourcegroups|length>0
        - guid in item.name
      set_fact:
        rgs: "{{ rgs + [ item.name ] }}"
      loop: "{{ allresourcegroups.resourcegroups }}"

    - when:
        - ACTION == 'stop'
      name: Stop instances
      shell:
        cmd: az vm list -g {{ item }} --query "[].id" -o tsv | xargs -I{} az vm deallocate --no-wait --ids {}
      loop: "{{ rgs }}"

    - when:
        - ACTION == 'start'
      name: Start instances
      shell:
        cmd: az vm list -g {{ item }} --query "[].id" -o tsv | xargs -I{} az vm start --no-wait --ids {}
      loop: "{{ rgs }}"

    - when: ACTION == 'status'
      block:
        - set_fact:
            vmids: []

        - name: Get Azure instances filtering by guid
          command:
            az vm list -g {{ item }} --query "[].id" -o tsv
          register: all_instances
          loop: "{{ rgs }}"

        - name: Append to instance list
          when: item.stdout|length>0
          set_fact:
            vmids: "{{ vmids + [ item.stdout ] }}"
          loop: "{{ all_instances.results }}"

        - name: Get instances
          command:
            az vm show -d --ids {{ vmids | join(' ') | replace('\n', ' ') }}
          register: r_instances

        - name: Set instance dict
          set_fact:
            j_instances: "{{ r_instances.stdout | from_json }}"

        - name: If JSON returned is dictionary (one instance), convert it to a list, because microsoft
          when: ( j_instances is mapping )
          set_fact:
            o_instances: "{{ [ j_instances ] }}"

        - name: If JSON returned is list (multi instances), pass the var through as-is
          when: ( j_instances is not mapping )
          set_fact:
            o_instances: "{{ j_instances }}"

        - name: Report status in user info
          agnosticd_user_info:
            msg: |-
              {{ "%-60s %-10s %s" | format("Instance", "State", "Type") }}
              ----------------------------------------------------------------
              {% for instance in o_instances %}
              {{ "%-60s %-10s %s" | format(instance.name, instance.powerState, instance.hardwareProfile.vmSize) }}
              {% endfor %}

        - name: Print status information to a file
          copy:
            dest: "{{ output_dir }}/status.txt"
            content: |-
              {{ "%-60s %-10s %s" | format("Instance", "State", "Type") }}
              ----------------------------------------------------------------
              {% for instance in o_instances %}
              {{ "%-60s %-10s %s" | format(instance.name, instance.powerState, instance.hardwareProfile.vmSize) }}
              {% endfor %}
