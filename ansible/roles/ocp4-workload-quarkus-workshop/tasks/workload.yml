# vim: set ft=ansible
---
# Implement your Workload deployment tasks here

# Access for admin
- name: Give access to opentlc-mgr
  shell: |
         oc adm policy add-cluster-role-to-user cluster-admin opentlc-mgr

- name: create module list
  set_fact:
    modules: "{{ module_type.split(';') | map('trim') | list }}"

- name: Selected Modules
  debug:
    msg: "selected modules list: {{ modules }}"

- name: Create CatalogSource Index 4.15
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - redhat-operators-index.yaml
  - community-operators-index.yaml

- name: Import custome project request to increase the limits
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/project-request-custom.yaml

- name: create projects for users
  include_tasks: create_project.yaml
  vars:
    t_project_name: "{{ t_user }}-project"
  loop: "{{ users }}"
  loop_control:
    loop_var: t_user

- name: create guides project
  when: num_users | int > 0
  k8s:
    state: present
    kind: Project
    api_version: project.openshift.io/v1
    definition:
      metadata:
        name: "guides"
        annotations:
          openshift.io/description: ""
          openshift.io/display-name: "Quarkus Workshop Guides"

- name: install guides
  when: num_users | int > 0
  include_tasks: install-guides.yaml
  vars:
    guide: "{{ item }}"
  loop: "{{ modules }}"

- name: install username distribution
  when: num_users | int > 0
  include_tasks: install-username-distribution.yaml

- name: search for rhsso
  k8s_info:
    kind: DeploymentConfig
    name: rhsso
    namespace: rhsso
  register: r_rhsso_dc

- name: install rhsso
  when: r_rhsso_dc.resources | list | length == 0
  include_tasks: install-rhbk.yaml

- name: Create operator subscription for kubernetes-imagepuller-operator
  kubernetes.core.k8s:
    merge_type:
    - merge
    definition: "{{ lookup('file', 'kubernetes-imagepuller-operator_subscription.yaml' ) }}"
    
- name: see if dev spaces is installed
  k8s_info:
    api_version: org.eclipse.che/v2
    kind: CheCluster
    name: devspaces
    namespace: openshift-operators
  register: r_devspaces_cr

- name: show devspaces cr
  debug:
    msg: "existing devspaces project: {{ r_devspaces_cr }}"

- name: install devspaces
  when: r_devspaces_cr.resources | list | length == 0
  include_tasks: install-devspaces.yaml

  # Install  AMQ Streams for all workspaces
- name: Look for amq subscription
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: amq-streams
    namespace: openshift-operators
  register: r_amq_sub

- name: show existing amq sub
  debug:
    msg: "existing amq sub: {{ r_amq_sub }}"

- name: Create OpenShift Objects for Kafka (amq streams)
  when: r_amq_sub.resources | list | length == 0
  include_tasks: install-amqstreams.yaml

  # Install  Jaeger for all workspaces
- name: Look for jaeger subscription
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: jaeger-product
    namespace: openshift-operators
  register: r_jaeger_sub

- name: show existing jaeger sub
  debug:
    msg: "existing jaeger sub: {{ r_jaeger_sub }}"

- name: Create OpenShift Objects for Jaeger
  when: r_jaeger_sub.resources | list | length == 0
  include_tasks: install-jaeger.yaml

  # Install  Opentelemetry for all workspaces
- name: Look for opentelemetry subscription
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: opentelemetry-product
    namespace: openshift-operators
  register: r_opentelemetry_sub

- name: show existing opentelemetry sub
  debug:
    msg: "existing opentelemetry sub: {{ r_opentelemetry_sub }}"

- name: Create OpenShift Objects for opentelemetry
  when: r_opentelemetry_sub.resources | list | length == 0
  include_tasks: install-opentelemetry.yaml

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
