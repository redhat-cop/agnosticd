---
# This role creates a new EC2 SSH key, copy it locally to output_dir and
# set the fact infra_ssh_key
# That way, it will be used in the common SSH config
# infra_ssh_key can be set as extra-var too.

# The role:
# SKIP if key exists locally
# FAIL if key exists remotely but not locally

- name: Set infra_ssh_key
  set_fact:
    infra_ssh_key: "{{ output_dir }}/{{ key_name }}.pem"

- name: Stat local infra key
  stat:
    path: "{{ infra_ssh_key }}"
  register: stat_infra_ssh_key

- when: not stat_infra_ssh_key.stat.exists
  block:
    - name: Delete OPENTLC infra key (infra_ec2_ssh_key_force=true)
      when: infra_ec2_ssh_key_force | bool
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_REGION: "{{ aws_region }}"
      ec2_key:
        name: "{{ key_name }}"
        state: absent

    - name: Create OPENTLC infra key
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_REGION: "{{ aws_region }}"
      ec2_key:
        name: "{{ key_name }}"
      register: r_infra_ssh_key

    - name: Fail if key exists remotely but not locally
      fail:
        msg: >-
          The SSH key {{ key_name }} already exists in EC2 but not locally.
      when: r_infra_ssh_key is not changed

    - name: Copy the SSH key locally
      copy:
        dest: "{{ infra_ssh_key }}"
        mode: 0400
        content: "{{ r_infra_ssh_key.key.private_key }}"
      when: r_infra_ssh_key is changed

    - name: Generate SSH pub key
      shell: >-
        ssh-keygen -y
        -f "{{ infra_ssh_key }}"
        > "{{ infra_ssh_key | regex_replace('\\.pem$', '') }}.pub"
      args:
        creates: "{{ infra_ssh_key | regex_replace('\\.pem$', '') }}.pub"
