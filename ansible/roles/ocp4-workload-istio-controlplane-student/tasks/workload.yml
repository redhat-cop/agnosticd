# vim: set ft=ansible
---
# Implement your Workload deployment tasks here

# Target: OCP4.1, Tech Preview 12
# Source install instruction from https://maistra.io/docs/getting_started/install/

#############################################################
###############Deploying the ServiceMeshControlplane CR######
#############################################################
# from https://maistra.io/docs/getting_started/install/
- name: facts for servicemeshcontrolplane
  set_fact:
    smcp_project_name: "smcp-{{ ocp_username }}"
- name: create project to contain servicemeshcontrolplane
  k8s:
    state: present
    kind: Namespace
    name: "{{ smcp_project_name }}"

- name: istio servicemeshcontrolplane cr
  k8s:
    namespace: "{{ smcp_project_name }}"
    state: present
    definition:
      apiVersion: maistra.io/v1
      kind: ServiceMeshControlPlane
      metadata:
        name: basic-install
      spec:
        threeScale:
          enabled: false
        istio:
          istio_cni:
            enabled: true
          global:
            disablePolicyChecks: false
            multitenant: true
            proxy: # constrain resources for use in smaller environments
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 128Mi
          gateways:
            istio-egressgateway:
              autoscaleEnabled: false # disable autoscaling for use in smaller environments
            istio-ingressgateway:
              autoscaleEnabled: false # disable autoscaling for use in smaller environments
              ior_enabled: false
          mixer:
            policy:
              autoscaleEnabled: false
            telemetry:
              autoscaleEnabled: false
              resources:
                requests:
                  cpu: 100m
                  memory: 1G
                limits:
                  cpu: 500m
                  memory: 4G
          pilot:
            autoscaleEnabled: false
            traceSampling: 100.0
          kiali:
            dashboard:
              user: admin
              passphrase: admin
          tracing:
            enabled: true
  register: result
  retries: 20
  until: not ('Failed' or 'failed' or 'Internal Server Error') in result

- name: wait up to 8 minutes for the elasticsearch statefulset to exist
  shell: "oc get statefulset elasticsearch -n {{ smcp_project_name }}"
  register: elasticsearch_set_status
  until: elasticsearch_set_status.rc == 0
  retries: 8
  delay: 60

- name: wait for kiali route to exist
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: kiali
    namespace: "{{ smcp_project_name }}"
  register: result
  failed_when: result.resources | length == 0
  retries: 120
  until: result.resources | length > 0

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool

