# vim: set ft=ansible
---
# Implement your Workload deployment tasks here

#############################################################
###############Deploying the ServiceMeshControlplane CR######
#############################################################
- name: facts for servicemeshcontrolplane
  set_fact:
    smcp_project_name: "smcp-{{ ocp_username }}"

- name: create project for user's control plane
  k8s:
    state: present
    definition:
      apiVersion: project.openshift.io/v1
      kind: Project
      metadata:
        name: "{{ smcp_project_name }}"

- name: istio servicemeshcontrolplane cr
  k8s:
    state: present
    definition:
      apiVersion: maistra.io/v1
      kind: ServiceMeshControlPlane
      metadata:
        name: basic-install
        namespace: "{{ smcp_project_name }}"
      spec:
        istio:
          global:
            proxy:
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 128Mi
          gateways:
            istio-egressgateway:
              autoscaleEnabled: false
            istio-ingressgateway:
              autoscaleEnabled: false
          mixer:
            policy:
              autoscaleEnabled: false
            telemetry:
              autoscaleEnabled: false
              resources:
                requests:
                  cpu: 100m
                  memory: 1G
                limits:
                  cpu: 500m
                  memory: 4G
          pilot:
            autoscaleEnabled: false
            traceSampling: 100
          kiali:
            enabled: true
          grafana:
            enabled: true
          tracing:
            enabled: true
            jaeger:
              template: all-in-one
  register: result
  retries: 20
  until: not ('Failed' or 'failed' or 'Internal Server Error') in result

- name: wait for deployments
  k8s_facts:
    api_version: extensions/v1beta1
    kind: Deployment
    name: grafana
    namespace: "{{ smcp_project_name }}"
  register: deployment_out
  until: 
    - deployment_out.resources[0].status.readyReplicas is defined 
    - deployment_out.resources[0].status.readyReplicas | int == 1
  retries: 8
  delay: 60
  with_items:
    - grafana
    - jaeger
    - kiali
    - prometheus
    - istio-citadel
    - istio-egressgateway
    - istio-galley
    - istio-ingressgateway
    - istio-pilot
    - istio-policy
    - istio-sidecar-injector
    - istio-telemetry

- name: wait for kiali route to exist
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: kiali
    namespace: "{{ smcp_project_name }}"
  register: result
  failed_when: result.resources | length == 0
  retries: 120
  until: result.resources | length > 0

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool

