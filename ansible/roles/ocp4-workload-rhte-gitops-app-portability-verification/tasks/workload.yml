---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Get Argo CD namespace status
  command: oc get ns "{{ _argocd_project }}" --no-headers -o jsonpath='{.status.phase}'
  register: argocd_ns_status

- name: Get Gogs namespace status
  command: oc get ns "{{ _gogs_project }}" --no-headers -o jsonpath='{.status.phase}'
  register: gogs_ns_status

- name: Fail if Argo CD namespace status != Active
  fail:
    msg: "Argo CD namespace status is not Active"
  when: argocd_ns_status.stdout != "Active"

- name: Fail if Gogs namespace status != Active
  fail:
    msg: "Gogs namespace status is not Active"
  when: gogs_ns_status.stdout != "Active"

- name: Get Argo CD Server Deployment Desired Replicas
  command: oc get deployment "{{ _argocd_server_deployment }}" -o jsonpath='{.status.replicas}' -n "{{ _argocd_project }}"
  register: argocd_server_desired_replicas
  retries: 30
  delay: 10
  until: argocd_server_desired_replicas.stdout != "" and argocd_server_desired_replicas.stdout != "0"

- name: Get Argo CD Server Deployment Ready Replicas
  command: oc get deployment "{{ _argocd_server_deployment }}" -o jsonpath='{.status.readyReplicas}' -n "{{ _argocd_project }}"
  register: argocd_server_ready_replicas
  retries: 30
  delay: 10
  until: argocd_server_ready_replicas.stdout != "" and argocd_server_ready_replicas.stdout != "0"

- name: Fail if Argo CD Deployment Ready Replicas != Desired Replicas
  fail:
    msg: "Argo CD Deployment Ready Replicas do not match Desired Replicas"
  when: argocd_server_ready_replicas.stdout != argocd_server_ready_replicas.stdout

- name: Get Gogs Server Deployment Desired Replicas
  command: oc get deployment "{{ _gogs_server_deployment }}" -o jsonpath='{.status.replicas}' -n "{{ _gogs_project }}"
  register: gogs_server_desired_replicas
  retries: 30
  delay: 10
  until: gogs_server_desired_replicas.stdout != "" and gogs_server_desired_replicas.stdout != "0"

- name: Get ArgoCD Server Deployment Ready Replicas
  command: oc get deployment "{{ _gogs_server_deployment }}" -o jsonpath='{.status.readyReplicas}' -n "{{ _gogs_project }}"
  register: gogs_server_ready_replicas
  retries: 30
  delay: 10
  until: gogs_server_ready_replicas.stdout != "" and gogs_server_ready_replicas.stdout != "0"

- name: Fail if Argo CD Deployment Ready Replicas != Desired Replicas
  fail:
    msg: "Gogs Server Deployment Ready Replicas do not match Desired Replicas"
  when: gogs_server_ready_replicas.stdout != gogs_server_ready_replicas.stdout

- name: Get Git Repository config
  shell: "grep url /home/{{ _clientvm_student_user }}/{{ _lab_gogs_clone_dir_name }}/.git/config | grep gogs | grep -c federation-dev.git"
  register: git_repo_config

- name: Fail if Git repository config is not correct
  fail:
    msg: "Git repository config is not correct"
  when: git_repo_config.stdout != "1"

- name: Get helper scripts
  shell: "ls /usr/local/bin/{argocd-add-clusters,gen-mongo-certs,namespace-cleanup,verify-contexts,wait-for-argo-app,wait-for-deployment,wait-for-mongo-replicaset} | wc -l"
  register: helper_scripts

- name: Fail if helper scripts are not deployed
  fail:
    msg: "Helper scripts are not properly deployed"
  when: helper_scripts.stdout != "7"

- name: Get utility binaries
  shell: "ls /usr/local/bin/{argocd,cfssl,cfssljson} | wc -l"
  register: utility_binaries

- name: Fail if utility binaries are not deployed
  fail:
    msg: "Utility binariers are not properly deployed"
  when: utility_binaries.stdout != "3"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
