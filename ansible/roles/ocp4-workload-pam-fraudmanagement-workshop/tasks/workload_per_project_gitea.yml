---
- name: Create operator
  k8s:
    state: present
    namespace: "{{ _namespace }}"
    definition: "{{ lookup('template', role_path ~ '/templates/gitea/operator.j2' ) | from_yaml }}"

- name: Create Gitea deployment
  k8s:
    state: present
    namespace: "{{ _namespace }}"
    definition: "{{ lookup('file', role_path ~ '/files/gitea/server.yml' ) | from_yaml }}"

- name: Wait until gitea-server has Running condition
  command: >
    oc get Gitea/gitea-server -o jsonpath='{.status.conditions[?(@.type=="Running")].status}' -n "{{ _namespace }}"
  register: gitea
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: gitea.stdout == "True"

- name: Check gitea deployment is created
  command: >
    oc get Deployment/mygitea -o jsonpath='{.metadata.name}' -n "{{ _namespace }}"
  register: gitea_deployment
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: gitea_deployment.stdout == "mygitea"

- name: Check Gitea is running
  command: >
    oc rollout status Deployment/mygitea --watch=true -n "{{ _namespace }}"

- name: Get gitea pod name
  command: >
    oc get pods -l app=mygitea -o jsonpath='{.items[0].metadata.name}' -n "{{ _namespace }}"
  register: gitea_podname
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: gitea_podname.stdout != ""

- name: Get gitea route host
  command: >
    oc get route/mygitea -o jsonpath='{.spec.host}' -n "{{ _namespace }}"
  register: gitea_route
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: gitea_route.stdout != ""

- name: Wait for gitea route to respond with 200
  uri:
    url: "https://{{ gitea_route.stdout }}"
    method: GET
    validate_certs: false
  register: result
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: result.status == 200

- name: Check if gitea user already exists (note; error can be ignored)
  uri:
    url: "https://{{ gitea_route.stdout }}/api/v1/users/{{ _account_name }}"
    method: GET
    validate_certs: false
  register: gitea_user
  ignore_errors: true

- name: Create user in gitea
  command: >
    oc exec {{ gitea_podname.stdout }} -n "{{ _namespace }}" -- /home/gitea/gitea admin create-user --username {{ _account_name }} --password {{ _account_password }} --email {{ _account_name }}@workshop.com --must-change-password=false -c /home/gitea/conf/app.ini
  when: gitea_user.status == 404

- name: Check if gitea pam-fraudmanagement project already exists (note; error can be ignored)
  uri:
    url: "https://{{ gitea_route.stdout }}/api/v1/repos/{{ _account_name }}/pam-fraudmanagement"
    method: GET
    validate_certs: false
    user: "{{ _account_name }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: gitea_pam_project
  ignore_errors: true

- name: Check if gitea kogito-businessautomation project already exists (note; error can be ignored)
  uri:
    url: "https://{{ gitea_route.stdout }}/api/v1/repos/{{ _account_name }}/kogito-businessautomation"
    method: GET
    validate_certs: false
    user: "{{ _account_name }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: gitea_kogito_project
  ignore_errors: true

- name: Deploy pam-fraudmanagement into gitea
  uri:
    url: "https://{{ gitea_route.stdout }}/api/v1/repos/migrate"
    method: POST
    body: "{{ body }}"
    status_code: 201
    body_format: json
    validate_certs: false
    user: "{{ _account_name }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  when: gitea_pam_project.status == 404
  vars:
    body:
      clone_addr: https://github.com/RedHat-Consulting-UK/summit-2020-pam-fraudmanagement.git
      description: "Proactive Fraud Management with Case Management, Kafka and DMN Services"
      issues: true
      labels: true
      milestones: true
      mirror: false
      private: false
      pull_requests: true
      releases: true
      repo_name: pam-fraudmanagement
      uid: 1
      wiki: true

- name: Deploy kogito-businessautomation into gitea
  uri:
    url: "https://{{ gitea_route.stdout }}/api/v1/repos/migrate"
    method: POST
    body: "{{ body }}"
    status_code: 201
    body_format: json
    validate_certs: false
    user: "{{ _account_name }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  when: gitea_kogito_project.status == 404
  vars:
    body:
      clone_addr: https://github.com/RedHat-Consulting-UK/summit-2020-kogito-businessautomation.git
      description: "Kogitoâ€”business automation in a cloud-native world"
      issues: true
      labels: true
      milestones: true
      mirror: false
      private: false
      pull_requests: true
      releases: true
      repo_name: kogito-businessautomation
      uid: 1
      wiki: true