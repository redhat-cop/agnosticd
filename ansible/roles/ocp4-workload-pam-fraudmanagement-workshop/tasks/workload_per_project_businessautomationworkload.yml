---
- name: Check BusinessCentral is running
  command: >
    oc rollout status DeploymentConfig/rhpam-authoring-rhpamcentr --watch=true -n "{{ _namespace }}"

- name: Get Business Central route host
  command: >
    oc get route/rhpam-authoring-rhpamcentr -o jsonpath='{.spec.host}' -n "{{ _namespace }}"
  register: businesscentral_host
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: businesscentral_host.stdout != ""

- name: Wait for Business Central route to respond with 200
  uri:
    url: "https://{{ businesscentral_host.stdout }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
  register: bizcentralresult
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentralresult.status == 200

- name: Check space exists in Business Central (note; error can be ignored)
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralspace_exists
  ignore_errors: true

- name: Create space in Business Central
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces"
    method: POST
    body: "{{ body }}"
    body_format: json
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 202
  register: bizcentral_createspace
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentral_createspace.status == 202
  when: bizcentralspace_exists.status == 404
  vars:
    body:
      name: "workshop"
      description: "Proactive Fraud Management with Case Management, Kafka and DMN Services"
      owner: "admin"
      defaultGroupId: "{{ _case_kjar_group_id }}"

- name: Check project {{ _case_kie_project_id }} exists in Business Central (note; error can be ignored)
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/projects/{{ _case_kie_project_id }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralproject_case
  ignore_errors: true

- name: Check project {{ _dmn_kie_project_id }} exists in Business Central (note; error can be ignored)
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/projects/{{ _dmn_kie_project_id }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralproject_dmn
  ignore_errors: true

- name: Clone {{ _case_kie_project_id }} into Business Central
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/git/clone"
    method: POST
    body: "{{ body }}"
    body_format: json
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 202
  register: bizcentralclone_case
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentralclone_case.status == 202
  when: bizcentralproject_case.status == 404
  vars:
    body:
      name: "{{ _case_kie_project_id }}"
      description: "{{ _case_kie_project_id }}"
      gitURL: "http://mygitea.gitea.svc.cluster.local:3000/{{ _namespace }}/proactive-fraud-detection-case.git"

- name: Check job status for clone {{ _case_kie_project_id }} in Business Central
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/jobs/{{ bizcentralclone_case.json.jobId }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralclone_case_job
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until:
    - bizcentralclone_case_job is not failed
    - bizcentralclone_case_job.json is defined
    - bizcentralclone_case_job.json.status == "SUCCESS"
  when: bizcentralproject_case.status == 404

- name: Clone {{ _dmn_kie_project_id }} into Business Central
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/git/clone"
    method: POST
    body: "{{ body }}"
    body_format: json
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 202
  register: bizcentralclone_dmn
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentralclone_dmn.status == 202
  when: bizcentralproject_dmn.status == 404
  vars:
    body:
      name: "{{ _dmn_kie_project_id }}"
      description: "{{ _dmn_kie_project_id }}"
      gitURL: "http://mygitea.gitea.svc.cluster.local:3000/{{ _namespace }}/proactive-fraud-detection-dmn.git"

- name: Check job status for clone {{ _dmn_kie_project_id }} in Business Central
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/jobs/{{ bizcentralclone_dmn.json.jobId }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralclone_dmn_job
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until:
    - bizcentralclone_dmn_job is not failed
    - bizcentralclone_dmn_job.json is defined
    - bizcentralclone_dmn_job.json.status == "SUCCESS"
  when: bizcentralproject_dmn.status == 404

- name: Maven install for project {{ _case_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/projects/{{ _case_kie_project_id }}/maven/install"
    method: POST
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 202
  register: bizcentralinstall_case
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentralinstall_case.status == 202

- name: Check job status for maven install for project {{ _case_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/jobs/{{ bizcentralinstall_case.json.jobId }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralinstall_case_job
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until:
    - bizcentralinstall_case_job is not failed
    - bizcentralinstall_case_job.json is defined
    - bizcentralinstall_case_job.json.status == "SUCCESS"

- name: Maven install for project {{ _dmn_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/projects/{{ _dmn_kie_project_id }}/maven/install"
    method: POST
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 202
  register: bizcentralinstall_dmn
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentralinstall_dmn.status == 202

- name: Check job status for maven install for project {{ _dmn_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/jobs/{{ bizcentralinstall_dmn.json.jobId }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralinstall_dmn_job
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until:
    - bizcentralinstall_dmn_job is not failed
    - bizcentralinstall_dmn_job.json is defined
    - bizcentralinstall_dmn_job.json.status == "SUCCESS"
    -
- name: Maven deploy for project {{ _case_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/projects/{{ _case_kie_project_id }}/maven/deploy"
    method: POST
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 202
  register: bizcentraldeploy_case
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentraldeploy_case.status == 202

- name: Check job status for maven deplop for project {{ _case_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/jobs/{{ bizcentraldeploy_case.json.jobId }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentraldeploy_case_job
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until:
    - bizcentraldeploy_case_job is not failed
    - bizcentraldeploy_case_job.json is defined
    - bizcentraldeploy_case_job.json.status == "SUCCESS"
    -
- name: Maven deploy for project {{ _dmn_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/spaces/workshop/projects/{{ _dmn_kie_project_id }}/maven/deploy"
    method: POST
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 202
  register: bizcentraldeploy_dmn
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentraldeploy_dmn.status == 202

- name: Check job status for maven deplop for project {{ _dmn_kie_project_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/jobs/{{ bizcentraldeploy_dmn.json.jobId }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentraldeploy_dmn_job
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until:
    - bizcentraldeploy_dmn_job is not failed
    - bizcentraldeploy_dmn_job.json is defined
    - bizcentraldeploy_dmn_job.json.status == "SUCCESS"
    -
- name: Check KIE Container {{ _case_kie_container_id }} exists (note; error can be ignored)
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/controller/management/servers/{{ _case_kie_server_id }}/containers/{{ _case_kie_container_id }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralget_case_container
  ignore_errors: true
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"

- name: Create KIE Container {{ _case_kie_container_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/controller/management/servers/{{ _case_kie_server_id }}/containers/{{ _case_kie_container_id }}"
    method: PUT
    body: "{{ body }}"
    body_format: json
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 201
  register: bizcentralcreate_case_container
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentralcreate_case_container.status == 201
  when: bizcentralget_case_container.status == 404
  vars:
    body:
      container-id: "{{ _case_kie_container_id }}"
      container-name: "{{ _case_kie_container_id }}"
      server-template-key :
        server-id: '{{ _case_kie_server_id }}'
      status: "STARTED"
      release-id:
        group-id: "{{ _case_kjar_group_id }}"
        artifact-id: "{{ _case_kjar_artefact_id }}"
        version: "{{ _kjar_version }}"
      configuration:
        'RULE':
          'org.kie.server.controller.api.model.spec.RuleConfig':
            'pollInterval': null
            'scannerStatus': "STOPPED"
        'PROCESS':
          'org.kie.server.controller.api.model.spec.ProcessConfig':
            'runtimeStrategy': "SINGLETON"
            kbase: ''
            ksession: ''
            'mergeMode': "MERGE_COLLECTIONS"

- name: Check KieServer is running
  command: >
    oc rollout status DeploymentConfig/rhpam-authoring-kieserver --watch=true -n "{{ _namespace }}"

- name: Check KIE Container {{ _dmn_kie_container_id }} exists (note; error can be ignored)
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/controller/management/servers/{{ _dmn_kie_server_id }}/containers/{{ _dmn_kie_container_id }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
  register: bizcentralget_dmn_container
  ignore_errors: true
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"

- name: Create KIE Container {{ _dmn_kie_container_id }}
  uri:
    url: "https://{{ businesscentral_host.stdout }}/rest/controller/management/servers/{{ _dmn_kie_server_id }}/containers/{{ _dmn_kie_container_id }}"
    method: PUT
    body: "{{ body }}"
    body_format: json
    validate_certs: false
    follow_redirects: yes
    user: "{{ _namespace }}"
    password: "{{ _account_password }}"
    force_basic_auth: true
    status_code: 201
  register: bizcentralcreate_dmn_container
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: bizcentralcreate_dmn_container.status == 201
  when: bizcentralget_dmn_container.status == 404
  vars:
    body:
      container-id: "{{ _dmn_kie_container_id }}"
      container-name: "{{ _dmn_kie_container_id }}"
      server-template-key :
        server-id: '{{ _dmn_kie_server_id }}'
      status: "STARTED"
      release-id:
        group-id: "{{ _dmn_kjar_group_id }}"
        artifact-id: "{{ _dmn_kjar_artefact_id }}"
        version: "{{ _kjar_version }}"
      configuration:
        'RULE':
          'org.kie.server.controller.api.model.spec.RuleConfig':
            'pollInterval': null
            'scannerStatus': "STOPPED"
        'PROCESS':
          'org.kie.server.controller.api.model.spec.ProcessConfig':
            'runtimeStrategy': "SINGLETON"
            kbase: ''
            ksession: ''
            'mergeMode': "MERGE_COLLECTIONS"