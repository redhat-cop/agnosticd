apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: etherpad
  annotations:
    "openshift.io/display-name": Etherpad
    description: |
      A shared Notepad for an OpenShift Cluster.
parameters:
- name: NAME
  description: Name of the DC, service, route
  required: true
  value: etherpad
- name: ETHERPAD_IMAGE
  description: Etherpad Image to be used
  value: "quay.io/wkulhanek/etherpad:1.6.5"
  required: true
- description: Username for MySQL user that will be used for accessing the database.
  displayName: MySQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: Password for the MySQL connection user.
  displayName: MySQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Password for the MySQL root user.
  displayName: MySQL root user Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_ROOT_PASSWORD
  required: true
- description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  name: MYSQL_DATABASE
  required: true
  value: sampledb
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: Version of MySQL image to be used (5.5, 5.6, 5.7, or latest).
  displayName: Version of MySQL Image
  name: MYSQL_VERSION
  required: true
  value: "5.7"
objects:

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}-mysql
    labels:
      app: ${NAME}
  stringData:
    database-name: ${MYSQL_DATABASE}
    database-password: ${MYSQL_PASSWORD}
    database-root-password: ${MYSQL_ROOT_PASSWORD}
    database-user: ${MYSQL_USER}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-mysql
    labels:
      app: ${NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${NAME}-settings
    labels:
      app: ${NAME}
  data:
    settings.json: >
      {
        // Name your instance!
        "title": "OpenShift Workshop Etherpad",

        // favicon default name
        // alternatively, set up a fully specified Url to your own favicon
        "favicon": "favicon.ico",

        //IP and port which etherpad should bind at
        "ip": "0.0.0.0",
        "port" : 9001,

         "dbType" : "mysql",
         "dbSettings" : {
                          "user"    : "DB_USER",
                          "host"    : "DB_HOST",
                          "port"    : "DB_PORT",
                          "password": "DB_PASS",
                          "database": "DB_DBID"
                        },

        //the default text of a pad
        "defaultPadText" : "{{ etherpad_text }}",

        /* Default Pad behavior, users can override by changing */
        "padOptions": {
          "noColors": false,
          "showControls": true,
          "showChat": true,
          "showLineNumbers": true,
          "useMonospaceFont": false,
          "userName": false,
          "userColor": false,
          "rtl": false,
          "alwaysShowChat": false,
          "chatAndUsers": false,
          "lang": "en-gb"
        },

        /* Shoud we suppress errors from being visible in the default Pad Text? */
        "suppressErrorsInPadText" : false,

        /* Users must have a session to access pads. This effectively allows only group pads to be accessed. */
        "requireSession" : false,

        /* Users may edit pads but not create new ones. Pad creation is only via the API. This applies both to group pads and regular pads. */
        "editOnly" : false,

        /* Users, who have a valid session, automatically get granted access to password protected pads */
        "sessionNoPassword" : false,

        /* if true, all css & js will be minified before sending to the client. This will improve the loading performance massivly,
           but makes it impossible to debug the javascript/css */
        "minify" : true,

        /* How long may clients use served javascript code (in seconds)? Without versioning this
           may cause problems during deployment. Set to 0 to disable caching */
        "maxAge" : 21600, // 60 * 60 * 6 = 6 hours

        /* This is the path to the Abiword executable. Setting it to null, disables abiword.
           Abiword is needed to advanced import/export features of pads*/
        "abiword" : null,

        /* This is the path to the Tidy executable. Setting it to null, disables Tidy.
           Tidy is used to improve the quality of exported pads*/
        "tidyHtml" : null,

        /* Allow import of file types other than the supported types */
        "allowUnknownFileEnds" : true,

        /* This setting is used if you require authentication of all users.
           Note: /admin always requires authentication. */
        "requireAuthentication" : false,

        /* Require authorization by a module, or a user with is_admin set, see below. */
        "requireAuthorization" : false,

        /*when you use NginX or another proxy/ load-balancer set this to true*/
        "trustProxy" : false,

        /* Privacy= disable IP logging */
        "disableIPlogging" : false,

        /* Users for basic authentication. is_admin = true gives access to /admin.
           If you do not uncomment this, /admin will not be available! */

        "users": {
          "admin": {
            "password": "${MYSQL_ROOT_PASSWORD}",
            "is_admin": true
          }
        },

        // restrict socket.io transport methods
        "socketTransportProtocols" : ["xhr-polling", "jsonp-polling", "htmlfile"],

        // Allow Load Testing tools to hit the Etherpad Instance.  Warning this will disable security on the instance.
        "loadTest": false,

        /* The toolbar buttons configuration.
        "toolbar": {
          "left": [
            ["bold", "italic", "underline", "strikethrough"],
            ["orderedlist", "unorderedlist", "indent", "outdent"],
            ["undo", "redo"],
            ["clearauthorship"]
          ],
          "right": [
            ["importexport", "timeslider", "savedrevision"],
            ["settings", "embed"],
            ["showusers"]
          ],
          "timeslider": [
            ["timeslider_export", "timeslider_returnToPad"]
          ]
        },
        */

        /* The log level we are using, can be: DEBUG, INFO, WARN, ERROR */
        "loglevel": "INFO",

        //Logging configuration. See log4js documentation for further information
        // https://github.com/nomiddlename/log4js-node
        "logconfig" :
          { "appenders": [
              { "type": "console" }
            ]
          }
      }

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}-mysql
    labels:
      app: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}-mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}-mysql
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-mysql
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-mysql
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${NAME}-mysql
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${NAME}-mysql
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${NAME}-mysql-data
        volumes:
        - name: ${NAME}-mysql-data
          persistentVolumeClaim:
            claimName: ${NAME}-mysql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:${MYSQL_VERSION}
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}-mysql
    labels:
      app: ${NAME}
  spec:
    ports:
    - name: mysql
      port: 3306
    selector:
      name: ${NAME}-mysql

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${NAME}
          deploymentconfig: ${NAME}
      spec:
        containers:
        - env:
          - name: DB_DBID
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${NAME}-mysql
          - name: DB_HOST
            value: ${NAME}-mysql
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-mysql
          - name: DB_PORT
            value: "3306"
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-mysql
          - name: NODE_ENV
            value: production
          image: ${ETHERPAD_IMAGE}
          imagePullPolicy: Always
          name: ${NAME}
          ports:
          - containerPort: 9001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 9001
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9001
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /opt/etherpad/config
            name: ${NAME}-settings
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: ${NAME}-settings
          name: ${NAME}-settings

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    ports:
    - name: ${NAME}
      port: 9001
      protocol: TCP
      targetPort: 9001
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    to:
      name: ${NAME}
