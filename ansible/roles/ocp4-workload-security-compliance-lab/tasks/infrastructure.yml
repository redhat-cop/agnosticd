---
- name: infrastructure Tasks Started
  debug:
    msg: "infrastructure Tasks - Started"

#####
#
- name: Install OpenSCAP tools
  yum:
    name:
      - docker 
      - openscap-utils
      - openscap-scanner
      - scap-security-guide
      - atomic
  delegate_to: "{{ bastion_internal }}"

- name: Ensure docker group exists
  group:
    name: docker
    state: present
  delegate_to: "{{ bastion_internal }}"

- name: retrieve registry route
  shell: "{{ openshift_cli }} get routes --all-namespaces | grep registry | grep -v console | awk '{print $3}'"
  register: image_route

- name: enable ssh with password
  replace:
    regexp: "PasswordAuthentication no"
    path: /etc/ssh/sshd_config 
    replace: "PasswordAuthentication yes"
  delegate_to: "{{ bastion_internal }}"

- name: restart sshd
  service:
    name: sshd
    state: restarted
  delegate_to: "{{ bastion_internal }}"

- name: set route name
  set_fact:
    ocp_registry_route: "{{ image_route.stdout }}"

- name: Add exposed registry as insecure
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: '0644'
    backup: yes
  delegate_to: "{{ bastion_internal }}"

- name: Enable / restart docker
  service: 
    name: docker
    enabled: yes
    state: restarted
  delegate_to: "{{ bastion_internal }}"

- name: Allow group to use oscap-docker without sudo password
  lineinfile:
    dest: /etc/sudoers
    line: "%docker ALL=NOPASSWD: /usr/bin/oscap-docker"
    validate: '/usr/sbin/visudo -cf %s'
  become: true
  delegate_to: "{{ bastion_internal }}"

- name: Create custom jenkins image
  shell: |
    {{ openshift_cli }} new-build -D $'FROM jenkins:latest\nUSER 0\nRUN curl -L https://updates.jenkins-ci.org/download/plugins/ssh-steps/1.2.1/ssh-steps.hpi -o /usr/lib/jenkins/ssh-steps.hpi && chmod 665 /usr/lib/jenkins/ssh-steps.hpi && sed -i '\''s/{ print $1; }/ {a=$1} END{print a}/'\'' /usr/libexec/s2i/run' --to=custom-jenkins -n openshift
  ignore_errors: true

- name: Wait for custom jenkins build to finish
  shell: "{{ openshift_cli }} get builds -n openshift | grep custom-jenkins | grep Complete"
  register: result_jenkins
  until: result_jenkins.rc == 0
  retries: 60
  delay: 20

- name: Create OWASP ZAP Image
  command: "{{ openshift_cli }} new-build --name owasp-zap -l 'role=jenkins-slave' https://github.com/RedHatDemos/SecurityDemos.git --context-dir=2019Labs/ProactiveSecurityCompliance/OpenShiftSecurityPipeline/jenkins-slave-zap -n openshift"
  ignore_errors: true

- name: Wait for OWASP ZAP build to finish
  shell: "{{ openshift_cli }} get builds -n openshift | grep owasp-zap | grep Complete"
  register: result_owasp
  until: result_owasp.rc == 0
  retries: 60
  delay: 20

- name: Create image management image
  command: "{{ openshift_cli }} new-build --name image-management -l 'role=jenkins-slave' https://github.com/siamaksade/jenkins-slave-skopeo.git -n openshift"
  ignore_errors: true

- name: Wait for image mgmt build to finish
  shell: "{{ openshift_cli }} get builds -n openshift | grep image-management | grep Complete"
  register: result_mgmt
  until: result_mgmt.rc == 0
  retries: 60
  delay: 20

- name: check if project {{ admin_project }} exists
  command: "{{ openshift_cli }} get project {{ admin_project }}"
  register: shared_project_result
  ignore_errors: true
  changed_when: false
  tags: always

- name: Expose registry
  command: "{{ openshift_cli }} create route passthrough --service=image-registry -n openshift-image-registry "
  tags: always
  ignore_errors: true

- name: create project {{ admin_project }}
  command: "{{ openshift_cli }} new-project {{ admin_project }}"
  when: shared_project_result is failed
  tags: always

- name: remove limitrange in {{ admin_project }}
  command: "{{ openshift_cli }} delete limitrange --all -n {{ admin_project }}"
  ignore_errors: true

# Add imagestreams/templates
#- name: Add etherpad template to {{ admin_project }}
#  command: "{{ openshift_cli }} apply -f /tmp/{{guid}}/etherpad-template.yml -n {{ admin_project }}"
#  tags: always

#- name: Add guides template to {{ admin_project }}
#  command: "{{ openshift_cli }} apply -f /tmp/{{guid}}/guides-template.yml -n {{ admin_project }}"
#  tags: always

#Â Deploy Gogs

- name: Set gogs facts
  set_fact:
    gogs_project_name: "{{ admin_project }}"
    gogs_route: "{{ gogs_hostname }}"
    gogs_image_version: 0.11.34
    gogs_admin_user: "{{ user_gogs_admin }}"
    gogs_admin_password: "{{ user_gogs_password }}"
    gogs_user: "{{ user_gogs_user }}"
    gogs_password: "{{ user_gogs_password }}"
    gogs_generate_user_count: "{{ user_count_end }}"
    gogs_generate_user_format: "{{ user_format }}"
    clean_deploy: false

- name: Install gogs
  import_tasks: ./gogs.yml
  become: true

#- import_role:
#    name: siamaksade.openshift_gogs
#  vars:
#    project_name: "{{ admin_project }}"
#    gogs_route: "{{ gogs_hostname }}"
#    gogs_image_version: 0.11.34
#    gogs_admin_user: "{{ user_gogs_admin }}"
#    gogs_admin_password: "{{ user_gogs_password }}"
#    gogs_user: "{{ user_gogs_user }}"
#    gogs_password: "{{ user_gogs_password }}"
#    gogs_generate_user_count: "{{ user_count_end }}"
#    gogs_generate_user_format: "{{ user_format }}"
#    clean_deploy: false
#  tags: gogs

# Deploy Firepad
#- name: Create install etherpad resources
#  shell: >
#        {{ openshift_cli }} new-app etherpad --name=etherpad -n {{ admin_project }}
#        --dry-run -o yaml > etherpad.yml
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: pad

#- name: Apply etherpad objects
#  command: "{{ openshift_cli }} apply -f etherpad.yml -n {{ admin_project }}"
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: pad
#
## Deploy Workshopper
#- name: Create install guide resources
#  shell: >
#        {{ openshift_cli }} new-app guide
#        -p HOSTNAME={{ guide_hostname }}
#        -p CONSOLE_ADDRESS={{ openshift_master }}
#        -p ROUTER_ADDRESS={{ ocp_apps_domain }}
#        -p GITLAB_URL_PREFIX={{ gogs_urlprefix }}
#        -p ETHERPAD_URL_PREFIX={{ etherpad_urlprefix }}
#        -n {{ admin_project }}
#        --dry-run -o yaml > guide.yml
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: guide
#
#- name: Apply guide objects
#  command: "{{ openshift_cli }} apply -f guide.yml -n {{ admin_project }}"
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: guide

# Deploy Quay
- name: check if project quay-enterprise exists
  command: "{{ openshift_cli }} get project quay-enterprise"
  register: quay_project_result
  ignore_errors: true
  changed_when: false
  tags: always

- name: Install Quay
  import_tasks: ./quay.yml
  become: true
  when: quay_project_result is failed
  tags: quay

# Deploy Clair
- name: Install Clair
  import_tasks: ./clair.yml
  become: true
  when: quay_project_result is failed
  tags: quay

- name: Set nexus facts
  set_fact:
    nexus_project_name: "{{ admin_project }}"
    nexus_image_version: 3.10.0
    nexus_volume_capacity: 10Gi
    nexus_max_memory: 8Gi
    nexus_min_memory: 4Gi
    nexus_max_cpu: 4
    nexus_min_cpu: 2

# Deploy nexus
- name: Deploy nexus
  import_tasks: ./nexus.yml
  become: true
  tags: nexus


# Deploy nexus
#- import_role:
#    name: siamaksade.openshift_sonatype_nexus
#  vars:
#    project_name: "{{ admin_project }}"
#    nexus_image_version: 3.10.0
#    nexus_volume_capacity: 100Gi
#    nexus_max_memory: 8Gi
#    nexus_min_memory: 4Gi
#    nexus_max_cpu: 4
#    nexus_min_cpu: 2
#  tags: nexus

# Deploy sonarqube
- name: Deploy Sonarqube
  import_tasks: ./sonarqube.yml
  become: true

# Deploy Che
- name: check if project {{ che_project }} exists
  command: "{{ openshift_cli }} get project {{ che_project }}"
  register: che_project_result
  ignore_errors: true
  changed_when: false
  tags: che

- name: Create the che project
  command: "{{ openshift_cli }} new-project {{ che_project }}"
  when: che_project_result is failed
  tags: che

- name: Remove che limitrange
  command: "{{ openshift_cli }} delete limitrange --all -n {{ che_project }}"
  when: che_project_result is failed
  tags: che

- name: Deploy Che
  command: "./deploy.sh -d -p={{ che_project }} --enable-oauth"
  args:
    chdir: "{{ tmp_dir }}/files"
  when: che_project_result is failed
  tags: che
  ignore_errors: true


#
#####

- name: infrastructure Tasks Complete
  debug:
    msg: "infrastructure Tasks - Completed"
