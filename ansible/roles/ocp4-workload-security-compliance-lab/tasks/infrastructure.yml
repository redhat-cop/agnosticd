---
- name: infrastructure Tasks Started
  debug:
    msg: "infrastructure Tasks - Started"

#####
#
- name: Install OpenSCAP tools
  yum:
    name:
      - docker 
      - openscap-utils
      - openscap-scanner
      - scap-security-guide
      - atomic
      - python2-pip

- name: Install docker python module
  command: pip install docker-py

- name: Ensure docker group exists
  group:
    name: docker
    state: present

# TODO
#- name: Update docker options
#  shell: "sed -i '/OPTIONS=.*/c\\OPTIONS=\"--selinux-enabled --signature-verification=False --insecure-registry docker-registry-default.apps.{{ openshift_public_hostname }}\"' /etc/sysconfig/docker"
#  become: true

- name: Enable / restart docker
  service: 
    name: docker
    enabled: yes
    state: restarted

- name: Allow group to use oscap-docker without sudo password
  lineinfile:
    dest: /etc/sudoers
    line: "%docker ALL=NOPASSWD: /usr/bin/oscap-docker"
    validate: '/usr/sbin/visudo -cf %s'
  become: true

- name: check if project {{ admin_project }} exists
  command: "{{ openshift_cli }} get project {{ admin_project }}"
  register: shared_project_result
  ignore_errors: true
  changed_when: false
  tags: always

- name: create project {{ admin_project }}
  command: "{{ openshift_cli }} new-project {{ admin_project }}"
  when: shared_project_result is failed
  tags: always

- name: remove limitrange in {{ admin_project }}
  command: "{{ openshift_cli }} delete limitrange ocp-workshop-core-resource-limits -n {{ admin_project }}"
  ignore_errors: true

# Add imagestreams/templates
#- name: Add etherpad template to {{ admin_project }}
#  command: "{{ openshift_cli }} apply -f /tmp/{{guid}}/etherpad-template.yml -n {{ admin_project }}"
#  tags: always

#- name: Add guides template to {{ admin_project }}
#  command: "{{ openshift_cli }} apply -f /tmp/{{guid}}/guides-template.yml -n {{ admin_project }}"
#  tags: always

#Â Deploy Gogs
- import_role:
    name: siamaksade.openshift_gogs
  vars:
    project_name: "{{ admin_project }}"
    gogs_route: "{{ gogs_hostname }}"
    gogs_image_version: 0.11.34
    gogs_admin_user: "{{ user_gogs_admin }}"
    gogs_admin_password: "{{ user_gogs_password }}"
    gogs_user: "{{ user_gogs_user }}"
    gogs_password: "{{ user_gogs_password }}"
    gogs_generate_user_count: "{{ user_count_end }}"
    gogs_generate_user_format: "{{ user_format }}"
    clean_deploy: false
  tags: gogs

# Deploy Firepad
#- name: Create install etherpad resources
#  shell: >
#        {{ openshift_cli }} new-app etherpad --name=etherpad -n {{ admin_project }}
#        --dry-run -o yaml > etherpad.yml
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: pad

#- name: Apply etherpad objects
#  command: "{{ openshift_cli }} apply -f etherpad.yml -n {{ admin_project }}"
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: pad
#
## Deploy Workshopper
#- name: Create install guide resources
#  shell: >
#        {{ openshift_cli }} new-app guide
#        -p HOSTNAME={{ guide_hostname }}
#        -p CONSOLE_ADDRESS={{ openshift_master }}
#        -p ROUTER_ADDRESS={{ ocp_apps_domain }}
#        -p GITLAB_URL_PREFIX={{ gogs_urlprefix }}
#        -p ETHERPAD_URL_PREFIX={{ etherpad_urlprefix }}
#        -n {{ admin_project }}
#        --dry-run -o yaml > guide.yml
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: guide
#
#- name: Apply guide objects
#  command: "{{ openshift_cli }} apply -f guide.yml -n {{ admin_project }}"
#  args:
#    chdir: "/tmp/{{guid}}/"
#  tags: guide

# Deploy Quay
#- name: check if project quay-enterprise exists
#  command: "{{ openshift_cli }} get project quay-enterprise"
#  register: quay_project_result
#  ignore_errors: true
#  changed_when: false
#  tags: always
#
#- name: Install Quay
#  import_tasks: ./quay.yml
#  become: true
#  when: quay_project_result is failed
#  tags: quay

- import_role:
    name: siamaksade.openshift_quay
  vars:
    quayio_username: "coreos+rhcp"
    quayio_password: "{{ quay_pull_password }}"
    project_name: "quay-enterprise"

# Deploy Clair
- name: Install Clair
  import_tasks: ./clair.yml
  become: true
  when: quay_project_result is failed
  tags: quay

# Deploy nexus
- import_role:
    name: siamaksade.openshift_sonatype_nexus
  vars:
    project_name: "{{ admin_project }}"
    nexus_image_version: 3.10.0
    nexus_volume_capacity: 100Gi
  tags: nexus

- name: check if project {{ che_project }} exists
  command: "{{ openshift_cli }} get project {{ che_project }}"
  register: che_project_result
  ignore_errors: true
  changed_when: false
  tags: che

# Deploy sonarqube
- name: Deploy Sonarqube
  import_tasks: ./sonarqube.yml
  become: true

# Deploy Che
- name: Deploy Che
  command: "./deploy.sh -d -p={{ che_project }}"
  args:
    chdir: "{{ tmp_dir }}/files"
  when: che_project_result is failed
  tags: che
#
#####

- name: infrastructure Tasks Complete
  debug:
    msg: "infrastructure Tasks - Completed"
