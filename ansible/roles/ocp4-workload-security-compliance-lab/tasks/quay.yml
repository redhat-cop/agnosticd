---

- name: "create the quay project"
  k8s:
    state: present
    name: "{{ quay_project_name }}"
    kind: Project
    api_version: project.openshift.io/v1

- name: Create Quay Operator OperatorGroup
  k8s:
    state: present
    namespace: "{{ quay_project_name }}" 
    definition: "{{ lookup('template', 'quay-SubscriptionGroup.yaml.j2') }}"

- name: Create Quay Operator Subscription
  k8s:
    state: present
    namespace: "{{ quay_project_name }}" 
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: quay-operator
        namespace: "{{ quay_project_name }}"
      spec:
        channel: "{{ quay_channel }}"
        source: redhat-operators
        sourceNamespace: openshift-marketplace
        name: quay-operator
        startingCSV: "{{ quay_csv }}"
        installPlanApproval: Manual

- name: wait for the status of the Quay subscription to not be empty
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: quay-operator
    namespace: "{{ quay_project_name }}"
  register: operator_subscription_out
  until: 
    - operator_subscription_out is defined
    - operator_subscription_out.resources is defined
    - operator_subscription_out.resources[0] is defined
    - operator_subscription_out.resources[0].status is defined
    - operator_subscription_out.resources[0].status.installplan is defined
  retries: 30
  delay: 20

- name: patch the installplan to approve it
  k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: InstallPlan
      metadata:
        namespace: "{{ quay_project_name }}"
        name: "{{ operator_subscription_out.resources[0].status.installplan.name }}"
      spec:
        approved: true

- name: Get an existing LimitRanges
  k8s_info:
    api_version: v1
    kind: LimitRange
    namespace: "{{ quay_project_name }}"
  register: quay_limit_ranges

- name: Remove LimitRanges
  k8s:
    state: absent
    api_version: v1
    kind: LimitRange
    namespace: "{{ item.metadata.namespace }}"
    name: "{{ item.metadata.name }}"
  loop: "{{ quay_limit_ranges.resources }}"

- name: create redhat pull secret
  command: "{{ openshift_cli }} -n {{ quay_project_name }} create secret docker-registry redhat-pull-secret --docker-server=quay.io  --docker-username='{{ quay_pull_user }}' --docker-password='{{ quay_pull_password }}'"

- name: create quay admin password secret
  command: "{{ openshift_cli }} -n {{ quay_project_name }} create secret generic quay-admin-password --from-literal=superuser-username={{ quay_admin_user }} --from-literal=superuser-password={{ quay_admin_password }} --from-literal=superuser-email=quay@example.com"

- name: Deploy Quay Operator
  k8s:
    state: present
    namespace: "{{ quay_project_name }}" 
    definition: "{{ lookup('file', 'quay_cr.yml') }}"


- name: wait for quay to be running
  uri:
    url: https://{{ quay_route }}
    status_code: 200
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 30
  delay: 30
  ignore_errors: true
