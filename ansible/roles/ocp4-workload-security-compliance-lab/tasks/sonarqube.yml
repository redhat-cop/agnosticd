---

- name: deploy sonarqube from template (persistent)
  shell: |
    {{ ocp4_dso_openshift_cli }} new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-persistent-template.yml \
        --param=SONARQUBE_MEMORY_LIMIT=2Gi \
        -n {{ ocp4_admin_project }}
  when: not ephemeral|bool

- name: deploy sonarqube from template (ephemeral)
  shell: |
    {{ ocp4_dso_openshift_cli }} new-app -f https://raw.githubusercontent.com/siamaksade/sonarqube/master/sonarqube-template.yml \
        --param=SONARQUBE_MEMORY_LIMIT=2Gi \
        -n {{ ocp4_admin_project }}
  when: ephemeral|bool

- name: get sonarqube route
  shell: "{{ ocp4_dso_openshift_cli }} get route {{ sonarqube_service_name }} -o jsonpath='{ .spec.host }' -n {{ sonarqube_project_name }}"
  register: sonarqube_route_output
  changed_when: false

- set_fact:
    sonarqube_route: "{{ sonarqube_route_output.stdout }}"

# [TODO]: <evaluate if needed>

# - name: "Deploy sonarqube postgres"
#   command: "{{ ocp4_dso_openshift_cli }} new-app openshift/postgresql-persistent -p VOLUME_CAPACITY=10Gi -p POSTGRESQL_USER=sonar -p POSTGRESQL_PASSWORD=sonar -p POSTGRESQL_DATABASE=sonar --name postgresql-sonarqube -n {{ ocp4_admin_project }}"

# - name: "Wait for sonarqube postgres to deploy"
#   command: "{{ ocp4_dso_openshift_cli }} rollout status dc/postgresql -n {{ ocp4_admin_project }}"
#   async: 300

# - name: "Create the sonarqube build config"
#   command: "{{ ocp4_dso_openshift_cli }} new-build --name=sonarqube --binary --strategy=docker -n {{ ocp4_admin_project }}"
#
# - name: "Copy over the sonarqube Dockerfile"
#   copy:
#     src: Dockerfile-sonarqube
#     dest: "{{ tmp_dir }}/Dockerfile"
#
# - name: "Build the sonarqube container"
#   command: "{{ ocp4_dso_openshift_cli }} start-build --from-file={{ tmp_dir }}/Dockerfile bc/sonarqube --follow --wait -n {{ ocp4_admin_project }}"
#
# - name: "Deploy the sonarqube container"
#   command: "{{ ocp4_dso_openshift_cli }} new-app -i sonarqube  --env=SONARQUBE_JDBC_USERNAME=sonar --env=SONARQUBE_JDBC_PASSWORD=sonar --env=SONARQUBE_JDBC_URL=jdbc:postgresql://postgresql/sonar -n {{ ocp4_admin_project }}"
#
# - name: "Expose the sonarqube route"
#   command: "{{ ocp4_dso_openshift_cli }} expose svc/sonarqube -n {{ ocp4_admin_project }}"
#
# - name: "Enable sonarqube persistent storage"
#   command: "{{ ocp4_dso_openshift_cli }} set volume dc/sonarqube --name=sonarqube-dynetics-volume-1 --add --overwrite -t pvc --claim-name=sonarqube-data --claim-size=10Gi -n {{ ocp4_admin_project }}"

# [TODO]: </evaluate if needed>

- name: set sonardb cpu and mem
  shell: "{{ ocp4_dso_openshift_cli }} set resources dc/sonardb --limits=cpu=400m,memory=1Gi --requests=cpu=100m,memory=512Mi -n {{ ocp4_admin_project }}"

- name: set sonarqube cpu and mem
  shell: "{{ ocp4_dso_openshift_cli }} set resources dc/sonarqube --limits=cpu=1,memory=2Gi --requests=cpu=100m,memory=128Mi -n {{ ocp4_admin_project }}"

- name: create sonarqube readiness probe
  command: "{{ ocp4_dso_openshift_cli }} set probe dc/sonarqube --readiness --failure-threshold=3 --initial-delay-seconds=3  --period-seconds=5 --timeout-seconds=10  --get-url=http://:9000 -n {{ ocp4_admin_project }}"

- name: create sonarqube liveness probe
  command: "{{ ocp4_dso_openshift_cli }} set probe dc/sonarqube --liveness --failure-threshold=3 --initial-delay-seconds=30  --period-seconds=5 --timeout-seconds=10  --get-url=http://:9000 -n {{ ocp4_admin_project }}"

- name: waiting for sonarqube pod to be available
  command: "{{ ocp4_dso_openshift_cli }} rollout status dc/sonarqube -n {{ ocp4_admin_project }}"
  async: 300

- name: wait for sonarqube to be running
  uri:
    url: https://{{ sonarqube_urlprefix }}.{{ route_subdomain }}
    status_code: 200
    validate_certs: false
  register: result
  until: result.status == 200
  retries: 30
  delay: 30
