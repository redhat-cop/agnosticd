- name: "Deploy postgres"
  command: "{{ openshift_cli }} new-app openshift/postgresql-persistent -p VOLUME_CAPACITY=10Gi -p POSTGRESQL_USER=sonar -p POSTGRESQL_PASSWORD=sonar -p POSTGRESQL_DATABASE=sonar --name postgresql-sonarqube"

- name: "Wait for postgres to deploy"
  command: "{{ openshift_cli }} rollout status dc/postgresql"
  async: 300
        
- name: "Create the sonarqube build config"
  command: "{{ openshift_cli }} new-build --name=sonarqube --binary --strategy=docker"

- name: "Copy over the Dockerfile"
  copy:
    src: Dockerfile-sonarqube
    dest: "{{ tmp_dir }}/Dockerfile"

- name: "Build the sonarqube container" 
  command: "{{ openshift_cli }} start-build --from-file={{ tmp_dir }}/Dockerfile bc/sonarqube --follow --wait"

- name: "Deploy the sonarqube container"
  command: "{{ openshift_cli }} new-app -i sonarqube  --env=SONARQUBE_JDBC_USERNAME=sonar --env=SONARQUBE_JDBC_PASSWORD=sonar --env=SONARQUBE_JDBC_URL=jdbc:postgresql://postgresql/sonar"

- name: "Expose the route"
  command: "{{ openshift_cli }} expose svc/sonarqube"
  
- name: "Enable persistent storage"
  command: "{{ openshift_cli }} volume dc/sonarqube --name=sonarqube-dynetics-volume-1 --add --overwrite -t pvc --claim-name=sonarqube-data --claim-size=10Gi"

- name: "Create readiness probe"
  command: "{{ openshift_cli }} set probe dc/sonarqube --readiness --failure-threshold=3 --initial-delay-seconds=3  --period-seconds=5 --timeout-seconds=10  --get-url=http://:9000"

- name: "Create liveness probe"
  command: "{{ openshift_cli }} set probe dc/sonarqube --liveness --failure-threshold=3 --initial-delay-seconds=30  --period-seconds=5 --timeout-seconds=10  --get-url=http://:9000"

- name: "Waiting for sonarqube pod to be available..."
  command: "{{ openshift_cli }} rollout status dc/sonarqube"
  async: 300