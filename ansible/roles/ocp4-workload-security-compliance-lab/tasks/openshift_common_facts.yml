---

- name: check if kube config dir exists
  stat:
    path: "{{ oc_kube_config }}"
  register: kube_config_result
  when: >
    oc_kube_config is defined and
    oc_kube_config is not none and
    oc_kube_config|trim() != ""
- name: set openshift cli options (.kube)
  set_fact:
    openshift_cli: "{{ openshift_cli }} --config={{ oc_kube_config }}"
  when: >
    oc_kube_config is defined and
    oc_kube_config is not none and
    oc_kube_config|trim() != "" and
    kube_config_result.stat.exists

- name: check if token file exists
  stat:
    path: "/var/run/secrets/kubernetes.io/serviceaccount/token"
  register: token_result
  when: >
    oc_token is not defined or
    oc_token is none or
    oc_token|trim() == ""

- name: set token facts
  set_fact:
    oc_token: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/token') }}"
    running_on_openshift: true
  when: >
    (oc_token is not defined or
    oc_token is none or
    oc_token|trim() == "") and
    token_result.stat.exists

- name: set openshift cli options with token
  set_fact:
    openshift_cli: "{{ openshift_cli }} --token={{ oc_token }}"
  when: >
    oc_token is defined and
    oc_token is not none and
    oc_token|trim() != ""

- name: get openshift master
  shell: "{{ openshift_cli }} whoami --show-server"
  register: openshift_master_result
  when: >
    openshift_master is not defined or
    openshift_master is none or
    openshift_master|trim() == ""
  changed_when: false

- name: set openshift master fact
  set_fact:
    openshift_master: "{{ openshift_master_result.stdout }}"
  when: >
    openshift_master is not defined or
    openshift_master is none or
    openshift_master|trim() == ""
- name: set openshift cli options (server)
  set_fact:
    openshift_cli: "{{ openshift_cli }} --server={{ openshift_master }} --insecure-skip-tls-verify=true"

- name: get openshift user
  shell: "{{ openshift_cli }} whoami"
  register: openshift_user_result
  when: >
    project_admin is not defined or
    project_admin is none or
    project_admin|trim() == ""
  changed_when: false

- name: set openshift user fact
  set_fact:
    openshift_user: "{{ openshift_user_result.stdout }}"
  when: >
    project_admin is not defined or
    project_admin is none or
    project_admin|trim() == ""

- import_tasks: hostname_suffix.yml
  when: set_hostname_suffix
