---
kind: Template
apiVersion: v1
metadata:
  name: ec-broker
  annotations:
    openshift.io/display-name: Everyware Cloud Broker
    description: Everyware Cloud Broker service.
    iconClass: icon-ec
    tags: ec,broker
    template.openshift.io/long-description: This template provides a standalone Broker server.
    template.openshift.io/provider-display-name: Eurotech S.p.A.
    template.openshift.io/support-url: https://support.eurotech.com
message: "The following service(s) have been created in your project: ${EC_SERVICE_NAME}."
labels:
  template: ec-broker-template
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: "${EC_SERVICE_NAME}-mqtt"
  spec:
    ports:
    - name: "${EC_SERVICE_NAME}-mqtt"
      protocol: TCP
      port: 1883
      nodePort: "${MQTT_NODE_PORT}"
    type: NodePort
    selector:
      app: "${EC_SERVICE_NAME}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${EC_SERVICE_NAME}-mqtts"
  spec:
    ports:
    - name: "${EC_SERVICE_NAME}-mqtts"
      protocol: TCP
      port: 8883
      nodePort: "${MQTTS_NODE_PORT}"
    type: NodePort
    selector:
      app: "${EC_SERVICE_NAME}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${EC_SERVICE_NAME}-ws"
  spec:
    ports:
    - name: "${EC_SERVICE_NAME}-ws"
      protocol: TCP
      port: 61614
      targetPort: 61614
    selector:
      app: "${EC_SERVICE_NAME}"
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      template: ${EC_SERVICE_NAME}-template
    name: ${EC_SERVICE_NAME}-mqtt
  spec:
    port:
      targetPort: ${EC_SERVICE_NAME}-mqtt
    to:
      kind: Service
      name: ${EC_SERVICE_NAME}-mqtt
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      template: ${EC_SERVICE_NAME}-template
    name: ${EC_SERVICE_NAME}-ws
  spec:
    port:
      targetPort: ${EC_SERVICE_NAME}-ws
    to:
      kind: Service
      name: ${EC_SERVICE_NAME}-ws
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      template: ${EC_SERVICE_NAME}-template
    name: ${EC_SERVICE_NAME}-mqtts
  spec:
    port:
      targetPort: ${EC_SERVICE_NAME}-mqtts
    to:
      kind: Service
      name: ${EC_SERVICE_NAME}-mqtts
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: "${EC_SERVICE_NAME}"
    name: "${EC_SERVICE_NAME}"
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      app: "${EC_SERVICE_NAME}"
      deploymentconfig: "${EC_SERVICE_NAME}"    
    template:
      metadata:
        labels:
          app: "${EC_SERVICE_NAME}"
          deploymentconfig: "${EC_SERVICE_NAME}"
      spec:
        imagePullSecrets:
        - name: redhat-iot-rhpds-pull-secret
        containers:
        - env:
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_DB}"
                key: name
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_DB}"
                key: username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_DB}"
                key: password
          - name: EC_CRT
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_CRT}"
                key: crt
          - name: EC_CA
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_CRT}"
                key: ca
          - name: EC_KEY
            valueFrom:
              secretKeyRef:
                name: "${EC_SECRET_CRT}"
                key: key
          - name: DISABLE_SSL
            value: "${DISABLE_SSL}"
          - name: ACTIVEMQ_OPTS
            value:
              -Xmx1G
              -Dcommons.db.connection.host=$MARIADB_SERVICE_HOST
              -Dcommons.db.connection.port=$MARIADB_SERVICE_PORT
              -Dcommons.db.jdbcConnectionUrlResolver=${DB_RESOLVER}
              -Dcommons.db.jdbc.driver=${DB_DRIVER}
              -Dcommons.db.connection.scheme=${DB_CONNECTION_SCHEME}
              -Dcommons.db.schema=${DB_SCHEMA_NAME}
              -Dcommons.db.schema.update=${DB_SCHEMA_UPDATE}
              -Dcommons.db.name=${DB_NAME}
              -Dcommons.db.username=${DB_USERNAME}
              -Dcommons.db.password=${DB_PASSWORD}
              -Ddatastore.elasticsearch.nodes=$ELASTICSEARCH_PORT_9200_TCP_ADDR
              -Ddatastore.elasticsearch.port=$ELASTICSEARCH_PORT_9200_TCP_PORT
              -Dcertificate.jwt.private.key=file:///tmp/key.pk8
              -Dcertificate.jwt.certificate=file:///tmp/cert.pem
              -Dkapua.config.dir=/etc/opt/ec/defaults
              ${JAVA_OPTS_EXTRA}
          image: "quay.io/redhat-iot/${EC_SERVICE_NAME}:${IMAGE_VERSION}"
          imagePullPolicy: IfNotPresent
          name: "${EC_SERVICE_NAME}"
          ports:
          - containerPort: 1883
          - containerPort: 8883
          - containerPort: 61614
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 1883
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2G
          securityContext:
              runAsUser: 185
          volumeMounts:
          - mountPath: /opt/amq/data
            name: ec-broker-volume-1
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ec-broker-volume-1
          emptyDir: {}
#        imagePullSecrets:
#          - name: eurotechreg    
parameters:
- name: IMAGE_VERSION
  description: The version of the image to use
  value: latest
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 2Gi
  required: true
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: ec
- name: EC_SERVICE_NAME
  displayName: EC api Service Name
  description: The name of the OpenShift Service.
  value: ec-broker
  required: true
# - name: STORAGE_HOST
#   description: Address of the storage service
#   value: elasticsearch.ec.svc.cluster.local
#   required: true
# - name: STORAGE_PORT
#   description: Port of the storage service
#   value: "9200"
#   required: true
# - name: DB_HOST
#   description: Address of the DB
#   value: mariadb.ec.svc.cluster.local
#   required: true
# - name: DB_PORT
#   description: The version of the image to use
#   value: "3306"
#   required: true
- name: DB_SCHEMA_NAME
  description: Automatically update DB schema
  value: "ecdb"
  required: true
- name: DB_SCHEMA_UPDATE
  description: Automatically update DB schema
  value: "true"
  required: true
- name: DB_RESOLVER
  description: JDBC connection URL resolver
  value: MariaDB
  required: true
- name: DB_DRIVER
  description: JDBC driver
  value: org.mariadb.jdbc.Driver
  required: true
- name: DB_CONNECTION_SCHEME
  description: JDBC connection scheme
  value: jdbc:mariadb
  required: true
- name: MQTT_NODE_PORT
  description: Service node port for MQTT
  value: "31883"
  required: true
- name: MQTTS_NODE_PORT
  description: Service node port for MQTTS
  value: "31993"
  required: true
- name: DISABLE_SSL
  description: Name of the secret containing DB credentials
  value: "false"
  required: true
- name: EC_SECRET_DB
  description: Name of the secret containing DB credentials
  value: "ec-db"
  required: true
- name: EC_SECRET_CRT
  description: Name of the secret containing certificates
  value: "ec-crt"
  required: true
