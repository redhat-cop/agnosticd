# vim: set ft=ansible
---
# Implement your Workload deployment tasks here
- name: Create spark-notebook ImageStreamTag in openshift project
  k8s:
    namespace: "openshift"
    definition: "{{ lookup('template', 'workshop-notebook-openshift-image.imagestreamtag.yaml.j2') }}"

- name: Get the storagecluster to extract its uid
  k8s_facts:
    api_version: ocs.openshift.io/v1
    namespace: "{{ ocs_namespace }}"
    name: ocs-storagecluster
    kind: StorageCluster
  register: storage_cluster_info

- name: Create ceph object store in openshift-storage namespace
  k8s:
    definition: "{{ lookup('template', 'cephobjectstore.yaml.j2') }}"

- name: Wait for the RGW deployment
  k8s_facts:
    api_version: extensions/v1beta1
    kind: Deployment
    namespace: "{{ ocs_namespace }}"
    label_selectors:
      - app=rook-ceph-rgw
  register: rgw_deployment
  until:
    - rgw_deployment is defined
    - rgw_deployment.resources is defined
    - rgw_deployment.resources[0] is defined
    - rgw_deployment.resources[0].status is defined
    - rgw_deployment.resources[0].status.readyReplicas is defined
    - rgw_deployment.resources[0].status.readyReplicas | int > 0
  retries: 18
  delay: 10

- name: Get the ceph rgw service
  k8s_facts:
    api_version: v1
    kind: Service
    namespace: "{{ ocs_namespace }}"
    label_selectors:
      - app=rook-ceph-rgw
  register: rgw_service
 
- include_tasks: per_user_pre_operator_workload.yml
  loop: "{{ range(1, num_users | int + 1, 1) | list }}"
  loop_control:
    loop_var: user_num

- name: wait for OBC S3 bindings
  k8s_facts:
    name: "user{{ item }}-odh-obc"
    namespace: "opendatahub-user{{ item }}"
    api_version: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
  register: obc_claim_out
  until: 
    - obc_claim_out is defined
    - obc_claim_out.resources is defined
    - obc_claim_out.resources[0] is defined
    - obc_claim_out.resources[0].status is defined
    - obc_claim_out.resources[0].status.phase is defined
    - obc_claim_out.resources[0].status.phase == "Bound"
  retries: 10
  delay: 6
  loop: "{{ range(1, num_users | int + 1, 1) | list }}"

- name: Wait for Open Data Hub ClusterServiceVersion to finish installing
  k8s_facts:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: "opendatahub-user{{ item }}"
    name: opendatahub-operator.v0.5.2
  register: odh_csv
  until: 
    - odh_csv.resources is defined
    - odh_csv.resources[0] is defined
    - odh_csv.resources[0].status is defined
    - odh_csv.resources[0].status.phase is defined
    - odh_csv.resources[0].status.phase == 'Succeeded'
  retries: 10
  delay: 60
  loop: "{{ range(1, num_users | int + 1, 1) | list }}"

- name: Wait for Open Data Hub operator to deploy
  k8s_facts:
    api_version: extensions/v1beta1
    kind: Deployment
    namespace: "opendatahub-user{{ item }}"
    name: opendatahub-operator
  register: odh_operator
  until: 
    - odh_operator.resources is defined
    - odh_operator.resources[0] is defined
    - odh_operator.resources[0].status is defined
    - odh_operator.resources[0].status.readyReplicas is defined
    - odh_operator.resources[0].status.readyReplicas | int >= 1
  retries: 10
  delay: 60
  loop: "{{ range(1, num_users | int + 1, 1) | list }}"

- include_tasks: per_user_post_operator_workload.yml
  loop: "{{ range(1, num_users | int + 1, 1) | list }}"
  loop_control:
    loop_var: user_num

# parallel-ish validation of deployments
- name: Wait for various deploymentconfigs to deploy
  k8s_facts:
    api_version: apps.openshift.io/v1
    kind: DeploymentConfig
    name: "{{ item.1 }}"
    namespace: "opendatahub-user{{ item.0 }}"
  register: deployment_out
  until:
    - deployment_out is defined
    - deployment_out.resources is defined
    - deployment_out.resources[0] is defined
    - deployment_out.resources[0].status is defined
    - deployment_out.resources[0].status.readyReplicas is defined
    - deployment_out.resources[0].status.readyReplicas | int >= 1
  loop: "{{ (range(1, num_users | int + 1, 1) | list) | product(validation_deploymentconfigs) | list }}"
  retries: 18
  delay: 10

- name: Wait for various deployments to deploy
  k8s_facts:
    api_version: extensions/v1beta1
    kind: Deployment
    name: "{{ item.1 }}"
    namespace: "opendatahub-user{{ item.0 }}"
  register: deployment_out
  until:
    - deployment_out is defined
    - deployment_out.resources is defined
    - deployment_out.resources[0] is defined
    - deployment_out.resources[0].status is defined
    - deployment_out.resources[0].status.readyReplicas is defined
    - deployment_out.resources[0].status.readyReplicas | int >= 1
  loop: "{{ (range(1, num_users | int + 1, 1) | list) | product(validation_deployments) | list }}"
  retries: 18
  delay: 10

- name: Wait for various statefulsets to deploy
  k8s_facts:
    api_version: apps/v1
    kind: StatefulSet
    name: "{{ item.1 }}"
    namespace: "opendatahub-user{{ item.0 }}"
  register: deployment_out
  until:
    - deployment_out is defined
    - deployment_out.resources is defined
    - deployment_out.resources[0] is defined
    - deployment_out.resources[0].status is defined
    - deployment_out.resources[0].status.readyReplicas is defined
    - deployment_out.resources[0].status.readyReplicas | int >= 1
  loop: "{{ (range(1, num_users | int + 1, 1) | list) | product(validation_statefulsets) | list }}"
  retries: 18
  delay: 10

- name: Wait for various 3-member statefulsets to deploy
  k8s_facts:
    api_version: apps/v1
    kind: StatefulSet
    name: "{{ item.1 }}"
    namespace: "opendatahub-user{{ item.0 }}"
  register: deployment_out
  until:
    - deployment_out is defined
    - deployment_out.resources is defined
    - deployment_out.resources[0] is defined
    - deployment_out.resources[0].status is defined
    - deployment_out.resources[0].status.readyReplicas is defined
    - deployment_out.resources[0].status.readyReplicas | int >= 3
  loop: "{{ (range(1, num_users | int + 1, 1) | list) | product(validation_3statefulsets) | list }}"
  retries: 18
  delay: 10

- name: Get the cluster apps domain
  k8s_facts:
    api_version: config.openshift.io/v1
    name: cluster
    kind: Ingress
  register: cluster_apps_domain_out

- name: register cluster apps domain as a fact
  set_fact:
    cluster_apps_domain: "{{ cluster_apps_domain_out.resources[0].spec.domain}}"
    notebook_suffix: "/notebooks/data-engineering-and-machine-learning-workshop.git/source/notebooks/hybrid-data-engineering.ipynb"

- name: make sure the guides project exists
  k8s:
    state: present
    definition:
      apiVersion: project.openshift.io/v1
      kind: Project
      metadata:
        name: guides

- name: search for username distribution tool
  k8s_facts:
    kind: DeploymentConfig
    name: get-a-username
    namespace: guides
  register: r_gau_dc

- name: deploy redis
  when: r_gau_dc.resources | list | length == 0
  shell: >
    oc process -f -
    -p DATABASE_SERVICE_NAME=redis
    -p REDIS_PASSWORD=redis
    -p VOLUME_CAPACITY=1Gi
    -p MEMORY_LIMIT=1Gi
    -p REDIS_VERSION=latest
    | oc create -n guides  -f -
  args:
    stdin: "{{ lookup('file', 'redis-template.yaml') }}"

- name: wait for redis to be ready
  when: r_gau_dc.resources | list | length == 0
  k8s_facts:
    api_version: v1
    kind: Pod
    namespace: guides
    label_selectors:
      - name = redis
      - deploymentconfig = redis
    field_selectors:
      - status.phase=Running
  register: r_redis_pod
  retries: 120
  delay: 10
  until: r_redis_pod.resources | list | length == 1
  
- name: deploy username distribution tool
  when: r_gau_dc.resources | list | length == 0
  shell: >
    oc -n guides new-app quay.io/openshiftlabs/username-distribution:1.2 --name=get-a-username
    -e LAB_REDIS_HOST=redis
    -e LAB_REDIS_PASS=redis
    -e LAB_TITLE={{ 'Data Engineering Workshop' | quote }}
    -e LAB_DURATION_HOURS=8h
    -e LAB_USER_COUNT={{ num_users }}
    -e LAB_USER_ACCESS_TOKEN={{ 'openshift' | quote }}
    -e LAB_USER_PASS={{ 'openshift' | quote }}
    -e LAB_USER_PREFIX=user
    -e LAB_USER_PAD_ZERO=false
    -e LAB_ADMIN_PASS={{ 'openshift' | quote }}
    -e LAB_MODULE_URLS={{ ( 'http://jupyterhub-opendatahub-%USERNAME%.' + cluster_apps_domain + '/user/%USERNAME%' + notebook_suffix + ';Workshop Jupyter Notebook') | quote }}

- name: expose username distribution tool
  k8s:
    api_version: route.openshift.io/v1
    namespace: guides
    state: present
    kind: Route
    definition:
      metadata:
        name: get-a-username
        labels:
          app: get-a-username
      spec:
        host: ''
        to:
          kind: Service
          name: get-a-username
          weight: 100
        port:
          targetPort: 8080-tcp
  register: r_route

- debug:
    msg:
    - "user.info: Credentials URL for students: http://{{ r_route.result.spec.host }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
