---
- name: Set the instance interfaces
  ansible.builtin.set_fact:
    _instance_interfaces:
      - masquerade: {}
        model: virtio
        name: default
      - name: "{{ network }}"
        macAddress: "{{ ai_workers_macs2[_index|int-1] }}"
        bridge: {}
    _instance_networks:
      - name: default
        pod:
          vmNetworkCIDR: "{{ pod_network }}"
      - name: "{{ network }}"
        multus:
          networkName: "{{ network_name }}"

- name: Add extra networks if defined
  when: ai_extra_networks | default([]) | length > 0
  ansible.builtin.set_fact:
    _instance_interfaces: >-
      {{
        _instance_interfaces + [{
          'name': _network,
          'bridge': {},
          'model': 'virtio',
        } ]
      }}
    _instance_networks: >-
      {{ _instance_networks + [
          {
              'name': _network,
              'multus': {'networkName': _network + guid}
          }] }}
  loop: "{{ ai_extra_networks }}"
  loop_control:
    loop_var: _network

- name: Add attach networks if defined
  when: ai_attach_workers_networks | default([]) | length > 0
  ansible.builtin.set_fact:
    _instance_interfaces: >-
      {{
        _instance_interfaces + [{
          'name': _network.split("/")[1],
          'bridge': {},
          'model': 'virtio',
          'macAddress': ai_attach_workers_macs[_network][_index|int-1]
        } ]
      }}
    _instance_networks: >-
      {{ _instance_networks + [
          {
              'name': _network.split("/")[1],
              'multus': {'networkName': _network}
          }] }}
  loop: "{{ ai_attach_workers_networks }}"
  loop_control:
    loop_var: _network

- name: Create Worker virtual machine
  kubevirt.core.kubevirt_vm:
    api_version: kubevirt.io/v1
    host: "{{ sandbox_openshift_api_url }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key|default(sandbox_openshift_api_key) }}"
    validate_certs: false
    name: "{{ vmname }}"
    namespace: "{{ namespace }}"
    data_volume_templates:
      - metadata:
          name: "{{ vmname }}-installation-cdrom"
        spec:
          source:
            pvc:
              name: "{{ pvcinstall }}"
              namespace: "{{ namespace }}"
          storage:
            resources:
              requests:
                storage: 2Gi
      - metadata:
          name: "{{ vmname }}"
        spec:
          preallocation: false
          source:
            blank: {}
          storage:
            resources:
              requests:
                storage: 100Gi
            storageClassName: "{{ storageclass }}"
    running: true
    wait: false
    annotations:
      vm.kubevirt.io/os: rhel8
    labels:
      kubevirt.io/domain: "{{ vmname }}"
      role: worker
    spec: "{{ _spec | from_yaml }}"
  vars:
    _spec: |
      domain:
        cpu:
          cores: {{ ai_workers_cores | int }}
          sockets: 1
          threads: 1
          model: host-passthrough
        devices:
          disks:
            - bootOrder: 1
              disk:
                bus: virtio
              name: rootdisk
            - bootOrder: 2
              cdrom:
                bus: sata
              name: installation-cdrom
          interfaces: {{ _instance_interfaces }}
          networkInterfaceMultiqueue: true
        machine:
          type: pc-q35-rhel8.6.0
        resources:
          requests:
            memory: "{{ ai_workers_memory }}"
          limits:
            memory: "{{ ai_workers_memory }}"
      readinessProbe:
        tcpSocket:
          port: 80
        initialDelaySeconds: 120
        periodSeconds: 5
      evictionStrategy: LiveMigrate
      networks: {{ _instance_networks }}
      terminationGracePeriodSeconds: 180
      volumes:
        - dataVolume:
            name: "{{ vmname }}"
          name: rootdisk
        - dataVolume:
            name: "{{ vmname }}-installation-cdrom"
          name: installation-cdrom

- name: Wait till VM is running
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    host: "{{ sandbox_openshift_api_url }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key|default(sandbox_openshift_api_key) }}"
    validate_certs: false
    kind: VirtualMachine
    name: "{{ vmname }}"
    namespace: "{{ namespace }}"
  register: r_vm_status
  until: r_vm_status.resources[0].status.printableStatus|default('') == "Running"
  retries: 30
  delay: 10
