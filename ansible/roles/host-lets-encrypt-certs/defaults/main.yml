# The Top Level domain for which to request a certificate
acme_domain: ""

# Wildcard domain for which to request a certificate
# Wildcard domains need valid AWS access credentials to manipulate
# Route 53 entries for automatic validation by Let's Encrypt
acme_wildcard_domain: ""
acme_aws_access_key: ""
acme_aws_secret_access_key: ""

# Additional arguments to be passed to the acme.sh command line
acme_additional_args: ""

# The directoroy on the remote host in which to install acme.sh
acme_remote_dir: "/root"
# The directory on the remote host in which to install the certificates
# after they've been successfully requested
acme_install_dir: "/root/certificates"
acme_install_dir_owner: "root"
acme_install_dir_group: "root"

# Local (to the host ansible is running on) cache of certificates
# Prevents re-requesting certificates for later runs of the playbook
# when the domains haven't changed
acme_use_cache: True
acme_cache_archive_file:   "/tmp/acme.tar.gz"

# If acme_local_archive_file is not provided both of the following can
# be specified to just use a previously created cert/key
acme_cache_cert_file:      "/tmp/ssl.cert"
acme_cache_key_file:       "/tmp/ssl.key"
acme_cache_ca_file:        "/tmp/ssl_ca.cert"
acme_cache_fullchain_file: "/tmp/fullchain.cer"

# Use the Production Let's Encrypt Server. Leave to False for testing runs
# to prevent issues with the Let's Encrypt rate limits
acme_production: False

# Install a cron job to automatically renew Certificates. Checks
# once a day.
acme_renew_automatically: False

# Force the creation of new certificates even if there are
# a) certificates already on the host or
# b) certificates in the local cache
acme_force_issue: False

# Internal Variable. Don't change
acme_setup_complete: false