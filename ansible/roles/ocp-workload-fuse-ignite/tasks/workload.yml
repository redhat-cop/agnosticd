---

- name: check if user is cluster admin
  shell: "oc get project default"
  register: default_project_result
  ignore_errors: true
  changed_when: false

- name: user granted access rights
  fail:
    msg: "User does not have cluster-admin rights to install Fuse Online"
  when: default_project_result is failed

- name: Create project for workload; project =  {{ocp_project}}
  shell: "oc new-project {{ocp_project}} --display-name={{ocp_project}}"

# credentials for accessing registry.redhat.io
#- name: Create project for workload; project =  {{ocp_project}}
#  shell: "oc create secret docker-registry rhcc --docker-server=registry.redhat.io --docker-username={{oreg_user}} --docker-password={{oreg_pass}} --docker-email=honghuac@gmail.com"

- name: Make sure we go back do {{ocp_project}} project
  shell: "oc project {{ocp_project}}"

# ######        Coolstore Catalog Service       ##########
#
- name: Ensure the following directory is refreshed in remote, /tmp/{{ocp_project}}
  file:
    path: "/tmp/{{ocp_project}}"
    state: absent
- file:
    path: "/tmp/{{ocp_project}}"
    state: directory

- name: Add the view role to the default service account
  shell: "oc policy add-role-to-user view -z default -n {{ocp_project}}"

- name: Copy catalog service configmap to known path
  template:
    src: templates/app-config.yaml
    dest: /tmp/{{ocp_project}}/app-config.yaml
- name: Load catalog service configmap
  shell: "oc create configmap app-config --from-file=/tmp/{{ocp_project}}/app-config.yaml -n {{ocp_project}}"

- name: Copy catalog service (with db) template to known path
  template:
    src: templates/coolstore-catalog-mongodb-persistent.yaml
    dest: /tmp/{{ocp_project}}/coolstore-catalog-mongodb-persistent.yaml
- name: Build and create catalog service
  shell: |
      oc new-app \
      -f /tmp/{{ocp_project}}/coolstore-catalog-mongodb-persistent.yaml \
      -p CATALOG_DB_USERNAME=mongo \
      -p CATALOG_DB_PASSWORD=mongo \
      -n {{ocp_project}}
- name: resume catalog-service
  shell: oc rollout resume dc/catalog-service -n {{ocp_project}}
- include_tasks: ./wait_for_deploy.yml
  static: no
  vars:
    pod_to_wait:
      - catalog-service

# ########################################################
# ######                 Fuse Online            ##########

#- name: Install Fuse Online
#  script: templates/install_ocp.sh

#- name: Scale up broker-amq
#  shell: |
#      oc scale dc/broker-amq --replicas=1 -n {{ocp_project}}
#- include_tasks: ./wait_for_deploy.yml
#  static: no
#  vars:
#    pod_to_wait:
#      - broker-amq
# ########################################################

- name: Annotate the empty project as requested by user
  shell: "oc annotate namespace {{ocp_project}} openshift.io/requester={{ocp_username}} --overwrite"

- name: Give ocp_username access to ocp_project; user = {{ocp_username}}
  shell: "oc policy add-role-to-user admin {{ocp_username}} -n {{ocp_project}}"

#- include_role:
#    name: namespace
#    tasks_from: create
#  vars:
#    name: "{{ fuse_namespace }}"
#    display_name: "Shared Fuse Online"
#    monitor: true
#    is_service: true

- name: Create shared fuse roles template
  template:
    src: templates/roles.yaml
    dest: /tmp/shared-fuse-roles.yaml

- name: Apply shared fuse roles to cluster
  shell: "oc create -f /tmp/shared-fuse-roles.yaml -n {{ ocp_project }}"
  register: create_fuse_roles_cmd
  failed_when: create_fuse_roles_cmd.stderr != '' and 'AlreadyExists' not in create_fuse_roles_cmd.stderr

#- name: "include rhsso vars"
#  include_vars: ../../rhsso/defaults/main.yml

#- name: Give role-binder role to customer-admin
#  shell: "oc adm policy add-role-to-user role-binder {{ rhsso_evals_admin_username }} --role-namespace={{ fuse_namespace }} -n {{ fuse_namespace }}"

#- include_role:
#    name: imagestream_pull_secret
#  vars:
#    namespace: "{{ fuse_namespace }}"
#    product_ns_pull_secret_name: "{{ fuse_pull_secret_name }}"

- name: Create Syndesis CRD
  shell: oc apply -f {{ fuse_online_crd_resources }}

- name: Create Fuse image streams
  shell: "oc replace --force -f {{ fuse_online_imagestream_resources }} -n openshift"
  register: fuse_create_imagestream
  failed_when: fuse_create_imagestream.stderr != '' and 'AlreadyExists' not in fuse_create_imagestream.stderr
  changed_when: fuse_create_imagestream.rc == 0

- name: Create fuse Operator resources in {{ ocp_project }}
  shell: oc apply -f {{ fuse_online_operator_resources }} -n {{ ocp_project }}

- name: TODO-REMOVE-THIS-AFTER-FUSE-ONLINE-INCLUDES-THESE-ARGS Patch args on operator to include monitoring resources addon
  shell: oc patch dc/syndesis-operator -p='{"spec":{"template":{"spec":{"containers":[{"name":"syndesis-operator","args":["-a","/conf/addons"]}]}}}}}' -n {{ ocp_project }}

- template:
    src: templates/syndesis-customresource.yml.j2
    dest: /tmp/syndesis-customresource.yml

- name: Create Syndesis custom resource in {{ ocp_project }}
  shell: oc apply -f /tmp/syndesis-customresource.yml -n {{ ocp_project }}

#- name: Verify Fuse deployment succeeded
#  shell: oc get pods -n {{ ocp_project }} --selector="app=syndesis" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}' | wc -w
#  register: fuse_verify_result
#  until: fuse_verify_result.stdout.find("8") != -1
#  retries: 50
#  delay: 10
#  changed_when: False

# Allow any authenticated user to access fuse. Sleep 5 to allow time for the
# new deployment to kick off.
#- name: Remove OpenShift SAR configuration on Fuse Managed OAuth proxy
#  shell: oc get dc syndesis-oauthproxy -o yaml -n {{ ocp_project }} | sed '/--openshift-sar/d' | oc apply -f - -n {{ ocp_project }}; sleep 5

#- name: Verify Fuse deployment succeeded
#  shell: oc get pods -n {{ ocp_project }} --selector="app=syndesis" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}' | wc -w
#  register: fuse_verify_result
#  until: fuse_verify_result.stdout.find("8") != -1
#  retries: 50
#  delay: 10
#  changed_when: False

#- name: "Check Fuse readiness"
#  block:
#    - name: "Verify Fuse is running"
#      shell: oc get pods --selector="app=syndesis" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}' -n {{ ocp_project }} | wc -w
#      register: result
#      until: result.stdout == "8"
#      retries: 50
#      delay: 10
#      changed_when: False

#    - name: "Verify syndesis instance is provisioned"
#      shell: oc get syndesis {{ fuse_cr_name }} -o template --template \{\{.status.phase\}\}  -n {{ ocp_project }}  |  grep  'Installed'
#      register: result
#      until: result.stdout
#      retries: 50
#      delay: 10
#      changed_when: False

- name: workload Tasks Complete
  debug:
    msg: workload Tasks Complete
