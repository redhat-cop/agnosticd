# vim: set ft=ansible
---
# Implement your Workload deployment tasks here
- set_fact:
    user_name: "user1"

- set_fact:
    user_project: "{{ ocp4_workload_ai_ml_workflows_demo_namespace_name }}"

- name: Create the demo app namespace
  k8s:
    state: present
    name: "{{ user_project }}"
    api_version: project.openshift.io/v1
    kind: Project

- name: "Make '{{ user_name }}' project admin in '{{user_project}}'"
  k8s:
    state: present
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: "admin-{{ user_name }}"
        namespace: "{{ user_project }}"
      subjects:
        - kind: User
          name: "{{ user_name }}"
      roleRef:
        kind: ClusterRole
        name: admin
        apiGroup: rbac.authorization.k8s.io

- name: "Make '{{ user_name }}' an Open Data Hub administrator "
  k8s:
    state: present
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: "opendatahub-admin-{{ user_name }}"
        namespace: "{{ user_project }}"
      subjects:
        - kind: User
          name: "{{ user_name }}"
      roleRef:
        kind: ClusterRole
        name: opendatahub-admin
        apiGroup: rbac.authorization.k8s.io

- name: "Create ODH Config Map configuration in {{ user_project }}"
  k8s:
    state: present
    definition: "{{ lookup('template', 'odh-configmap.yml.j2') }}"
  vars:
    namespace: "{{ user_project }}"

- name: "Create Profile Config Map for Student User {{ user_name }} in project {{ user_name }}"
  k8s:
    state: present
    definition: "{{ lookup('template', 'jupyterhub-single-user-profile-user.configmap.yml.j2') }}"
  vars:
    namespace: "{{ user_project }}"
    suffix: "{{ user_name }}"

- name: "Create Profile Config Map for Admin in project {{ user_project }}"
  k8s:
    state: present
    definition: "{{ lookup('template', 'jupyterhub-single-user-profile-user.configmap.yml.j2') }}"
  vars:
    namespace: "{{ user_project }}"
    suffix: opentlc-mgr

- name: "Create Workshop Single User Profile in project {{ user_project }}"
  k8s:
    state: present
    definition: "{{ lookup('template', 'workshop-singleuser-profile.yml.j2') }}"
  vars:
    namespace: "{{ user_project }}"

- name: "Create the ImageStream for the notebook used in this workshop"
  k8s:
    state: present
    definition: "{{ lookup('template', 'workshop-notebook.imagestream.yml.j2') }}"
  vars:
    namespace: "{{ user_project }}"

- name: "Create Open Data Hub"
  k8s:
    state: present
    definition: "{{ lookup('template', 'opendatahub.yml.j2') }}"
  vars:
    namespace: "{{ user_project }}"

- name: "Nuke the pipeline objects for idempotency reasons"
  k8s:
    state: absent
    namespace: "{{ user_project }}"
    definition: "{{ lookup('template', item) }}"
  loop:
    - pipeline-s2i-imagestream.yaml.j2
    - pipeline-resource-source.yaml.j2
    - pipeline-resource-image.yaml.j2
    - pipeline-task-definition.yaml.j2
    - pipeline-definition.yaml.j2

- name: "Create OpenShift Pipeline objects in {{ user_project }}"
  k8s:
    state: present
    namespace: "{{ user_project }}"
    definition: "{{ lookup('template', item) }}"
  vars:
    namespace: "{{ user_project }}"
  loop:
    - pipeline-s2i-imagestream.yaml.j2
    - pipeline-resource-source.yaml.j2
    - pipeline-resource-image.yaml.j2
    - pipeline-task-definition.yaml.j2
    - pipeline-definition.yaml.j2

- name: Wait for JupyterHub to successfully deploy
  k8s_facts:
    api_version: apps.openshift.io/v1
    kind: DeploymentConfig
    name: "jupyterhub"
    namespace: "{{ user_project }}"
  register: r_odh_deploy_wait
  until: r_odh_deploy_wait.resources[0].status.readyReplicas | default(0) | int >= 1
  delay: 30
  retries: 14

- name: Remove the control-plane label from the created project (workaround)
  command: "oc label namespace {{ user_project }} control-plane-"

- name: Create a service to include the endpoints in the pipeline deployment
  k8s:
    state: present
    definition:
      apiVersion: v1    
      kind: Service                    
      metadata:     
        labels:
          app: pipeline
        name: pipeline-monitor
        namespace: "{{ user_project }}"
      spec:
        ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
        selector:
          serving.knative.dev/service: pipeline
          serving.knative.dev/configuration: pipeline
        sessionAffinity: None
        type: ClusterIP

- name: create the pipeline servicemonitor
  k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        labels:
          k8s-app: pipeline-monitor
        name: pipeline-monitor
        namespace: "{{ user_project }}"
      spec:
        endpoints:
        - interval: 15s
          port: "8080-tcp"
          scheme: http
        selector:
          matchLabels:
            app: pipeline

- name: grab the console route
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: console
    namespace: openshift-console
  register: console_route_out

- name: grab the jupyterhub route
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: Route
    name: jupyterhub
    namespace: "{{ user_project }}"
  register: jh_route_out

- set_fact:
    console_route: "https://{{ console_route_out.resources[0].spec.host }}"
    jh_route: "https://{{ jh_route_out.resources[0].spec.host }}"

- name: Report demo user info
  agnosticd_user_info:
    msg: "{{ item }}"
  loop:
    - ""
    - "Here are the URLs that you need for the demo (open each in a browser tab):"
    - ""
    - "Main JH notebook: {{ jh_route }}/user/user1/tree/fraud-notebooks"
    - "OperatorHub Page: {{ console_route }}/k8s/ns/{{ user_project }}/operators.coreos.com~v1alpha1~ClusterServiceVersion/"
    - "Pipeline: {{ console_route }}/k8s/ns/{{ user_project }}/tekton.dev~v1beta1~Pipeline/pipeline/"
  
# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent| bool