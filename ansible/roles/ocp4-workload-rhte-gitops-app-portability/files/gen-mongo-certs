#!/bin/bash



check_contexts()
{
  if [ "03" -ne "0$(oc config get-contexts -o name 2>/dev/null| grep -Ec "cluster1|cluster2|cluster3")" ]
  then
    echo "Cluster contexts are not properly configured. Please follow: https://github.com/openshift/federation-dev/blob/master/labs/2.md"
    exit 1
  fi
}

generate_ca_files()
{
  cat <<-EOF > /var/tmp/ca-config.json
  {
    "signing": {
      "default": {
        "expiry": "8760h"
      },
      "profiles": {
        "kubernetes": {
          "usages": ["signing", "key encipherment", "server auth", "client auth"],
          "expiry": "8760h"
        }
      }
    }
  }
EOF

  cat <<-EOF > /var/tmp/ca-csr.json
  {
    "CN": "Kubernetes",
    "key": {
      "algo": "rsa",
      "size": 2048
    },
    "names": [
      {
        "C": "US",
        "L": "Austin",
        "O": "Kubernetes",
        "OU": "TX",
        "ST": "Texas"
      }
    ]
  }
EOF

  cat <<-EOF > /var/tmp/mongodb-csr.json
  {
    "CN": "kubernetes",
    "key": {
      "algo": "rsa",
      "size": 2048
    },
    "names": [
      {
        "C": "US",
        "L": "Austin",
        "O": "Kubernetes",
        "OU": "TX",
        "ST": "Texas"
      }
    ]
  }
EOF
}

generate_certs()
{
  NAMESPACE=mongo
  SERVICE_NAME=mongo
  ROUTE_CLUSTER1=mongo-cluster1.$(oc --context=cluster1 -n openshift-console get route console -o jsonpath='{.status.ingress[*].host}' | sed "s/.*\(apps.*\)/\1/g")
  ROUTE_CLUSTER2=mongo-cluster2.$(oc --context=cluster2 -n openshift-console get route console -o jsonpath='{.status.ingress[*].host}' | sed "s/.*\(apps.*\)/\1/g")
  ROUTE_CLUSTER3=mongo-cluster3.$(oc --context=cluster3 -n openshift-console get route console -o jsonpath='{.status.ingress[*].host}' | sed "s/.*\(apps.*\)/\1/g")
  SANS="localhost,localhost.localdomain,127.0.0.1,${ROUTE_CLUSTER1},${ROUTE_CLUSTER2},${ROUTE_CLUSTER3},${SERVICE_NAME},${SERVICE_NAME}.${NAMESPACE},${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local"
  cfssl gencert -initca /var/tmp/ca-csr.json | cfssljson -bare /var/tmp/ca >/dev/null
  cfssl gencert -ca=/var/tmp/ca.pem -ca-key=/var/tmp/ca-key.pem -config=/var/tmp/ca-config.json -hostname=${SANS} -profile=kubernetes /var/tmp/mongodb-csr.json | cfssljson -bare /var/tmp/mongodb >/dev/null
}

combine_certs()
{
  cat /var/tmp/mongodb-key.pem /var/tmp/mongodb.pem > /var/tmp/mongo.pem
  echo "MongoDB PEM file generated at /var/tmp/mongo.pem"
}

main()
{
  check_contexts
  generate_ca_files
  generate_certs
  combine_certs
}

main
