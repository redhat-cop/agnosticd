#!/bin/bash

# GLOBAL VAR
KUBEFED_NAMESPACE=kube-federation-system

usage()
{
  echo "$0 [-n|--namespace NAMESPACE]"
  echo -ne "\noptions:\n"
  echo "-n|--namespace - Accepted values: name of the namespace where the demo will be deployed."
  echo -ne "\nexamples:\n"
  echo "cleanup mongo namespace: $0 -n mongo"
}

check_contexts()
{
  if [ "03" -ne "0$(oc config get-contexts -o name 2>/dev/null| grep -Ec "cluster1|cluster2|cluster3")" ]
  then
    echo "Cluster contexts are not properly configured. Please follow: https://github.com/openshift/federation-dev/blob/master/labs/2.md"
    exit 1
  fi
}

check_namespace()
{
  if [ "${NAMESPACE_TO_CLEAN}" == "" ]
  then
    usage
    exit 1
  fi
  if [ "$(oc --context=cluster1 get namespace ${NAMESPACE_TO_CLEAN} -o name 2>/dev/null)" != "namespace/${NAMESPACE_TO_CLEAN}" ]
  then
    echo "Namespace ${NAMESPACE_TO_CLEAN} does not exist"
    exit 1
  fi
}

clean_namespace()
{
  CLUSTERS="cluster1 cluster2 cluster3"
  for federatedtypeconfig in $(oc --context=cluster1 -n ${KUBEFED_NAMESPACE} get federatedtypeconfig -o name | awk -F "/" '{print $2}')
  do 
    FEDERATED_TYPE=$(oc --context=cluster1 -n ${KUBEFED_NAMESPACE} get federatedtypeconfig $federatedtypeconfig -o jsonpath='{.spec.federatedType.kind}')
    for object in $(oc --context=cluster1 -n ${NAMESPACE_TO_CLEAN} get $FEDERATED_TYPE -o name | awk -F "/" '{print $2}')
    do
      echo "Cleaning up $FEDERATED_TYPE"
      oc --context=cluster1 -n ${NAMESPACE_TO_CLEAN} delete $FEDERATED_TYPE $object --wait=false &>/dev/null
      oc --context=cluster1 -n ${NAMESPACE_TO_CLEAN} patch --type=merge $FEDERATED_TYPE $object -p '{"metadata":{"finalizers": []}}' &>/dev/null
    done  
  done
  for cluster in ${CLUSTERS}
  do
    echo "Deleting namespace ${NAMESPACE_TO_CLEAN} from cluster ${cluster}"
    oc --context ${cluster} delete namespace ${NAMESPACE_TO_CLEAN} &>/dev/null
  done
}

main()
{  
  check_contexts
  check_namespace
  clean_namespace
}

ARGS_ARRAY=( "$@" )
ARGS=1

for arg in $@; do
    case $arg in
        -n | --namespace)
                                NAMESPACE_TO_CLEAN=${ARGS_ARRAY[$ARGS]}
                                ;;
        -h | --help )           
                                usage
                                exit 0
                                ;;
    esac
    ARGS=$(expr $ARGS + 1)
done

main
