---
## Request Let's Encrypt Wildcard Certificates for the Cluster
  - name: Test if Let's Encrypt Certificates are already there
    stat:
      path: /root/lets-encrypt-x3-cross-signed.pem
    register: cacert

  - name: Get Let's Encrypt Intermediary CA Certificate
    get_url:
      url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt
      dest: /root/lets-encrypt-x3-cross-signed.pem
    when:
      cacert.stat.exists|bool == false

  - name: Clone Let's Encrypt Acme.sh Repository
    git:
      repo: https://github.com/Neilpang/acme.sh.git
      clone: yes
      dest: /root/acme.sh
    when:
      cacert.stat.exists|bool == false

  - name: Add AWS Access Key to Let's Encrypt Acme.sh configuration
    lineinfile:
      path: /root/acme.sh/dnsapi/dns_aws.sh
      line: AWS_ACCESS_KEY_ID="{{ hostvars['localhost'].route53user_access_key }}"
      state: present
      insertbefore: '^#AWS_ACCESS_KEY_ID'
    when:
      - cacert.stat.exists|bool == false
      - cloud_provider == 'ec2'

  - name: Add AWS Secret Access Key to Let's Encrypt Acme.sh configuration
    lineinfile:
      path: /root/acme.sh/dnsapi/dns_aws.sh
      line: AWS_SECRET_ACCESS_KEY="{{ hostvars['localhost'].route53user_secret_access_key }}"
      state: present
      insertbefore: '^#AWS_SECRET_ACCESS_KEY'
    when:
      - cacert.stat.exists|bool == false
      - cloud_provider == 'ec2'

  - name: Request API and Wildcard Certificates from Let's Encrypt
    shell: "/root/acme.sh/acme.sh --issue -d {{ master_lb_dns }} -d *.{{ cloudapps_suffix }} --dns dns_aws"
    args:
      chdir: /root/acme.sh
    when:
      - cacert.stat.exists|bool == false
      - cloud_provider == 'ec2'
