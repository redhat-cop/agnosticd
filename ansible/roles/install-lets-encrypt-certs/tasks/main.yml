---
## Request Let's Encrypt Wildcard Certificates for the Cluster
- name: Test if Let's Encrypt Certificates are already there
  stat:
    path: /root/lets-encrypt-x3-cross-signed.pem
  register: cacert

# Get Intermediary CA Certificate. This is also used in the SSO configuration!
- name: Get Let's Encrypt Intermediary CA Certificate
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt
    dest: /root/lets-encrypt-x3-cross-signed.pem
  when:
    cacert.stat.exists|bool == false

- name: Clone Let's Encrypt Acme.sh Repository
  git:
    repo: https://github.com/Neilpang/acme.sh.git
    clone: yes
    dest: /root/acme.sh
  when:
    cacert.stat.exists|bool == false

# AWS BEGIN
- name: Add AWS Access Key to Let's Encrypt Acme.sh configuration
  lineinfile:
    path: /root/acme.sh/dnsapi/dns_aws.sh
    line: AWS_ACCESS_KEY_ID="{{ hostvars['localhost'].route53user_access_key }}"
    state: present
    insertbefore: '^#AWS_ACCESS_KEY_ID'
  when:
    - cacert.stat.exists|bool == false
    - cloud_provider == 'ec2'

- name: Add AWS Secret Access Key to Let's Encrypt Acme.sh configuration
  lineinfile:
    path: /root/acme.sh/dnsapi/dns_aws.sh
    line: AWS_SECRET_ACCESS_KEY="{{ hostvars['localhost'].route53user_secret_access_key }}"
    state: present
    insertbefore: '^#AWS_SECRET_ACCESS_KEY'
  when:
    - cacert.stat.exists|bool == false
    - cloud_provider == 'ec2'

- name: Request API and Wildcard Certificates from Let's Encrypt
  shell: "/root/acme.sh/acme.sh {{ acme_args|d('') }} --issue -d {{ master_lb_dns }} -d *.{{ cloudapps_suffix }} --dns dns_aws"
  args:
    chdir: /root/acme.sh
  when:
    - cacert.stat.exists|bool == false
    - cloud_provider == 'ec2'
# AWS END

# MS Azure BEGIN (Placeholder for now)
# https://github.com/Neilpang/acme.sh/wiki/How-to-use-Azure-DNS

# Placeholder for Azure. Needs to be implemented

# Set the following Variables ...
# export AZUREDNS_SUBSCRIPTIONID="12345678-9abc-def0-1234-567890abcdef"
# export AZUREDNS_TENANTID="11111111-2222-3333-4444-555555555555"
# export AZUREDNS_APPID="3b5033b5-7a66-43a5-b3b9-a36b9e7c25ed"          # appid of the service principal
# export AZUREDNS_CLIENTSECRET="1b0224ef-34d4-5af9-110f-77f527d561bd"   # password from creating the service principal

- name: Request API and Wildcard Certificates from Let's Encrypt
  shell: "/root/acme.sh/acme.sh {{ acme_args|d('') }} --issue -d {{ master_lb_dns }} -d *.{{ cloudapps_suffix }} --dns dns_azure"
  args:
    chdir: /root/acme.sh
  when:
    - cacert.stat.exists|bool == false
    - cloud_provider == 'azure'
# MS Azure END (Placeholder for now)

- name: Install crontab to renew certificates when they expire
  cron:
    name: LETS_ENCRYPT_RENEW
    special_time: hourly
    job: "/root/acme.sh/acme.sh {{ acme_args|d('') }} --cron --home /root/.acme.sh > /dev/null"

- name: Install deploy_LE_certs.yml playbook
  copy:
    src: deploy_LE_certs.yml
    dest: /root/deploy_LE_certs.yml
