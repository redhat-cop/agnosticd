apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: iot-development
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: amq63-persistent
      application: broker
      template: amq63-persistent
      xpaas: 1.4.8
    name: broker-amq
  spec:
    replicas: 1
    selector:
      deploymentConfig: broker-amq
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 0
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          application: broker
          deploymentConfig: broker-amq
        name: broker-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: admin
          - name: AMQ_PASSWORD
            value: change12_me
          - name: AMQ_TRANSPORTS
            value: openwire, mqtt
          - name: AMQ_QUEUES
            value: message.to.rules, message.to.datacenter
          - name: AMQ_TOPICS
          - name: MQ_SERIALIZABLE_PACKAGES
          - name: AMQ_SPLIT
            value: "true"
          - name: AMQ_MESH_DISCOVERY_TYPE
            value: dns
          - name: AMQ_MESH_SERVICE_NAME
            value: broker-amq-mesh
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: AMQ_STORAGE_USAGE_LIMIT
            value: 1 gb
          - name: AMQ_QUEUE_MEMORY_LIMIT
          image: registry.access.redhat.com/jboss-amq-6/amq63-openshift@sha256:921ba8088efd41bd9c591c7ba45ef7d67dca603a5632e5a5ea4a9c2af67617db
          imagePullPolicy: Always
          name: broker-amq
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/amq/data
            name: broker-amq-pvol
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: broker-amq-pvol
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - broker-amq
        from:
          kind: ImageStreamTag
          name: jboss-amq-63:1.3
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: amq63-persistent
      application: broker
      template: amq63-persistent
      xpaas: 1.4.8
    name: broker-drainer
  spec:
    replicas: 1
    selector:
      deploymentConfig: broker-drainer
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          application: broker
          deploymentConfig: broker-drainer
        name: broker-drainer
      spec:
        containers:
        - command:
          - /opt/amq/bin/drain.sh
          env:
          - name: AMQ_USER
            value: admin
          - name: AMQ_PASSWORD
            value: change12_me
          - name: AMQ_MESH_SERVICE_NAME
            value: broker-amq-mesh
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: registry.access.redhat.com/jboss-amq-6/amq63-openshift@sha256:921ba8088efd41bd9c591c7ba45ef7d67dca603a5632e5a5ea4a9c2af67617db
          imagePullPolicy: Always
          name: broker-drainer
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/amq/data
            name: broker-amq-pvol
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: broker-amq-pvol
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - broker-drainer
        from:
          kind: ImageStreamTag
          name: jboss-amq-63:1.3
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: businessrules
    name: businessrules
  spec:
    replicas: 1
    selector:
      deploymentconfig: businessrules
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: businessrules
          deploymentconfig: businessrules
      spec:
        containers:
        - env:
          - name: JAVA_APP_JAR
            value: rules-jar-with-dependencies.jar
          - name: SOURCE_AMQ_BROKER
            value: tcp://broker-amq-mesh:61616
          - name: SOURCE_QUEUE
            value: message.to.rules
          - name: SOURCE_BROKER_ADMIN_UID
            value: admin
          - name: SOURCE_BROKER_ADMIN_PASSWD
            value: change12_me
          - name: TARGET_AMQ_BROKER
            value: tcp://broker-amq-mesh:61616
          - name: TARGET_QUEUE
            value: message.to.datacenter
          - name: TARGET_BROKER_ADMIN_UID
            value: admin
          - name: TARGET_BROKER_ADMIN_PASSWD
            value: change12_me
          imagePullPolicy: Always
          name: businessrules
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - businessrules
        from:
          kind: ImageStreamTag
          name: businessrules:latest
          namespace: iot-development
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: routingservice
    name: routingservice
  spec:
    replicas: 1
    selector:
      deploymentconfig: routingservice
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: routingservice
          deploymentconfig: routingservice
      spec:
        containers:
        - env:
          - name: SOURCE_AMQ_BROKER
            value: tcp://broker-amq-mesh:61616
          - name: SOURCE_BROKER_ADMIN_UID
            value: admin
          - name: SOURCE_BROKER_ADMIN_PASSWD
            value: change12_me
          - name: BROKER_AMQ_MQTT_HOST
            value: broker-amq-mqtt
          imagePullPolicy: Always
          name: routingservice
          ports:
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - routingservice
        from:
          kind: ImageStreamTag
          name: routingservice:latest
          namespace: iot-development
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: software-sensor
    name: software-sensor
  spec:
    replicas: 1
    selector:
      deploymentconfig: software-sensor
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: software-sensor
          deploymentconfig: software-sensor
      spec:
        containers:
        - env:
          - name: deviceType
            value: temperature
          - name: deviceID
            value: "4711"
          - name: initialValue
            value: "70"
          - name: count
            value: "1000"
          - name: waitTime
            value: "1"
          - name: receiverURL
            value: broker-amq-mqtt
          - name: brokerUID
            value: admin
          - name: brokerPassword
            value: change12_me
          - name: highWater
            value: "800"
          - name: lowWater
            value: "200"
          - name: JAVA_OPTIONS
            value: -DhighWater=800 -DlowWater=200 -DbrokerUID=admin -DbrokerPassword=change12_me
              -DreceiverURL=broker-amq-mqtt -DdeviceType=temperature -DdeviceID=4711
              -DinitialValue=70 -Dcount=1000 -DwaitTime=1
          - name: JAVA_APP_JAR
            value: softwareSensor-jar-with-dependencies.jar
          imagePullPolicy: Always
          name: software-sensor
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - software-sensor
        from:
          kind: ImageStreamTag
          name: software-sensor:latest
          namespace: iot-development
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: businessrules
    name: businessrules
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: businessrules:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/alezzandro/iotgw_BusinessRules_Service
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.2
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
    - generic:
        secret: 7ad3b0e9099d2600
      type: Generic
    - github:
        secret: db7e9a6824baabe7
      type: GitHub
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: businessrules-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          // name of the resource that will be used
          def templateName = 'businessrules'
          // name of testing project
          def testingProject = 'iot-testing'
          // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
          // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
          // will not be fully engaged.
          pipeline {
              agent {
                node {
                  // spin up a maven slave pod to run this build on
                  label 'maven'
                }
              }
              options {
                  // set a timeout of 20 minutes for this pipeline
                  timeout(time: 20, unit: 'MINUTES')
              }

              stages {
                  stage('preamble') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Using project: ${openshift.project()}"
                                  }
                              }
                          }
                      }
                  }
                  stage('build') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      openshift.selector("bc", templateName).startBuild()
                                      def builds = openshift.selector("bc", templateName).related('builds')
                                      builds.untilEach(1) {
                                          return (it.object().status.phase == "Complete")
                                      }
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('test') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Just an empty test!"
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('deploy') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Just an empty deploy because we have DC with ImageStream trigger!"
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('tag') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      // if everything else succeeded, tag the ${templateName}:latest image as ${testingProject}/${templateName}:latest
                                      openshift.tag("${openshift.project()}/${templateName}:latest", "${testingProject}/${templateName}:latest")
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
              } // stages
          } // pipeline
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: routingservice
    name: routingservice
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: routingservice:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/alezzandro/iotgw_Routing_Service
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: fis-karaf-openshift:2.0
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
    - generic:
        secret: 8c07cb5318548d71
      type: Generic
    - github:
        secret: 8177001173e5a904
      type: GitHub
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: routingservice-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          // name of the resource that will be used
          def templateName = 'routingservice'
          // name of testing project
          def testingProject = 'iot-testing'
          // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
          // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
          // will not be fully engaged.
          pipeline {
              agent {
                node {
                  // spin up a maven slave pod to run this build on
                  label 'maven'
                }
              }
              options {
                  // set a timeout of 20 minutes for this pipeline
                  timeout(time: 20, unit: 'MINUTES')
              }

              stages {
                  stage('preamble') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Using project: ${openshift.project()}"
                                  }
                              }
                          }
                      }
                  }
                  stage('build') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      openshift.selector("bc", templateName).startBuild()
                                      def builds = openshift.selector("bc", templateName).related('builds')
                                      builds.untilEach(1) {
                                          return (it.object().status.phase == "Complete")
                                      }
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('test') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Just an empty test!"
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('deploy') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Just an empty deploy because we have DC with ImageStream trigger!"
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('tag') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      // if everything else succeeded, tag the ${templateName}:latest image as ${testingProject}/${templateName}:latest
                                      openshift.tag("${openshift.project()}/${templateName}:latest", "${testingProject}/${templateName}:latest")
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
              } // stages
          } // pipeline
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: software-sensor
    name: software-sensor
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: software-sensor:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/alezzandro/iotgw_Software_Sensor
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.2
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
    - generic:
        secret: 853f945561652aac
      type: Generic
    - github:
        secret: 9c8427fe09128f32
      type: GitHub
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: software-sensor-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          // name of the resource that will be used
          def templateName = 'software-sensor'
          // name of testing project
          def testingProject = 'iot-testing'
          // NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
          // and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
          // will not be fully engaged.
          pipeline {
              agent {
                node {
                  // spin up a maven slave pod to run this build on
                  label 'maven'
                }
              }
              options {
                  // set a timeout of 20 minutes for this pipeline
                  timeout(time: 20, unit: 'MINUTES')
              }

              stages {
                  stage('preamble') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Using project: ${openshift.project()}"
                                  }
                              }
                          }
                      }
                  }
                  stage('build') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      openshift.selector("bc", templateName).startBuild()
                                      def builds = openshift.selector("bc", templateName).related('builds')
                                      builds.untilEach(1) {
                                          return (it.object().status.phase == "Complete")
                                      }
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('test') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Just an empty test!"
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('deploy') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Just an empty deploy because we have DC with ImageStream trigger!"
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
                  stage('tag') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      // if everything else succeeded, tag the ${templateName}:latest image as ${testingProject}/${templateName}:latest
                                      openshift.tag("${openshift.project()}/${templateName}:latest", "${testingProject}/${templateName}:latest")
                                  }
                              }
                          } // script
                      } // steps
                  } // stage
              } // stages
          } // pipeline
      type: JenkinsPipeline
    triggers: []
  status:
    lastVersion: 0
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: businessrules
    name: businessrules
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: businessrules:latest
      generation: 1
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: routingservice
    name: routingservice
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: routingservice:latest
      generation: 1
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: software-sensor
    name: software-sensor
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: software-sensor:latest
      generation: 1
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's AMQP port.
    creationTimestamp: null
    labels:
      app: amq63-persistent
      application: broker
      template: amq63-persistent
      xpaas: 1.4.8
    name: broker-amq-amqp
  spec:
    ports:
    - port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      deploymentConfig: broker-amq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Supports node discovery for mesh formation.
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    creationTimestamp: null
    labels:
      app: amq63-persistent
      application: broker
      template: amq63-persistent
      xpaas: 1.4.8
    name: broker-amq-mesh
  spec:
    clusterIP: None
    ports:
    - name: mesh
      port: 61616
      protocol: TCP
      targetPort: 61616
    selector:
      deploymentConfig: broker-amq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's MQTT port.
    creationTimestamp: null
    labels:
      app: amq63-persistent
      application: broker
      template: amq63-persistent
      xpaas: 1.4.8
    name: broker-amq-mqtt
  spec:
    ports:
    - port: 1883
      protocol: TCP
      targetPort: 1883
    selector:
      deploymentConfig: broker-amq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's STOMP port.
    creationTimestamp: null
    labels:
      app: amq63-persistent
      application: broker
      template: amq63-persistent
      xpaas: 1.4.8
    name: broker-amq-stomp
  spec:
    ports:
    - port: 61613
      protocol: TCP
      targetPort: 61613
    selector:
      deploymentConfig: broker-amq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port.
      service.alpha.openshift.io/dependencies: '[{"name": "broker-amq-amqp", "kind":
        "Service"},{"name": "broker-amq-mqtt", "kind": "Service"},{"name": "broker-amq-stomp",
        "kind": "Service"}]'
    creationTimestamp: null
    labels:
      app: amq63-persistent
      application: broker
      template: amq63-persistent
      xpaas: 1.4.8
    name: broker-amq-tcp
  spec:
    ports:
    - port: 61616
      protocol: TCP
      targetPort: 61616
    selector:
      deploymentConfig: broker-amq
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: businessrules
    name: businessrules
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: businessrules
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: routingservice
    name: routingservice
  spec:
    ports:
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: routingservice
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: software-sensor
    name: software-sensor
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: software-sensor
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
