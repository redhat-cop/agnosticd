---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Setting up num_users for workshop
  debug:
    msg: "Setting up num_users for workshop num_users = {{ num_users }}"

- name: Give access to opentlc-mgr
  shell: |
         oc adm policy add-cluster-role-to-user cluster-admin {{ ocp_username }}

- name: Create user projects
  include_tasks: create_project.yaml
  vars:
    name: "{{ item[0] }}-{{ item[1] }}"
    user: "{{ item[0] }}"
  loop: "{{ users|product(user_namespaces)|list }}"

- name: "Create Infra Project"
  include_tasks: create-infra-project.yaml
  loop: "{{infra_projects}}"
  loop_control:
    loop_var: name  
    
- name: Install gogs
  include_tasks: install-gogs.yaml

- name: Add gogs users 
  include_tasks: add-gogs-users.yaml
  loop: "{{users}}"
  loop_control:
    loop_var: user

- name: Install mlflow
  include_tasks: install-mlflow.yaml
  
- name: Duplicate aws credentials
  include_tasks: dup_aws_credentials.yaml
  loop:
    - secrets
    - configmap
  vars:
    namespaces: 
      - stage
      - prod
      - labs-infra
  loop_control:
    loop_var: kind
 
- name: Create user configmap
  include_tasks: create-user-cm.yaml
  vars:
    user: "{{ item[0] }}"
    ns: "{{ item[1] }}"    
  loop: "{{ users|product(['dev', 'stage', 'prod', 'labs-infra'])|list }}"

- name: install global operators
  include_tasks: install-global-operators.yaml

- name: install monitoring
  include_tasks: install-mon.yaml

- name: install jupyterhub
  include_tasks: install-jupyterhub.yaml

- name: install web notification
  include_tasks: install-web-notifications.yaml
  vars:
    user: "{{ item[0] }}"
    ns: "{{ item[0] }}-{{ item[1] }}"
  loop: "{{ users|product(['prod'])|list }}"

- name: create user pipeline
  include_tasks: install-pipelines.yaml
  vars:
    user: "{{ item[0] }}"
    ns: "{{ item[0] }}-{{ item[1] }}"    
    pipeline_j2: "{{item[1]}}-pipeline.yaml.j2"
    trigger_j2: "{{item[1]}}-tektontriggers.yaml.j2"
    repository: "{{ repositories | first }}"
  loop: "{{ users|product(['stage'])|list }}"

- name: add pipeline view role from staging to prod
  shell: |
    oc adm policy add-role-to-user edit system:serviceaccount:{{user}}-stage:pipeline -n {{user}}-prod
  loop: "{{users}}"
  loop_control:
    loop_var: user

# Nexus must be after pipeline
- name: Install nexus
  include_tasks: install-nexus.yaml

# We wil resuse the s3 bucket from mlflow
# And after Nexus
- name: Add data repo
  include_tasks: setup-dvc.yaml

- name: install argocd
  include_tasks: install-argocd.yaml
  
- name: install guides
  include_tasks: install-guides.yaml
  vars:
    guide: "{{ module_titles[0].name }}"
  #loop: "{{ module_titles }}"

- name: install username distribution
  include_tasks: install-username-distribution.yaml

# Install CodeReady Workspaces
- name: see if codeready is installed
  k8s_facts:
    api_version: org.eclipse.che/v1
    kind: CheCluster
    name: codeready-workspaces
    namespace: labs-infra
  register: r_codeready_cr

- name: show codeready cr
  debug:
    msg: "existing codeready project: {{ r_codeready_cr }}"

- name: install codeready
  when: r_codeready_cr.resources | list | length == 0
  include_tasks: install-codeready.yaml

# Install AMQ Streams
- name: Check if AMQ Streams is installed
  k8s_facts:
    api_version: kafka.strimzi.io/v1beta1
    kind: Kafka
    name: amq-streams
    namespace: labs-kafka
  register: r_amqstreams_cr

- name: Install AMQ Streams
  when: r_amqstreams_cr.resources | list | length == 0
  include_tasks: install-amq-streams.yaml

- name: Install DM
  include_tasks: install-dm.yaml

- name: Install consumer app
  include_tasks: install-consumer-app.yaml
  vars:
    user: "{{ item[0] }}"
    ns: "{{ item[0] }}-{{ item[1] }}"
  loop: "{{ users|product(['prod'])|list }}"

- name: Preload images 
  include_tasks: preload-images.yaml

- name: Delete temp project
  k8s:
    state: absent
    kind: Project
    api_version: project.openshift.io/v1
    name: "{{item}}"    
  loop:
    - labs-setup

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
