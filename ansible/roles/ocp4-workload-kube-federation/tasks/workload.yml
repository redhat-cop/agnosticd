---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Install kubefedctl
  become: yes
  unarchive:
    src: "{{ _kubefed_kubefedctl_url }}"
    remote_src: yes
    dest: /usr/bin
    mode: 0775
    owner: root
    group: root

- name: Create OpenShift Objects for Kube Federation
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/project.j2
  - ./templates/catalog_source_config.j2
  - ./templates/operator_group.j2
  - ./templates/subscription.j2

- name: Wait until CSV is Installed
  command: oc get csv -o jsonpath --template='{$.items[:1].status.phase}' -n "{{ _kubefed_project }}"
  register: csv
  retries: 30
  delay: 10
  until: csv.stdout == "Succeeded"

- name: Create KubeFed
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/kubefed.j2

- name: Register API Types to be federated
  when:
  - _kubefed_federated_api_types | d("") | length > 0
  shell: "kubefedctl enable {{ item }} --kubefed-namespace {{ _kubefed_project }}"
  loop: "{{ _kubefed_federated_api_types }}"
  
# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
