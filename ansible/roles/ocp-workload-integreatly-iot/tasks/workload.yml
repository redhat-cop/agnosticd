---

- name: fetch cluster key
  shell: |
     oc -n default get secret router-certs -o json | jq -r '.data["tls.key"]' | base64 -d > key.pem

- name: fetch cluster certificate
  shell: |
     oc -n default get secret router-certs -o json | jq -r '.data["tls.crt"]' | base64 -d > orig-cert.pem

- name: clean up certificate
  shell: |
     openssl crl2pkcs7 -nocrl -certfile orig-cert.pem | openssl pkcs7 -print_certs | grep -v issuer | grep -v subject | csplit -f cert- - '/-----BEGIN CERTIFICATE-----/' '{*}'

- name: fetch DST root
  get_url:
    url: https://letsencrypt.org/certs/trustid-x3-root.pem.txt
    dest: /tmp/root.pem
    mode: '0644'

- name: concat fullchain
  shell: |
    cat cert-01 cert-02 /tmp/root.pem > cert.pem

- name: Ensure that the existing certificate belongs to the specified private key
  openssl_certificate:
    path: cert.pem
    privatekey_path: key.pem
    provider: assertonly

- name: delete existing MQTT TLS secret
  shell: |
     oc -n "{{amq_online_project}}" delete secret tls iot-mqtt-adapter-tls --ignore-not-found

- name: create MQTT TLS secret
  shell: |
     oc -n "{{amq_online_project}}" create secret tls iot-mqtt-adapter-tls --key key.pem --cert cert.pem 

- name: create temp dir
  file:
    path: /tmp/iot
    state: directory

- name: copy config
  copy:
     src: ./files/
     dest: /tmp/iot/
     owner: root
     group: root
     mode: 0644

- name: copy IoT operator deployment
  shell: |
     oc -n "{{amq_online_project}}" apply -f "/tmp/iot/"

- name: delete temporary files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/root.pem
    - cert-00
    - cert-01
    - cert-02
    - cert-03
    - orig-cert.pem
    - cert.pem

- name: IoTConfig tasks complete
  debug:
    msg: "IoTConfig Tasks completed successfully."
  when: not silent|bool
