---
- name: Gather facts from all hosts
  ansible.builtin.setup:
    filter:
      - "all_ipv4_addresses"

- name: Register IP addresses based on host type
  ansible.builtin.set_fact:
    ip_addresses_list: >-
      {%- if inventory_hostname == 'windows' %}
      {{ ansible_facts['interfaces'][0]['ipv4']['address'] | default('IP not found') }}
      {%- else %}
      {{ ansible_facts['all_ipv4_addresses'][0] | default('IP not found') }}
      {%- endif %}
  when: inventory_hostname in groups['all']

- name: Debug print IP addresses list
  debug:
    msg: "IP Address for {{ inventory_hostname }} is: {{ hostvars[inventory_hostname].ip_addresses_list }}"

- name: Set individual IP facts on localhost based on host type and dynamic GUID
  set_fact:
    "{{ item.key }}_ip": "{{ hostvars[item.key + '.' + guid + '.internal']['ip_addresses_list'] }}"
  loop:
    - { key: 'bastion' }
    - { key: 'node1' }
    - { key: 'node2' }
    - { key: 'idmsrv' }
    - { key: 'windows' }
  delegate_to: localhost
  run_once: True

- name: Run agnosticD user data to grab IP addresses
  agnosticd_user_info:
    data:
      node1_ip: "{{ hostvars['localhost']['node1_ip'] }}"
      noode2_ip: "{{ hostvars['localhost']['node2_ip'] }}"
      idmsrv_ip: "{{ hostvars['localhost']['idmsrv_ip'] }}"
      bastion_ip: "{{ hostvars['localhost']['bastion_ip'] }}"
      windows_ip: "{{ hostvars['localhost']['windows_ip'] }}"
  delegate_to: localhost
  run_once: true

- name: Update /etc/hosts on the bastion host
  ansible.builtin.template:
    src: etc_hosts.j2
    dest: /etc/hosts
  when: "inventory_hostname == 'bastion.{{ guid }}.internal'"
  become: true

- name: Set hostname on Node1
  ansible.builtin.hostname:
    name: "node1.idm.example.com"
  when: "inventory_hostname == 'node1.{{ guid }}.internal'"
  become: true

- name: Set hostname on Node2
  ansible.builtin.hostname:
    name: "node2.idm.example.com"
  when: "inventory_hostname == 'node2.{{ guid }}.internal'"
  become: true

- name: Set hostname on IDM Client
  ansible.builtin.hostname:
    name: "idmsrv.idm.example.com"
  when: "inventory_hostname == 'idmsrv.{{ guid }}.internal'"
  become: true

- name: Set hostname on Windows hosts
  ansible.windows.win_hostname:
    name: "windows"
  when: inventory_hostname in groups['windows']
