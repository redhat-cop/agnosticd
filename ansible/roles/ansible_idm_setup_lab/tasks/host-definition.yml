---
- name: Gather facts from all hosts
  ansible.builtin.setup:
    filter:
      - "all_ipv4_addresses"

- name: Register IP addresses based on host type
  set_fact:
    ip_addresses_list: >-
      {%- if ansible_facts['os_family'] == 'Windows' %}
      {{ ansible_facts['interfaces'][0]['ipv4']['address'] }}
      {%- else %}
      {{ ansible_facts['all_ipv4_addresses'][0] | default('IP not found') }}
      {%- endif %}
  when: inventory_hostname in groups['all']

- name: Debug print IP addresses list
  debug:
    msg: "IP Address for {{ inventory_hostname }} is: {{ hostvars[inventory_hostname].ip_addresses_list }}"

- name: Update /etc/hosts on the bastion host
  ansible.builtin.template:
    src: etc_hosts.j2
    dest: /etc/hosts
  when: "inventory_hostname == 'bastion.{{ guid }}.internal'"
  become: true

- name: Set hostname on Bastion
  ansible.builtin.hostname:
    name: "bastion.idm.example.com"
  when: "inventory_hostname == 'bastion.{{ guid }}.internal'"
  become: true

- name: Set hostname on Node1
  ansible.builtin.hostname:
    name: "node1.idm.example.com"
  when: "inventory_hostname == 'node1.{{ guid }}.internal'"
  become: true

- name: Set hostname on Node2
  ansible.builtin.hostname:
    name: "node2.idm.example.com"
  when: "inventory_hostname == 'node2.{{ guid }}.internal'"
  become: true

- name: Set hostname on Windows hosts
  ansible.windows.win_hostname:
    name: "windows"
  when: inventory_hostname in groups['windows']
