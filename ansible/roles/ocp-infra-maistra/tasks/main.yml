---

- name: check if user is cluster admin
  shell: "{{ openshift_cli }} get project default"
  register: default_project_result
  ignore_errors: true
  changed_when: false

- fail:
    msg: "User does not have cluster-admin rights to install Istio"
  when: default_project_result is failed

- name: check if istio operator deployed 
  shell: "{{ openshift_cli }} get project istio-operator"
  register: istio_project_result
  ignore_errors: true
  changed_when: false

- name: create istio operator project
  shell: "{{ openshift_cli }} new-project istio-operator"
  when: istio_project_result is failed


- name: install openshift service mesh (product istio) operator
  shell: "{{ openshift_cli }} new-app -f {{ installer_product }} --param=OPENSHIFT_ISTIO_MASTER_PUBLIC_URL={{ openshift_master_public }} -n istio-operator"
  when: 
    - istio_project_result is failed
    - product_images|bool

- name: install maistra (community istio) operator
  shell: "{{ openshift_cli }} new-app -f {{ installer_community }} --param=OPENSHIFT_ISTIO_MASTER_PUBLIC_URL={{ openshift_master_public }} -n istio-operator"
  when: 
    - istio_project_result is failed
    - not product_images|bool

- template:
    src: "{{ role_path }}/templates/istio-cr.yaml.j2"
    dest: /tmp/istio-cr.yaml
    force: true

- name: install istio
  shell: "{{ openshift_cli }} create -f /tmp/istio-cr.yaml -n istio-operator"

- name: wait for istio sidecar-injector to initialize
  shell: "{{ openshift_cli }} get deployment istio-sidecar-injector -o jsonpath='{.status.availableReplicas}' -n istio-system"
  register: sidecar_injector_replicas
  until: sidecar_injector_replicas.stdout == "1"
  retries: "30"
  delay: "30"
