---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Create OpenShift Objects for Metering
  ignore_errors: yes
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - ./templates/metering_namespace.j2
    - ./templates/operator_group.j2
    - ./templates/catalog_source_config.j2
    - ./templates/subscription.j2

- name: Wait until CSV is Installed
  ignore_errors: yes
  command: oc get csv -o jsonpath --template='{$.items[:1].status.phase}' -n "{{ _metering_namespace }}"
  register: csv
  retries: 30
  delay: 10
  until: csv.stdout == "Succeeded"

- name: Create Metering Custom Resource with Route and Resource Limits
  ignore_errors: yes
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/metering.j2
  register: r_metering_result
  until: r_metering_result is not failed
  retries: 5

- name: Wait until Metering pods are ready
  ignore_errors: yes
  command: |
    oc get pods -n "{{ _metering_namespace }}" -l "app=reporting-operator" --field-selector "status.phase=Running" -o go-template {% raw %}--template="{{ len .items }}"{% endraw %}
  register: reporting_pods
  retries: 30
  delay: 10
  until: reporting_pods.stdout == '1'

# below replaced by more complete CR above: metering.j2
#- name: Create Metering Route
#  k8s:
#    state: present
#    merge_type:
#    - strategic-merge
#    - merge
#    definition: "{{ lookup('template', item ) | from_yaml }}"
#  loop:
#    - ./templates/metering_route.j2

- name: Wait until Reporting Route is ready
  ignore_errors: yes
  command: oc get routes metering -n "{{ _metering_namespace }}"
  retries: 30
  delay: 10
  register: result
  until: result.rc == 0

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool

#oc get pods -n "{{ _metering_namespace }}" -l "app=reporting-operator" --field-selector "status.phase=Running" -o go-template --template=\"{{ len .items }}"
