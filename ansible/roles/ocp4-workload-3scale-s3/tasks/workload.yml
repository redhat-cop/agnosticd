---

- name: get default channel for 3scale operator
  shell: |-
    oc get packagemanifests {{ threescale_operator_package_name }} -o jsonpath='{.status.defaultChannel}'
  register: threescale_defaultchannel

- name: get currentCSV for default channel
  shell: |-
    oc get packagemanifests {{ threescale_operator_package_name }} -o jsonpath='{.status.channels[?(@.name == "{{ threescale_defaultchannel.stdout }}")].currentCSV}'
  register: threescale_CSV

- set_fact:
    threescale_currentCSV: '{{threescale_CSV.stdout}}'

- set_fact:
    threescale_currentChannel: '{{threescale_defaultchannel.stdout}}'

- name: Create OpenShift Objects for 3scale multitenant
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/3scale_project.j2
  - ./templates/api-manager-operatorgroup.j2
  - ./templates/api-manager-subscription.j2

- name: "Create threescale-registry-auth image pull secret in {{ api_manager_namespace }}"
  shell: |
    oc create secret docker-registry threescale-registry-auth \
        --docker-server=registry.redhat.io \
        --docker-username='{{ rht_service_token_user }}' \
        --docker-password='{{ rht_service_token_password }}' \
        -n  {{ api_manager_namespace }}
  ignore_errors: True

- name: "Wait for 3scale CRD to be available"
  k8s_facts:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: apimanagers.apps.3scale.net
  register: r_crd
  retries: 60
  delay: 15
  until: r_crd.resources | list | length == 1

- block:
  - name: Deploy 3scale API Manager with RWO storage (no S3)
    k8s:
      state: present
      merge_type:
      - strategic-merge
      - merge
      definition: "{{ lookup('template', item ) | from_yaml }}"
    loop:
    - ./templates/smtp.j2
    - ./templates/system-storage.j2
    - ./templates/apimanager.j2
  when: use_rwo_for_cms|bool

- block:
  - name: Include Minio Deployment & S3 Configuration
    include_tasks: 
      file: ./minio_s3_config.yml
  when: not use_rwo_for_cms|bool


- block:
  - name: Deploy 3scale API Manager (with Minio S3)
    k8s:
      state: present
      merge_type:
      - strategic-merge
      - merge
      definition: "{{ lookup('template', item ) | from_yaml }}"
    loop:
    - ./templates/smtp.j2
    - ./templates/apimanager-s3.j2
  when: not use_rwo_for_cms|bool


# wait to APIManager resource creation
- name: Wait for 3scale pods to be ready
  k8s_facts:
    api_version: v1
    kind: DeploymentConfig
    namespace: "{{ api_manager_namespace }}"
    name: apicast-production
  register: r_dc
  until:
    - r_dc is defined
    - r_dc.resources is defined
    - r_dc.resources | list | length > 0
    - r_dc.resources[0].status is defined
    - r_dc.resources[0].status.readyReplicas is defined
    - r_dc.resources[0].status.readyReplicas | int >= 1
  retries: 60
  delay: 15


# Get the Master Access Token
- name: Get the Master Access Token
  shell: >
    oc get secret system-seed -o json -n "{{ api_manager_namespace }}" | jq -r .data.MASTER_ACCESS_TOKEN | base64 -d
  register: system_seed_master_token
  ignore_errors: True

# Get the Master Password
- name: Get the Master Password
  shell: >
    oc get secret system-seed -o json -n "{{ api_manager_namespace }}" | jq -r .data.MASTER_PASSWORD | base64 -d
  register: system_seed_master_password
  ignore_errors: True

# Get the Provider Tenant Admin Password
- name: Get the Provider Admin Password
  shell: >
    oc get secret system-seed -o json -n "{{ api_manager_namespace }}" | jq -r .data.ADMIN_PASSWORD | base64 -d
  register: system_seed_admin_password
  ignore_errors: True

- set_fact:
    master_access_token: '{{system_seed_master_token["stdout"]}}'

- set_fact:
    master_password: '{{system_seed_master_password["stdout"]}}'

- set_fact:
    admin_password: '{{system_seed_admin_password["stdout"]}}'

- set_fact:
    master_api_host: "https://{{ master_access_token }}@master.amp.{{ocp_apps_domain}}"

- set_fact:
    create_tenant_url: "https://master.amp.{{ocp_apps_domain}}/master/api/providers.xml" 

- set_fact:
    start_tenant: 1

- set_fact:
    end_tenant: "{{ number_of_tenants }}"

# Npw start to create the tenants
- block:
  - name: "Loop through tenant prep {{start_tenant}} {{end_tenant}}"
    include_tasks: 
      file: tenant_loop.yml
    loop: "{{ range(start_tenant|int, end_tenant|int + 1, 1)|list }}"
  when: create_tenants|bool




