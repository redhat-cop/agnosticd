---
- set_fact:
    stack_tag: "{{env_type | replace('-', '_')}}_{{guid}}"
  tags:
    - create_inventory
    - must

# Find the bastion
- name: Find the bastion in this batch of host
  set_fact:
    local_bastion: "{{ host.name }}"
  when:
    - host.status != 'terminated'
    - '"bastions" in host.metadata.AnsibleGroup'
  loop: "{{ r_osp_facts.ansible_facts.openstack_servers }}"
  loop_control:
    label: "{{ host.name | default(host.name) }}"
    loop_var: host
  ignore_errors: yes
  tags:
    - create_inventory
    - must

- when: host.status != 'terminated'
  block:
    - name: Add hosts to inventory
      add_host:
        name: "{{ host.name }}"
        groups:
          #TODO: remove thos tag_*
          - "tag_Project_{{stack_tag}}"
          - "tag_{{ stack_tag}} | default('unknowns') }}"
          - "{{ host.metadata.ostype | default('unknowns') }}"
        ansible_user: "{{ ansible_user }}"
        remote_user: "{{ remote_user }}"
        # ansible_ssh_private_key_file: "{{item['key_name']}}"
        # key_name: "{{item['key_name']}}"
        state: "{{ host.status }}"
        instance_id: "{{ host.id }}"
        isolated: "{{ host.metadata.isolated | default(false) }}"
        # private_dns_name: "{{item['private_dns_name']}}"
        private_ip_address: "{{ host.private_v4 }}"
        public_ip_address: "{{ host.public_v4 | default('') }}"
        image_id: "{{ host.image.id | default('') }}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
        bastion: "{{ local_bastion | default('') }}"
      loop: "{{ r_osp_facts.ansible_facts.openstack_servers }}"
      loop_control:
        label: "{{ host.name }}"
        loop_var: host
      tags:
        - create_inventory
        - must

    - add_host:
        name: "{{ host.name }}"
        groups: "{{ host.metadata.AnsibleGroup }}"
      loop: "{{ r_osp_facts.ansible_facts.openstack_servers }}"
      loop_control:
        label: "{{ host.name }}"
        loop_var: host
      tags:
        - create_inventory
        - must

    - name: Make sure bastion has public DNS name defined
      add_host:
        name: "{{ host.name }}"
        public_dns_name: "{{ host.name }}.{{ guid }}.{{osp_cluster_dns_zone}}"
      loop: "{{ r_osp_facts.ansible_facts.openstack_servers }}"
      loop_control:
        label: "{{ host.name }}"
        loop_var: host
      when:
        - host.name in groups['bastions']
        - host.public_v4 != ''

- debug:
    var: hostvars[local_bastion].public_ip_address

- debug:
    msg: "bastion IP is {{ lookup('dig',local_bastion ~ '.' ~ guid ~ '.' ~ osp_cluster_dns_zone) }}"
  ignore_errors: true

- name: Verify that DNS matches bastion host_var
  assert:
    that:
    # Requires dnspython library
    - lookup('dig', bastion_lookup) == hostvars[local_bastion].public_ip_address
  vars:
    bastion_lookup: "{{ local_bastion ~ '.' ~ guid ~ '.' ~ osp_cluster_dns_zone }}"

- name: debug hostvars
  debug:
    var: hostvars
    verbosity: 2

- name: debug groups
  debug:
    var: groups
    verbosity: 2
