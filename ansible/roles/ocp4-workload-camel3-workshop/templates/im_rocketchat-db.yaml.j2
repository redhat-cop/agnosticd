---
apiVersion: v1
items:

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: config
    namespace: "{{ rocketchat_namespace }}"
  data:
    setup.sh: |-
      #!/usr/bin/env bash

      sleep 15
      echo starting replication...
      /etc/db/config/start-replication.sh > /tmp/s.out
    start-replication.js: "if(isStatusOK()){\n\tprint(\" ### Replication OK\");\n\tprintjson(rs.status());\n} else {\n\tprint(\" ### Starting replication...\");\n\ttry {\n\t\trs.initiate(\n\t\t   {\n\t\t      _id: \"rs0\",\n\t\t      version: 1,\n\t\t      members: [\n\t\t         { _id: 0, host : \"mongodb:27017\" }\n\t\t      ]\n\t\t   }\n\t\t)\n\t\t\n\t\twhile (! db.isMaster().ismaster ) {\t\t\n\t\t\tsleep(1000);\n\t\t}\n\t\t\n\t\tprint(\" ### try initiate done\");\n\t}\n\tcatch (e) {\n\t\tprint(\" ### initiate failed code: \" + e.code);\n\t\tprintjson(e);\n\t}\n\n\tsleep(5000);\n\tprint(\" ### Replica Set status\");\n\tprintjson(rs.status());\n\n\tdb.getSiblingDB(\"admin\").createUser({user:\"rocketchat-admin\",pwd:\"rocketchat\",roles:[]})\n\tprint(\" ### Admin user created\");\n}\n\nvar sleep = function (milliseconds) {\n  var start = new Date().getTime();\n  for (var i = 0; i < 1e7; i++) {\n    if ((new Date().getTime() - start) > milliseconds){\n      break;\n    }\n  }\n};\n\nfunction isStatusOK() {\n\n\tvar ok = true;\n\tvar replStatus;\n\n\ttry { \n\t\treplStatus = rs.status();\n\t}\n\tcatch (e) {\n\t\tok = false;\n\t\tprint(\"status code: \" + e.code);\n\t}\n\n  \treturn ok;\n}"
    start-replication.sh: |-
      #!/usr/bin/env bash

      scriptPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
      echo "$scriptPath"
      echo running as `whoami`
      mongosh -f $scriptPath/start-replication.js


- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: 'mongodb'
    namespace: "{{ rocketchat_namespace }}"
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: 'mongodb-db'
    namespace: "{{ rocketchat_namespace }}"
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: rocketchat
    name: mongodb
    namespace: "{{ rocketchat_namespace }}"
  spec:
    replicas: 1
    selector:
      name: mongodb
    strategy:
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: mongodb
      spec:
        containers:
          - resources:
              limits:
                memory: '512Mi'
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - 'mongosh "mongodb://127.0.0.1:27017" --eval="quit()"'
              failureThreshold: 3
              initialDelaySeconds: 3
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            terminationMessagePath: /dev/termination-log
            lifecycle:
              postStart:
                exec:
                  command:
                    - /bin/sh
                    - '-c'
                    - /etc/db/config/setup.sh > /tmp/replication.output &
            name: mongodb
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              # tcpSocket:
              #   port: 27017
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - 'mongosh "mongodb://127.0.0.1:27017" --eval="rs.status()"'
              timeoutSeconds: 5
            env:
              - name: MONGO_INITDB_DATABASE
                value: 'rocketchat'
            securityContext:
              capabilities: {}
              fsGroupChangePolicy: OnRootMismatch
              privileged: false
            ports:
              - containerPort: 27017
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /data/configdb
                name: mongodb-configdb
              - mountPath: /data/db
                name: mongodb-db
              - mountPath: /etc/db/config
                name: config
            image: 'quay.io/redhatintegration/mongo:6.0.6'
            args:
              - '--replSet'
              - rs0
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - name: 'mongodb-configdb'
            persistentVolumeClaim:
              claimName: 'mongodb'
          - name: 'mongodb-db'
            persistentVolumeClaim:
              claimName: 'mongodb-db'
          - configMap:
              defaultMode: 493
              name: config
            name: config
    test: false
    triggers:
      - type: ConfigChange
  status: {}

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: rocketchat
    name: mongodb
    namespace: "{{ rocketchat_namespace }}"
  spec:
    ports:
      - name: mongo
        port: 27017
        protocol: TCP
        targetPort: 27017
    selector:
      name: mongodb
    sessionAffinity: None
    type: ClusterIP
