---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: iot-psql
  labels:
    app: iot-psql
    app.openshift.io/runtime: postgresql
    app.kubernetes.io/component: iot-psql
    app.kubernetes.io/instance: iot-psql
spec:
  strategy:
    type: Rolling
    rollingParams:
      updatePeriodSeconds: 1
      intervalSeconds: 1
      timeoutSeconds: 600
      maxUnavailable: 25%
      maxSurge: 25%
    resources: {}
    activeDeadlineSeconds: 21600
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - iot-psql
        from:
          kind: ImageStreamTag
          name: 'iot-psql:latest'
    - type: ConfigChange
  replicas: 1
  revisionHistoryLimit: 10
  test: false
  selector:
    app: iot-psql
    deploymentconfig: iot-psql
  template:
    metadata:
      labels:
        app: iot-psql
        deploymentconfig: iot-psql
    spec:
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: iot-psql-data
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: iot-psql
          env:
            - name: PGDATA
              value: /data/data
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USER
                  name: pg-login
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: pg-login
          ports:
            - containerPort: 5432
              protocol: TCP
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: postgresql-data
              mountPath: /data
          terminationMessagePolicy: File
          image: >-
            quay.io/evanshortiss/rhtr-2020-pgsql
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler

---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: iot-psql
    app.kubernetes.io/component: iot-psql
    app.kubernetes.io/instance: iot-psql
  name: iot-psql
spec:
  lookupPolicy:
    local: false
  tags:
  - annotations:
      openshift.io/imported-from: quay.io/evanshortiss/rhtr-2020-pgsql
    from:
      kind: DockerImage
      name: quay.io/evanshortiss/rhtr-2020-pgsql
    importPolicy: {}
    name: latest
    referencePolicy:
      type: Source

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: iot-psql-data
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem

---
apiVersion: v1
data:
  POSTGRES_PASSWORD: cmh0ci1wYXNzd29yZA==
  POSTGRES_USER: cmh0ci11c2Vy
kind: Secret
metadata:
  name: pg-login
type: Opaque

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: iot-psql
    app.kubernetes.io/component: iot-psql
    app.kubernetes.io/instance: iot-psql
    app.openshift.io/runtime-version: latest
  name: iot-psql
spec:
  ports:
  - name: 5432-tcp
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: iot-psql
    deploymentconfig: iot-psql
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    app: sensor-management-ui
    app.kubernetes.io/component: sensor-management-ui
    app.kubernetes.io/instance: sensor-management-ui
  name: sensor-management-ui
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: sensor-management-ui:latest
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    contextDir: services/sensor-management-ui
    git:
      uri: https://github.com/RedHat-Middleware-Workshops/rhtr-2020-api-mgmt-kafka-workshop
    type: Git
  strategy:
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: s2i-nodejs-nginx:latest
    type: Source
  successfulBuildsHistoryLimit: 5
  triggers:
  - github:
      secret: MqkP-Uho_Vp8mJVTXoNk
    type: GitHub
  - generic:
      secret: MCTAhhVC2XYilFtMu9ts
    type: Generic
  - type: ConfigChange
  - imageChange:
    type: ImageChange

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.openshift.io/connects-to: iot-graphql-api
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"sensor-management-ui:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"sensor-management-ui\")].image"}]'
  labels:
    app: sensor-management-ui
    app.openshift.io/runtime: nginx
    app.kubernetes.io/component: sensor-management-ui
    app.kubernetes.io/instance: sensor-management-ui
    app.kubernetes.io/part-of: frontends
  name: sensor-management-ui
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: sensor-management-ui
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        deployment: sensor-management-ui
    spec:
      containers:
      - image: sensor-management-ui:latest
        imagePullPolicy: IfNotPresent
        name: sensor-management-ui
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: mobile-app
  name: s2i-nodejs-nginx
spec:
  lookupPolicy:
    local: false
  tags:
  - annotations:
      openshift.io/imported-from: quay.io/evanshortiss/s2i-nodejs-nginx
    from:
      kind: DockerImage
      name: quay.io/evanshortiss/s2i-nodejs-nginx
    importPolicy: {}
    name: latest
    referencePolicy:
      type: Source

---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: sensor-management-ui
    app.kubernetes.io/component: sensor-management-ui
    app.kubernetes.io/instance: sensor-management-ui
  name: sensor-management-ui
spec:
  lookupPolicy:
    local: false

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: sensor-management-ui
    app.kubernetes.io/component: sensor-management-ui
    app.kubernetes.io/instance: sensor-management-ui
  name: sensor-management-ui
spec:
  port:
    targetPort: 8080-tcp
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: sensor-management-ui
    weight: 100
  wildcardPolicy: None

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sensor-management-ui
    app.kubernetes.io/component: sensor-management-ui
    app.kubernetes.io/instance: sensor-management-ui
  name: sensor-management-ui
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: 8443-tcp
    port: 8443
    protocol: TCP
    targetPort: 8443
  selector:
    deployment: sensor-management-ui
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    app: iot-graphql-api
    app.kubernetes.io/component: iot-graphql-api
    app.kubernetes.io/instance: iot-graphql-api
  name: iot-graphql-api
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: iot-graphql-api:latest
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    contextDir: services/iot-graphql-api
    git:
      uri: https://github.com/RedHat-Middleware-Workshops/rhtr-2020-api-mgmt-kafka-workshop
    type: Git
  strategy:
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: nodejs:12
        namespace: openshift
    type: Source
  successfulBuildsHistoryLimit: 5
  triggers:
  - github:
      secret: H1sM5ow3ksddUthma4xD
    type: GitHub
  - generic:
      secret: FvmRciZTtLegSfT0wpZW
    type: Generic
  - type: ConfigChange
  - imageChange:
    type: ImageChange

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.openshift.io/connects-to: iot-psql
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"iot-graphql-api:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"iot-graphql-api\")].image"}]'
  labels:
    app: iot-graphql-api
    app.openshift.io/runtime: nodejs
    app.kubernetes.io/component: iot-graphql-api
    app.kubernetes.io/instance: iot-graphql-api
  name: iot-graphql-api
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: iot-graphql-api
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        deployment: iot-graphql-api
    spec:
      containers:
      - env:
        - name: NODE_ENV
          value: dev
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: POSTGRES_USER
              name: pg-login
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: pg-login
        image: iot-graphql-api:latest
        imagePullPolicy: IfNotPresent
        name: iot-graphql-api
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: iot-graphql-api
    app.kubernetes.io/component: iot-graphql-api
    app.kubernetes.io/instance: iot-graphql-api
  name: iot-graphql-api
spec:
  lookupPolicy:
    local: false

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: iot-graphql-api
    app.kubernetes.io/component: iot-graphql-api
    app.kubernetes.io/instance: iot-graphql-api
  name: iot-graphql-api
spec:
  port:
    targetPort: 8080-tcp
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: iot-graphql-api
    weight: 100
  wildcardPolicy: None

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: iot-graphql-api
    app.kubernetes.io/component: iot-graphql-api
    app.kubernetes.io/instance: iot-graphql-api
  name: iot-graphql-api
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    deployment: iot-graphql-api
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: iot-data-generator
    app.kubernetes.io/component: iot-data-generator
    app.kubernetes.io/instance: iot-data-generator
    app.kubernetes.io/part-of: iot-data-generator
    app.openshift.io/runtime: nodejs
  name: iot-data-generator
spec:
  replicas: 0
  revisionHistoryLimit: 10
  selector:
    app: iot-data-generator
    deploymentconfig: iot-data-generator
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: iot-data-generator
        deploymentconfig: iot-data-generator
    spec:
      containers:
      - image: quay.io/evanshortiss/rhtr-2020-iot-datagen
        imagePullPolicy: IfNotPresent
        name: iot-data-generator
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: TRANSPORT_MODE
          value: kafka
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - iot-data-generator
      from:
        kind: ImageStreamTag
        name: iot-data-generator:latest
    type: ImageChange
  - type: ConfigChange

---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: iot-data-generator
    app.kubernetes.io/component: iot-data-generator
    app.kubernetes.io/instance: iot-data-generator
    app.kubernetes.io/part-of: iot-data-generator
  name: iot-data-generator
spec:
  lookupPolicy:
    local: false
  tags:
  - annotations:
      openshift.io/imported-from: quay.io/evanshortiss/rhtr-2020-iot-datagen
    from:
      kind: DockerImage
      name: quay.io/evanshortiss/rhtr-2020-iot-datagen
    importPolicy: {}
    name: latest
    referencePolicy:
      type: Source

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: iot-data-generator
    app.kubernetes.io/component: iot-data-generator
    app.kubernetes.io/instance: iot-data-generator
    app.kubernetes.io/part-of: iot-data-generator
    app.openshift.io/runtime-version: latest
  name: iot-data-generator
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: iot-data-generator
    deploymentconfig: iot-data-generator
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

