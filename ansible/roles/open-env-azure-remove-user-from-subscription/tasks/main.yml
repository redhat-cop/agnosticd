---
- name: Retrieve which Pool ID is allocated for this user from the database
  ansible.builtin.uri:
    return_content: yes
    status_code: [200, 404]
    url: "{{ az_function_show }}{{ project_tag }}/{{ az_pool_id }}?code={{ azure_pool_api_secret }}"
  register: poolid

- name: Write out the assigned Pool ID
  debug:
    msg: "{{ poolid.content }}"

- name: Purge pool assignment
  when:
    - poolid.content
    - poolid.status == 200
  block:
    - name: Log into Azure CLI
      no_log: True
      command: >
        az login --service-principal -u {{ azure_service_principal }}
        -p {{ azure_password }} --tenant {{ azure_tenant }}

    - name: Get facts for the subscription by name
      azure.azcollection.azure_rm_subscription_info:
        auth_source: env
        name: "{{ poolid.content }}"
      register: assignedsubscription

    - name: Write out assignedsubscription
      debug:
        msg: "{{ assignedsubscription }}"

    - name: Get subscription ID
      set_fact:
        pool_subscription_id: "{{ assignedsubscription.subscriptions[0].subscription_id }}"

    - name: Get application info
      environment:
        AZURE_SUBSCRIPTION_ID: "{{ pool_subscription_id }}"
      azure.azcollection.azure_rm_adapplication_info:
        auth_source: env
        identifier_uri: "api://openenv-{{ guid }}"
        tenant: "{{ azure_tenant }}"
      register: azapp

    - name: Delete application
      environment:
        AZURE_SUBSCRIPTION_ID: "{{ pool_subscription_id }}"
      when: azapp.applications|length>0
      azure.azcollection.azure_rm_adapplication:
        auth_source: env
        tenant: "{{ azure_tenant }}"
        app_id: "{{ azapp.applications[0].app_id }}"
        state: absent
      ignore_errors: true

    #- name: Get ARO application info
    #  azure.azcollection.azure_rm_adapplication_info:
    #    auth_source: env
    #    identifier_uri: "api://openenv-aro-{{ guid }}"
    #    tenant: "{{ azure_tenant }}"
    #  register: azaroapp

    #- name: Delete ARO application
    #  when: azaroapp.applications|length>0
    #  azure.azcollection.azure_rm_adapplication:
    #    auth_source: env
    #    tenant: "{{ azure_tenant }}"
    #    app_id: "{{ azaroapp.applications[0].app_id }}"
    #    state: absent

    - name: Clean up DNS zone
      command: >
        az network dns zone delete
          -g openenv-{{ guid }}
          -n {{ guid }}.{{ azure_root_dns_zone }}
          -y
          --subscription {{ pool_subscription_id }}
      ignore_errors: true

    - name: Delete NS record from DNS
      azure.azcollection.azure_rm_dnsrecordset:
        resource_group: "{{ azure_dns_resource_group }}"
        subscription_id: "{{ azure_subscription_id }}"
        record_type: NS
        relative_name: "{{ guid }}"
        zone_name: "{{ azure_root_dns_zone }}"
        state: absent

    - name: Get all resource groups in the subscription
      environment:
        AZURE_SUBSCRIPTION_ID: "{{ pool_subscription_id }}"
      azure.azcollection.azure_rm_resourcegroup_info:
        auth_source: env
        tenant: "{{ azure_tenant }}"
      register: allresourcegroups

    - name: Write out all resource groups
      debug:
        msg: "{{ allresourcegroups }}"

    - name: Delete all resource groups owned by the subscription (RG's created by the lab user)
      when: allresourcegroups.resourcegroups|length>0
      environment:
        AZURE_SUBSCRIPTION_ID: "{{ pool_subscription_id }}"
      azure.azcollection.azure_rm_resourcegroup:
        auth_source: env
        name: "{{ item.name }}"
        location: "{{ item.location }}"
        force_delete_nonempty: yes
        state: absent
      loop: "{{ allresourcegroups.resourcegroups }}"

    - name: Get subscription FQID
      set_fact:
        subscriptionfqid: "{{ assignedsubscription.subscriptions[0].fqid }}"

    - name: Clean up all Tags on the Subscription
      command: >
        az tag delete --resource-id {{ subscriptionfqid }} --yes

    - name: Get facts for management subscription by pool ID
      azure.azcollection.azure_rm_subscription_info:
        auth_source: env
        id: "{{ azure_subscription_id }}"
      register: management_subscription

    - name: Log out of Azure CLI
      command: >
        az logout

    - name: Get the user's object from Active Directory
      azure.azcollection.azure_rm_aduser_info:
        auth_source: env
        user_principal_name: "{{ requester_email }}"
        tenant: "{{ azure_tenant }}"
      register: azuser

    - name: Get all direct role assignments for the subscription
      environment:
        AZURE_SUBSCRIPTION_ID: "{{ pool_subscription_id }}"
      azure.azcollection.azure_rm_roleassignment_info:
        auth_source: env
        scope: "{{ subscriptionfqid }}"
        strict_scope_match: True
      register: role_assignments

    - name: Remove all direct role assignments from the subscription
      environment:
        AZURE_SUBSCRIPTION_ID: "{{ pool_subscription_id }}"
      when: 'item.assignee_object_id != azure_open_env_app_id'
      azure.azcollection.azure_rm_roleassignment:
        auth_source: env
        id: "{{ item.id }}"
        state: absent
      loop: "{{ role_assignments.roleassignments }}"

    - name: Remove pool allocation from the database
      ansible.builtin.uri:
        url: "{{ az_function_release }}{{ project_tag }}/{{ az_pool_id }}?code={{ azure_pool_api_secret }}"
      ignore_errors: yes
