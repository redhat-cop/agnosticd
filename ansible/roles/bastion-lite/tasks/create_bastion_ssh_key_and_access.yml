---
- name: Generate SSH keys
  ansible.builtin.command: >-
    ssh-keygen
    -t {{ ssh_bastion_key_type | quote }}
    -f {{ ssh_bastion_key_path | quote }}
    -q -N ""
  args:
    creates: "{{ ssh_bastion_key_path }}"
  register: r_ssh_key_gen

- name: Fix permission of ssh key
  ansible.builtin.file:
    path: "{{ ssh_bastion_key_path }}"
    mode: 0400

- name: Generate SSH pub key content
  ansible.builtin.command: >-
    ssh-keygen -y -f {{ ssh_bastion_key_path | quote }}
  changed_when: false
  register: r_ssh_bastion_pubkey

- name: Save all facts for SSH
  ansible.builtin.set_fact:
    ssh_bastion_pubkey_content: "{{ r_ssh_bastion_pubkey.stdout.strip() }}"
    ssh_bastion_pubkey_path: "{{ ssh_bastion_pubkey_path }}"
    ssh_bastion_key_path: "{{ ssh_bastion_key_path }}"
    ssh_bastion_key_name: "{{ ssh_bastion_key_name }}"

- name: Write SSH pub key
  ansible.builtin.copy:
    content: "{{ ssh_bastion_pubkey_content }}"
    dest: "{{ ssh_bastion_pubkey_path }}"

- name: Add bastion access to all hosts
  when:
    - l_inventory_name not in groups.windows|default([])
    - l_inventory_name not in groups.network|default([])
  ansible.posix.authorized_key:
    user: "{{ hostvars[l_inventory_name].remote_user | default(remote_user) | default(ansible_user) }}"
    state: present
    key: "{{ hostvars[groups.bastions|first].ssh_bastion_pubkey_content }}"
    comment: "bastion"
  loop: "{{ groups.all }}"
  loop_control:
    loop_var: l_inventory_name
  delegate_to: "{{ l_inventory_name }}"

- name: Add bastion access to all hosts
  when:
    - l_inventory_name not in groups.windows|default([])
    - l_inventory_name not in groups.network|default([])
  ansible.posix.authorized_key:
    user: root
    state: present
    key: "{{ hostvars[groups.bastions|first].ssh_bastion_pubkey_content }}"
    comment: "bastion"
  loop: "{{ groups.all }}"
  loop_control:
    loop_var: l_inventory_name
  delegate_to: "{{ l_inventory_name }}"
  become: true
