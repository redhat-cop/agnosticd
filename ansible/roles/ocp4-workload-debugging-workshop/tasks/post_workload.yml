---
# Implement your Post Workload deployment tasks here

- name: Wait for CodeReady Workspaces to start
  k8s:
    api_version: v1
    kind: Deployment
    name: codeready
    namespace: workspaces
  register: crw_deployment
  until:
    - crw_deployment.result is defined
  retries: 30
  delay: 120
  changed_when: false
  
- name: Wait for the CodeReady Workspaces to be ready
  k8s:
    api_version: v1
    kind: Deployment
    name: codeready
    namespace: workspaces
  register: crw_deployment
  until:
    - crw_deployment.result.status.readyReplicas is defined
    - crw_deployment.result.status.readyReplicas == 1
  retries: 50
  delay: 10
  changed_when: false

- name: Wait for Istio to start
  k8s:
    api_version: v1
    kind: Deployment
    name: istio-sidecar-injector
    namespace: istio-system
  register: istio_deployment
  until:
    - istio_deployment.result is defined
  retries: 30
  delay: 120
  changed_when: false
- name: Wait for the Istio to be ready
  k8s:
    api_version: v1
    kind: Deployment
    name: istio-sidecar-injector
    namespace: istio-system
  register: istio_deployment
  until:
    - istio_deployment.result.status.readyReplicas is defined
    - istio_deployment.result.status.readyReplicas == 1
  retries: 50
  delay: 10
  changed_when: false

# Check Installation
- name: Check Workshop Infrastructure
  block:
    - name: "[{{ workshop_operator_namespace }}] Reading deployments"
      k8s_facts:
        api_version: v1
        kind: Deployment
        namespace: "{{ workshop_operator_namespace }}"
      register: workshop_infra_verify_dc

    - name: "[{{ workshop_operator_namespace }}] Found deployments"
      fail:
        msg: "[{{ workshop_operator_namespace }}] no deployments found"
      when: workshop_infra_verify_dc is not defined

    - name: "[{{ workshop_operator_namespace }}] Checking deployments"
      fail:
        msg: "[{{ workshop_operator_namespace }}] Some/all deployments are not ready"
      when: item.replicas is not defined or item.readyReplicas is not defined  or item.replicas != item.readyReplicas
      loop: "{{ workshop_infra_verify_dc|json_query('resources[*].status') }}"

- name: Check CodeReadyWorkspaces
  block:
    - name: "[workspaces] Reading deployments"
      k8s_facts:
        api_version: v1
        kind: Deployment
        namespace: workspaces
        label_selectors:
          - app = codeready
      register: crw_verify_dc

    - name: "[workspaces] Found deployments"
      fail:
        msg: "[workspaces] no deployments found"
      when: crw_verify_dc is not defined

    - name: "[workspaces] Checking deployments"
      fail:
        msg: "[workspaces] Some/all deployments are not ready"
      when: item.replicas is not defined or item.readyReplicas is not defined  or item.replicas != item.readyReplicas
      loop: "{{ crw_verify_dc|json_query('resources[*].status') }}"

- name: Check Istio
  block:
    - name: "[istio-system] Reading deployments"
      k8s_facts:
        api_version: v1
        kind: Deployment
        namespace: istio-system
        label_selectors:
          - app = sidecarInjectorWebhook
      register: istio_verify_dc

    - name: "[istio-system] Found deployments"
      fail:
        msg: "[istio-system] no deployments found"
      when: istio_verify_dc is not defined

    - name: "[istio-system] Checking deployments"
      fail:
        msg: "[istio-system] Some/all deployments are not ready"
      when: item.replicas is not defined or item.readyReplicas is not defined  or item.replicas != item.readyReplicas
      loop: "{{ istio_verify_dc|json_query('resources[*].status') }}"

- name: Check Argo CD
  block:
    - name: "[argo cd] Reading deployments"
      k8s_facts:
        api_version: v1
        kind: Deployment
        namespace: argocd
      register: argocd_verify_dc

    - name: "[argo cd] Found deployments"
      fail:
        msg: "[argo cd] no deployments found"
      when: argocd_verify_dc is not defined

    - name: "[argo cd] Checking deployments"
      fail:
        msg: "[argocd] Some/all deployments are not ready"
      when: item.replicas is not defined or item.readyReplicas is not defined  or item.replicas != item.readyReplicas
      loop: "{{ argocd_verify_dc|json_query('resources[*].status') }}"

- name: lab data for user info
  agnosticd_user_info:
    user: "{{ item }}"
    data:
      msg: |
        Username: {{ item }}
        Password: {{ workshop_openshift_user_password }}
        Workshop User Guide: http://bookbag-{{ item | regex_replace('^user(.*)$', '\1') }}-{{ workshop_operator_namespace }}.{{ route_subdomain }}/workshop
  loop: "{{ users }}"

- name: output workshop info
  debug:
    msg:
      - "user.info: "
      - "user.info: Debugging Workshop provisioned for {{ user_count }} user(s)"
      - "user.info: "
      - "user.info: Workshop User Guide: http://bookbag-XX-{{ workshop_operator_namespace }}.{{ route_subdomain }}/workshop"
      - "user.info: Etherpad: http://etherpad-{{ workshop_operator_namespace }}.{{ route_subdomain }}"
      - "user.info: "
      - "user.info: You should share the Etherpad URL (or a shortlink for it) with attendees to self-assign a user."
      - "user.info: It is all they will need to get started!"
      - "user.info: "
      - "user.info: OpenShift credentials for attendees: '{{ workshop_openshift_user_name }}' / '{{ workshop_openshift_user_password }}'"
      - "user.info: "
      - "user.info: OpenShift Console: {{ console_url }}"
      - "user.info: Cluster admin login with '{{ ocp_username }}' / '{{ workshop_openshift_admin_password }}'"
      - "user.info: "
      - "user.info: OpenShift/Kubernetes API (use with oc login): {{ master_url }}"
      - "user.info: "
      - "user.info: CodeReady Console: http://codeready-codeready.{{ route_subdomain }}"
      - "user.info: Admin login with 'admin' / 'admin'"
      - "user.info: "
      - "user.info: NOTE: Workspaces in CodeReady are provisioned asynchronously and may not"
      - "user.info: be accessible until rollout finishes shortly."
  when: not silent|bool

# Leave this as the last task in the playbook.
- name: post_workload tasks complete
  debug:
    msg: "Post-Workload Tasks completed successfully."
  when: not silent|bool
