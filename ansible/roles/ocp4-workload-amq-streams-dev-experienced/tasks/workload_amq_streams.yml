---
# Implement your Workload deployment tasks here

- name: "create operatorgroup in {{ ocp_project_amq_streams }}"
  k8s:
    state: present
    namespace: "{{ ocp_project_amq_streams }}"
    definition: "{{ lookup('template', role_path ~ '/templates/operatorgroup.j2' ) | from_yaml }}"
  vars:
    operator_group_name: "{{ amq_streams_operator_group_name }}"

- name: "create subscription for amq streams operator in {{ ocp_project_amq_streams }}"
  k8s:
    state: present
    namespace: "{{ ocp_project_amq_streams }}"
    definition: "{{ lookup('template', role_path ~ '/templates/subscription.j2' ) | from_yaml }}"
  vars:
    subscription_name: "{{ amq_streams_operator_subscription_name }}"
    subscription_channel: "{{ amq_streams_operator_subscription_channel }}"
    subscription_package_name: "{{ amq_streams_operator_subscription_package_name }}"
    subscription_catalog_source: "{{ amq_streams_operator_subscription_catalog_source }}"
    subscription_catalog_source_namespace: "{{ amq_streams_operator_subscription_catalog_source_namespace }}"
    subscription_starting_csv: "{{ amq_streams_operator_subscription_starting_csv }}"

- name: wait until installplan is created
  k8s_facts:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ ocp_project_amq_streams }}"
  register: r_install_plan
  retries: 30
  delay: 5
  until:
    - r_install_plan|selectattr('clusterServiceVersionNames', 'contains', 'amqstreams')

- name: find all amq streams related CSVs
  set_fact:
    amq_streams_csvs:  "{{ r_install_plan.resources | to_json | from_json | json_query(query) }}"
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'amqstreams')].spec.clusterServiceVersionNames

- name: wait until all CSVs are succeeded
  k8s_facts:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ item }}"
    namespace: "{{ ocp_project_amq_streams }}"
  register: r_csv
  retries: 15
  delay: 5
  until:
  - r_csv.resources[0].status.phase is defined
  - r_csv.resources[0].status.phase | length > 0
  - r_csv.resources[0].status.phase == "Succeeded"
  loop: "{{ amq_streams_csvs[0] }}"

- name: create kafka cluster provisioner role
  k8s:
    state: present
    namespace: "{{ ocp_project_amq_streams }}"
    definition: "{{ lookup('file', role_path ~ '/files/kafka-cluster-provisioner.yml' ) | from_yaml }}"

- name: "give kafka cluster provisioner privileges to {{ ocp_username }}"
  k8s:
    state: present
    namespace: "{{ ocp_project_amq_streams }}"
    definition: "{{ lookup('template', role_path ~ '/templates/kafka-cluster-provisioner-rb.j2' ) | from_yaml }}"
