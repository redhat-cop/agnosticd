---
# create gitea operator  namespace
- name: create sso namespace
  k8s:
    state: present
    kind: Project
    api_version: project.openshift.io/v1
    definition:
      metadata:
        name: "sso"
        annotations:
          openshift.io/description: ""
          openshift.io/display-name: "SSO Project"

# create sso operatorgroup
- name: Create operator group for sso
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/sso_operatorgroup.yaml

# deploy gitea operator
- name: Create operator subscription for sso
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/sso_subscription.yaml

- name: wait a minute and let the SSO CRD become ready
  pause:
      minutes: 1

# # wait for CRD to be a thing
- name: Wait for keycloak CRD to be ready
  k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: keycloaks.keycloak.org
  register: r_keycloak_crd
  retries: 200
  delay: 20
  until: r_keycloak_crd.resources | list | length == 1

# deploy sso CR
- name: create sso instance 
  k8s:
    state: present
    kind: Keycloak
    api_version: keycloak.org/v1alpha1
    definition:
      metadata:
        name: sso
        namespace: sso
        labels:
          app: sso
      spec:
        instances: 1
        externalAccess:
          enabled: true

# create sso realm
- name: create sso realm 
  k8s:
    state: present
    kind: KeycloakRealm
    api_version: keycloak.org/v1alpha1
    definition:
      metadata:
        name: eap-realm
        namespace: sso
        labels:
          app: sso
      spec:
        realm:
          id: eap
          realm: eap
          enabled: true
          displayName: Basic Realm
        instanceSelector:
          matchLabels:
            app: sso

# create sso client
- name: create sso client 
  k8s:
    state: present
    kind: KeycloakClient
    api_version: keycloak.org/v1alpha1
    definition:
      metadata:
        name: eap-app
        namespace: sso
        labels:
          app: sso
      spec:
        realmSelector:
          matchLabels:
            app: sso
        client:
          redirectUris:
            - '*'
          webOrigins:
            - '*'
          clientId: eap-app
          secret: client-secret
          clientAuthenticatorType: client-secret
          enabled: true
          publicClient: true
          standardFlowEnabled: true

# create sso user
- name: create sso users
  k8s:
    state: present
    api_version: keycloak.org/v1alpha1
    kind: KeycloakUser
    definition:
      metadata:
        name: example-realm-{{ item }}
        namespace: sso
        labels:
          app: sso
      spec:
        realmSelector:
          matchLabels:
            app: sso
        user:
          credentials:
            - type: password
              value: openshift
          username: "{{ item }}"
          firstName: "{{ item }}"
          lastName: Doe
          email: "{{ item }}@example.com"
          enabled: true
          emailVerified: false
  loop: "{{ users }}"
