---
- name: sat | Check subscription-manager package existence
  when: cloud_provider == 'gcp' or cloud_provider == 'azure'
  command: which subscription-manager
  ignore_errors: true
  register: check_sm_out

- name: sat | Install subscription-manager package
  when:
    - cloud_provider == 'gcp' or cloud_provider == 'azure'
    - check_sm_out is failed
  tags: packer
  package:
    name: subscription-manager
    state: present

- name: sat | Remove rh-amazon-rhui-client package
  when: cloud_provider == 'ec2'
  tags: packer
  package:
    name: rh-amazon-rhui-client
    state: absent
    disablerepo: "*"    ## This option is undocumented but works, Pulls from yum & dnf

- name: sat | Unregister the system just in case
  include_tasks: "unregister.yml"

- name: sat | Install CA certificate from satellite server
  ansible.builtin.get_url:
    url: "https://{{ set_repositories_satellite_hostname }}/pub/katello-server-ca.crt"
    dest: /etc/pki/ca-trust/source/anchors/{{ set_repositories_satellite_hostname }}.ca.crt
    mode: u=rw,go=r
    validate_certs: false
  retries: 10
  delay: 10

- name: sat | Update CA Trust Bundle
  command: update-ca-trust

- name: sat | Remove satellite Cert
  tags: packer
  package:
    name: katello-ca-consumer-*.noarch
    state: absent
    disablerepo: "*"
  ignore_errors: true

- name: sat | Find current repository files
  find:
    paths: /etc/yum.repos.d
    recurse: no
    patterns:
    - '*.repo'
  register: r_find_repos
  tags:
    - configure_repos
    - remove_existing_repos

- name: sat | Remove current repository files
  file:
    path: "{{ file.path }}"
    state: absent
  loop: "{{ r_find_repos.files }}"
  loop_control:
    loop_var: file
    label: "{{ file.path }}"
  ignore_errors: true
  tags:
    - configure_repos
    - remove_existing_repos

# WK: use `yum` to allow ignore of GPG errors
#     `package` does not have that options and results in random failures
- name: sat | Install Satellite CA certificate package
  yum:
    name: "{{ set_repositories_satellite_ca_rpm_url }}"
    state: present
    disablerepo: "*"
    disable_gpg_check: true
  register: r_install_satellite_ca_rpm
  until: not r_install_satellite_ca_rpm.failed
  retries: 10
  delay: 10

# prutledg - package profile reporting is slamming the satellite server and not necessary
- name: sat | Disable Reporting Of Package Profile to Satellite
  ini_file:
    path: /etc/rhsm/rhsm.conf
    section: rhsm
    option: report_package_profile
    value: "0"

- name: sat | Run setup if gather_facts hasn't been run
  setup:
    gather_subset: min
  when: ansible_date_time is not defined

- name: Generate UUID for dmi.system.uuid if cloud provider is Equinix Metal
  ansible.builtin.set_fact:
    dmi_system_uuid: "{{ 999999999 | random | to_uuid }}"
  when: cloud_provider == 'equinix_metal'

- name: sat | Set set_repositories_subscription_hostname with randomization
  when: set_repositories_subscription_hostname is not defined
  set_fact:
    set_repositories_subscription_hostname: >-
      {%- if guid in inventory_hostname -%}
      {{ inventory_hostname }}-{{ ansible_date_time.iso8601_basic | lower }}
      {%- else -%}
      {{ inventory_hostname }}.{{ guid }}.internal-{{ ansible_date_time.iso8601_basic | lower }}
      {%- endif -%}

- name: sat | Set network.fqdn in /etc/rhsm/facts/katello.facts
  copy:
    dest: /etc/rhsm/facts/katello.facts
    content: "{{ __content | to_json }}"
  vars:
    __content: >-
      {{
        {"network.fqdn": set_repositories_subscription_hostname}
        | combine({"dmi.system.uuid": dmi_system_uuid} if cloud_provider == 'equinix_metal' else {})
      }}

- name: sat | Register with activation-key
  when: set_repositories_satellite_ha is not defined or set_repositories_satellite_ha|bool == False
  community.general.redhat_subscription:
    state: present
    consumer_name: "{{ set_repositories_subscription_hostname }}"
    server_hostname: "{{ set_repositories_satellite_hostname }}"
    activationkey: "{{ set_repositories_satellite_activationkey }}"
    org_id: "{{ set_repositories_satellite_org | default(satellite_org) }}"

- name: sat | Register with activation-key with HA
  when: set_repositories_satellite_ha is defined and set_repositories_satellite_ha|bool == True
  community.general.redhat_subscription:
    state: present
    consumer_name: "{{ set_repositories_subscription_hostname }}"
    server_hostname: "{{ set_repositories_satellite_hostname }}"
    server_port: "8443"
    server_prefix: /rhsm
    rhsm_baseurl: "https://{{ set_repositories_satellite_hostname }}/pulp/repos"
    activationkey: "{{ set_repositories_satellite_activationkey }}"
    org_id: "{{ set_repositories_satellite_org | default(satellite_org) }}"
    pool: "{{ set_repositories_satellite_pool | default(omit) }}"
    force_register: "{{ set_repositories_force_register | default('false') }}"

- name: sat | Enable RHSM to manage repositories
  command: subscription-manager config --rhsm.manage_repos=1

- name: sat | Lock RHEL 9 release to specific version
  when: set_repositories_rhel9_lock_release is defined and ansible_os_family == 'RedHat' and ansible_distribution_major_version == "9"
  command: subscription-manager release --set={{ set_repositories_rhel9_lock_release }}
  register: lock_result
  until: lock_result is succeeded
  retries: 15
  delay: 10

- name: sat | Lock RHEL 8 release to specific version
  when: set_repositories_rhel8_lock_release is defined and ansible_os_family == 'RedHat' and ansible_distribution_major_version == "8"
  command: subscription-manager release --set={{ set_repositories_rhel8_lock_release }}
  register: lock_result
  until: lock_result is succeeded
  retries: 15
  delay: 10

- name: sat | Lock RHEL 7 release to specific version
  when: set_repositories_rhel7_lock_release is defined and ansible_os_family == 'RedHat' and ansible_distribution_major_version == "7"
  command: subscription-manager release --set={{ set_repositories_rhel7_lock_release }}
  register: lock_result
  until: lock_result is succeeded
  retries: 15
  delay: 10

- name: sat | Enable repos
  rhsm_repository:
    name: "*"
    state: enabled
  when:
  - use_content_view
  - set_repositories_satellite_activationkey != ''

# Remove all repos when using rhel_repos
# This will resolve any dependency issues with unwanted repositories still being enabled
- name: sat | Purge existing repos
  rhsm_repository:
    name: '*'
    purge: true
  when:
    - not use_content_view
    - rhel_repos is defined

- name: sat | Enable repos for RHEL
  rhsm_repository:
    name: "{{ item }}"
    state: enabled
  with_items:
    - '{{ rhel_repos }}'
  when:
  - not use_content_view
  - rhel_repos is defined

# This would be used to skip registering with Satellite,
# but still be able to access the repos via certificate auth.
# This will only run if you have satellite_key and satellite_cert defined,
# but not set_repositories_satellite_activationkey
- name: sat | Set up repos to access Satellite using cert
  when:
  - satellite_key is defined
  - satellite_cert is defined
  block:
  - name: sat | Create the certificate and key files
    file:
      state: touch
      path: "{{ item }}"
    loop:
      - "/etc/pki/tls/Red_GPTE.key"
      - "/etc/pki/tls/Red_GPTE.pem"

  - name: sat | Add certificate and key content
    copy:
      dest: "{{ item.file }}"
      content: "{{ item.contents }}"
    loop:
      - {file: "/etc/pki/tls/Red_GPTE.key", contents: "{{ satellite_key }}"}
      - {file: "/etc/pki/tls/Red_GPTE.pem", contents: "{{ satellite_cert }}"}

  - name: sat | create open.repo template on host
    template:
      src: "./files/repos_template.j2"
      dest: /etc/yum.repos.d/open_{{ env_type }}.repo
    tags:
    - create_open_repo_template

- name: sat | clean repositories
  command: "yum clean all"
  tags:
    - configure_repos
    - run_yum_repolist
