---
- name: Install subscription-manager package
  tags: packer
  package:
    name: subscription-manager
    state: present
  when: cloud_provider == 'gcp' or cloud_provider == 'azure'

- name: Remove rh-amazon-rhui-client package
  tags: packer
  package:
    name: rh-amazon-rhui-client
    state: absent
  when: cloud_provider == 'ec2'

- name: Copy satellite CA certificate to /etc/pki/ca-trust/source/anchors/{{ set_repositories_satellite_hostname }}.ca.crt
  copy:
    content: "{{ set_repositories_satellite_ca_cert }}"
    dest: /etc/pki/ca-trust/source/anchors/{{ set_repositories_satellite_hostname }}.ca.crt
    mode: u=rw,go=r
  register: r_copy_satellite_ca_cert

- name: Update CA Trust Bundle
  command: update-ca-trust
  when: r_copy_satellite_ca_cert.changed

- name: Remove satellite Cert
  tags: packer
  package:
    name: katello-ca-consumer-*.noarch
    state: absent
  ignore_errors: "{{ cloud_provider == 'gcp' }}"

- name: Find current repository files
  find:
    paths: /etc/yum.repos.d
    recurse: no
    patterns:
    - '*.repo'
  register: r_find_repos
  tags:
    - configure_repos
    - remove_existing_repos

- name: Remove current repository files
  file:
    path: "{{ file.path }}"
    state: absent
  loop: "{{ r_find_repos.files }}"
  loop_control:
    loop_var: file
    label: "{{ file.path }}"
  ignore_errors: true
  tags:
    - configure_repos
    - remove_existing_repos

- name: Install satellite CA certificate package
  package:
    name: "{{ set_repositories_satellite_ca_rpm_url }}"
    state: present
  register: r_install_satellite_ca_rpm
  until: not r_install_satellite_ca_rpm.failed
  retries: 10
  delay: 30

- name: Run setup if gather_facts hasn't been run
  setup:
    gather_subset: min
  when: ansible_date_time is not defined

- name: Randomize hostname for Satellite
  copy:
    dest: /etc/rhsm/facts/katello.facts
    content: >-
        {
          "network.fqdn": {% if guid in inventory_hostname %}
          "{{ inventory_hostname }}-{{ ansible_date_time.iso8601_basic | lower }}"
          {% else %}
          "{{ inventory_hostname }}.{{guid}}.internal-{{ ansible_date_time.iso8601_basic | lower }}" 
          {% endif %}
        } 

- name: Register with activation-key
  when: set_repositories_satellite_activationkey != ''
  redhat_subscription:
    state: present
    server_hostname: "{{ set_repositories_satellite_hostname }}"
    activationkey: "{{ set_repositories_satellite_activationkey }}"
    org_id: "{{ set_repositories_satellite_org | default(satellite_org) }}"

- name: Enable repos
  rhsm_repository:
    name: "*"
    state: enabled
  when:
  - use_content_view
  - set_repositories_satellite_activationkey != ''

- name: Enable repos for RHEL
  rhsm_repository:
    name: "{{ item }}"
    state: enabled
  with_items:
    - '{{ rhel_repos }}'
  when:
  - not use_content_view
  - rhel_repos is defined

# This would be used to skip registering with Satellite,
# but still be able to access the repos via certificate auth.
# This will only run if you have satellite_key and satellite_cert defined,
# but not set_repositories_satellite_activationkey
- name: Set up repos to access Satellite using cert
  when:
  - satellite_key is defined
  - satellite_cert is defined
  block:
  - name: Create the certificate and key files
    file:
      state: touch
      path: "{{ item }}"
    loop:
      - "/etc/pki/tls/Red_GPTE.key"
      - "/etc/pki/tls/Red_GPTE.pem"

  - name: Add certificate and key content
    copy:
      dest: "{{ item.file }}"
      content: "{{ item.contents }}"
    loop:
      - {file: "/etc/pki/tls/Red_GPTE.key", contents: "{{ satellite_key }}"}
      - {file: "/etc/pki/tls/Red_GPTE.pem", contents: "{{ satellite_cert }}"}

  - name: create open.repo template on host
    template:
      src: "./files/repos_template.j2"
      dest: /etc/yum.repos.d/open_{{ env_type }}.repo
    tags:
    - create_open_repo_template

- name: clean repositories
  command: "yum clean all"
  args:
    warn: false
  tags:
    - configure_repos
    - run_yum_repolist
