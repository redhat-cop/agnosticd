---

- name: Verify Storage Type
  fail:
    msg: "Invalid Database Type. 'quay_database_type' must be 'postgres' or 'mysql'"
  when: quay_database_type not in ["postgresql","mysql"]

- name: Verify Clair Endpoint
  fail:
    msg: Clar Endpoint Must Be Specified
  when: quay_clair_enable is defined and quay_clair_enable|bool and (quay_clair_endpoint is not defined or quay_clair_endpoint|trim == "")

- name: Set PostgreSQL Facts
  set_fact:
    quay_db_uri: "{{ postgresql_db_uri }}"
  when: quay_database_type == "postgresql"

- name: Set MySQL Facts
  set_fact:
    quay_db_uri: "{{ mysql_db_uri }}"
  when: quay_database_type == "mysql"

- name: Set HTTP Protocol
  set_fact:
    quay_http_protocol: "{{ (quay_ssl_enable|bool)| ternary('https','http') }}"

- name: Include Container Credentials
  include_tasks: container_credentials.yml
  when: (quay_registry_server | trim != "") and ((quay_registry_auth | trim != "") or (quay_registry_email | trim != ""))

- name: Configure Storage Directories
  file:
    state: directory
    owner: root
    group: root
    mode: g+rw
    path: "{{ item }}"
  with_items:
    - "{{ quay_config_dir }}"
    - "{{ quay_storage_dir }}"

- name: Include systemd configurations
  include_tasks: configure_systemd.yml

- name: Set Fail Safes in case certificate files not defined
  when: quay_ssl_enable|bool
  block:
  - name: Set fail safe for certificate file
    set_fact:
      quay_ssl_cert_file: ""
    when: quay_ssl_cert_file is undefined
  - name: Set fail safe for key file
    set_fact:
      quay_ssl_key_file: ""
    when: quay_ssl_key_file is undefined

- name: Set Fact for Custom SSL Certificates
  set_fact:
    quay_ssl_cert_file_to_use: "{{ quay_ssl_cert_file }}"
    quay_ssl_key_file_to_use: "{{ quay_ssl_key_file }}"
  when: quay_ssl_enable|bool and (quay_ssl_key_file|trim != "" and quay_ssl_cert_file|trim != "")

- name: Debug first when
  debug:
    msg: First when true
  when: quay_ssl_enable|bool and (quay_ssl_key_file|trim != "" and quay_ssl_cert_file|trim != "")

- name: Debug second when
  debug:
    msg: Second when true
  when: quay_ssl_enable|bool and (quay_ssl_key_file|trim == "" or quay_ssl_cert_file|trim == "")

- name: Create Self Signed SSL Certificates
  when: quay_ssl_enable|bool and (quay_ssl_key_file|trim == "" or quay_ssl_cert_file|trim == "")
  block:
  - name: Create Temporary SSL Directory
    command: mktemp -d /tmp/quay-ssl-XXXXXXX
    register: quay_ssl_remote_tmp_dir_mktemp
    delegate_to: "{{ groups['quay_enterprise'][0] }}"
    when: quay_ssl_remote_tmp_dir is not defined and quay_ssl_remote_tmp_dir|trim == ""

  - name: Set Fact for Remote Self Signed SSL Directory
    set_fact:
      quay_ssl_remote_tmp_dir: "{{ quay_ssl_remote_tmp_dir if quay_ssl_remote_tmp_dir is defined and quay_ssl_remote_tmp_dir|trim == '' else quay_ssl_remote_tmp_dir_mktemp.stdout }}"
    when: quay_ssl_remote_tmp_dir is not defined and quay_ssl_remote_tmp_dir|trim == ""

  - name: Create SSL Certificate
    command: openssl req -nodes -x509 -newkey rsa:4096 -keyout {{ quay_ssl_remote_tmp_dir }}/ssl.key -out {{ quay_ssl_remote_tmp_dir }}/ssl.cert -subj "/C={{ quay_ssl_generate_country }}/ST={{ quay_ssl_generate_state }}/L={{ quay_ssl_generate_city }}/O={{ quay_ssl_generate_organization }}/OU={{ quay_ssl_generate_organizational_unit }}/CN={{ quay_server_hostname }}" -days {{ quay_ssl_generate_days_validity }}
    delegate_to: "{{ groups['quay_enterprise'][0] }}"

  - name: Fetch Self Signed SSL Certifictes
    fetch:
      src:  "{{ item.src }}"
      dest: "{{ item.dest }}"
      flat: true
      fail_on_missing: yes
    delegate_to: "{{ groups['quay_enterprise'][0] }}"
    run_once: true
    with_items:
      - { src: "{{ quay_ssl_remote_tmp_dir }}/ssl.key", dest: "{{ quay_ssl_local_tmp_dir }}/ssl.key" }
      - { src: "{{ quay_ssl_remote_tmp_dir }}/ssl.cert", dest: "{{ quay_ssl_local_tmp_dir }}/ssl.cert" }

  - name: Delete Remote Self Signed SSL Certificates
    file:
      state: absent
      path: "{{ quay_ssl_remote_tmp_dir }}"
    when: quay_ssl_delete_generated_cert|bool
    delegate_to: "{{ groups['quay_enterprise'][0] }}"

  - name: Set Fact for Self Signed SSL Certificates
    set_fact:
      quay_ssl_cert_file_to_use: "{{ quay_ssl_local_tmp_dir }}/ssl.cert"
      quay_ssl_key_file_to_use: "{{ quay_ssl_local_tmp_dir }}/ssl.key"

- name: Copy SSL Certificates
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: g+rw
  notify: Restart quay service
  with_items:
    - { src: "{{ quay_ssl_cert_file_to_use }}", dest: "{{ quay_config_dir }}/ssl.cert" }
    - { src: "{{ quay_ssl_key_file_to_use }}", dest: "{{ quay_config_dir }}/ssl.key" }
  when: quay_ssl_enable|bool

- name: Check if Quay configuration exists
  stat:
    path: "{{ quay_config_dir }}/config.yaml"
  register: quay_config_stat_result

- name: Configure BitTorrent Pepper Value
  set_fact:
    bittorrent_filename_pepper: "{{ 'hostname' | to_uuid | upper }}"

- name: Setup initial quay configuration file
  template:
    src: config.yaml.j2
    dest: "{{ quay_config_dir }}/config.yaml"
    owner: root
    group: root
    mode: g+rw
  notify: Restart quay service
  when: not quay_config_stat_result.stat.exists

- name: Include firewall tasks
  include_tasks: firewall.yml

- name: Setup Initial User and Configuration
  include_tasks: complete_setup.yml
  when: not quay_config_stat_result.stat.exists and quay_superuser_username is defined and quay_superuser_username|trim != "" and quay_superuser_password is defined and quay_superuser_password|trim != "" and quay_superuser_email is defined and quay_superuser_email|trim != ""

- name: Flush Handlers (Quay)
  meta: flush_handlers
