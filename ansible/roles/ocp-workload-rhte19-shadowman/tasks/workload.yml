---
# Kafka
- name: Create Project  
  shell: oc new-project {{ocp_project}}

- name: Create Cluster Operator Role
  shell: oc adm policy add-cluster-role-to-user strimzi-cluster-operator-namespaced --serviceaccount strimzi-cluster-operator -n {{ocp_project}}

- name: Create Entity Operator Role
  shell: oc adm policy add-cluster-role-to-user strimzi-entity-operator --serviceaccount strimzi-cluster-operator -n {{ocp_project}}

- name: Create Topic Operator Role
  shell: oc adm policy add-cluster-role-to-user strimzi-topic-operator --serviceaccount strimzi-cluster-operator -n {{ocp_project}}

- name: Install Cluster Operator
  shell: oc apply -f https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.14.0/strimzi-cluster-operator-0.14.0.yaml -n {{ocp_project}}

- name: Create Kafka Cluster
  shell: oc apply -f https://raw.githubusercontent.com/roller1187/kafka-workshop/master/setup/my-cluster.yaml -n {{ocp_project}}

- name: Make Temp Directory
  file:
      path: /tmp/certs/
      state: directory

- name: Extract Secret
  shell: oc extract -n {{ocp_project}} secret/my-cluster-cluster-ca-cert --keys=ca.crt --to=- > /tmp/certs/ca.crt
  register: result
  until: result.rc == 0
  retries: 5
  delay: 10

# Directive Producer
- name: Create ConfigMap for Kafka
  shell: oc -n {{ocp_project}} create configmap kafka-cert --from-file=/tmp/certs/ca.crt -n {{ocp_project}}

- name: Get Kafka Route
  shell: oc -n {{ocp_project}} get route/my-cluster-kafka-bootstrap -o jsonpath='{.spec.host}'
  register: kafka_url 
  until: kafka_url.rc == 0
  retries: 5
  delay: 10

- name: Create Directive Producer Project
  shell: oc -n {{ocp_project}} new-app java:8~https://github.com/andykrohg/directive-producer.git -e KAFKA_BROKERS={{kafka_url.stdout}}:443

- name: Add ConfigMap to Producer
  shell: oc -n {{ocp_project}} set volume dc/directive-producer --add --type=configmap --configmap-name=kafka-cert --mount-path=/tmp/certs

- name: Expose Producer Route
  shell: oc -n {{ocp_project}} create route edge directive-producer --service directive-producer

# Slack Producer
- name: Deploy Slack Producer
  shell: |
        oc -n {{ocp_project}} new-app nodejs:10~https://github.com/tonykhbo/slack2node.git \
        --name=slack-producer --env SLACK_TOKEN=xoxp-3275597612-742553086596-760321623681-52ab6b7bef8ba4cba5739b51c4821299 \
        --env RED_CHANNEL_ID=CNSRA1WQM --env WHITE_CHANNEL_ID=CNE2Q20G2

# Landing Page
- name: Create Landing Page application
  shell: oc new-app -n {{ocp_project}} nodejs:10~https://github.com/tonykhbo/demojam.git --name=landing-page

- name: Get Producer URL
  shell: oc get route/directive-producer -n {{ocp_project}} -o jsonpath='{.spec.host}'
  register: remote_url

- name: Create Remote Config Map
  shell: oc -n {{ocp_project}} create configmap remote-link --from-literal=remote.txt=https://{{remote_url.stdout}}

- name: Add ConfigMap to Landing Page
  shell: oc -n {{ocp_project}} set volume dc/landing-page --add --type=configmap --configmap-name=remote-link --mount-path=/opt/app-root/src/public/config

- name: Expose Landing Page
  shell: oc -n {{ocp_project}} expose svc/landing-page

# DemoJam Zombie App
- name: Create proxy.conf
  shell: echo -e RewriteRule ^/camel/rest/gameover/\(.*\) http://directive-producer:8080/camel/rest/gameOver/\$1 [P]\\nProxyPass \"/camel/rest/gameover/\" \"http://directive-producer:8080/camel/rest/gameOver/\" nocanon\\nProxyPassReverse \"/camel/rest/gameover/\"  \"http://directive-producer:8080/camel/rest/gameOver/\"\\nProxyRequests     Off\\nAllowEncodedSlashes NoDecode > ./proxy.conf

- name: Create Httpd ConfigMap 
  shell: oc create -n {{ocp_project}} configmap producer-url --from-file=./proxy.conf

- name: Get Landing Page Route
  shell: oc -n {{ocp_project}} get route/landing-page -o jsonpath='{.spec.host}'
  register: join_link

- name: Create Join Link ConfigMap
  shell: oc -n {{ocp_project}} create configmap join-link --from-literal=link.txt=http://{{join_link.stdout}}

- name: Create Application demojam-zombie
  shell: oc new-app -n {{ocp_project}} httpd:2.4~https://github.com/andykrohg/demojam-zombie.git

- name: Mount Httpd ConfigMap into demojam-zombie
  shell: oc -n {{ocp_project}} set volume dc/demojam-zombie --add --type=configmap --configmap-name=producer-url --mount-path=/opt/app-root/etc/httpd.d

- name: Mount Join Link ConfigMap into demojam-zombie
  shell: oc -n {{ocp_project}} set volume dc/demojam-zombie --add --type=configmap --configmap-name=join-link --mount-path=/opt/app-root/src/config

- name: Expose demojam-zombie
  shell: oc -n {{ocp_project}} expose svc/demojam-zombie

# Data Grid
- name: Load Data Grid Template
  shell: |
        oc create -n {{ocp_project}} -f \
        https://raw.githubusercontent.com/jboss-container-images/jboss-datagrid-7-openshift-image/7.3-v1.2/services/datagrid-service-template.yaml

- name: Create datagrid-service from template
  shell: oc new-app -n {{ocp_project}} datagrid-service -p APPLICATION_USER=datagrid -p APPLICATION_PASSWORD=hunter2

- name: Create datagrid-service hotrod route
  shell: oc create -n {{ocp_project}} route passthrough datagrid-service-hotrod --port=hotrod --service datagrid-service

- name: Expose datagrid-service on http
  shell: oc -n {{ocp_project}} expose svc/datagrid-service

- name: Expose datagrid-service ping
  shell: oc -n {{ocp_project}} expose svc/datagrid-service-ping




- name: workload Tasks Complete
  debug:
    msg: workload Tasks Complete
