---
# Implement your Workload deployment tasks here

- debug:
    msg: "Deploying ML Workflows workshop materials to preexisting project {{ t_project_name }}"

- name: "Make sure project {{ t_project_name }} is there"
  k8s:
    state: present
    name: "{{ t_project_name }}"
    kind: Project
    api_version: project.openshift.io/v1

- name: Create the project resources in {{ t_project_name }}
  k8s:
    state: present
    namespace: "{{ t_project_name }}"
    definition: "{{ lookup('template', item) }}"
  loop:
    - custom-notebook-imagestream.yaml.j2
    - pipeline-s2i-imagestream.yaml.j2
    - pipeline-imagestream.yaml.j2
    - pipeline-buildconfig.yaml.j2
    - pipeline-deploymentconfig.yaml.j2
    - pipeline-service.yaml.j2
  when: use_openshift_build

- name: Create OpenShift Pipeline in {{ t_project_name }}
  k8s:
    state: present
    namespace: "{{ t_project_name }}"
    definition: "{{ lookup('template', item) }}"
  loop:
    - pipeline-resource-source.yaml.j2
    - pipeline-resource-image.yaml.j2
    - pipeline-task-definition.yaml.j2
    - pipeline-definition.yaml.j2
  when: use_openshift_pipelines
  vars:
    namespace: "{{ t_project_name }}"

- name: Wait for jupyterhub DeploymentConfig
  k8s_info:
    api_version: apps.openshift.io/v1
    kind: DeploymentConfig
    namespace: "{{ t_project_name }}"
    name: jupyterhub
  register: r_jupyterhub_k8s_info
  retries: 10
  delay: 5
  until: r_jupyterhub_k8s_info.resources | length > 0

- name: Stop Jupyterhub
  k8s:
    api_version: apps.openshift.io/v1
    kind: DeploymentConfig
    namespace: "{{ t_project_name }}"
    name: jupyterhub
    merge_type: merge
    definition:
      spec:
        replicas: 0

- name: Restart Jupyterhub
  k8s:
    api_version: apps.openshift.io/v1
    kind: DeploymentConfig
    namespace: "{{ t_project_name }}"
    name: jupyterhub
    merge_type: merge
    definition:
      spec:
        replicas: 1

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
