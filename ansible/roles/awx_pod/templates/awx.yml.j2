apiVersion: v1
kind: Pod
metadata:
  labels:
    app: {{ awx_pod_label }}
  name: {{ awx_pod_name }}
spec:
  #
  # define exported volumes for permanent data
  #
  volumes:
  - name: awx-data-volume
    hostPath:
      path: {{ awx_podman_dir }}/data
      type: Directory
  - name: db-volume
    hostPath:
      path: {{ awx_podman_dir }}/db
      type: Directory
  - name: redis-volume
    hostPath:
      path: {{ awx_podman_dir }}/redis-socket
      type: Directory
{% if ca_trust_file is defined %}
  - name: ca_trust_file
    hostPath:
      path: "{{ awx_podman_dir }}/awxweb_ca.pem"
      type: File
{% endif %}
  - name: awx-secret
    hostPath:
      path: {{ awx_podman_dir }}/SECRET_FILE
      type: File
  - name: redis-config
    hostPath:
      path: {{ awx_podman_dir }}/redis.conf
      type: File
  - name: tower-settings-py
    hostPath:
      path: {{ awx_podman_dir }}/settings.py
      type: File
  - name: nginx-config
    hostPath:
      path: {{ awx_podman_dir }}/nginx.conf
      type: File
  - name: environment-sh
    hostPath:
      path: {{ awx_podman_dir }}/environment.sh
      type: File
  - name: credentials-py
    hostPath:
      path: {{ awx_podman_dir }}/credentials.py
      type: File
{% if ssl_certificate is defined %}
  - name: ssl_certificate_cert
    hostPath:
      path: {{ awx_podman_dir }}/awxweb.pem
      type: File
  - name: ssl_certificate_key
    hostPath:
      path: {{ awx_podman_dir }}/awxweb.key
      type: File
{% endif %}
  containers:
  #
  # postgres container
  #
  - command:
    - run-postgresql
    env:
    - name: POSTGRESQL_USER
      value: {{ pg_username }}
    - name: POSTGRESQL_DATABASE
      value: {{ pg_database }}
    - name: PGDATA
      value: /var/lib/pgsql/data
    - name: POSTGRESQL_PASSWORD
      value: {{ pg_password }}
{% if awx_postgres_update %}
    - name: POSTGRESQL_UPGRADE
      value: copy
{% endif %}
    image: {{ awx_postgres_image }}
    name: {{ awx_pod_name }}_postgres
    volumeMounts:
    - mountPath: /var/lib/pgsql/data:z
      name: db-volume
  #
  # memcached container
  #
  - command:
    - docker-entrypoint.sh
    - memcached
    env:
    image: {{ awx_memcached_image }}
    name: {{ awx_pod_name }}_memcached
  #
  # awx-web container
  #
  - command:
    - /bin/sh
    - -c
    - /usr/bin/launch_awx.sh
    env:
    - name: AWX_ADMIN_USER
      value: {{ admin_user }}
    - name: AWX_ADMIN_PASSWORD
      value: {{ admin_password }}
    - name: HOSTNAME
      value: {{ awx_pod_name }}
    - name: DATABASE_NAME
      value: {{ pg_database }}
    - name: DATABASE_USER
      value: {{ pg_username }}
    - name: DATABASE_PASSWORD
      value: {{ pg_password }}
    - name: DATABASE_PORT
      value: {{ pg_port }}
    - name: DATABASE_HOST
      value: {{ pg_hostname }}
    - name: MEMCACHED_HOST
      value: {{ memcached_hostname }}
    - name: MEMCACHED_PORT
      value: {{ memcached_port }}
    image: {{ awx_awxweb_image }}
    name: {{ awx_pod_name }}_awxweb
    workingDir: /var/lib/awx
    volumeMounts:
    - mountPath: /var/lib/awx/projects:z
      name: awx-data-volume
    - mountPath: /var/run/redis:z
      name: redis-volume
{% if ca_trust_file is defined %}
    - mountPath: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:z
      name: ca_trust_file
      readOnly: true
{% endif %}
    - mountPath: /etc/tower/SECRET_KEY:z
      name: awx-secret
      readOnly: true
    - mountPath: /etc/tower/settings.py:z
      name: tower-settings-py
      readOnly: true
    - mountPath: /etc/nginx/nginx.conf:z
      name: nginx-config
      readOnly: true
    - mountPath: /etc/tower/conf.d/environment.sh:z
      name: environment-sh
      readOnly: true
    - mountPath: /etc/tower/conf.d/credentials.py:z
      name: credentials-py
      readOnly: true
{% if ssl_certificate is defined %}
    - mountPath: /etc/nginx/awxweb.pem:z
      name: ssl_certificate_cert
      readOnly: true
    - mountPath: /etc/nginx/awxweb.key:z
      name: ssl_certificate_key
      readOnly: true
{% endif %}
    ports:
      - containerPort: 8052
        hostPort: {{ awx_host_port }}
        protocol: TCP
{% if ssl_certificate is defined %}
      - containerPort: 8053
        hostPort: {{ awx_host_ssl_port }}
        protocol: TCP
{% endif %}
  #
  # awx-task container
  #
  - command:
    - /bin/sh
    - -c
    - /usr/bin/launch_awx_task.sh
    env:
    - name: AWX_ADMIN_USER
      value: {{ admin_user }}
    - name: AWX_ADMIN_PASSWORD
      value: {{ admin_password }}
    - name: HOSTNAME
      value: {{ awx_pod_name }}
    - name: DATABASE_NAME
      value: {{ pg_database }}
    - name: DATABASE_USER
      value: {{ pg_username }}
    - name: DATABASE_PASSWORD
      value: {{ pg_password }}
    - name: DATABASE_PORT
      value: {{ pg_port }}
    - name: DATABASE_HOST
      value: {{ pg_hostname }}
    - name: MEMCACHED_HOST
      value: {{ memcached_hostname }}
    - name: MEMCACHED_PORT
      value: {{ memcached_port }}
    image: {{ awx_awxtask_image }}
    name: {{ awx_pod_name }}_awxtask
    workingDir: /var/lib/awx
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/awx/projects:z
      name: awx-data-volume
    - mountPath: /var/run/redis:z
      name: redis-volume
{% if ca_trust_file is defined %}
    - mountPath: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:z
      name: ca_trust_file
      readOnly: true
{% endif %}
    - mountPath: /etc/tower/SECRET_KEY:z
      name: awx-secret
      readOnly: true
    - mountPath: /etc/tower/settings.py:z
      name: tower-settings-py
      readOnly: true
    - mountPath: /etc/nginx/nginx.conf:z
      name: nginx-config
      readOnly: true
    - mountPath: /etc/tower/conf.d/environment.sh:z
      name: environment-sh
      readOnly: true
    - mountPath: /etc/tower/conf.d/credentials.py:z
      name: credentials-py
      readOnly: true
{% if ssl_certificate is defined %}
    - mountPath: /etc/nginx/awxweb.pem:z
      name: ssl_certificate_cert
      readOnly: true
    - mountPath: /etc/nginx/awxweb.key:z
      name: ssl_certificate_key
      readOnly: true
{% endif %}
  #
  # redis container
  #
  - command:
    - redis-server
    - /usr/local/etc/redis/redis.conf
    workingDir: /data
    securityContext:
      allowPrivilegeEscalation: true
      capabilities: {}
      privileged: false
      readOnlyRootFilesystem: false
    volumeMounts:
    - mountPath: /var/run/redis:z
      name: redis-volume
    - mountPath: /usr/local/etc/redis/redis.conf:z
      name: redis-config
    image: {{ awx_redis_image }}
    name: {{ awx_pod_name }}_redis
