---
- name: "{{ ceph_workload_title }} Ceph tools and filesystem"
  k8s:
    state: "{{ ceph_workload_state }}"
    definition: "{{ lookup('template', item) }}"
  loop:
    - "toolbox.yaml.j2"
    - "filesystem.yaml.j2"
  tags:
  - ceph_post_dep

- name: Getting secret values for storage class [1]
  shell: "pod=$(oc get pod -n rook-ceph -l app=rook-ceph-operator  -o jsonpath='{.items[0].metadata.name}'); oc exec -ti -n rook-ceph ${pod} -- bash -c 'ceph auth get-key client.admin -c /var/lib/rook/rook-ceph/rook-ceph.config | base64'"
  register: cephfs_admin_key
  until: cephfs_admin_key.stdout != ""
  retries: 15
  delay: 3
  when: not ceph_workload_destroy | bool

- name: Getting secret values for storage class [2]
  shell: "pod=$(oc get pod -n rook-ceph -l app=rook-ceph-operator  -o jsonpath='{.items[0].metadata.name}'); oc exec -ti -n rook-ceph ${pod} -- bash -c 'echo -n admin|base64'"
  register: cephfs_admin_id
  until: cephfs_admin_id.stdout != ""
  retries: 15
  delay: 3
  when: not ceph_workload_destroy | bool

- set_fact:
    ceph_cephfs_admin_id: "{{ cephfs_admin_id.stdout }}"
    ceph_cephfs_admin_key: "{{ cephfs_admin_key.stdout }}"
    ceph_rbd_admin_id: "{{ cephfs_admin_id.stdout }}"
    ceph_rbd_admin_key: "{{ cephfs_admin_key.stdout }}"
  when: not ceph_workload_destroy | bool

- name: "{{ ceph_workload_title }} Ceph storage classes"
  k8s:
    state: "{{ ceph_workload_state }}"
    definition: "{{ lookup('template', item) }}"
  loop:
    - "cephfs.yaml.j2"
    - "rbd.yaml.j2"
  tags:
  - ceph_post_dep
  - ceph_sc_dep

- synchronize:
    src: "{{ role_path }}/files/cleanup.sh"
    dest: /tmp/cleanup.sh
  when: ceph_workload_destroy | bool

- name: Cleaning up leftover directories
  shell: "/bin/bash /tmp/cleanup.sh"
  ignore_errors: yes
  when: ceph_workload_destroy | bool

- name: Removing cleanup script
  file:
    path: /tmp/cleanup.sh
    state: absent
  when: ceph_workload_destroy | bool