---

- name: Get me instance info
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  os_server_info:
  register: os_instances

- name: Create server_info with set_fact
  set_fact:
    server_info:
      "{{ server_info| d([]) +
        [ {
          'name': instance.name,
          'volumes': instance.volumes,
          'vm_state':  instance.vm_state
        } ]
      }}"
  loop: "{{ os_instances.openstack_servers }}"
  loop_control:
    loop_var: instance

# Snapshot Tasks
- name: Create snapshot
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    openstack volume snapshot create
    --volume "{{ server.1.id }}" --force -f json
    {{ server.0.name }}-snapshot-{{ loop_index }}
  register: server_snapshots
  when: server.0.name in servers
  loop: "{{ server_info | subelements('volumes') }}"
  loop_control:
    loop_var: server
    index_var: loop_index

- name: List of new snapshots
  set_fact:
    snapshot_list: "{{ snapshot_list | d([]) + [ item.stdout | from_json | json_query(jsquery) ] }}"
  when: item.changed | bool
  loop: "{{ server_snapshots.results }}"
  vars:
    jsquery: "{Name: name, Id: id}"

- name: Check snapshot status
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    openstack volume snapshot show {{ snapshot.Id }} -f json
  register: snapshot_status
  loop: "{{ snapshot_list }}"
  loop_control:
    loop_var: snapshot
  until: snapshot_status.stdout | from_json | json_query(jsquery) == "available"
  vars:
    jsquery: "status"
  retries: 30
  delay: 10

- name: Print new snapshot list
  debug:
    var: snapshot_list
    verbosity: 1

# Volume Tasks
- name: Create Volume from snapshot
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    openstack volume create
    --snapshot  {{ snapshot.Id }} {{ snapshot.Name | regex_replace("-snapshot-", "-volume-") }}
    -f json
  register: server_volumes
  loop: "{{ snapshot_list }}"
  loop_control:
    loop_var: snapshot

- name: List of new volumes
  set_fact:
    volume_list: "{{ volume_list | d([]) + [ item.stdout | from_json | json_query(jsquery) ] }}"
  loop: "{{ server_volumes.results }}"
  vars:
    jsquery: "{Name: name, Id: id}"

- name: Check volume status
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    openstack volume show {{ volume.Id }} -f json
  register: volume_status
  loop: "{{ volume_list }}"
  loop_control:
    loop_var: volume
  until: volume_status.stdout | from_json | json_query(jsquery) == "available"
  vars:
    jsquery: "status"
  retries: 30
  delay: 10

- name: Print new volumes list
  debug:
    var: volume_list
    verbosity: 1

# Image tasks
- name: Create image from volume
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    cinder upload-to-image
    {{ volume.Id }}
    "{{ image_prefix | d('0dev') | upper }}-{{ volume.Name | regex_replace('-volume-', '-image-') }}"
    --visibility shared
  register: server_images
  loop: "{{ volume_list }}"
  loop_control:
    loop_var: volume

- name: List of new images
  set_fact:
    image_list: "{{ image_list | d([]) + [ { 'Name': item.cmd.3, 'Project': os_project_name }] }}"
  loop: "{{ server_images.results }}"

- name: Print new images list
  debug:
    var: image_list
    verbosity: 1

- name: Check image status
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    openstack volume show {{ volume.Id }} -f json
  register: volume_status
  loop: "{{ volume_list }}"
  loop_control:
    loop_var: volume
  until: volume_status.stdout | from_json | json_query(jsquery) == "available"
  vars:
    jsquery: "status"
  retries: 300
  delay: 30
  async: 30

# Delete volume and snapshots
- name: Delete volume from project
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    openstack volume delete  {{ volume.Id }} --purge
  loop: "{{ volume_list }}"
  loop_control:
    loop_var: volume

- name: Delete snapshot from project
  environment:
    OS_AUTH_URL: "{{ os_auth_url }}"
    OS_USERNAME: "{{ os_username }}"
    OS_PASSWORD: "{{ os_password }}"
    OS_PROJECT_ID: "{{ os_project_id }}"
    OS_PROJECT_NAME: "{{ os_project_name }}"
    OS_USER_DOMAIN_NAME: "{{ os_user_domain_name }}"
  command: >-
    openstack volume snapshot delete  {{ snapshot.Id }}
  loop: "{{ snapshot_list }}"
  loop_control:
    loop_var: snapshot

- name: Display new image name
  debug:
    var: image_list
