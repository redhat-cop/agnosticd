apiVersion: v1
kind: Template
labels:
  template: postgresql-database-seed
metadata:
  annotations:
    description: Seeds a PostgreSQL Database
    iconClass: icon-postgresql
    tags: postgresql
  name: postgresql-database-seed
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${SEED_CONFIGMAP}
  data:
    postgresql-seed.sql: |-
      CREATE SCHEMA USECASE;
      CREATE TABLE USECASE.T_ACCOUNT (
          id  SERIAL PRIMARY KEY,
          CLIENT_ID integer,
          SALES_CONTACT VARCHAR(30),
          COMPANY_NAME VARCHAR(50),
          COMPANY_GEO CHAR(20) ,
          COMPANY_ACTIVE BOOLEAN,
          CONTACT_FIRST_NAME VARCHAR(35),
          CONTACT_LAST_NAME VARCHAR(35),
          CONTACT_ADDRESS VARCHAR(255),
          CONTACT_CITY VARCHAR(40),
          CONTACT_STATE VARCHAR(40),
          CONTACT_ZIP VARCHAR(10),
          CONTACT_EMAIL VARCHAR(60),
          CONTACT_PHONE VARCHAR(35),
          CREATION_DATE TIMESTAMP,
          CREATION_USER VARCHAR(255)
      );
      CREATE TABLE USECASE.T_ERROR (
          ID SERIAL PRIMARY KEY,
          ERROR_CODE VARCHAR(4) NOT NULL,
          ERROR_MESSAGE VARCHAR(255),
          MESSAGE VARCHAR(512),
          STATUS CHAR(6)
      );
      CREATE TABLE T_ACCOUNT (
          id  SERIAL PRIMARY KEY,
          CLIENT_ID integer,
          SALES_CONTACT VARCHAR(30),
          COMPANY_NAME VARCHAR(50),
          COMPANY_GEO CHAR(20) ,
          COMPANY_ACTIVE BOOLEAN,
          CONTACT_FIRST_NAME VARCHAR(35),
          CONTACT_LAST_NAME VARCHAR(35),
          CONTACT_ADDRESS VARCHAR(255),
          CONTACT_CITY VARCHAR(40),
          CONTACT_STATE VARCHAR(40),
          CONTACT_ZIP VARCHAR(10),
          CONTACT_EMAIL VARCHAR(60),
          CONTACT_PHONE VARCHAR(35),
          CREATION_DATE TIMESTAMP,
          CREATION_USER VARCHAR(255)
      );
      CREATE TABLE T_ERROR (
          ID SERIAL PRIMARY KEY,
          ERROR_CODE VARCHAR(4) NOT NULL,
          ERROR_MESSAGE VARCHAR(255),
          MESSAGE VARCHAR(512),
          STATUS CHAR(6)
      );
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: ${APPLICATION_NAME}-${RANDOM_VALUE}
  spec:
    parallelism: 1
    completions: 1
    template:
      metadata:
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - name: ${APPLICATION_NAME}
          image: ${IMAGE}
          command:
            - "/bin/bash"
            - "-c"
            - >
              createdb -h $POSTGRESQL_SERVICE -p 5432 -U $POSTGRESQL_USER $POSTGRESQL_DATABASE && psql -h $POSTGRESQL_SERVICE -p 5432 -d $POSTGRESQL_DATABASE -U $POSTGRESQL_USER -f /etc/postgresql-seed/postgresql-seed.sql
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_SERVICE
              value: ${DATABASE_SERVICE_NAME}
          volumeMounts:
            - name: seed-volume
              mountPath: /etc/postgresql-seed
        initContainers:
        - name: ${APPLICATION_NAME}-init
          image: ${IMAGE}
          command: ['/bin/bash',  '-c', 'until pg_isready -h $POSTGRESQL_SERVICE -p 5432 -d $POSTGRESQL_DATABASE -U $POSTGRESQL_USER; do echo Waiting for PostgreSQL Service; sleep 2; done;']
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: ${DATABASE_SERVICE_NAME}
            - name: POSTGRESQL_SERVICE
              value: ${DATABASE_SERVICE_NAME}
        restartPolicy: OnFailure
        volumes:
          - name: seed-volume
            configMap:
              name: "${SEED_CONFIGMAP}"
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: postgresql-database-seed
- description: Image name for the job
  name: IMAGE
  required: true
  value: registry.redhat.io/rhscl/postgresql-10-rhel7
- description: Random value for the job.
  displayName: Random Value
  from: '[a-z0-9]{5}'
  generate: expression
  name: RANDOM_VALUE
  required: true
- description: PostgreSQL Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- description: ConfigMap Seed
  name: SEED_CONFIGMAP
  required: true
  value: postgresql-seed