---

- block: # become: True

  #  - name: "install EPEL GPG key - if specified"
  #    rpm_key:
  #      key: "{{ ansible_tower_epel_gpg_download_url }}"
  #      state: present
  #    when:
  #      - ansible_tower_epel_gpg_download_url is defined
  #      - ansible_tower_epel_gpg_download_url|trim != ''
  #      - ansible_tower_epel_disable_gpg_check|lower == 'no'

  #  - name: "install epel-release"
  #    dnf:
  #      name: "{{ ansible_tower_epel_download_url }}"
  #      state: present
  #      disable_gpg_check: "{{ ansible_tower_epel_disable_gpg_check | default('no') }}"

  #   - name: "Download & Unpack Ansible Automation Platform 2 installer"
  #     unarchive:
  #       src: "{{ ansible_tower_download_url }}"
  #       dest: "."
  #       list_files: true
  #       remote_src: true
  #       exclude: "inventory"
  #     register: ansible_tower_download_fact

    - name: "Download Ansible Automation Platform 2 installer"
      include_role:
        name: aap_download

    - name: Unpack AAP2 installer
      unarchive:
        src: /tmp/aap.tar.gz
        dest: /root/aap2
      tags:
      - install-aap2

    - name: "Set installation facts"
      set_fact:
        # The first file listed in the output of the unarchiving from downloading tower
        # is the directory so set that as ansible_tower_dir
        ansible_tower_dir: "{{ ansible_tower_download_fact.files.0 }}"
        # Need to check if version 3.7 or later as we use different inventory values
        ansible_tower_37_later: "{{ (ansible_tower_version is version(3.7, '>=')) or (ansible_tower_version == 'latest') }}"

    - name: "Set up the AAP2 inventory"
      template:
        src: inventory.j2
   #     dest: "{{ ansible_tower_dir }}/inventory"
        dest: /root/aap2/inventory
      register: inventory

    - name: "run AAP2 installer"
      shell: ./setup.sh
      args:
        chdir: "{{ ansible_tower_dir }}"

  #  - name: "Download and extract 'oc' client to /bin"
  #    unarchive:
  #      src: "{{ ansible_tower_oc_download_url }}"
  #      dest: /bin
  #      remote_src: True
  #    when:
  #      - ansible_tower_oc_download_url|trim != ''

  #  - name: "Download and extract 'helm' client to a temporary location"
  #    unarchive:
  #      src: "{{ ansible_tower_helm_download_url }}"
  #      dest: /tmp
  #      remote_src: True
  #      list_files: True
  #    register: helm_extract
  #    when:
  #      - ansible_tower_helm_download_url|trim != ''

  #  - name: "Move the 'helm' binary to /bin"
  #    copy:
  #      src: "/tmp/{{ item }}"
  #      dest: /bin/
  #      follow: yes
  #      mode: '755'
  #      remote_src: True
  #    with_items: "{{ helm_extract.files | map('regex_search','.*helm') | select('string') | list }}"
  #    when:
  #      - ansible_tower_helm_download_url|trim != ''
  #      - helm_extract.files

  become: True