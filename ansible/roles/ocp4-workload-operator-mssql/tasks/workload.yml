--- 
- block:
  - name: "Creating namespace"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "namespace.yaml"
    when: not operator_mssql_workload_destroy|bool

  - name: "Creating image registry credentials"
    shell: "{{ item }}"
    register: output
    failed_when: '"AlreadyExists" not in output.stderr and output.rc != 0'
    when: not operator_mssql_workload_destroy|bool
    loop:
      - "oc secrets new-dockercfg sql-pull-secret --docker-server={{ mssql_private_img_registry|mandatory }} --docker-username={{ mssql_private_img_registry_user|mandatory }} --docker-password={{ mssql_private_img_registry_pass|mandatory }} --docker-email=fake@gmail.com -n openshift-operators"
      - "oc secrets new-dockercfg sql-pull-secret --docker-server={{ mssql_private_img_registry|mandatory }} --docker-username={{ mssql_private_img_registry_user|mandatory }} --docker-password={{ mssql_private_img_registry_pass|mandatory }} --docker-email=fake@gmail.com -n {{ operator_mssql_namespace }}"
      - "oc secrets add serviceaccount/default secrets/sql-pull-secret --for=pull -n {{ operator_mssql_namespace }}"

  - name: "Creating OperatorSource"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "opsrc.yaml"
    when: not operator_mssql_workload_destroy|bool

  - name: "Waiting..."
    pause:
      seconds: 60
    when: not operator_mssql_workload_destroy|bool

  - name: "Creating CatalogSourceConfig"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "opsrc-csc.yaml"
    when: not operator_mssql_workload_destroy|bool

  - name: "Waiting..."
    pause:
      seconds: 60
    when: not operator_mssql_workload_destroy|bool

  - name: "Creating Subscription"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "opsrc-subscription.yaml"
    when: not operator_mssql_workload_destroy|bool

  - name: "Waiting..."
    pause:
      seconds: 60
    when: not operator_mssql_workload_destroy|bool

  - name: "Creating MsSQL CRs"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "manifest.yaml"
    when: not operator_mssql_workload_destroy|bool

  - name: "Creating frontend app"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "app-manifest.yaml"
    when: not operator_mssql_workload_destroy|bool

  - name: "Waiting..."
    pause:
      seconds: 120
    when: not operator_mssql_workload_destroy|bool

  - name: "Init the database"
    shell: "oc exec -n {{ operator_mssql_namespace }} {{ item }} -- sh /db-init.sh"
    loop:
      - "sql-0"
      - "sql-1"
      - "sql-2"
    when: not operator_mssql_workload_destroy|bool

  - name: "Removing MsSQL CRs"
    shell: "oc delete --ignore-not-found -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "opsrc-subscription.yaml"
      - "opsrc-csc.yaml"
      - "opsrc.yaml"
      - "manifest.yaml"
      - "app-manifest.yaml"
      - "namespace.yaml"
    when: operator_mssql_workload_destroy|bool
  
  - name: "Cleaning up temp files"
    file: 
      path: "{{ tmp_dir.path }}"
      state: absent

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
