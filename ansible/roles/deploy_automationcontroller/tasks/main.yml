---

# TODO: Remove, rework after Ansible Automation Platform 2 ships
# ansible 2.10 or higher required,

- name: Remove yum/dnf installed ansible
  dnf:
    name: ansible
    state: absent

- name: Ensure yum/dnf pre-requisites in place
  package:
    name: "{{ deploy_automationcontroller_dnf_packages }}"
    state: present

- name: Install 2.11 or greater installation venv for running automation controller installer
  include_tasks: automationcontroller_installer_venv.yml

- name: Download Ansible controller installer tar.gz
  get_url:
    url: "{{ deploy_automationcontroller_installer_url }}"
    dest: /tmp/automationcontroller.tar.gz

- name: Create installer directory for Ansible controller
  file:
    path: /tmp/automationcontroller_installer
    state: directory

- name: Extract Ansible controller installer tar.gz
  unarchive:
    src: /tmp/automationcontroller.tar.gz
    dest: /tmp/automationcontroller_installer
    remote_src: true
    extra_opts:
      - '--strip-components=1'
      - '--show-stored-names'


# World's ugliest short term hack for fixing broken installer for clustering
# dest: '/etc/systemd/system/automation-controller.service'

- name: Short term hack to fix Automation controller remote_src issue
  lineinfile:
    path: /tmp/automationcontroller_installer/collections/ansible_collections/ansible/automation_platform_installer/roles/automationcontroller/tasks/tasks.yml
    insertafter: ".*src: '/lib/systemd/system/automation-controller.service'"
    state: present
    line: "    remote_src: true"

- name: Create template based inventory file for Ansible controller install
  template:
    src: automationcontroller_inventory.j2
    dest: /tmp/automationcontroller_installer/inventory

- name: Run the Automation Controller installer
  shell: "source /opt/venvs/venv_automationcontroller_install/bin/activate; ./setup.sh"
  args:
    chdir: /tmp/automationcontroller_installer
  async: 1400
  poll: 15
  tags:
    - deploy_automationcontroller_installer

- name: Wait for Ansible controller to be up
  uri:
    url: "https://{{groups['automationcontroller'][0] }}/api/v2/ping/"
    method: GET
    user: "{{ deploy_automationcontroller_admin_user }}"
    password: "{{ deploy_automationcontroller_admin_password }}"
    validate_certs: false
  register: r_automationcontroller_ping
  until:
    - r_automationcontroller_ping.json is defined
    - r_automationcontroller_ping.json.instances[0].capacity > 0
    - r_automationcontroller_ping.json.instance_groups[0].capacity > 0
  retries: 60
  delay: 10

- name: Display Ansible controller /api/v2/ping results
  debug:
    msg: '{{ r_automationcontroller_ping.json }}'

# Replaced by tower-license-injector role...
# - name: License Ansible controller via manifest block
#   block:

#     - name: Load manifest into register
#       local_action:
#         module: slurp
#         src: "{{ deploy_automationcontroller_manifest_path }}"
#       register: r_automationcontroller_manifest_file
#       become: false

#     - name: Insert Ansible controller License via manifest
#       uri:
#         url: "https://{{groups['automationcontroller'][0] }}/api/v2/config/"
#         method: POST
#         user: "{{ deploy_automationcontroller_admin_user | default('admin') }}"
#         password: "{{ deploy_automationcontroller_admin_password }}"
#         body: '{ "eula_accepted": true, "manifest": "{{ r_automationcontroller_manifest_file.content }}" }'
#         body_format: json
#         validate_certs: false
#         force_basic_auth: true

...
