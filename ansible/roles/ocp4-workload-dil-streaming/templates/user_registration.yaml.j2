---
apiVersion: v1
items:
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: redis
    labels:
      app.kubernetes.io/part-of: registration
      app.openshift.io/runtime: redis
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: database
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: redis
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: 
        labels:
          name: redis
      spec:
        containers:
        - env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: redis
          image: registry.redhat.io/rhscl/redis-5-rhel7:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - "redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: "/var/lib/redis/data"
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis
    test: false
    triggers:
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: users
    annotations:
      app.openshift.io/connects-to: redis
    labels:
      app.kubernetes.io/part-of: registration
      app.openshift.io/runtime: nodejs
      app.kubernetes.io/name: app
      app.kubernetes.io/component: server
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: users
      deploymentconfig: users
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: 
        labels:
          app: users
          deploymentconfig: users
      spec:
        containers:
        - env:
          - name: LAB_TITLE
            value: '{{ lab_title }}'
          - name: LAB_USER_PREFIX
            value: '{{ username_prefix }}'
          - name: LAB_USER_ACCESS_TOKEN
            value: '{{ user_access_token }}'
          - name: LAB_USER_COUNT
            value: '{{ num_users | int + 5 }}'
          - name: LAB_USER_PASSWORD
            value: '{{ workshop_openshift_user_password }}'
          - name: LAB_REDIS_HOST
            value: redis
          - name: LAB_MODULE_URLS
            value: 'https://tutorial-web-app-webapp.{{ route_subdomain }};Instructions'
          - name: LAB_REDIS_PASS
            valueFrom:
              secretKeyRef:
                key: database-password
                name: redis
          image: quay.io/evanshortiss/username-distribution:latest
          imagePullPolicy: IfNotPresent
          name: users
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    name: redis
  spec:
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      name: redis
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: users
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: users
      deploymentconfig: users
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: users
  spec:
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: users
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  data:
    database-password: VXI4dXlFS1V3WWs1RTdncA==
  kind: Secret
  metadata:
    name: redis
  type: Opaque
- apiVersion: v1
  data:
    DATABASE_SERVICE_NAME: cmVkaXM=
    MEMORY_LIMIT: NTEyTWk=
    NAMESPACE: b3BlbnNoaWZ0
    REDIS_VERSION: My4y
    VOLUME_CAPACITY: MUdp
  kind: Secret
  metadata:
    name: redis-persistent-parameters-pjqwp
  type: Opaque
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: redis
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
kind: List
metadata:
  resourceVersion: ''
  selfLink: ''
