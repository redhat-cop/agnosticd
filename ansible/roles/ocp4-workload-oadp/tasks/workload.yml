---
- name: Set oadp_state to absent if destroying workload
  set_fact:
    oadp_state: "absent"
  when: oadp_destroy is defined and oadp_destroy | bool

- name: "Set {{ oadp_namespace }} namespace state to {{ oadp_state }}"
  k8s:
    name: "{{ oadp_namespace }}"
    kind: Namespace
    state: "{{ oadp_state }}"

- name: "Set  openshift-operators namespace"
  k8s:
    name: openshift-operators
    kind: Namespace
    state: "{{ oadp_state }}"

- name: "Set OADP OperatorGroup state to {{ oadp_state }}"
  k8s:
    state: "{{ oadp_state }}"
    definition: "{{ lookup('template', 'oadp-operator-operatorgroup.yml.j2' ) }}"

- name: "Set OADP Operator Subscription state to {{ oadp_state }}"
  k8s:
    state: "{{ oadp_state }}"
    definition: "{{ lookup('template', 'oadp-operator-subscription.yml.j2' ) }}"

- name: "Set volSync OperatorGroup state to {{ oadp_state }}"
  k8s:
    state: "{{ oadp_state }}"
    definition: "{{ lookup('template', 'volSync-operatorgroup.yml.j2' ) }}"

- name: "Set volSync Operator Subscription state to {{ oadp_state }}"
  k8s:
    state: "{{ oadp_state }}"
    definition: "{{ lookup('template', 'volSync-subscription.yml.j2' ) }}"

# Don't need this when using auto approval - using oadp_operator variables here
- name: Approving volSync one time a subscription with manual installplan approval
  when: oadp_operator_subscription_installplanapproval == 'Manual' and oadp_state == 'present'
  block:
  - name: "Waiting for volsync install plan to be created"
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      namespace: openshift-operators
    register: volsync_install_plans
    retries: 20
    delay: 10
    until: volsync_install_plans.get('resources', []) | length > 0

  - name: "Approve volsync install plan"
    k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: InstallPlan
        metadata:
          name: "{{ volsync_install_plans.resources[0].metadata.name }}"
          namespace: openshift-operators
        spec:
          approval: Manual
          approved: true
    register: result
    retries: 20
    until: result is not failed

# Don't need this when using auto approval
- name: Approving one time a subscription with manual installplan approval
  when: oadp_operator_subscription_installplanapproval == 'Manual' and oadp_state == 'present'
  block:
  - name: "Waiting for install plan to be created"
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      namespace: "{{ oadp_namespace }}"
    register: oadp_install_plans
    retries: 20
    delay: 5
    until: oadp_install_plans.get('resources', []) | length > 0

  - name: create approved installplan definition
    set_fact:
      oadp_approved_install_plan: "{{ oadp_install_plans.get('resources', [])[0]
        | combine({'spec': {'approved': true}}, recursive=true) }}"

  - name: "Approve install plan"
    k8s:
      state: present
      definition: "{{ oadp_approved_install_plan }}"
  rescue:
  - name: "Waiting for install plan to be created"
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      namespace: "{{ oadp_namespace }}"
    register: oadp_install_plans
    retries: 20
    delay: 10
    until: oadp_install_plans.get('resources', []) | length > 0

  - name: create approved installplan definition
    set_fact:
      oadp_approved_install_plan: "{{ oadp_install_plans.get('resources', [])[0]
        | combine({'spec': {'approved': true}}, recursive=true) }}"

  - name: "Approve install plan"
    k8s:
      state: present
      definition: "{{ oadp_approved_install_plan }}"
    register: result
    retries: 20
    until: result is not failed

- name: "Wait for OADP CRDs to exist API version/v1"
  k8s_info:
    api_version: "apiextensions.k8s.io/v1"
    kind: CustomResourceDefinition
    name: "{{ item }}"
  loop: "{{ oadp_expected_crds }}"
  register: crds
  until: crds.resources | length > 0
  retries: 30
  delay: 10
  when: oadp_state == 'present'

- name: add velero CSI VSL label to ebs csi driver
  k8s:
    state: present
    definition:
      apiVersion: snapshot.storage.k8s.io/v1
      deletionPolicy: Retain
      driver: ebs.csi.aws.com
      kind: VolumeSnapshotClass
      metadata:
        name: ebs-csi-snapclass
        labels:
          velero.io/csi-volumesnapshot-class: "true"

# Discover NooBaa S3 storage and install Velero CR if enabled ocs_migstorage
- when: ocs_migstorage and oadp_state == 'present'
  block:
  - name: add velero CSI VSL label to OCS RBD
    k8s:
      state: present
      definition:
        apiVersion: snapshot.storage.k8s.io/v1
        deletionPolicy: Retain
        driver: openshift-storage.rbd.csi.ceph.com
        kind: VolumeSnapshotClass
        metadata:
          name: ocs-storagecluster-rbdplugin-snapclass
          labels:
            velero.io/csi-volumesnapshot-class: "true"

  - name: Discovering NooBaa S3 endpoint
    k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      name: s3
      namespace: "{{ ocs_namespace }}"
    register: noobaa_s3_endpoint
    retries: 10
    delay: 3
    until: noobaa_s3_endpoint.resources is defined and
           noobaa_s3_endpoint.resources[0] is defined and
           noobaa_s3_endpoint.resources[0].status.ingress is defined

  - name: Set Fact NooBaa S3 Endpoint Host
    set_fact:
      noobaa_endpoint: "{{ noobaa_s3_endpoint.resources[0].status.ingress[0].host }}"
    when: noobaa_s3_endpoint.resources[0].status.ingress[0].host is defined

  - name: Set Fact NooBaa S3 Endpoint Hostname
    set_fact:
      noobaa_endpoint: "{{ noobaa_s3_endpoint.resources[0].status.ingress[0].hostname }}"
    when: noobaa_s3_endpoint.resources[0].status.loadBalancer.ingress[0].hostname is defined

  - name: If using http then use internalDNS address for endpoint
    when: noobaa_s3_endpoint_proto == 'http'
    block:
    - name: Get NooBaa Object
      k8s_info:
        kind: NooBaa
        api_version: noobaa.io/v1alpha1
        name: noobaa
        namespace: "{{ ocs_namespace }}"
      register: noobaa_obj
    - name: set endpoint to internalDNS
      set_fact:
        noobaa_endpoint: "{{ noobaa_obj.resources[0].status.endpoints.virtualHosts[0] }}"
      when: noobaa_obj.resources[0].status.endpoints.virtualHosts[0] is defined
  - name: register noobaa s3 url
    set_fact:
      noobaa_s3_url: "{{ noobaa_s3_endpoint_proto }}://{{ noobaa_endpoint }}/"

  - name: Get MCG PV Pool secret
    k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ ocs_mcg_pv_pool_bucket_name }}"
      namespace: "{{ ocs_namespace }}"
    register: ocs_secret
    retries: 20
    delay: 3
    until: ocs_secret.resources | length > 0

  - name: Decoding noobaa secret
    set_fact:
      noobaa_s3_access_key_id: "{{ ocs_secret.resources[0].data.AWS_ACCESS_KEY_ID | b64decode }}"
      noobaa_s3_secret_access_key: "{{ ocs_secret.resources[0].data.AWS_SECRET_ACCESS_KEY | b64decode }}"

  - name: Registering noobaa cloud secret data string
    set_fact:
      cloud_credentials_data_string: |
        [default]
        aws_access_key_id={{ noobaa_s3_access_key_id }}
        aws_secret_access_key={{ noobaa_s3_secret_access_key }}

  # - name: Discovering NooBaa CA Bundle
  #   shell: "{{ item }}"
  #   loop:
  #   - >-
  #     openssl s_client -showcerts -verify 5 -connect {{ noobaa_endpoint }}:443 < /dev/null
  #     | awk '/BEGIN/,/END/{ if(/BEGIN/){a++}; out="cert"a".crt"; print >out}'
  #     && for cert in *.crt; do newname=$(openssl x509 -noout -subject -in $cert
  #     | sed -n 's/^.*CN=\(.*\)$/\1/; s/[ ,.*]/_/g; s/__/_/g; s/^_//g;p').pem;
  #     mv $cert $newname; done;
  #   - cat *.pem
  #   - rm *.pem
  #   register: noobaa_ca_bundle_raw
  #   when: noobaa_s3_endpoint_proto == 'https'
   # - set_fact:
  #     noobaa_ca_bundle: "{{ noobaa_ca_bundle_raw.results[1].stdout }}"
  #   when: noobaa_s3_endpoint_proto == 'https'

  - name: Creating cloud-credential opaque secrets
    k8s:
      state: "{{ oadp_state }}"
      definition: "{{ lookup('template', 'cloud-credentials.yml.j2') }}"

  - name: Creating dm-credential opaque secrets
    k8s:
      state: "{{ oadp_state }}"
      definition: "{{ lookup('template', 'dm-credentials.yml.j2') }}"

  - name: Creating DataProtectionApplication CR with Noobaa S3
    k8s:
      state: "{{ oadp_state }}"
      definition: "{{ lookup('template', 'dpa.yml.j2') }}"

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent | bool
