# vim: set ft=ansible
---
# Implement your Workload deployment tasks here
- set_fact:
    user_name: "user1"

- set_fact:
    project_name: "ai-spam-detection"

- name: Create the scaling RBAC
  k8s:
    state: present
    namespace: "{{ project_name }}"
    definition: "{{ item }}"
  with_items:
    - "{{ lookup('file', 'scaling_role.yaml') }}"
    - "{{ lookup('file', 'scaling_sa.yaml') }}"
    - "{{ lookup('file', 'scaling_rolebinding.yaml') }}"

- name: Create the custom notebook image
  k8s:
    state: present
    namespace: "{{ project_name }}"
    definition: "{{ item }}"
  with_items:
    - "{{ lookup('template', 'custom-notebook-imagestream.yaml.j2') }}"

- name: Create the pipeline builder image
  k8s:
    state: present
    namespace: "{{ project_name }}"
    definition: "{{ item }}"
  with_items:
    - "{{ lookup('template', 'pipeline-s2i-imagestream.yaml.j2') }}"

- name: Create the pipeline build and app
  k8s:
    state: present
    namespace: "{{ project_name }}"
    definition: "{{ item }}"
  with_items:
    - "{{ lookup('template', 'pipeline-imagestream.yaml.j2') }}"
    - "{{ lookup('template', 'pipeline-buildconfig.yaml.j2') }}"
    - "{{ lookup('template', 'pipeline-deploymentconfig.yaml.j2') }}"
    - "{{ lookup('template', 'pipeline-service.yaml.j2') }}"

- name: check for any pipeline builds
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: Build
    namespace: ai-spam-detection
    label_selectors:
      - buildconfig=pipeline
  register: pipeline_builds

- name: build the pipeline if not built
  shell: |
      oc start-build pipeline -n {{ project_name }}
  when: pipeline_builds.resources | length | int == 0

- name: check for pipeline buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: pipeline
    namespace: ai-spam-detection
  register: pipeline_buildconfig

#- name: Kick Jupyterhub
#  shell: |
#      oc scale dc/jupyterhub --replicas=0 -n {{ project_name }}
#
#- name: Nudge Jupyterhub
#  shell: |
#      oc scale dc/jupyterhub --replicas=1 -n {{ project_name }}

- name: check for spam emitter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: spam-emitter
    namespace: ai-spam-detection
  register: spam_emitter_buildconfig

- name: build the spam emitter if not built
  shell: |
      oc new-app -n {{ project_name }} centos/python-36-centos7~https://github.com/willb/spam-stream-generator -e KAFKA_BROKERS=odh-message-bus-kafka-bootstrap:9092  -e KAFKA_TOPIC=social-firehose -e RATE=300 -e SPAM_PROPORTION=.95 --name=spam-emitter
  when: spam_emitter_buildconfig.resources | length | int == 0

- name: check for spam emitter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: spam-emitter
    namespace: ai-spam-detection
  register: spam_emitter_buildconfig

- name: check for legitimate emitter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: legitimate-emitter
    namespace: ai-spam-detection
  register: legitimate_emitter_buildconfig

- name: build the legitimate emitter if not built
  shell: |
      oc new-app -n {{ project_name }} centos/python-36-centos7~https://github.com/willb/spam-stream-generator -e KAFKA_BROKERS=odh-message-bus-kafka-bootstrap:9092  -e KAFKA_TOPIC=social-firehose -e RATE=300 -e SPAM_PROPORTION=.3 --name=legitimate-emitter
  when: legitimate_emitter_buildconfig.resources | length | int == 0

- name: check for legitimate emitter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: legitimate-emitter
    namespace: ai-spam-detection
  register: legitimate_emitter_buildconfig

- name: check for legitimate flood buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: legitimate-flood
    namespace: ai-spam-detection
  register: legitimate_flood_emitter_buildconfig

- name: build the emitter for too many legitimate messages
  shell: |
      oc new-app -n {{ project_name }} centos/python-36-centos7~https://github.com/willb/spam-stream-generator -e KAFKA_BROKERS=odh-message-bus-kafka-bootstrap:9092  -e KAFKA_TOPIC=legitimate-firehose -e RATE=1000 -e SPAM_PROPORTION=.01 --name=legitimate-flood
  when: legitimate_flood_emitter_buildconfig.resources | length | int == 0

- name: check for legitimate flood buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: legitimate-flood
    namespace: ai-spam-detection
  register: legitimate_flood_emitter_buildconfig

- name: check for flood filter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: flood-filter
    namespace: ai-spam-detection
  register: flood_filter_buildconfig

- name: build the flood filter for legitimate messages
  shell: |
      oc new-app -n {{ project_name }} centos/python-36-centos7~https://github.com/willb/spam-processor -e KAFKA_BROKERS=odh-message-bus-kafka-bootstrap:9092 -e KAFKA_TOPIC=legitimate-firehose  --name=flood-filter
  when: flood_filter_buildconfig.resources | length | int == 0

- name: check for flood filter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: flood-filter
    namespace: ai-spam-detection
  register: flood_filter_buildconfig

- name: check for spam filter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: spam-filter
    namespace: ai-spam-detection
  register: spam_filter_buildconfig

- name: build the filter for spam messages
  shell: |
      oc new-app -n {{ project_name }} centos/python-36-centos7~https://github.com/willb/spam-processor -e KAFKA_BROKERS=odh-message-bus-kafka-bootstrap:9092 -e KAFKA_TOPIC=social-firehose  --name=spam-filter
  when: spam_filter_buildconfig.resources | length | int == 0

- name: check for spam filter buildconfig
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: BuildConfig
    name: spam-filter
    namespace: ai-spam-detection
  register: spam_filter_buildconfig

- name: Wait for the spam filter build to complete
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: Build
    name: "spam-filter-{{ spam_filter_buildconfig.resources[0].status.lastVersion }}"
    namespace: "ai-spam-detection"
  register: build_wait
  until:
    - build_wait.resources is defined
    - build_wait.resources[0].status is defined
    - build_wait.resources[0].status.phase is defined
    - build_wait.resources[0].status.phase == "Complete"
  delay: 30
  retries: 10

- name: Wait for the pipeline build to complete
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: Build
    name: "pipeline-{{ pipeline_buildconfig.resources[0].status.lastVersion }}"
    namespace: "ai-spam-detection"
  register: build_wait
  until:
    - build_wait.resources is defined
    - build_wait.resources[0].status is defined
    - build_wait.resources[0].status.phase is defined
    - build_wait.resources[0].status.phase == "Complete"
  delay: 30
  retries: 24

- name: Wait for the spam emitter build to complete
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: Build
    name: "spam-emitter-{{ spam_emitter_buildconfig.resources[0].status.lastVersion }}"
    namespace: "ai-spam-detection"
  register: build_wait
  until:
    - build_wait.resources is defined
    - build_wait.resources[0].status is defined
    - build_wait.resources[0].status.phase is defined
    - build_wait.resources[0].status.phase == "Complete"
  delay: 30
  retries: 10

- name: Wait for the legitimate emitter build to complete
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: Build
    name: "legitimate-emitter-{{ legitimate_emitter_buildconfig.resources[0].status.lastVersion }}"
    namespace: "ai-spam-detection"
  register: build_wait
  until:
    - build_wait.resources is defined
    - build_wait.resources[0].status is defined
    - build_wait.resources[0].status.phase is defined
    - build_wait.resources[0].status.phase == "Complete"
  delay: 30
  retries: 10

- name: Wait for the legitimate flood build to complete
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: Build
    name: "legitimate-flood-{{ legitimate_flood_emitter_buildconfig.resources[0].status.lastVersion }}"
    namespace: "ai-spam-detection"
  register: build_wait
  until:
    - build_wait.resources is defined
    - build_wait.resources[0].status is defined
    - build_wait.resources[0].status.phase is defined
    - build_wait.resources[0].status.phase == "Complete"
  delay: 30
  retries: 10

- name: Wait for the flood filter build to complete
  k8s_facts:
    api_version: build.openshift.io/v1
    kind: Build
    name: "flood-filter-{{ flood_filter_buildconfig.resources[0].status.lastVersion }}"
    namespace: "ai-spam-detection"
  register: build_wait
  until:
    - build_wait.resources is defined
    - build_wait.resources[0].status is defined
    - build_wait.resources[0].status.phase is defined
    - build_wait.resources[0].status.phase == "Complete"
  delay: 30
  retries: 10

- name: create a pod to scale the flood filter to 4 replicas in approximately 45 minutes
  shell: "oc run scaleit --image=openshift/origin-cli -n ai-spam-detection --serviceaccount=scaling-sa --restart=Never --command -- /bin/bash -c \"echo 'sleeping 45min'; /usr/bin/sleep 45m; echo 'scaling'; oc scale -n ai-spam-detection dc/flood-filter --replicas=4\""

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
