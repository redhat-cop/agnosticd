---

- name: Evaluate {{ gogs_project }} namespace if not exists 
  k8s:
    api_version: v1
    kind: Namespace
    name: '{{ gogs_project }}'
    state: present

- name: Create Gogs app
  shell: "oc new-app -f  {{ ocp4_workload_dil_agile_integration_gogs_template_url }} -p GOGS_VERSION={{ ocp4_workload_dil_agile_integration_gogs_version }} -p SKIP_TLS_VERIFY={{ ocp4_workload_dil_agile_integration_gogs_skip_tls }} -p HOSTNAME=gogs.{{ route_subdomain }} -n {{ gogs_project }}"
  register: create_gogs_app
  failed_when: create_gogs_app.stderr != '' and 'already exists' not in create_gogs_app.stderr

- name: Get required gogs postgre replicas
  shell: "oc get dc/gogs-postgresql -o jsonpath='{.status.replicas}' -n {{ gogs_project }}"
  failed_when: false
  until: gogs_postgresql_replicas.stdout | int > 0
  retries: 60
  delay: 5
  register: gogs_postgresql_replicas

- name: wait for gogs-postgresql readiness
  shell: "oc get dc/gogs-postgresql -o jsonpath='{.status.readyReplicas}' -n {{ gogs_project }}"
  until: gogs_postgresql_available_replicas.stdout == gogs_postgresql_replicas.stdout
  ignore_errors: yes
  retries: 60
  delay: 5
  register: gogs_postgresql_available_replicas
    
- name: Get required gogs replicas
  shell: "oc get dc/gogs -o jsonpath='{.status.replicas}' -n {{ gogs_project }}"
  until: gogs_replicas.stdout | int > 0
  retries: 60
  delay: 5
  failed_when: false
  register: gogs_replicas

- name: wait for gogs readiness
  shell: "oc get dc/gogs -o jsonpath='{.status.readyReplicas}' -n {{ gogs_project }}"
  until: gogs_available_replicas.stdout == gogs_replicas.stdout
  ignore_errors: yes
  retries: 60
  delay: 5
  register: gogs_available_replicas

- name: Wait until Gogs API is available
  uri: 
    url: http://gogs.{{route_subdomain}}
    method: GET
    follow_redirects: safe
    validate_certs: no
  register: wait_gogs_result
  until: wait_gogs_result is succeeded
  ignore_errors: yes
  retries: 15
  delay: 30

- name: Create Gogs admin user
  shell: "oc exec -it dc/gogs -n {{ gogs_project }} -- /opt/gogs/gogs admin create-user --name {{ ocp4_workload_dil_agile_integration_gogs_admin }} --password {{ ocp4_workload_dil_agile_integration_gogs_password }} --admin --email admin@example.com"
  register: create_gogs_admin
  retries: 15
  delay: 30
  until: create_gogs_admin is not failed

- name: Create token
  uri:
    url: 'http://gogs.{{ route_subdomain }}/api/v1/users/gogsadmin/tokens'
    method: POST
    body: 
      '{"name": "accesstoken"}'
    body_format: json
    user: '{{ ocp4_workload_dil_agile_integration_gogs_admin }}'
    password: '{{ ocp4_workload_dil_agile_integration_gogs_password }}'
    headers:
      Content-Type: "application/json"    
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
    status_code: 201
  register: create_token
  failed_when: create_token.status != 201 and 'already exists' not in create_token.content

- set_fact: 
    gogs_token: '{{ create_token.json.sha1 }}'

- debug: var=gogs_token

- name: Create Gogs users
  uri:
    url: http://gogs.{{ route_subdomain }}/api/v1/admin/users
    method: POST
    body_format: json
    body:
      email: 'user{{ item }}@example.com'
      username: 'user{{ item }}'
      password: '{{ ocp4_workload_dil_agile_integration_gogs_user_password }}'
    headers:
      Content-Type: "application/json"
      Authorization: "token {{ gogs_token }}"
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
    status_code: 201
  register: create_tenant_result
  loop: "{{ range(1, num_users|int + 1, 1)|list }}"
  when:
    - num_users|int > 0

- debug: var=create_tenant_result

# - name: Get Git Repo
#   uri:
#     url: "{{ ocp4_workload_dil_agile_integration_gogs_git_config_url }}"
#     return_content: yes
#   register: get_gitrepo
  
# - debug: var=get_gitrepo.content

# # Wait for a minute for users to be created.
# - pause:
#     minutes: 1

- name: Config repo
  uri: 
    url: 'http://gogs.{{ route_subdomain }}/api/v1/repos/migrate'
    method: POST
    body: 
      '{"clone_addr": "https://github.com/RedHat-Middleware-Workshops/dayinthelife-import.git", "uid": {{ item|int + 1 }},"repo_name": "dayintheliferepo"}'
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "token {{ gogs_token }}"
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
    status_code: 201
  loop: "{{ range(1, num_users|int + 1, 1)|list }}"
  when:
    - num_users|int > 0
  register: config_repo
  failed_when: config_repo.status != 201 and 'already exists' not in config_repo.content

# - name: Get WWW Git Repo
#   uri:
#     url: 'https://raw.githubusercontent.com/RedHatWorkshops/dayinthelife-integration/master/support/templates/gogs-www.json'
#     return_content: yes
#   register: get_gitrepo
  
# - debug: var=get_gitrepo.content

- name: Config repo
  uri: 
    url: 'http://gogs.{{ route_subdomain }}/api/v1/repos/migrate'
    method: POST
    body:
      '{"clone_addr": "https://github.com/jbossdemocentral/3scaleworkshop-wwwpage.git", "uid": {{ item|int + 1 }},"repo_name": "www-page"}'
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "token {{ gogs_token }}"    
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
    status_code: 201
  loop: "{{ range(1, num_users|int + 1, 1)|list }}"
  when:
    - num_users|int > 0
  register: config_repo
  failed_when: config_repo.status != 201 and 'already exists' not in config_repo.content
