---
- name: Load GCP credentials into string
  set_fact:
    gcp_creds: "{{ gcp_credentials | from_json }}"

- name: Check if email is Red Hat associate
  fail:
    msg: User is not a Red Hat associate
  when:
    - '"@redhat.com" not in requester_email'

- name: Create GCP Project
  google.cloud.gcp_resourcemanager_project:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    name: "{{ project_name }}"
    id: "{{ project_name }}"
    parent:
      type: organization
      id: "{{ gcp_organization }}"
    state: present
  register: new_project

- name: Call GCP get token role
  include_role:
    name: gcp-get-token

- name: Get project policy
  uri:
    url: "https://cloudresourcemanager.googleapis.com/v1/projects/{{ new_project.projectId }}:getIamPolicy"
    method: POST
    headers:
      Authorization: "Bearer {{ auth_response.json.access_token }}"
      Accept: "application/json"
      Content-Type: "application/json"
    body:
  register: project_policy

- name: Get current members
  set_fact:
    current_members: "{{ project_policy.json.bindings[0].members }}"

- name: Create add user string
  set_fact:
    user_to_add: "user:{{ requester_email }}"

- name: Add user and admin group to members
  set_fact:
    new_members: "{{ current_members + [ user_to_add, gcp_admin_group ] }}"

- name: Create new policy
  set_fact:
    new_policy:
      bindings: [ { members: "{{ new_members }}", role: "roles/owner" } ]
      etag: "{{ project_policy.json.etag }}"
      version: 1

- name: Set new project policy
  uri:
    url: "https://cloudresourcemanager.googleapis.com/v1/projects/{{ new_project.projectId }}:setIamPolicy"
    method: POST
    headers:
      Authorization: "Bearer {{ auth_response.json.access_token }}"
      Accept: "application/json"
      Content-Type: "application/json"
    body:
      policy: "{{ new_policy }}"
    body_format: json
  register: updated_project_policy

- name: Update billing info for project
  ansible.builtin.uri:
    url: "https://cloudbilling.googleapis.com/v1/projects/{{ new_project.projectId }}/billingInfo"
    method: PUT
    headers:
      Authorization: "Bearer {{ auth_response.json.access_token }}"
      Accept: "application/json"
      Content-Type: "application/json"
    body:
      billingAccountName: "billingAccounts/{{ gcp_billing_account_id }}"
    body_format: json

- name: Enable Google DNS API service
  google.cloud.gcp_serviceusage_service:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    name: dns.googleapis.com
    project: "{{ new_project.projectId }}"
    state: present

- name: Create managed DNS zone for OPEN Environment
  google.cloud.gcp_dns_managed_zone:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    project: "{{ new_project.projectId }}"
    name: '{{ guid + "-dns-zone" }}'
    dns_name: '{{ guid + "." + gcp_root_dns_zone + "."}}'
    description: "OPEN Env {{ guid }} DNS Zone"
    state: present
  register: new_zone

- name: Fetch Root DNS zone Info
  google.cloud.gcp_dns_managed_zone_info:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    project: "{{ gcp_creds.project_id }}"
    dns_name: '{{ gcp_root_dns_zone + "."}}'
  register: gcp_managed_zone

- name: Add delegation for NS to the Root DNS Zone
  google.cloud.gcp_dns_resource_record_set:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    project: "{{ gcp_creds.project_id }}"
    managed_zone: "{{ gcp_managed_zone.resources[0] }}"
    name: '{{ guid + "." + gcp_root_dns_zone + "."}}'
    type: NS
    ttl: 600
    target:
      - "{{ new_zone.nameServers[0] }}"
      - "{{ new_zone.nameServers[1] }}"
      - "{{ new_zone.nameServers[2] }}"
      - "{{ new_zone.nameServers[3] }}"
    state: present
