kind: ConfigMap
apiVersion: v1
metadata:
  name: haproxy
  namespace: "{{ _haproxy_project }}"
data:
  haproxy: |-
    #---------------------------------------------------------------------
    # Example configuration for a possible web application.  See the
    # full configuration options online.
    #
    #   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
    #
    #---------------------------------------------------------------------

    #---------------------------------------------------------------------
    # Global settings
    #---------------------------------------------------------------------
    global
        # to have these messages end up in /var/log/haproxy.log you will
        # need to:
        #
        # 1) configure syslog to accept network log events.  This is done
        #    by adding the '-r' option to the SYSLOGD_OPTIONS in
        #    /etc/sysconfig/syslog
        #
        # 2) configure local2 events to go to the /var/log/haproxy.log
        #   file. A line like the following can be added to
        #   /etc/sysconfig/syslog
        #
        #    local2.*                       /var/log/haproxy.log
        #
        log         127.0.0.1 local2

        # unecessary since already in a container and runs w/ a non-root user
        # chroot      /var/lib/haproxy
        # user        haproxy
        # group       haproxy
        # daemon

        pidfile     /var/lib/haproxy/haproxy.pid
        maxconn     4000

        # turn on stats unix socket
        stats socket /var/lib/haproxy/stats

    #---------------------------------------------------------------------
    # common defaults that all the 'listen' and 'backend' sections will
    # use if not designated in their block
    #---------------------------------------------------------------------
    defaults
        mode                    http
        log                     global
        option                  httplog
        option                  dontlognull
        option http-server-close
        option forwardfor       except 127.0.0.0/8
        option                  redispatch
        retries                 2
        timeout http-request    5s
        timeout queue           1m
        timeout connect         5000
        timeout client          30000
        timeout server          30000
        timeout http-keep-alive 10s
        timeout check           5000
        maxconn                 3000
        default-server          init-addr last,libc,none

    #---------------------------------------------------------------------
    # main frontend which proxys to the backends
    #---------------------------------------------------------------------
    frontend  main
        bind *:8080

        default_backend             app

    #---------------------------------------------------------------------
    # round robin balancing between the various backends
    #---------------------------------------------------------------------
    backend app
        balance roundrobin
        option httpchk GET / HTTP/1.1\r\nHost:\ "{{ pacman_lb_hostname }}"
        mode http 
            server cluster1 "{{ pacman_cluster1_route_hostname }}":80 check
            server cluster2 "{{ pacman_cluster2_route_hostname }}":80 check
            server cluster3 "{{ pacman_cluster3_route_hostname }}":80 check
