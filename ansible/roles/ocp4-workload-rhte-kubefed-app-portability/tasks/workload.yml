---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Ensure OpenShift Objects for KubeFed are Created
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - ./templates/kubefed_project.j2
    - ./templates/catalog_source_config.j2
    - ./templates/operator_group.j2
    - ./templates/subscription.j2

- name: Wait until InstallPlan is Created
  shell: oc get installplan -o name -n "{{ _kubefed_project }}" | awk -F "/" '{print $2}'
  register: install_plan
  retries: 30
  delay: 10
  until: install_plan.stdout != ""

- name: Ensure InstallPlan is Approved
  command: oc patch installplan "{{ install_plan.stdout }}" --type merge -p '{"spec":{"approved":true}}' -n "{{ _kubefed_project }}"

- name: Wait until CSV is Installed
  command: oc get csv "{{ _kubefed_subscription_csv }}" -o jsonpath='{.status.phase}' -n "{{ _kubefed_project }}"
  register: csv
  retries: 30
  delay: 10
  until: csv.stdout == "Succeeded"

- name: Get KubeFed Operator Deployment Desired Replicas
  command: oc get deployment "{{ _kubefed_operator_deployment }}" -o jsonpath='{.status.replicas}' -n "{{ _kubefed_project }}"
  register: kubefed_operator_desired_replicas
  retries: 30
  delay: 10
  until: kubefed_operator_desired_replicas.stdout != ""

- name: Wait until KubeFed Operator Deployment is Ready
  command: oc get deployment "{{ _kubefed_operator_deployment }}" -o jsonpath='{.status.readyReplicas}' -n "{{ _kubefed_project }}" 
  register: kubefed_operator_ready_replicas
  retries: 30
  delay: 10
  until: kubefed_operator_ready_replicas.stdout == kubefed_operator_desired_replicas.stdout

- name: Ensure kubefedctl Tool is Downloaded
  unarchive: 
    src: "https://github.com/kubernetes-sigs/kubefed/releases/download/v{{ _kubefedctl_release }}/kubefedctl-{{ _kubefedctl_release }}-linux-amd64.tgz"
    dest: /usr/local/bin
    remote_src: yes
    mode: 0755
  become: true

- name: Ensure cfssl Tool is Downloaded
  get_url:
    url: "https://pkg.cfssl.org/{{ _cfssl_release }}/cfssl_linux-amd64"
    dest: /usr/local/bin/cfssl
    mode: 0755
  become: true

- name: Ensure cfssljson Tool is Downloaded
  get_url:
    url: "https://pkg.cfssl.org/{{ _cfssl_release }}/cfssljson_linux-amd64"
    dest: /usr/local/bin/cfssljson
    mode: 0755
  become: true

- name: Ensure helper scripts are Deployed
  copy:
    src: "{{ item }}"
    dest: /usr/local/bin/
    mode: 0755
  become: true
  loop:
    - ./files/gen-mongo-certs
    - ./files/init-lab
    - ./files/wait-for-deployment
    - ./files/namespace-cleanup

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
