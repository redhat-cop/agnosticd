---
# Implement your Workload deployment tasks here

- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Get cluster wildcard domain from ingresses config
  shell: oc get ingresses.config.openshift.io cluster -o jsonpath='{ .spec.domain }'
  register: wildcarddomain

- set_fact:
    gogs_route_hostname: "gogs.{{ wildcarddomain.stdout }}"
    argocd_route_hostname: "argocd.{{ wildcarddomain.stdout }}"

- name: Ensure OpenShift Objects for ArgoCD are Created
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - ./templates/argocd_project.j2

- name: Ensure ArgoCD template is present
  template:
    src: ./templates/argocd_install.j2
    dest: /tmp/argocd_install.yaml
    mode: 0666

- name: Ensure ArgoCD template is instantiated
  shell: oc -n "{{ _argocd_project }}" apply -f /tmp/argocd_install.yaml

- name: Ensure argocd Tool is Downloaded
  get_url:
    url: "https://github.com/argoproj/argo-cd/releases/download/{{ _argocd_release }}/argocd-linux-amd64"
    dest: /usr/local/bin/argocd
    mode: 0755
  become: true

- name: Get ArgoCD Server Deployment Desired Replicas
  command: oc get deployment "{{ _argocd_server_deployment }}" -o jsonpath='{.status.replicas}' -n "{{ _argocd_project }}"
  register: argocd_server_desired_replicas
  retries: 30
  delay: 10
  until: argocd_server_desired_replicas.stdout != "" and argocd_server_desired_replicas.stdout != "0"

- name: Wait until ArgoCD Server Deployment is Ready
  command: oc get deployment "{{ _argocd_server_deployment }}" -o jsonpath='{.status.readyReplicas}' -n "{{ _argocd_project }}"
  register: argocd_server_ready_replicas
  retries: 30
  delay: 10
  until: argocd_server_ready_replicas.stdout == argocd_server_desired_replicas.stdout

- name: Get ArgoCD Server Pod name
  command: oc get pod -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[*].metadata.name}' -n "{{ _argocd_project }}"
  register: argocd_server_pod_name
  retries: 30
  delay: 10
  until: argocd_server_pod_name.stdout != ""

- name: Ensure ArgoCD default user is initialized - Login into ArgoCD Server
  shell: /usr/local/bin/argocd --insecure --grpc-web login "{{ argocd_route_hostname }}":443 --username "{{ _argocd_default_user }}" --password "{{ argocd_server_pod_name.stdout }}"
  args:
    chdir: "/home/{{ _clientvm_student_user }}"
  become: true
  become_user: "{{ _clientvm_student_user }}"
  
- name: Esure ArgoCD default user is initialized - Update default ArgoCD Password
  shell: /usr/local/bin/argocd --insecure --grpc-web --server "{{ argocd_route_hostname }}":443 account update-password --current-password "{{ argocd_server_pod_name.stdout }}" --new-password "{{ _argocd_default_user_password }}"
  args:
    chdir: "/home/{{ _clientvm_student_user }}"
  become: true
  become_user: "{{ _clientvm_student_user }}"

- name: Ensure OpenShift Objects for Gogs are Created
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - ./templates/gogs_project.j2

- name: Ensure gogs template is present
  template:
    src: ./templates/gogs-persistent-template.j2
    dest: /tmp/gogs-persistent-template.yaml
    mode: 0666

- name: Ensure gogs template is instantiated
  shell: oc process -f /tmp/gogs-persistent-template.yaml -p HOSTNAME="{{ gogs_route_hostname }}"  | oc -n "{{ _gogs_project }}" apply -f -

- name: Get Gogs Server Deployment Desired Replicas
  command: oc get deploymentconfig "{{ _gogs_server_deployment }}" -o jsonpath='{.status.replicas}' -n "{{ _gogs_project }}"
  register: gogs_server_desired_replicas
  retries: 30
  delay: 10
  until: gogs_server_desired_replicas.stdout != "" and gogs_server_desired_replicas.stdout != "0"

- name: Wait until Gogs Server Deployment is Ready
  command: oc get deploymentconfig "{{ _gogs_server_deployment }}" -o jsonpath='{.status.readyReplicas}' -n "{{ _gogs_project }}"
  register: gogs_server_ready_replicas
  retries: 30
  delay: 10
  until: gogs_server_ready_replicas.stdout == gogs_server_desired_replicas.stdout

- name: Get Gogs Server Pod name
  command: oc get pod -l app=gogs -o jsonpath='{.items[*].metadata.name}' -n "{{ _gogs_project }}"
  register: gogs_server_pod_name
  retries: 30
  delay: 10
  until: gogs_server_pod_name.stdout != ""

- name: Ensure Gogs default user is initialized
  command: oc -n "{{ _gogs_project }}" exec "{{ gogs_server_pod_name.stdout }}" init-gogs "{{ _gogs_default_user }}" "{{ _gogs_default_user_password }}" "{{ _gogs_default_user_mail }}"

- name: Ensure cfssl Tool is Downloaded
  get_url:
    url: "https://pkg.cfssl.org/{{ _cfssl_release }}/cfssl_linux-amd64"
    dest: /usr/local/bin/cfssl
    mode: 0755
  become: true

- name: Ensure cfssljson Tool is Downloaded
  get_url:
    url: "https://pkg.cfssl.org/{{ _cfssl_release }}/cfssljson_linux-amd64"
    dest: /usr/local/bin/cfssljson
    mode: 0755
  become: true

- name: Ensure helper scripts are Deployed
  copy:
    src: "{{ item }}"
    dest: /usr/local/bin/
    mode: 0755
  become: true
  loop:
    - ./files/gen-mongo-certs
    - ./files/argocd-add-clusters
    - ./files/wait-for-deployment
    - ./files/namespace-cleanup
    - ./files/wait-for-mongo-replicaset
    - ./files/wait-for-argo-app
    - ./files/verify-contexts

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
