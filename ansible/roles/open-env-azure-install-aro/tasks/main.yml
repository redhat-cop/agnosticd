---
- name: Generate arouser password
  ansible.builtin.set_fact:
    generated_arouser_password: >-
      {{- lookup('ansible.builtin.password', '/dev/null length=1 chars=letters') -}}
      {{- lookup('ansible.builtin.password', '/dev/null length=10') -}}
      {{- lookup('ansible.builtin.password', '/dev/null length=1 chars=digits') -}}

- name: Retrieving an available arouser and locking it in CosmosDB
  ansible.builtin.uri:
    return_content: true
    url: "{{ az_function_get }}{{ project_tag }}?code={{ azure_pool_api_secret }}"
  register: arouser

- name: Login with azure root user
  ansible.builtin.command: >-
    az login -u "{{ azure_user }}"
    -p="{{ azure_user_password }}" --tenant="{{ azure_tenant }}"
  no_log: true

- name: Get arouser object from Active Directory
  azure.azcollection.azure_rm_aduser_info:
    auth_source: cli
    user_principal_name: "{{ arouser.content }}@{{ azure_user_domain }}"
    tenant: "{{ azure_tenant }}"
  register: arouserobj

- name: Update arouser password
  azure.azcollection.azure_rm_aduser:
    auth_source: cli
    user_principal_name: "{{ arouser.content }}@{{ azure_user_domain }}"
    state: "present"
    password_profile: "{{ generated_arouser_password }}"
    tenant: "{{ azure_tenant }}"

- name: Make arouser owner of resource group
  azure.azcollection.azure_rm_roleassignment:
    auth_source: cli
    scope: "{{ azrg.resourcegroups[0].id }}"
    assignee_object_id: "{{ arouserobj.ad_users[0].object_id }}"
    role_definition_id:
      "{{ azownerrd.roledefinitions[0].id }}"

- name: Create ARO virtual network
  azure.azcollection.azure_rm_virtualnetwork:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    name: "aro-vnet-{{ guid }}"
    address_prefixes_cidr:
        - "10.0.0.0/22"

- name: Check if ARO master subnet exists
  azure.azcollection.azure_rm_subnet_info:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    virtual_network_name: "aro-vnet-{{ guid }}"
    name: master-subnet
  ignore_errors: true
  register: master_subnet_check

- name: Create ARO master subnet
  when: "'subnets' not in master_subnet_check"
  azure.azcollection.azure_rm_subnet:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    virtual_network_name: "aro-vnet-{{ guid }}"
    name: master-subnet
    address_prefix_cidr: "10.0.0.0/23"
    service_endpoints:
      - service: "Microsoft.ContainerRegistry"
        locations:
          - "{{ azure_region }}"
    private_link_service_network_policies: "Disabled"

- name: Check if ARO worker subnet exists
  azure.azcollection.azure_rm_subnet_info:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    virtual_network_name: "aro-vnet-{{ guid }}"
    name: worker-subnet
  ignore_errors: true
  register: worker_subnet_check

- name: Create ARO worker subnet
  when: "'subnets' not in worker_subnet_check"
  azure.azcollection.azure_rm_subnet:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    virtual_network_name: "aro-vnet-{{ guid }}"
    name: worker-subnet
    address_prefix_cidr: "10.0.2.0/23"
    service_endpoints:
      - service: "Microsoft.ContainerRegistry"
        locations:
          - "{{ azure_region }}"

- name: Wait for ARO master subnet to provision
  azure.azcollection.azure_rm_subnet_info:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    virtual_network_name: "aro-vnet-{{ guid }}"
    name: master-subnet
  register: master_subnet
  until: "master_subnet.subnets[0].provisioning_state == 'Succeeded'"
  retries: 10
  delay: 10

- name: Wait for ARO worker subnet to provision
  azure.azcollection.azure_rm_subnet_info:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    virtual_network_name: "aro-vnet-{{ guid }}"
    name: worker-subnet
  register: worker_subnet
  until: "worker_subnet.subnets[0].provisioning_state == 'Succeeded'"
  retries: 10
  delay: 10

- name: Check if ARO is already installed
  azure.azcollection.azure_rm_openshiftmanagedcluster_info:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    name: "aro-cluster-{{ guid }}"
  ignore_errors: true
  register: check_aro_install

- name: Create ARO cluster
  when: check_aro_install.clusters | length == 0
  azure.azcollection.azure_rm_openshiftmanagedcluster:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    name: "aro-cluster-{{ guid }}"
    location: "{{ azure_region }}"
    cluster_profile:
      pull_secret: "{{ ocp4_pull_secret | to_json }}"
    service_principal_profile:
      client_id: "{{ azaroappsp.service_principals[0].app_id }}"
      client_secret: "{{ az_aro_pass }}"
    worker_profiles:
      - vm_size: "Standard_D4s_v3"
        subnet_id: "{{ worker_subnet.subnets[0].id }}"
        disk_size: 128
        count: 3
    master_profile:
      vm_size : "Standard_D8s_v3"
      subnet_id: "{{ master_subnet.subnets[0].id }}"
    state: present

- name: Wait for ARO to deploy
  azure.azcollection.azure_rm_openshiftmanagedcluster_info:
    auth_source: cli
    tenant: "{{ azure_tenant }}"
    resource_group: "openenv-{{ guid }}"
    name: "aro-cluster-{{ guid }}"
  register: aro_cluster
  until: "aro_cluster.clusters.properties.provisioningState == 'Succeeded'"
  retries: 60
  delay: 60

- name: Grab the console URL for ARO
  ansible.builtin.set_fact: az_aro4_public_hostname="{{ aro_cluster.clusters.properties.consoleProfile.url }}"

- name: Grab the API Server URL for ARO
  ansible.builtin.set_fact: az_aro4_public_api="{{ aro_cluster.clusters.properties.apiserverProfile.url }}"

- name: Grabbing the kubeadmin password for ARO
  ansible.builtin.command: >-
    az aro list-credentials --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query kubeadminPassword -o tsv
  register: az_aro4_kubeadmin_password

- name: Add redirect URI to service principal
  ansible.builtin.command: >-
    az ad app update --id "api://openenv-{{ guid }}" --reply-urls "https://oauth-openshift.apps.{{ aro_cluster.clusters.properties.clusterProfile.domain }}.{{ aro_cluster.clusters.location }}.aroapp.io/oauth2callback/AAD"

- name: Wait 5 minutes for the x509 certificate to be signed before attempting to log in
  when: "'clusters' not in check_aro_install"
  ansible.builtin.pause:
    minutes: 5

- ansible.builtin.set_fact: kubeconfigdir="{{ output_dir }}/.kube"

- ansible.builtin.set_fact: kubeconfig="{{ kubeconfigdir }}/config"

- name: Make sure .kube directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ kubeconfigdir }}"
    mode: 0700

- name: Login to the resulting ARO cluster as kubeadmin
  ansible.builtin.command: >-
      oc login {{ az_aro4_public_api }} -u kubeadmin -p {{ az_aro4_kubeadmin_password.stdout }} --kubeconfig {{ kubeconfig }} --insecure-skip-tls-verify

- name: Create a secret to store the azureAD App ID password in the cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition: "{{ lookup('template', 'secret-azuread.yaml.j2' ) | from_yaml }}"

- name: Update OAuth configuration on the cluster to add AAD
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition: "{{ lookup('template', 'aad_oidc.yaml.j2' ) | from_yaml }}"
