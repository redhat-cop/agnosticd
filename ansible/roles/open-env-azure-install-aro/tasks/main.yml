---
- name: Generate arouser password
  command: openssl rand -base64 25
  register: password_gen_r
- set_fact: generated_arouser_password="{{ password_gen_r.stdout }}"
- name: Retrieving an available arouser and locking it in CosmosDB
  ansible.builtin.uri:
    return_content: true
    url: "{{ az_function_get }}{{ project_tag }}?code={{ azure_pool_api_secret }}"
  register: arouser
- name: Get arouser object from Active Directory
  register: arouserobj
  azure.azcollection.azure_rm_aduser_info:
    auth_source: cli
    user_principal_name: "{{ arouser.content }}@{{ azure_user_domain }}"
    tenant: "{{ azure_tenant }}"
- name: Update arouser password
  azure.azcollection.azure_rm_aduser:
    auth_source: cli
    user_principal_name: "{{ arouser.content }}@{{ azure_user_domain }}"
    state: "present"
    password_profile: "{{ generated_arouser_password }}"
    tenant: "{{ azure_tenant }}"
- name: Make arouser owner of resource group
  azure.azcollection.azure_rm_roleassignment:
    auth_source: cli
    scope: "{{ azrg['resourcegroups'][0].id }}"
    assignee_object_id: "{{ arouserobj['ad_users'][0].object_id }}"
    role_definition_id:
      "{{ azownerrd['roledefinitions'][0].id }}"

- name: Login with azure root user
  no_log: true
  command: >-
    az login -u "{{ azure_user }}"
    -p="{{ azure_user_password }}" --tenant="{{ azure_tenant }}"
- name: Create ARO VNET
  command: >-
    az network vnet create --resource-group "openenv-{{ guid }}" --name "aro-vnet-{{ guid }}" --address-prefixes 10.0.0.0/22

- name: Create ARO master subnet
  command: >-
    az network vnet subnet create --resource-group "openenv-{{ guid }}" --vnet-name "aro-vnet-{{ guid }}" --name master-subnet --address-prefixes 10.0.0.0/23 --service-endpoints Microsoft.ContainerRegistry

- name: Create ARO worker subnet
  command: >-
    az network vnet subnet create --resource-group "openenv-{{ guid }}" --vnet-name "aro-vnet-{{ guid }}" --name worker-subnet --address-prefixes 10.0.2.0/23 --service-endpoints Microsoft.ContainerRegistry

- name: Update policy for ARO master subnet
  command: >-
    az network vnet subnet update --name master-subnet --resource-group "openenv-{{ guid }}" --vnet-name "aro-vnet-{{ guid }}" --disable-private-link-service-network-policies true

- name: Create token file for ARO installer
  copy:
    dest: "{{ output_dir }}/token.txt"
    content: "{{ ocp4_pull_secret }}"

- name: Wait for vnets to settle
  pause:
    minutes: 2

- name: Create ARO cluster
  command: >-
    az aro create --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}" --vnet "aro-vnet-{{ guid }}" --master-subnet master-subnet --worker-subnet worker-subnet --client-id "{{ azaroappinfo.stdout | from_json | json_query('appId') }}" --client-secret '{{ az_aro_pass }}' --pull-secret "@{{ output_dir }}/token.txt"

- name: Grab the console URL for ARO
  command: >
    az aro show --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query consoleProfile -o tsv
  register: az_aro4_public_hostname

- name: Grab the API Server URL for ARO
  command: >
    az aro show --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query apiserverProfile.url -o tsv
  register: az_aro4_public_api

- name: Grabbing the kubeadmin password for ARO
  command: >
    az aro list-credentials --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query kubeadminPassword -o tsv
  register: az_aro4_kubeadmin_password

- name: Wait 5 minutes for the x509 certificate to be signed before attempting to log in
  pause:
    minutes: 5

- set_fact: kubeconfigdir="{{ output_dir }}/.kube"

- set_fact: kubeconfig="{{ kubeconfigdir }}/config"

- name: Make sure .kube directory exists
  file:
    state: directory
    path: "{{ kubeconfigdir }}"
    mode: 0700

- name: Login to the resulting ARO cluster as kubeadmin
  command: >
      oc login {{ az_aro4_public_api.stdout }} -u kubeadmin -p {{ az_aro4_kubeadmin_password.stdout }} --kubeconfig {{ kubeconfig }} --insecure-skip-tls-verify

- name: Create a secret to store the azureAD App ID password in the cluster
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition: "{{ lookup('template', 'secret-azuread.yaml.j2' ) | from_yaml }}"

- name: Update OAuth configuration on the cluster to add AAD
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition: "{{ lookup('template', 'aad_oidc.yaml.j2' ) | from_yaml }}"
