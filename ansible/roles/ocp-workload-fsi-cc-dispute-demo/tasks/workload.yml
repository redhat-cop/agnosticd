---
- name: define ocp_project
  set_fact:
    ocp_project: "fsi-cc-dispute-{{guid}}"

    #Â Templates come from here: https://raw.githubusercontent.com/jorgemoralespou/ose-sample-apps-layouts

- name: Check if project exists
  shell: oc get project {{ocp_project}}
  register: project_exists_result
  ignore_errors: true

- name: Create project for FSI Credit Card Dispute demo
  shell: |
         oc new-project {{ocp_project}} \
         --display-name="FSI Credit Card Dispute Demo" \
         --description="FSI Credit Card Dispute Demo"
  when: project_exists_result is failed

- name: "Label namespace"
  command: "oc label namespace {{ocp_project}} AAD='{{guid}}'"

#- name: Set project limit LimitRange
#  shell: "oc create -f /tmp/{{guid}}//limit-range.yaml -n {{ocp_project}}"

# Check whether the required ImageStreams are available in the "openshift" namespace.
# If they are not, we import them.
# We need to do this in the "openshift" namespace, in order to have the secret to pull from registry.redhat.io.
- name: Check if PAM ImageStreams exists
  shell: oc get is/rhpam73-businesscentral-openshift -n openshift
  register: rhpam_is_exists_result
  ignore_errors: true

- name: Import the RHPAM73 ImageStreams into the cluster.
  shell: "oc create -f {{pam_imagestreams_yml}} -n openshift"
  when: rhpam_is_exists_result is failed
  ignore_errors: true

- name: Import ImageStreams Entando EAP 7.1
  shell: "oc create -f https://raw.githubusercontent.com/entando/entando-ops/credit-card-dispute/Openshift/image-streams/entando-fsi-ccd-demo.json -n {{ocp_project}}"

#- name: Import ImageStreams Entando Appbuilder
#  shell: "oc create -f https://raw.githubusercontent.com/entando/entando-ops/master/Openshift/image-streams/appbuilder.json -n {{ocp_project}}"

- name: Import PAM Authoring template
  shell: "oc create -f {{pam_template_yml}} -n {{ocp_project}}"

- name: Import Entando demo template
  shell: "oc create -f https://raw.githubusercontent.com/entando/entando-ops/credit-card-dispute/Openshift/templates/entando-demo.yml -n {{ocp_project}}"

- name: Create Secrets Business Central
  shell: oc process -f {{pam_secrets_template_yml}} -p SECRET_NAME=businesscentral-app-secret | oc create -f - -n {{ocp_project}}

- name: Create Secrets KIE-server
  shell: oc process -f {{pam_secrets_template_yml}} -p SECRET_NAME=kieserver-app-secret | oc create -f - -n {{ocp_project}}

- name: Create Service Account Business Central
  shell: oc create serviceaccount businesscentral-service-account -n {{ocp_project}}

- name: Create Service Account KIE Server
  shell: oc create serviceaccount kieserver-service-account -n {{ocp_project}}

- name: Link secrets and service account Business Central
  shell: oc secrets link --for=mount businesscentral-service-account businesscentral-app-secret -n {{ocp_project}}

- name: Link secrets and service account KIE-server
  shell: oc secrets link --for=mount kieserver-service-account kieserver-app-secret -n {{ocp_project}}

#- name: Create ConfigMap Business Central
#  shell: oc create configmap rhpam-bc-setup-config-map --from-file=/tmp/{{guid}}/bc-clone-git-repository.sh,/tmp/{{guid}}/provision-properties-static.sh -n {{ocp_project}}

- name: Create PAM7 Authoring environment 2
  shell: |
         oc new-app --template=rhpam73-authoring \
           --name={{pam_app_name}} \
           -p APPLICATION_NAME={{pam_app_name}} \
           -p BUSINESS_CENTRAL_HTTPS_SECRET=businesscentral-app-secret \
           -p KIE_SERVER_HTTPS_SECRET=kieserver-app-secret \
           -p IMAGE_STREAM_NAMESPACE=openshift \
           -p KIE_ADMIN_USER={{kie_server_username}} \
           -p KIE_ADMIN_PWD={{kie_server_password}} \
           -p KIE_SERVER_USER=kieUser \
           -p KIE_SERVER_PWD="kieUser!23" \
           -p BUSINESS_CENTRAL_VOLUME_CAPACITY="1Gi" \
           -p BUSINESS_CENTRAL_MEMORY_LIMIT="2Gi" \
           -p KIE_SERVER_MEMORY_LIMIT="2Gi" \
           -p DB_VOLUME_CAPACITY="4Gi" \
           -e JAVA_OPTS_APPEND="-Dorg.jbpm.document.storage=/opt/eap/standalone/data/documents"

# Already wait for deployment here. If we start doing 4 builds and deployments at the same time, and images need to be pulled in, we will timeout.
# So, we're doing some stuff sequentially (explicitly).
- include_tasks: ./wait_for_deploy.yml
  vars:
    pod_to_wait:
      - "{{pam_app_name}}-rhpamcentr"
      - "{{pam_app_name}}-kieserver"

- name: "Get KIE-Server Route"
  shell: "oc get route {{pam_app_name}}-kieserver | awk 'FNR > 1 {print $2}'"
  register: oc_get_route_output

- name: "Set KIE Server Route fact"
  set_fact:
    kie_server_route: "{{ oc_get_route_output.stdout }}"

- name: "Get OCP Domain Suffix"
  shell: "oc get route pam-kieserver | awk 'FNR > 1 {print $2}'| cut -d\".\" -f2-"
  register: oc_get_domain_suffix_output

- name: "OCP Domain Suffix fact"
  set_fact:
    ocp_domain_suffix: "{{ oc_get_domain_suffix_output.stdout }}"

- name: "Create Entando Customer Application"
  shell: |
         oc new-app --template={{ocp_project}}/entando-demo \
           -p APPLICATION_NAME="entando-fsi-ccd-customer" \
           -p KIE_SERVER_BASE_URL="http://{{kie_server_route}}" \
           -p KIE_SERVER_USERNAME={{kie_server_username}} \
           -p KIE_SERVER_PASSWORD={{kie_server_password}} \
           -p IMAGE_STREAM_NAMESPACE={{ocp_project}} \
           -p IMAGE_STREAM="fsi-cc-dispute-customer" \
           -p ENTANDO_APP_BUILDER_HOSTNAME_HTTP="appbuilder-customer.{{ocp_domain_suffix}}" \
           -p ENTANDO_RUNTIME_HOSTNAME_HTTP="entando-core.{{ocp_domain_suffix}}" \
           -p ENTANDO_WEB_CONTEXT="fsi-credit-card-dispute-customer"

- name: "Create Entando Admin Application"
  shell: |
         oc new-app --template={{ocp_project}}/entando-demo \
           -p APPLICATION_NAME="entando-fsi-ccd-admin" \
           -p KIE_SERVER_BASE_URL="http://{{kie_server_route}}" \
           -p KIE_SERVER_USERNAME={{kie_server_username}} \
           -p KIE_SERVER_PASSWORD={{kie_server_password}} \
           -p IMAGE_STREAM_NAMESPACE="{{ocp_project}}" \
           -p IMAGE_STREAM="fsi-cc-dispute-admin" \
           -p ENTANDO_APP_BUILDER_HOSTNAME_HTTP="appbuilder-admin.{{ocp_domain_suffix}}" \
           -p ENTANDO_RUNTIME_HOSTNAME_HTTP="entando-core.{{ocp_domain_suffix}}" \
           -p ENTANDO_WEB_CONTEXT="fsi-credit-card-dispute-backoffice"

#### Wait for the deployment to complete before slapping on the quota ...
- include_tasks: ./wait_for_deploy.yml
  vars:
    pod_to_wait:
      - "{{entando_app_name_customer}}-runtime"
      - "{{entando_app_name_admin}}-runtime"

- name: Annotate the completed project as requested by user
  shell: "oc annotate namespace {{ocp_project}} openshift.io/requester={{ocp_username}} --overwrite"

- name: Give user access to the completed project
  shell: "oc policy add-role-to-user admin {{ocp_username}} -n {{ocp_project}}"

- name: workload Tasks Complete
  debug:
    msg: workload Tasks Complete
