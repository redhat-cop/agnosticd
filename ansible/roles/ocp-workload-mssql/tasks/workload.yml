---
- block:
  - name: "Creating common CRs"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "namespace.yaml"
      - "secret.yaml"
      - "sa.yaml"
      - "pvc.yaml"
    when: not mssql_workload_destroy|bool
  
  - name: "Creating new scc"
    shell: "oc apply -f {{ tmp_dir.path }}/scc.yaml"
    ignore_errors: yes
    when: not mssql_workload_destroy|bool 
  
  - name: "Removing common CRs"
    shell: "oc delete --ignore-not-found -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "sa.yaml"
      - "namespace.yaml"
      - "scc.yaml"
    when: mssql_workload_destroy|bool
  
  - name: "Creating MsSQL CRs"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "deployment.yaml"
      - "service.yaml"
    when: not mssql_workload_destroy|bool
  
  - name: "Creating MsSQL sample app CRs"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "app-deployment.yaml"
      - "app-service.yaml"
      - "app-route.yaml"
    when: not mssql_workload_destroy|bool
  
  - name: "Cleaning up temp files"
    file: 
      path: "{{ tmp_dir.path }}"
      state: absent
  when: not mssql_private_img| bool

- block:
  - name: "Creating namespace"
    shell: "oc apply -f {{ tmp_dir.path }}/namespace.yaml"
    when: not mssql_workload_destroy|bool

  - name: "Creating image registry credentials"
    shell: "oc secrets new-dockercfg sql-pull-secret --docker-server={{ mssql_private_img_registry|mandatory }} --docker-username={{ mssql_private_img_registry_user|mandatory }} --docker-password={{ mssql_private_img_registry_pass|mandatory }} --docker-email=fake@gmail.com -n {{ mssql_namespace }}"
    register: output
    failed_when: '"AlreadyExists" not in output.stderr and output.rc != 0'
    when: not mssql_workload_destroy|bool

  - name: "Creating MsSQL CRs"
    shell: "oc apply -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "manifest.yaml"
    when: not mssql_workload_destroy|bool
  
  - name: "Removing MsSQL CRs"
    shell: "oc delete --ignore-not-found -f {{ tmp_dir.path }}/{{ item }}"
    loop:
      - "manifest.yaml"
      - "namespace.yaml"
    when: mssql_workload_destroy|bool
  
  - name: "Cleaning up temp files"
    file: 
      path: "{{ tmp_dir.path }}"
      state: absent
  when: mssql_private_img| bool

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool