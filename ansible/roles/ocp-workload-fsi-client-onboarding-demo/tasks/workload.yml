---
- name: define ocp_project
  set_fact:
    ocp_project: "client-onboarding-{{guid}}"

    #Â Templates come from here: https://raw.githubusercontent.com/jorgemoralespou/ose-sample-apps-layouts

- name: Create project for fsi client onboarding demo
  shell: |
         oc new-project {{ocp_project}} \
         --display-name="Client Onboarding" \
         --description="Red Hat JBoss BPM Suite & Entando 'Client Onboarding' FSI Demo"
  ignore_errors: true

- name: "Label namespace"
  command: "oc label namespace {{ocp_project}} AAD='{{guid}}'"

#- name: Set project limit LimitRange
#  shell: "oc create -f /tmp/{{guid}}//limit-range.yaml -n {{ocp_project}}"

- name: Check if BPM Suite ImageStreams exists
  shell: oc get is/jboss-processserver64-openshift -n openshift
  register: bpms_is_exists_result
  ignore_errors: true

- name: Import the BPM Suite ImageStreams into the cluster.
  shell: "oc create -f {{bpms_imagestreams_yml}} -n openshift"
  when: bpms_is_exists_result is failed
  ignore_errors: true

- name: Wait for BPMSuite ImageStream tags to be available
  shell: "oc get is -n openshift | grep -i processserver | grep -i {{bpms_imagestreams_tag}}"
  register: result
  until: result.stdout != ""
  retries: 5
  delay: 10

- name: "Import templates"
  shell: "oc create -f https://raw.githubusercontent.com/jboss-container-images/jboss-processserver-6-openshift-image/6.4.x/templates/processserver64-postgresql-s2i.json -n {{ocp_project}}"

- name: "Create secrets and service accounts"
  shell: "oc process -f /tmp/{{guid}}/secrets-and-accounts.yaml | oc create -n {{ocp_project}} -f  -"

- name: "Add policy to service accounts"
  shell: "oc policy add-role-to-user view system:serviceaccount:{{ocp_project}}:processserver-service-account"

- name: "Create FSI Customer UI"
  shell: "oc new-app https://github.com/entando/fsi-customer-openshift --name fsi-customer -n {{ocp_project}}"

- name: "Expose FSI Customer UI"
  shell: "oc expose svc fsi-customer --name=entando-fsi-customer --path=/fsi-customer/ -n {{ocp_project}}"

# Need to create second container like this as they use the same base image and that gives errors when OpenShift tries to create the ImageStream for a second time.
# TODO: Try on OpenShift v 3.7
- name: "Create FSI Backoffice UI"
  shell: "oc new-app entando-base-image-432:latest~https://github.com/entando/fsi-backoffice-openshift --name fsi-backoffice --strategy=docker --allow-missing-imagestream-tags -n {{ocp_project}}"

#TODO: Double check why this is needed.
- name: "Expose FSI Backoffice DC as service"
  shell: "oc expose dc fsi-backoffice --port 8080 -n {{ocp_project}}"

- name: "Expose FSI Backoffice Entando"
  shell: "oc expose svc fsi-backoffice --name=entando-fsi-backoffice --path=/fsi-backoffice/ -n {{ocp_project}}"

- name: "Get FSI Customer UI Route"
  shell: "oc get route entando-fsi-customer | awk 'FNR > 1 {print $2}'"
  register: oc_get_route_output

- name: "Set FSI Customer UI Route fact"
  set_fact:
    fsi_customer_route: "{{ oc_get_route_output.stdout }}"

- name: "Create FSI BPM process application"
  shell: |
          oc process \
          -f "/tmp/{{guid}}/client-onboarding-process.yaml" \
          -p GIT_URI="https://github.com/entando/fsi-onboarding-bpm" \
          -p GIT_REF="master" \
          -p ENTANDO_BASE_URL="http://{{fsi_customer_route}}/fsi-customer/" \
          -n {{ocp_project}} | oc create -f - -n {{ocp_project}}

#### Wait for the build to complete before slapping on the quota ....
- include_tasks: ./wait_for_build.yml
  vars:
    build_to_wait:
      - co
      - fsi-backoffice
      - fsi-customer

#### Wait for the deployment to complete before slapping on the quota ...
- include_tasks: ./wait_for_deploy.yml
  vars:
    pod_to_wait:
      - co
      - co-postgresql
      - fsi-backoffice
      - fsi-customer

- name: Annotate the completed project as requested by user
  shell: "oc annotate namespace {{ocp_project}} openshift.io/requester={{ocp_username}} --overwrite"

- name: Give user access to the completed project
  shell: "oc policy add-role-to-user admin {{ocp_username}} -n {{ocp_project}}"

- name: workload Tasks Complete
  debug:
    msg: workload Tasks Complete
