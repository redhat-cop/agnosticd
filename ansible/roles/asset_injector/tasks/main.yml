---
- name: Simple user management
  when: _asset.type == 'user'
  ansible.builtin.user:
    name: "{{ _asset.name }}"
    state: "{{ _asset.state }}"
    password: "{{ _asset.password | default(omit) }}"
    groups: "{{ _asset.groups | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  become_user: "{{ _asset.owner | default(omit) }}"
  tags:
    - asset_injector_user

- name: Clone Git repositories
  when: _asset.type == 'git'
  ansible.builtin.git:
    repo: "{{ _asset.src }}"
    dest: "{{ _asset.dest }}"
    version: "{{ _asset.scm_ref | default('main') }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  become_user: "{{ _asset.owner | default(omit) }}"
  tags:
    - asset_injector_git

- name: Fetch files via HTTP server
  when: _asset.type == 'http'
  ansible.builtin.get_url:
    url: "{{ _asset.src }}"
    dest: "{{ _asset.dest }}"
    url_username: "{{ _asset.url_username | default(omit) }}"
    url_password: "{{ _asset.url_password | default(omit) }}"
    force_basic_auth: true
    owner: "{{ _asset.owner }}"
    group: "{{ _asset.group }}"
    mode: "{{ _asset.mode | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  no_log: true
  tags:
    - asset_injector_http

- name: Copy local files
  when: _asset.type == 'copy'
  ansible.builtin.copy:
    src: "{{ _asset.src }}"
    dest: "{{ _asset.dest }}"
    owner: "{{ _asset.owner }}"
    group: "{{ _asset.group }}"
    mode: "{{ _asset.mode }}"
    remote_src: "{{ _asset.remote_src | default(false) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_copy

- name: Inject local templates
  when: _asset.type == 'template'
  ansible.builtin.template:
    src: "{{ _asset.src }}"
    dest: "{{ _asset.dest }}"
    owner: "{{ _asset.owner }}"
    group: "{{ _asset.group }}"
    mode: "{{ _asset.mode }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_template

- name: Remove files
  when: _asset.type == 'remove'
  ansible.builtin.file:
    path: "{{ _asset.path }}"
    state: absent
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_remove

- name: Create blockinfile entries
  when: _asset.type == 'blockinfile'
  ansible.builtin.blockinfile:
    append_newline: "{{ _asset.append_newline | default(omit) }}"
    attributes: "{{ _asset.attributes | default(omit) }}"
    backup: "{{ _asset.backup | default(omit) }}"
    block: "{{ _asset.block }}"
    blockdelimiters: "{{ _asset.blockdelimiters | default(omit) }}"
    blockquote: "{{ _asset.blockquote | default(omit) }}"
    create: "{{ _asset.create | default(omit) }}"
    group: "{{ _asset.group | default(omit) }}"
    insertafter: "{{ _asset.insertafter | default(omit) }}"
    insertbefore: "{{ _asset.insertbefore | default(omit) }}"
    marker: "{{ _asset.marker | default('# ANSIBLE MANAGED BLOCK') }}"
    marker_begin: "{{ _asset.marker_begin | default(omit) }}"
    marker_end: "{{ _asset.marker_end | default(omit) }}"
    mode: "{{ _asset.mode | default(omit) }}"
    owner: "{{ _asset.owner | default(omit) }}"
    path: "{{ _asset.path }}"
    prepend_newline: "{{ _asset.prepend_newline | default(omit) }}"
    selevel: "{{ _asset.selevel | default(omit) }}"
    serole: "{{ _asset.serole | default(omit) }}"
    setype: "{{ _asset.setype | default(omit) }}"
    seuser: "{{ _asset.seuser | default(omit) }}"
    state: "{{ _asset.state }}"
    unsafe_writes: "{{ _asset.unsafe_writes | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_blockinfile

- name: Manage dnf packages
  when: _asset.type == 'dnf'
  ansible.builtin.dnf:
    name: "{{ _asset.name }}"
    state: "{{ _asset.state | default('present') }}"
    disable_gpg_check: "{{ _asset.disable_gpg_check | default(false) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_dnf

- name: Manage services
  when: _asset.type == 'service'
  ansible.builtin.service:
    name: "{{ _asset.name }}"
    state: "{{ _asset.state }}"
    enabled: "{{ _asset.enabled | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_service

- name: Manage capabilities
  when: _asset.type == 'capability'
  community.general.capabilities:
    path: "{{ _asset.path | default(omit) }}"
    state: "{{ _asset.state }}"
    capability: "{{ _asset.capability }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_capability

- name: Manage files
  when: _asset.type == 'file'
  ansible.builtin.file:
    group: "{{ _asset.group | default(omit) }}"
    mode: "{{ _asset.mode | default(omit) }}"
    owner: "{{ _asset.owner | default(omit) }}"
    path: "{{ _asset.path | default(omit) }}"
    src: "{{ _asset.src | default(omit) }}"
    state: "{{ _asset.state | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_file

- name: Execute Commands
  when: _asset.type == 'command'
  ansible.builtin.command:
    cmd: "{{ _asset.cmd | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_file

- name: Manage groups
  when: _asset.type == 'group'
  ansible.builtin.group:
    force: "{{ _asset.force | default(false) }}"
    gid: "{{ _asset.gid | default(omit) }}"
    local: "{{ _asset.local | default(omit) }}"
    name: "{{ _asset.name | default(omit) }}"
    non_unique: "{{ _asset.non_unique | default(omit) }}"
    state: "{{ _asset.state | default(omit) }}"
    system: "{{ _asset.system | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_file

- name: Create lineinfile entries
  when: _asset.type == 'lineinfile'
  ansible.builtin.lineinfile:
    attributes: "{{ _asset.attributes | default(omit) }}"
    backrefs: "{{ _asset.backrefs | default(omit) }}"
    backup: "{{ _asset.backup | default(omit) }}"
    create: "{{ _asset.create | default(omit) }}"
    firstmatch: "{{ _asset.firstmatch | default(omit) }}"
    group: "{{ _asset.group | default(omit) }}"
    insertafter: "{{ _asset.insertafter | default(omit) }}"
    insertbefore: "{{ _asset.insertbefore | default(omit) }}"
    line: "{{ _asset.line | default(omit) }}"
    mode: "{{ _asset.mode | default(omit) }}"
    owner: "{{ _asset.owner | default(omit) }}"
    path: "{{ _asset.path | default(omit) }}"
    regexp: "{{ _asset.regexp | default(omit) }}"
    search_string: "{{ _asset.search_string | default(omit) }}"
    serole: "{{ _asset.serole | default(omit) }}"
    seuser: "{{ _asset.seuser | default(omit) }}"
    state: "{{ _asset.state | default(omit) }}"
    unsafe_writes: "{{ _asset.unsafe_writes | default(omit) }}"
    validate: "{{ _asset.validate | default(omit) }}"
  loop: "{{ asset_injector_assets }}"
  loop_control:
    loop_var: _asset
  tags:
    - asset_injector_file
