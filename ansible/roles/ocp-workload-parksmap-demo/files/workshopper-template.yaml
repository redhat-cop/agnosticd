kind: Template
apiVersion: v1
metadata:
  name: starter-guides
  annotations:
    description: Template to deploy a workshop guide with workshopper. Look into any of the workshops for the used variables that can be defined in the configMap.
parameters:
- name: APPNAME
  description: Application name
  value: starter-guides
  displayName: Application name
  required: true
- name: CONTENT_URL_PREFIX
  description: Console url (e.g. https://raw.githubusercontent.com/openshift-labs/starter-guides/ocp-3.11)
  value: https://raw.githubusercontent.com/openshift-labs/starter-guides/ocp-3.11
  displayName: Content URL prefix
  required: true
- name: WORKSHOPS_URLS
  description: Workshop definition url (e.g. https://raw.githubusercontent.com/openshift-labs/starter-guides/ocp-3.11/_workshops/training.yml)
  value: file:///workshop/workshop.yml
  displayName: Workshop Url
  required: true
- name: CONSOLE_ADDRESS
  description: Console url (e.g. https://master.mycluster.openshiftworkshop.com or https://console.mycluster.gce.pixy.io:8443)
  value:
  displayName: Console url
  required: true
- name: ROUTER_ADDRESS
  description: Application subdomain (e.g. apps.mycluster.openshiftworkshop.com or apps.mycluster.gce.pixy.io)
  value:
  displayName: Application subdomain
  required: true
- name: USER_PROJECT
  description: User project name
  value: 
  displayName: User project name
  required: true
- name: INFRA_PROJECT
  description: Infra project name
  value: 
  displayName: Infra project name
  required: true  
objects:
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${APPNAME}
    labels:
      app: ${APPNAME}
      role: config
  data:
    WORKSHOPS_URLS: ${WORKSHOPS_URLS}
    workshop.yml: |+
      ---
      id: workshop
      name: Developing Java Applications on OpenShift - Starter Lab

      content:
        url: ${CONTENT_URL_PREFIX}

      vars:
        CONSOLE_ADDRESS: ${CONSOLE_ADDRESS}
        ROUTER_ADDRESS: ${ROUTER_ADDRESS}
        INFRA_PROJECT: ${INFRA_PROJECT}
        USER_NAME: developer
        USER_PASSWORD: developer
        USER_PROJECT: ${USER_PROJECT}

      modules:
        activate:
        - common-parksmap-architecture
        - parksmap-docker
        - parksmap-scaling
        - parksmap-routes
        - parksmap-logging
        - parksmap-permissions
        - parksmap-rsh
        - nationalparks-java
        - nationalparks-java-databases
        - nationalparks-application-health
        - nationalparks-java-pipeline
        - nationalparks-java-pipeline-codechanges-gogs
        - mlbparks-templates
        - mlbparks-clustering
        - mlbparks-binary-build
        - mlbparks-debugging
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: workshopper
    labels:
      app: ${APPNAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: quay.io/osevg/workshopper:latest
      importPolicy: {}
      referencePolicy:
        type: Source
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APPNAME}
    labels:
      app: ${APPNAME}
  spec:
    replicas: 1
    selector:
      app: ${APPNAME}
      deploymentconfig: ${APPNAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APPNAME}
          deploymentconfig: ${APPNAME}
      spec:
        containers:
        - image: workshopper
          envFrom:
            - configMapRef:
                name: ${APPNAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APPNAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /workshop
            name: volume-config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: ${APPNAME}
          name: volume-config
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPNAME}
        from:
          kind: ImageStreamTag
          name: workshopper:latest
      type: ImageChange
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APPNAME}
    labels:
      app: ${APPNAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPNAME}
      deploymentconfig: ${APPNAME}
    sessionAffinity: None
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APPNAME}
    labels:
      app: ${APPNAME}
  spec:
    host:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPNAME}
      weight: 100
    wildcardPolicy: None
