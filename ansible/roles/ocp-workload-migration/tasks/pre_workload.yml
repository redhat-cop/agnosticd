---
- wait_for:
    port: 22
    host: "bastion.{{ guid }}.internal"
    timeout: 5
  register: status
  ignore_errors: true

- block:
  - name: "Ensuring SSH directory"
    file:
      path: "/home/{{ student_name }}/.ssh"
      state: directory
      owner: "{{ student_name }}"

  - name: "Checking if SSH keys exist on bastion"
    stat: 
      path: /home/{{ student_name }}/.ssh/openshift_key
    register: ssh_key

  - name: "Creating SSH keys on bastion"
    shell: "ssh-keygen -q -t rsa -f /home/{{ student_name }}/.ssh/openshift_key -C '' -N ''"
    when: not ssh_key.stat.exists|d('false')

  - name: "Fixing permissions of SSH key"
    file:
      path: "/home/{{ student_name }}/.ssh/{{ item }}"
      owner: "{{ student_name }}"
      mode: "0600"
    loop:
      - "openshift_key"
      - "openshift_key.pub"
    when: ssh_key.stat.exists|d('false')

  - name: "Finding SSH key"
    stat: 
      path: /home/{{ student_name }}/.ssh/openshift_key.pub
    register: public_key

  - name: "Reading public key"
    shell: "cat /home/{{ student_name }}/.ssh/openshift_key.pub"
    register: pub_key_contents
    when: public_key.stat.exists|d('false')
  
  - name: "Downloading lab scripts [1]"
    tempfile: 
      state: directory
    register: scripts_dir

  - name: "Downloading lab scripts [2]"
    git:
      repo: "https://github.com/fusor/mig-agnosticd"
      dest: "{{ scripts_dir.path }}"

  - name: "Downloading lab scripts [3]"
    copy:
      src: "{{ scripts_dir.path }}/demos/2019_RHTE/labs/{{ item }}"
      dest: "/home/{{ student_name }}"
      remote_src: true
      owner: "{{ student_name }}"
      mode: "u+rwx"
    loop:
      - 'scripts'
      - 'files'

  - name: "Downloading CPMA binary to bastion"
    get_url:
      url: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ student_name }}"
      mode: "u+rwx"
    loop:
      - { dest: "/home/{{ student_name }}/cpma", src: "https://cpma.s3.us-east-2.amazonaws.com/cpma" }
  when: student_name is defined and not status.failed
  delegate_to: "{{ groups.bastions | first }}"
  become: yes

- name: "Adding public key to authorized_keys"
  authorized_key:
    user: "{{ migration_master_user_name | d('ec2-user') }}"
    state: present
    key: "{{ pub_key_contents.stdout }}"
  when: pub_key_contents.stdout is defined and student_name is defined

- name: "Creating temp directory for operator repo"
  tempfile: 
    state: directory
    suffix: mig-operator
  register: repodir

- name: "Checking out operator repo"
  git:
    repo: "{{ mig_operator_repo }}"
    dest: "{{ repodir.path }}"
    version: "{{ mig_operator_repo_branch }}"
    
- name: "Applying variables"
  replace:
    path: "{{ repodir.path }}/controller-4.yml"
    regexp: "{{ item.pattern }}"
    replace: "{{ item.replace }}"
  loop:
    - { pattern: "migration_velero:.*", replace: "migration_velero: {{ mig_operator_deploy_velero }}" }
    - { pattern: "migration_controller:.*", replace: "migration_controller: {{ mig_operator_deploy_controller }}" }
    - { pattern: "migration_ui:.*", replace: "migration_ui: {{ mig_operator_deploy_ui }}" }
  when: not migration_workload_destroy|bool

- name: "Applying mig cluster api endpoint"
  replace:
    path: "{{ repodir.path }}/controller-4.yml"
    regexp: "{{ item.pattern }}"
    replace: "{{ item.replace }}"
  loop:
    - { pattern: "#mig_ui_cluster_api_endpoint:.*", replace: "mig_ui_cluster_api_endpoint: {{ mig_operator_ui_cluster_api_endpoint }}" }
  when: not migration_workload_destroy|bool and mig_operator_ui_cluster_api_endpoint is defined

- name: "Add memory limits to controller"
  lineinfile:
    path: "{{ repodir.path }}/controller-4.yml"
    insertafter: "migration_ui"
    line: "  {{ item.key }}: {{ item.val }}"
    state: present
  loop:
    - { key: mig_controller_limits_memory, val: "{{ mig_controller_limits_memory }}" }
    - { key: mig_controller_requests_memory, val: "{{ mig_controller_requests_memory }}" }
  when: not migration_workload_destroy|bool

# Leave this as the last task in the playbook.
- name: pre_workload tasks complete
  debug:
    msg: "Pre-Workload tasks completed successfully."
  when: not silent|bool
