---
- name: Call GCP get token role
  include_role:
    name: gcp-get-token

- name: Get project
  uri:
    url: "https://cloudresourcemanager.googleapis.com/v3/projects/{{ project_name }}"
    method: GET
    headers:
      Authorization: "Bearer {{ auth_response.json.access_token }}"
      Accept: "application/json"
      Content-Type: "application/json"
  ignore_errors: true
  register: project_info

- name: Define service account email
  set_fact:
    service_account_email: "sa-openenv-{{ guid }}@{{ gcp_creds.project_id }}.iam.gserviceaccount.com"

- name: Delete OPEN Environment service account
  google.cloud.gcp_iam_service_account:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    name: "{{ service_account_email }}"
    display_name: "OPEN Environment Service account {{ guid }}"
    project: "{{ gcp_creds.project_id }}"
    state: absent

- name: Fetch Root DNS zone Info
  google.cloud.gcp_dns_managed_zone_info:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    project: "{{ gcp_creds.project_id }}"
    dns_name: '{{ gcp_root_dns_zone + "."}}'
  register: gcp_managed_zone

- name: Remove the DNS delegations
  google.cloud.gcp_dns_resource_record_set:
    auth_kind: serviceaccount
    service_account_contents: "{{ gcp_credentials }}"
    managed_zone:
      name: "{{ gcp_managed_zone.resources[0].name }}"
      dnsName: "{{ gcp_managed_zone.resources[0].dnsName }}"
    name: "{{ guid }}.{{ gcp_root_dns_zone }}."
    project: "{{ gcp_creds.project_id }}"
    type: NS
    state: absent

- name: Delete project
  when: 'project_info.status == 200 and project_info.json.state == "ACTIVE"'
  block:
    - name: Get project policy
      uri:
        url: "https://cloudresourcemanager.googleapis.com/v1/projects/{{ project_name }}:getIamPolicy"
        method: POST
        headers:
          Authorization: "Bearer {{ auth_response.json.access_token }}"
          Accept: "application/json"
          Content-Type: "application/json"
      register: project_policy

    - name: Get current members
      set_fact:
        current_members: "{{ project_policy.json.bindings[0].members }}"

    - name: Create user string
      set_fact:
        user_to_delete: "user:{{ requester_email }}"

    - name: Remove user from members
      set_fact:
        new_members: "{{ current_members | reject('search', user_to_delete) | list }}"

    - name: Create new policy
      set_fact:
        new_policy:
          bindings: [ { members: "{{ new_members }}", role: "roles/owner" } ]
          etag: "{{ project_policy.json.etag }}"
          version: 1

    - name: Set new project policy
      uri:
        url: "https://cloudresourcemanager.googleapis.com/v1/projects/{{ project_name }}:setIamPolicy"
        method: POST
        headers:
          Authorization: "Bearer {{ auth_response.json.access_token }}"
          Accept: "application/json"
          Content-Type: "application/json"
        body:
          policy: "{{ new_policy }}"
        body_format: json
      ignore_errors: true
      register: updated_project_policy

    - name: Delete project with API (because collection is broken)
      uri:
        url: "https://cloudresourcemanager.googleapis.com/v3/projects/{{ project_name }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ auth_response.json.access_token }}"
          Accept: "application/json"
          Content-Type: "application/json"

    # This removes the project but then produces an error today (bug in collection).
    # Leave here in case collection gets fixed.
    #- name: Delete GCP Project
    #  google.cloud.gcp_resourcemanager_project:
    #    auth_kind: serviceaccount
    #    service_account_contents: "{{ gcp_credentials }}"
    #    name: "{{ project_name }}"
    #    id: "{{ project_name }}"
    #    parent:
    #      type: organization
    #      id: "{{ gcp_organization }}"
    #    state: absent
