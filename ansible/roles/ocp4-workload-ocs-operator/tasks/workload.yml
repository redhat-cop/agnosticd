---
- name: Set state
  set_fact:
    state: present
  when: not ocs_operator_workload_destroy|bool

- name: Set state
  set_fact:
    state: absent
  when: ocs_operator_workload_destroy|bool

- name: "Create Namespace"
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('template', 'namespace.yml.j2') }}"
  with_items:
  - "{{ ocs_namespace }}"
  
- name: "Create OperatorGroup"
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('template', 'operator_group.yml.j2') }}"

- name: "Create Subscription"
  k8s:
    state: "{{ state }}"
    definition: "{{ lookup('template', 'subscription.yml.j2') }}"

- name: "Wait for MCG CRD's to exist"
  k8s_info:
    api_version: "apiextensions.k8s.io/v1beta1"
    kind: CustomResourceDefinition
    name: "{{ item }}"
  loop: "{{ ocs_expected_crds }}"
  register: crds
  until: crds.resources|length > 0
  retries: 30
  delay: 10

- when: ocs_install_mcg
  block:

  - name: "Create NooBaa system"
    k8s:
      state: "{{ state }}"
      definition: "{{ lookup('template', 'noobaa_system.yml.j2') }}"

  - when: ocs_mcg_pv_pool
    block:

    - name: "Create PV Pool BackingStore"
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', 'pv_pool_backingstore.yml.j2') }}"

    - name: "Create PV Pool BucketClass"
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', 'pv_pool_bucketclass.yml.j2') }}"

    - name: "Create PV Pool ObjectBucketClaim"
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', 'pv_pool_objectbucketclaim.yml.j2') }}"

    - name: "Wait for Bucket to exist"
      k8s_info:
        api_version: "objectbucket.io/v1alpha1"
        kind: ObjectBucketClaim
        name: "{{ ocs_mcg_pv_pool_bucket_name }}"
        namespace: "{{ ocs_namespace }}"
      register: bucket
      until: (bucket.resources|length) > 0
      retries: 30
      delay: 10

    - name: "Wait for Bucket to have status"
      k8s_info:
        api_version: "objectbucket.io/v1alpha1"
        kind: ObjectBucketClaim
        name: "{{ ocs_mcg_pv_pool_bucket_name }}"
        namespace: "{{ ocs_namespace }}"
      register: bucket
      until: (bucket.resources|first).status is defined
      retries: 30
      delay: 10

    - name: "Wait for Bucket to become bound"
      k8s_info:
        api_version: "objectbucket.io/v1alpha1"
        kind: ObjectBucketClaim
        name: "{{ ocs_mcg_pv_pool_bucket_name }}"
        namespace: "{{ ocs_namespace }}"
      register: bucket
      until: (bucket.resources|first).status.phase == "Bound"
      retries: 60
      delay: 10

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
