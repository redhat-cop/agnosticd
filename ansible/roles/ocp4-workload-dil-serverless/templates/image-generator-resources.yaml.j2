{% for __user in users %}
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: {{ image_generator_service_account }}
  namespace: '{{ __user }}-{{ smartcity_edge_project }}'

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ image_generator_application }}
    app.kubernetes.io/component: {{ image_generator_application }}
    app.kubernetes.io/instance: {{ image_generator_application }}
  name: {{ image_generator_configmap }}
  namespace: '{{ __user }}-{{ smartcity_edge_project }}'
data:
  application.properties: |
    kafka.bootstrap.servers={{ kafka_cluster }}-kafka-bootstrap.{{ __user }}-{{ smartcity_edge_project }}.svc:9092

    mp.messaging.outgoing.images.topic={{ kafka_topic_images }}

    quarkus.s3.endpoint-override=http://${service.point}:${service.point.port}

    quarkus.s3.path-style-access={{ image_generator_s3_path_style_access }}

    interval.seconds={{ image_generator_interval_seconds }}

---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app: {{ image_generator_application }}
    app.openshift.io/runtime: quarkus
    app.kubernetes.io/component: {{ image_generator_application }}
    app.kubernetes.io/instance: {{ image_generator_application }}
  name: {{ image_generator_application }}
  namespace: '{{ __user }}-{{ smartcity_edge_project }}'
spec:
  progressDeadlineSeconds: 600
  replicas: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: {{ image_generator_application }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        deployment: {{ image_generator_application }}
    spec:
      containers:
        - name: {{ image_generator_application }}
          image: {{ image_generator_image }}
          env:
            - name: SERVICE_POINT
              valueFrom:
                configMapKeyRef:
                  name: '{{ __user }}-{{ smartcity_edge_s3_bucket }}'
                  key: BUCKET_HOST
            - name: SERVICE_POINT_PORT
              value: '80'
            - name: QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: '{{ __user }}-{{ smartcity_edge_s3_bucket }}'
                  key: AWS_ACCESS_KEY_ID
            - name: QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: '{{ __user }}-{{ smartcity_edge_s3_bucket }}'
                  key: AWS_SECRET_ACCESS_KEY
            - name: BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  name: '{{ __user }}-{{ smartcity_edge_s3_bucket }}'
                  key: BUCKET_NAME  
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /q/health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /q/health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              cpu: "{{ image_generator_resources_requests_cpu }}"
              memory: "{{ image_generator_resources_requests_memory }}"
            limits:
              cpu: "{{ image_generator_resources_limits_cpu }}"
              memory: "{{ image_generator_resources_limits_memory }}"
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: config
              mountPath: /deployments/config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: {{ image_generator_service_account }}
      serviceAccountName: {{ image_generator_service_account }}  
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: {{ image_generator_configmap }}
            defaultMode: 420

{% endfor %}