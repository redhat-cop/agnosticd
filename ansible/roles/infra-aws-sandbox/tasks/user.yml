---
# NOTE: Use 'command' module instead of ansible iam module because it doesn't work well with boto profiles.
- environment:
    AWS_PROFILE: "{{ account_profile }}"
  block:
    - name: Check if user already exists
      command: aws iam list-users --query 'Users[].UserName'
      register: _listusers
      changed_when: false

    - name: Create new IAM user
      when: account_user not in _listusers.stdout|from_json|list
      command: aws iam create-user --user-name {{ account_user }}
      register: _iamuser

    - name: Attach user to AdministratorAccess policy
      command: >-
        aws iam attach-user-policy
        --user-name {{ account_user }}
        --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

    - name: Get access keys for user
      command: >-
        aws iam list-access-keys --user-name {{ account_user }}
        --query 'AccessKeyMetadata[].AccessKeyId'
      register: _listkeys
      changed_when: false

    - when: operation == 'RESET'
      name: Delete all access keys
      command: >-
        aws iam delete-access-key
        --user-name {{ account_user }}
        --access-key-id {{ _key }}
      loop: "{{_listkeys.stdout|from_json|list }}"
      loop_control:
        loop_var: _key

    # Create keys when there are none or operation == RESET
    - when: >-
        _listkeys.stdout|from_json|list|length == 0
        or operation == 'RESET'
      block:
        - name: create new IAM access keys
          command: aws iam create-access-key --user-name {{ account_user }}
          register: _iamuserkey

        - name: Save user access key and secret
          set_fact:
            account_user_access_key: "{{ _iamuserkey.stdout|from_json|json_query('AccessKey.AccessKeyId') }}"
            account_user_secret_access_key: "{{ _iamuserkey.stdout|from_json|json_query('AccessKey.SecretAccessKey') }}"
          no_log: true

        - name: Encrypt secret_access_key using ansible-vault
          command: >-
            ansible-vault encrypt --vault-password-file "{{ vault_file }}"
          args:
            stdin: "{{ account_user_secret_access_key }}"
          register: encryptedkey
          no_log: true

        - set_fact:
            account_user_secret_access_key_encrypted: "{{ encryptedkey.stdout }}"
          no_log: true

        - name: Add Access Key to the report
          lineinfile:
            path: "{{ output_dir }}/{{ account_name }}_report.txt"
            line: "aws_access_key_id: {{ account_user_access_key }}"
            regexp: '^aws_access_key_id: '

        - name: Add Secret Access Key to the report
          lineinfile:
            path: "{{ output_dir }}/{{ account_name }}_report.txt"
            line: "aws_secret_access_key: {{ account_user_secret_access_key }}"
            regexp: '^aws_secret_access_key: '
