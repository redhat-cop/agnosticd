---
- name: Check if account exists in the DB
  vars:
    _data:
      name:
        S: "{{ account_name }}"
  command: >-
    aws --profile {{ aws_master_profile }} --region {{ dynamodb_region }}
    dynamodb get-item
    --table-name {{ dynamodb_table }}
    --key '{{ _data | to_json }}'
  register: _getaccount

- debug:
    var: _getaccount

- name: Create account in DB if it doesn't exist
  vars:
    _data:
      name:
        S: "{{ account_name }}"
      available:
        BOOL: false
      account_id:
        S: "{{ account_id }}"
      aws_access_key_id:
        S: "{{ account_user_access_key }}"
      aws_secret_access_key:
        S: "{{ account_user_secret_access_key_encrypted }}"
      hosted_zone_id:
        S: "{{ account_hosted_zone_id }}"
      zone:
        S: "{{ account_name }}{{subdomain_base}}"
  command: >-
    aws --profile {{ aws_master_profile }} --region {{ dynamodb_region }}
    dynamodb put-item
    --table-name {{ dynamodb_table }}
    --item '{{ _data | to_json }}'
  register: _putaccount
  when: _getaccount.stdout == ''

- debug:
    var: _putaccount

- when: operation == 'RESET'
  block:
    - name: Reset account information
      vars:
        _data:
          name:
            S: "{{ account_name }}"
          available:
            BOOL: "{{ available_after_reset }}"
          account_id:
            S: "{{ account_id }}"
          aws_access_key_id:
            S: "{{ account_user_access_key }}"
          aws_secret_access_key:
            S: "{{ account_user_secret_access_key_encrypted }}"
          hosted_zone_id:
            S: "{{ account_hosted_zone_id }}"
          zone:
            S: "{{ account_name }}{{subdomain_base}}"
      command: >-
        aws --profile {{ aws_master_profile }}
        --region {{ dynamodb_region }}
        dynamodb put-item
        --table-name {{ dynamodb_table }}
        --item '{{ _data | to_json }}'
      register: _resetaccount
