---

# Split these into two blocks so that the AWS/Cloudformation one with its specific vars continues to work, but in
# the future can use more generic template vars.
- name: Locate template for AWS cloud provider
  when: cloud_provider == 'aws'
  block:
    - name: Check if template exists for the environment
      stat:
        path: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.j2"
      register: stat_local_template

    - name: Use CloudFormation template from the environment
      set_fact:
        cloudformation_template_src: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.j2"
      when: stat_local_template.stat.exists

    - name: Use the default CloudFormation template
      set_fact:
        cloudformation_template_src: "templates/cloud_template.j2"
      when: not stat_local_template.stat.exists

    - name: Print cloudformation_template_src
      debug:
        var: cloudformation_template_src

# Everything else should use this going forward, combined with a specific set of tasks called by main.yml
# to configure the template creation for the specific cloud provider
- name: Locate template for OSP cloud provider
  when: cloud_provider == 'osp' # TODO: Make this "not AWS" so everything else can be more generic use without cloudformation reference
  block:
    - name: Check if master template exists for the environment
      stat:
        path: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template_master.j2"
      register: stat_master_template

    - name: Use master template from the environment
      set_fact:
        cloud_infra_master_template_src: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template_master.j2"
      when: stat_master_template.stat.exists

    - name: Check if nested template exists for the environment
      stat:
        path: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template_nested.j2"
      register: stat_nested_template

    - name: Use nested template from the environment
      set_fact:
        cloud_infra_nested_template_src: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template_nested.j2"
      when: stat_nested_template.stat.exists

# Until there is a default template, leave this disabled and just fail instead
    # - name: Use the default infra template
    #   set_fact:
    #     cloud_infra_template_src: "templates/cloud_template.j2"
    #   when: not stat_local_template.stat.exists

    # - name: Fail if infra template not in config
    #   fail:
    #     msg: "No infra template found in ../configs/{{ env_type }}/files/cloud_providers/ directory"
    #   when: not stat_local_template.stat.exists

    - name: Print cloud_infra_template_src
      debug:
        var: cloud_infra_master_template_src
