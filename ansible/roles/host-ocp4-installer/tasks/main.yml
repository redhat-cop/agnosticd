- name: Install client and OpenShift Installer binaries
  import_tasks: install_installer.yml

- name: Generate install_config.yaml
  import_tasks: generate_install_config.yml

- name: Run the installer
  become: no
  tags:
  - run_installer
  command: openshift-install create cluster --dir=/home/{{ ansible_user }}/{{ cluster_name }}
  async: "{{ 2 * 60 * 60 }}"

- name: Fetch kube config
  fetch:
    flat: yes
    src: /home/{{ ansible_user }}/{{ cluster_name }}/auth/{{ item }}
    dest: "{{ hostvars.localhost.output_dir }}/{{ env_type }}_{{ guid }}_{{ item }}"
  loop:
    - kubeconfig
    - kubeadmin-password

- name: Make sure .kube directory exists in home directory
  file:
    state: directory
    path: "/home/{{ ansible_user }}/.kube"
    owner: "{{ ansible_user }}"
    mode: 0775

- name: Set up .kube/config
  copy:
    remote_src: yes
    src: "/home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
    dest: "/home/{{ ansible_user }}/.kube/config"

- name: Make sure .kube directory exists in /root
  become: yes
  file:
    state: directory
    path: /root/.kube
    owner: root
    mode: 0700

- name: Set up .kube/config for root
  become: yes
  copy:
    remote_src: yes
    src: "/home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
    dest: /root/.kube/config

- name: Set up Student User
  when: install_student_user | bool
  block:
  - name: Make sure .kube directory exists in /home/{{ student_name }}
    become: yes
    file:
      state: directory
      path: "/home/{{ student_name }}/.kube"
      owner: "{{ student_name }}"
      mode: 0700

  - name: Copy /home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig to /home/{{ student_name }}/.kube
    become: yes
    copy:
      src: /home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig
      dest: /home/{{ student_name }}/.kube/config
      remote_src: yes
      owner: "{{ student_name }}"
      mode: 0600

- name: Create OpenShift Bash completion file
  become: yes
  shell: oc completion bash >/etc/bash_completion.d/openshift

- name: Gather and Print cluster info
  import_tasks: print_cluster_info.yml

## Open the port for the api
- name: OpenStack specific requirement - attach floating_ip_address to ingress port
  when: cloud_provider == "osp"
  import_tasks: osp_post.yml
