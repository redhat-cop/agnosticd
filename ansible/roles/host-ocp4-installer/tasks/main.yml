---
- name: Install client and OpenShift Installer binaries
  import_tasks: install_installer.yml

## Open the port for the api
- name: OpenStack specific requirement - find network port id
  when:
  - cloud_provider == "osp"
  - ocp_use_single_network | default(false) | bool
  import_tasks: osp_pre.yml

- name: Generate install_config.yaml
  import_tasks: generate_install_config.yml

- name: Installation and getting the logs
  tags:
  - run_installer
  block:
  - name: Create openshift-install manifests
    include_tasks: create-manifests.yml

  - name: Run the installer
    become: false
    command: openshift-install create cluster --dir=/home/{{ ansible_user }}/{{ cluster_name }}
    async: "{{ 2 * 60 * 60 }}"
    poll: 15

  rescue:
  - name: Run destroy to reset before retry
    become: false
    command: openshift-install destroy cluster --dir=/home/{{ ansible_user }}/{{ cluster_name }}

  - name: Pause briefly for cloud provider cleanup to finish
    pause:
      minutes: 2

  - name: Restore install config from backup copy
    copy:
      remote_src: true
      src: /home/{{ ansible_user }}/{{ cluster_name }}/install-config.yaml.bak
      dest: /home/{{ ansible_user }}/{{ cluster_name }}/install-config.yaml
      owner: "{{ ansible_user }}"
      mode: ug=rw,o=

  - name: Recreate openshift-install manifests
    include_tasks: create-manifests.yml

  - name: Retry the installer
    become: false
    command: openshift-install create cluster --dir=/home/{{ ansible_user }}/{{ cluster_name }}
    async: "{{ 2 * 60 * 60 }}"
    poll: 15

  always:
  - name: Gzip Install log
    archive:
      path: /home/{{ ansible_user }}/{{ cluster_name }}/.openshift_install.log
      dest: /home/{{ ansible_user }}/{{ cluster_name }}/.openshift_install.log.gz
      format: gz

  - name: Get Install log
    fetch:
      src: /home/{{ ansible_user }}/{{ cluster_name }}/.openshift_install.log.gz
      dest: "{{ output_dir }}/{{ env_type }}_{{ guid }}_log/"
      flat: true

# OpenStack does not have a way to add userTags via the install-config.yaml
# https://bugzilla.redhat.com/show_bug.cgi?id=1868517
# Find all created active instances (name contains the GUID)
# and add the tags manually
# Tags are necessary for lifecycle (stop / start environments)
- name: Add tags to OpenStack instance metadata
  when: cloud_provider == "osp"
  block:
  - name: Get all instances for GUID
    os_server_info:
      server: "*{{ guid }}*"
      filters:
        vm_state: active
    register: r_servers

  - name: Add GUID and env-type metadata to instances
    os_server_metadata:
      server: "{{ item.name }}"
      meta:
        guid: "{{ guid }}"
        env_type: "{{ env_type }}"
    loop: "{{ r_servers.openstack_servers }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Add additional metadata to instances
    when: hostvars.localhost.cf_tags_final | default({}) | length > 0
    os_server_metadata:
      server: "{{ item.name }}"
      meta: "{{ hostvars.localhost.cf_tags_final | default({}) | to_json }}"
    loop: "{{ r_servers.openstack_servers }}"
    loop_control:
      label: "{{ item.name }}"

- name: Fetch kube config
  fetch:
    flat: true
    src: /home/{{ ansible_user }}/{{ cluster_name }}/auth/{{ item }}
    dest: "{{ hostvars.localhost.output_dir }}/{{ env_type }}_{{ guid }}_{{ item }}"
  loop:
  - kubeconfig
  - kubeadmin-password

- name: Make sure .kube directory exists in home directory
  file:
    state: directory
    path: "/home/{{ ansible_user }}/.kube"
    owner: "{{ ansible_user }}"
    mode: 0775

- name: Set up .kube/config
  copy:
    remote_src: true
    src: "/home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
    dest: "/home/{{ ansible_user }}/.kube/config"

- name: Make sure .kube directory exists in /root
  become: true
  file:
    state: directory
    path: /root/.kube
    owner: root
    mode: 0700

- name: Set up .kube/config for root
  become: true
  copy:
    remote_src: true
    src: "/home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig"
    dest: /root/.kube/config

- name: Set up Student User
  when: install_student_user | bool
  block:
  - name: Make sure .kube directory exists in /home/{{ student_name }}
    become: true
    file:
      state: directory
      path: "/home/{{ student_name }}/.kube"
      owner: "{{ student_name }}"
      mode: 0700

  - name: Copy /home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig to /home/{{ student_name }}/.kube
    become: true
    copy:
      src: /home/{{ ansible_user }}/{{ cluster_name }}/auth/kubeconfig
      dest: /home/{{ student_name }}/.kube/config
      remote_src: true
      owner: "{{ student_name }}"
      mode: 0600

- name: Create OpenShift Bash completion file
  become: true
  shell: oc completion bash >/etc/bash_completion.d/openshift

- name: Gather and Print cluster info
  import_tasks: print_cluster_info.yml

## Open the port for the api
- name: OpenStack specific requirement - attach floating_ip_address to ingress port
  when: cloud_provider == "osp"
  import_tasks: osp_post.yml
