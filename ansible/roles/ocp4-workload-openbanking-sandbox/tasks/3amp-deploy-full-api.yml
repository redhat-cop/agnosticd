---
###
# Backend CRD deployment
- name: Create a tempfile for Backend CRD
  tempfile:
    state: file
    suffix: temp
  register: _crd_template
  until: _crd_template.path is defined

- name: Retrieve the Backend CRD content from Open Banking Sandbox repo into tempfile
  get_url:
    url: "{{ obsandbox_api_crds_base_url + '/backend-' + _api_resource_id + '.yml.j2' }}"
    dest: "{{ _crd_template.path }}"

- name: Creating the "{{ _api_resource_id }}" Backend CRD provided by 3scale
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', _crd_template.path ) | from_yaml }}"

- name: Remove tempfile created for Backend CRD
  file:
    path: "{{ _crd_template.path }}"
    state: absent
  when: _crd_template.path is defined

- name: Wait to synchronize the "{{ _api_resource_id }}" Backend CRDs with 3scale
  k8s_info:
    api_version: capabilities.3scale.net/v1beta1
    kind: Backend
    name: "backend-{{ _api_resource_id }}"
    namespace: "{{ obsandbox_3scale_namespace }}"
  register: _wait_backend
  retries: 8
  delay: 15
  until:
  - _wait_backend.resources is defined
  - _wait_backend.resources | length | int > 0
  - _wait_backend.resources[0].status is defined
  - _wait_backend.resources[0].status.conditions is defined
  - ( _wait_backend.resources[0].status | to_json | from_json |
    json_query('conditions[?type == `Synced`].status') | join ) == "True"

###
# Product CRD deployment
- name: Create a tempfile for Product CRD
  tempfile:
    state: file
    suffix: temp
  register: _crd_template
  until: _crd_template.path is defined

- name: Retrieve the Product CRD content from Open Banking Sandbox repo into tempfile
  get_url:
    url: "{{ obsandbox_api_crds_base_url + '/product-' + _api_resource_id + '.yml.j2' }}"
    dest: "{{ _crd_template.path }}"

- name: Create the "{{ _api_resource_id }}" Product CRD provided by 3scale
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', _crd_template.path ) | from_yaml }}"

- name: Remove tempfile created for Product CRD
  file:
    path: "{{ _crd_template.path }}"
    state: absent
  when: _crd_template.path is defined

- name: Wait to synchronize the "{{ _api_resource_id }}" Product CRDs with 3scale
  k8s_info:
    api_version: capabilities.3scale.net/v1beta1
    kind: Product
    name: "product-{{ _api_resource_id }}"
    namespace: "{{ obsandbox_3scale_namespace }}"
  register: _wait_product
  retries: 8
  delay: 15
  until:
  - _wait_product.resources is defined
  - _wait_product.resources | length | int > 0
  - _wait_product.resources[0].status is defined
  - _wait_product.resources[0].status.conditions is defined
  - ( _wait_product.resources[0].status | to_json | from_json |
    json_query('conditions[?type == `Synced`].status') | join ) == "True"

###
# Publish and set Application Plan as default after deploying product
- name: Setting product ID, API Name and System Name to publish application plan
  set_fact:
    _product_id: "{{ _wait_product.resources[0].status.productId }}"
    _product_api_name: "{{ _wait_product.resources[0].spec.name }}"
    _api_base_system_name: "{{ _api_resource_id|replace('-','_') }}"

- name: Retrieving the application plan ID for 3scale product "{{ _api_resource_id }} ({{ _product_id }})"
  uri:
    url: "{{ _3scale_admin_url }}/admin/api/services/{{ _product_id }}/application_plans.xml"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    method: GET
    body_format: form-urlencoded
    body:
    - [access_token, "{{ _3scale_provider_key }}"]
    return_content: true
    status_code: 200
  register: _application_plans
  retries: 8
  delay: 15
  until: _application_plans.content is defined

- name: Parse application plan XML
  xml:
    xmlstring: '{{ _application_plans.content }}'
    xpath: //plans/plan/id
    content: text
  register: _xmlparse

- name: Set _plan_id
  set_fact: _plan_id={{ _xmlparse.matches[0].id }}

- name: Retrieve the application plan ID {{ _plan_id }} for 3scale product "{{ _api_resource_id }} ({{ _product_id }})"
  uri:
    url: "{{ _3scale_admin_url }}/admin/api/services/{{ _product_id }}/application_plans/{{ _plan_id }}.xml"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    method: GET
    body_format: form-urlencoded
    body:
    - [access_token, "{{ _3scale_provider_key }}"]
    return_content: true
    status_code: 200
  register: _plan_details
  retries: 8
  delay: 15
  until: _plan_details.content is defined

- name: Get application plan Status
  xml:
    xmlstring: '{{ _plan_details.content }}'
    xpath: //plan/state
    content: text
  register: _xmlparse

- name: Set the application plan State
  set_fact: _plan_state={{ _xmlparse.matches[0].state }}

- name: Publishing the application plan ID "{{ _plan_id }}" for 3scale product
    "{{ _api_resource_id }} ({{ _product_id }})"
  when: ( _plan_state == 'hidden' )
  uri:
    url: "{{ _3scale_admin_url }}/admin/api/services/{{ _product_id }}/application_plans/{{ _plan_id }}.xml"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    method: PUT
    body_format: form-urlencoded
    body:
    - [state_event, publish]
    - [access_token, "{{ _3scale_provider_key }}"]
    status_code: 200

- name: Setting as Default the application plan ID {{ _plan_id }} for 3scale product
    "{{ _api_resource_id }} ({{ _product_id }})"
  uri:
    url: "{{ _3scale_admin_url }}/admin/api/services/{{ _product_id }}/application_plans/{{ _plan_id }}/default.xml"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    method: PUT
    body_format: form-urlencoded
    body:
    - [access_token, "{{ _3scale_provider_key }}"]
    status_code: 200

###
# Add CORS to Proxy Policies
# (warning disabled -- can't make this request work using the URI module)
- name: Update Proxy Policies configuration with CORS and APIcast to 3scale product
    "{{ _api_resource_id }} ({{ _product_id }})"
  shell: >
    curl -k -f -s -S -X PUT '{{ _3scale_admin_url }}/admin/api/services/{{ _product_id }}/proxy/policies.json' \
    --form 'access_token={{ _3scale_provider_key }}' \
    --form 'policies_config={{ _l_config }}'
  args:
    warn: false
  register: _r_policies_cfg
  failed_when: (_r_policies_cfg.rc == 22)
  vars:
    _l_config: '[{"configuration":{},"name":"cors","version":"builtin","enabled":true},{"configuration":{},"name":"apicast","version":"builtin","enabled":true}]'

###
# Promote to Staging the proxy configuration
- name: Update Proxy Configuration to Staging for 3scale product "{{ _api_resource_id }} ({{ _product_id }})"
  uri:
    url: "{{ _3scale_admin_url }}/admin/api/services/{{ _product_id }}/proxy.xml"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    method: PATCH
    headers:
      Authorization: "{{ _3scale_basic_auth_token }}"
    body_format: json
    body: >-
      {
        "proxy": {
          "service_id": {{ _product_id }}
        }
      }
    status_code: 200

- name: Deploy Proxy Configuration to Staging for 3scale product "{{ _api_resource_id }} ({{ _product_id }})"
  uri:
    url: "{{ _3scale_admin_url }}/admin/api/services/{{ _product_id }}/proxy/deploy.xml"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    method: POST
    headers:
      Authorization: "{{ _3scale_basic_auth_token }}"
    body_format: form-urlencoded
    body:
    - [access_token, "{{ _3scale_provider_key }}"]
    status_code: 201

###
# Publish in ActiveDocs the API definition
- name: create temporary file
  tempfile:
    state: file
    suffix: temp
  register: _tmp_apispec
  until: _tmp_apispec.path is defined

- name: Download the API definition for "{{ _api_resource_id }}" as tempfile
  get_url:
    url: "{{ obsandbox_api_spec[ _api_resource_id ] }}"
    dest: "{{ _tmp_apispec.path }}"

- name: Check if ActiveDocs exists based on system_name and retrieve ID
  set_fact: _api_doc_id={{ _3scale_active_docs_list.json | to_json | from_json | json_query(_query) | join | int }}
  vars:
    _query: "api_docs[?api_doc.system_name=='{{ _api_base_system_name }}_docs'].api_doc.id"

# 3scale CMS backend requires multipart-form with attached payload on this request,
# the URI module was not suitable to make it work -- so using CURL with SHELL module instead
# (warning is disabled)
- name: Create the ActiveDocs for 3scale product "{{ _api_resource_id }} ({{ _product_id }})"
  when: ( _api_doc_id | int ) == 0
  shell: >
    curl -k -f -s -S -X POST '{{ _3scale_admin_url }}/admin/api/active_docs.json' \
    --header 'Authorization: {{ _3scale_basic_auth_token }}' \
    --form 'service_id={{ _product_id }}' \
    --form 'system_name={{ _api_base_system_name }}_docs' \
    --form 'name={{ _product_api_name }}' \
    --form 'published=true' \
    --form 'body=@{{ _tmp_apispec.path }}'
  args:
    warn: false
  register: _r_shell
  failed_when: >
    (_r_shell.rc == 22) and
    not ("500 Internal Server Error" in _r_shell.stderr)

# 3scale CMS backend requires multipart-form with attached payload on this request,
# the URI module was not suitable to make it work -- so using CURL with SHELL module instead
# (warning is disabled)
- name: Update the ActiveDocs for 3scale product "{{ _api_resource_id }} ({{ _product_id }})"
  when: ( _api_doc_id | int ) > 0
  shell: >
    curl -k -f -s -S -X PUT '{{ _3scale_admin_url }}/admin/api/active_docs/{{ _api_doc_id }}.json' \
    --header 'Authorization: {{ _3scale_basic_auth_token }}' \
    --form 'id={{ _api_doc_id }}' \
    --form 'service_id={{ _product_id }}' \
    --form 'system_name={{ _api_base_system_name }}_docs' \
    --form 'name={{ _product_api_name }}' \
    --form 'published=true' \
    --form 'body=@{{ _tmp_apispec.path }}'
  args:
    warn: false
  register: _r_shell
  failed_when: >
    (_r_shell.rc == 22) and
    not ("500 Internal Server Error" in _r_shell.stderr)

- name: use the registered var and the file module to remove the temporary file
  file:
    path: "{{ _tmp_apispec.path }}"
    state: absent
  when: _tmp_apispec.path is defined
