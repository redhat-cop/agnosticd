---
# Implement your Post Workload deployment tasks here

###
# Keycloak / Microcks tasks
- name: Get route to Keycloak/Microcks service
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ obsandbox_microcks_keycloak_route }}"
    namespace: "{{ obsandbox_microcks_namespace }}"
  register: _keycloak_route
  retries: 3
  delay: 5
  until: _keycloak_route.resources|length > 0

- name: Retrieve the Keycloak/Microcks admin credential in the Secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ obsandbox_microcks_keycloak_secret }}"
    namespace: "{{ obsandbox_microcks_namespace }}"
  register: _microcks_keycloak_secret
  retries: 3
  delay: 5
  until: _microcks_keycloak_secret.resources|length > 0

- name: Settings Keycloak params - url, admin username, admin password
  set_fact:
    _keycloak_url: "https://{{ _keycloak_route.resources[0].spec.host }}"
    _keycloak_admin_usr: "{{ _microcks_keycloak_secret.resources[0].data.username | b64decode }}"
    _keycloak_admin_pwd: "{{ _microcks_keycloak_secret.resources[0].data.password | b64decode }}"

- name: Retrieve Microcks URL from the route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: "{{ obsandbox_microcks_namespace }}"
    field_selectors:
      - spec.to.name=microcks
  register: _microcks_route
  retries: 3
  delay: 5
  until:
    - _microcks_route.resources is defined
    - _microcks_route.resources | length | int > 0
    - _microcks_route.resources[0].spec is defined

- name: Settings Microcks params - url, backend url, base url
  set_fact:
    _microcks_url: "https://{{ _microcks_route.resources[0].spec.host }}"
    _microcks_backend_url: "https://{{ _microcks_route.resources[0].spec.host }}/api"
    _mock_base_url: "https://{{ _microcks_route.resources[0].spec.host }}/rest"


- name: Run the Import Collection into Microcks for each 'obsandbox_api_mock_data'
  include_tasks: microcks-import-collection.yml
  vars:
    _mock_data_location: "{{ item }}"
    _mock_data_filename: "{{ item | basename }}"
  with_items: "{{ obsandbox_api_mock_data }}"

# Create 3scale tenant account provider secret
- name: Retrieve 3scale access token from the system-seed
  k8s_info:
    api_version: v1
    kind: Secret
    name: system-seed
    namespace: "{{ obsandbox_3scale_namespace }}"
  register: _system_seed
  retries: 3
  delay: 5
  until:
    - _system_seed.resources is defined
    - _system_seed.resources | length | int > 0
    - _system_seed.resources[0].data is defined
    - _system_seed.resources[0].data.ADMIN_ACCESS_TOKEN is defined

- name: Retrieve 3scale admin URL from the route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: "{{ obsandbox_3scale_namespace }}"
    field_selectors:
      - spec.to.name=system-provider
  register: _admin_route
  retries: 3
  delay: 5
  until:
    - _admin_route.resources is defined
    - _admin_route.resources | length | int > 0
    - _admin_route.resources[0].spec is defined

- name: Retrieve 3scale Developer Portal URL from the route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: "{{ obsandbox_3scale_namespace }}"
    field_selectors:
      - spec.to.name=system-developer
  register: _portal_route
  retries: 3
  delay: 5
  until:
    - _portal_route.resources is defined
    - _portal_route.resources | length | int > 0
    - _portal_route.resources[0].spec is defined

- name: Setting 3scale parameters - provider key, admin pwd, admin url, portal url
  set_fact:
    _3scale_provider_key: "{{ _system_seed.resources[0].data.ADMIN_ACCESS_TOKEN | b64decode }}"
    _3scale_admin_password: "{{ _system_seed.resources[0].data.ADMIN_PASSWORD | b64decode }}"
    _3scale_admin_url: "https://{{ _admin_route.resources[0].spec.host }}"
    _3scale_portal_url: "https://{{ _portal_route.resources[0].spec.host }}"

- name: Create 3scale secret used by CRDs "{{ obsandbox_3scale_tenant_provider_account_ref }}"
  k8s:
    state: present
    merge_type:
      - strategic-merge
      - merge
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ obsandbox_3scale_tenant_provider_account_ref }}"
        namespace: "{{ obsandbox_3scale_namespace }}"
      data:
        adminURL: "{{ _3scale_admin_url | b64encode }}"
        token: "{{ _3scale_provider_key | b64encode }}"

- name: Setting the _3scale_basic_auth_token param
  set_fact:
    _3scale_basic_auth_token: "Basic {{ (':' + _3scale_provider_key) | b64encode }}"

###
# Update Developer Portal with CMS content

- name: Run the Create Section into 3scale for each 'obsandbox_portal_sections'
  include_tasks: 3amp-portal-create-section.yml
  vars:
    _section_system_name: "{{ item.system_name }}"
    _section_path: "{{ item.path }}"
    _section_title: "{{ item.title }}"
  with_items: "{{ obsandbox_portal_sections }}"

- name: Run the Upload Layout into 3scale for each 'obsandbox_portal_layouts'
  include_tasks: 3amp-portal-upload-layout.yml
  vars:
    _layout_system_name: "{{ item.system_name }}"
    _layout_title: "{{ item.title }}"
    _layout_location: "{{ item.location }}"
  with_items: "{{ obsandbox_portal_layouts }}"

- name: Run the Upload File into 3scale for each 'obsandbox_portal_files'
  include_tasks: 3amp-portal-upload-file.yml
  vars:
    _file_path: "{{ item.path }}"
    _file_location: "{{ item.location }}"
  with_items: "{{ obsandbox_portal_files }}"

- name: Run the Upload Page into 3scale for each 'obsandbox_portal_pages'
  include_tasks: 3amp-portal-upload-page.yml
  vars:
    _page_path: "{{ item.path }}"
    _page_title: "{{ item.title }}"
    _page_layout: "{{ item.layout }}"
    _page_location: "{{ item.location }}"
  with_items: "{{ obsandbox_portal_pages }}"

- name: Run the Upload Builtin Page into 3scale for each 'obsandbox_portal_builtin_pages'
  include_tasks: 3amp-portal-upload-builtin-page.yml
  vars:
    _builtin_system_name: "{{ item.system_name }}"
    _builtin_layout: "{{ item.layout }}"
    _builtin_location: "{{ item.location }}"
  with_items: "{{ obsandbox_portal_builtin_pages }}"

- name: Open the Developer Portal cleaning up the required site access code
  uri:
    method: PUT
    url: "{{ _3scale_admin_url }}/admin/api/provider.xml"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    headers:
      Authorization: "{{ _3scale_basic_auth_token }}"
    body_format: form-urlencoded
    body:
      - [site_access_code, '']
    status_code: 200

###
# Creating APIs in 3scale

- name: List existing ActiveDocs
  uri:
    method: GET
    url: "{{ _3scale_admin_url }}/admin/api/active_docs.json"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    headers:
      Authorization: "{{ _3scale_basic_auth_token }}"
    return_content: true
    status_code: 200
    body_format: json
  register: _3scale_active_docs_list
  until: _3scale_active_docs_list.json is defined

- name: Run the Full API deployment for each 'obsandbox_api_spec'
  include_tasks: 3amp-deploy-full-api.yml
  vars:
    _api_resource_id: "{{ item.key }}"
  loop: "{{ lookup('dict', obsandbox_api_spec) }}"

- name: Print out the User Messages at the end
  debug:
    msg: "{{ item }}"
  loop:
    - "user.info: "
    - "user.info: Open Banking Sandbox"
    - "user.info: --------------------"
    - "user.info: Here is some important information about your environment:"
    - "user.info: "
    - "user.info: Developer Portal .............. {{ _3scale_portal_url }}"
    - "user.info: 3scale Admin Console .......... {{ _3scale_admin_url }}"
    - "user.info: 3scale Admin Authenticatoin ... user 'admin' : password '{{ _3scale_admin_password }}'"
    - "user.info: Microcks Admin Console ........ {{ _microcks_url }}"
    - "user.info: Keycloak Admin Console ........ {{ _keycloak_url }}"
    - "user.info: Keycloak Admin Authentication . user '{{ _keycloak_admin_usr }}' and
      password '{{ _keycloak_admin_pwd }}'"

# Leave this as the last task in the playbook.
- name: post_workload tasks complete
  debug:
    msg: "Post-Workload Tasks completed successfully."
  when: not silent|bool
