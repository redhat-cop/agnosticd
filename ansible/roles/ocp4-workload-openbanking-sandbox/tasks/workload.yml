---
# User info printout messages on workload start
- name: Setting up workload for user
  debug:
    msg: "Setting up workload for user ocp_username = {{ ocp_username }}"

- name: Give access to opentlc-mgr
  when: (ocp_username == 'opentlc-mgr')
  shell: |
         oc adm policy add-cluster-role-to-user cluster-admin {{ ocp_username }}

##
# Microcks deployment
- name: Creating project "{{ obsandbox_microcks_namespace }}"
  k8s:
    state: present
    kind: Project
    api_version: project.openshift.io/v1
    definition:
      metadata:
        name: "{{ obsandbox_microcks_namespace }}"
        annotations:
          openshift.io/description: ""
          openshift.io/display-name: ""

- name: Create Microcks operator group and subscription "{{ obsandbox_microcks_operator_startingCSV }}"
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - microcks-operator-group.yml.j2
  - microcks-operator-subscription.yml.j2

- name: Wait for Microcks CRD to be ready
  k8s_info:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: microcksinstalls.microcks.github.io
  register: r_crd
  retries: 60
  delay: 10
  until: r_crd.resources | list | length == 1

- name: Create Microcks instance version "{{ obsandbox_microcks_install_version }}"
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    api_version: microcks.github.io/v1alpha1
    kind: MicrocksInstall
    definition:
      metadata:
        name: microcks
        namespace: "{{ obsandbox_microcks_namespace }}"
      spec:
        name: microcks
        version: "{{ obsandbox_microcks_install_version }}"
        microcks:
          replicas: 1
        postman:
          replicas: 1
        keycloak:
          install: true
          persistent: true
          volumeSize: "{{ obsandbox_microcks_install_keycloakVolumeSize }}"
        mongodb:
          install: true
          persistent: true
          volumeSize: "{{ obsandbox_microcks_install_mongodbVolumeSize }}"

- name: Wait for Microcks deployments to be ready
  k8s_info:
    api_version: v1
    kind: Deployment
    namespace: "{{ obsandbox_microcks_namespace }}"
    name: "{{ item }}"
  register: r_dc
  until:
  - r_dc is defined
  - r_dc.resources is defined
  - r_dc.resources | list | length > 0
  - r_dc.resources[0].status is defined
  - r_dc.resources[0].status.readyReplicas is defined
  - r_dc.resources[0].status.readyReplicas | int >= 1
  retries: 60
  delay: 10
  loop:
  - microcks-mongodb
  - microcks-keycloak-postgresql
  - microcks-keycloak
  - microcks

###
# Minio
# ---
# Expect the Minio operator to already be setup
# Provision the Minio instance
- name: Include role 'ocp4-workload-minio'
  include_role:
    name: ocp4-workload-minio
  vars:
    _minio_project: "{{ obsandbox_minio_namespace }}"
    _minio_storage_size: "{{ obsandbox_minio_pvc_size }}"
    _minio_access_key: "{{ obsandbox_minio_access_key }}"
    _minio_secret_key: "{{ obsandbox_minio_secret_key }}"

- name: Get external Minio instance route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ obsandbox_minio_route_name }}"
    namespace: "{{ obsandbox_minio_namespace }}"
  register: _minio_route
  retries: 3
  delay: 5
  until: _minio_route.resources[0].spec.host != ''

- name: Setting _minio_hostname param
  set_fact:
    _minio_hostname: http://{{ _minio_route.resources[0].spec.host }}

- name: Create S3 bucket "{{ obsandbox_minio_bucket_name }}" on "{{ _minio_hostname }}"
  shell: >
    AWS_ACCESS_KEY_ID={{ obsandbox_minio_access_key }} AWS_SECRET_ACCESS_KEY={{ obsandbox_minio_secret_key }} \
    aws s3api --no-verify-ssl --endpoint-url {{ _minio_hostname }} --region {{ obsandbox_minio_bucket_region }} \
    create-bucket --bucket {{ obsandbox_minio_bucket_name }}
  register: _create_bucket
  retries: 20
  delay: 60
  failed_when: _create_bucket.rc != 0 and 'BucketAlreadyOwnedByYou' not in _create_bucket.stderr
  until: _create_bucket.rc == 0 or 'BucketAlreadyOwnedByYou' in _create_bucket.stderr

###
# 3scale API Mgmt Platform operator and instance deployment
#
- name: Creating project "{{ obsandbox_3scale_namespace }}"
  k8s:
    state: present
    kind: Project
    api_version: project.openshift.io/v1
    definition:
      metadata:
        name: "{{ obsandbox_3scale_namespace }}"
        annotations:
          openshift.io/description: ""
          openshift.io/display-name: ""

- name: Create 3scale object storage configuration ref
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ obsandbox_3scale_object_storage_secret_ref }}"
        namespace: "{{ obsandbox_3scale_namespace }}"
      data:
        AWS_BUCKET: "{{ obsandbox_minio_bucket_name | b64encode }}"
        AWS_REGION: "{{ obsandbox_minio_bucket_region | b64encode }}"
        AWS_ACCESS_KEY_ID: "{{ obsandbox_minio_access_key | b64encode }}"
        AWS_SECRET_ACCESS_KEY: "{{ obsandbox_minio_secret_key | b64encode }}"
        AWS_HOSTNAME: "{{ _minio_route.resources[0].spec.host | b64encode }}"
        AWS_PATH_STYLE: "{{ true | b64encode }}"
        AWS_PROTOCOL: "{{ _minio_hostname | urlsplit('scheme') | b64encode }}"
  register: _create_minio_blobstorage_override
  until: _create_minio_blobstorage_override is succeeded
  retries: 3
  delay: 5

# deploy the "threescale-registry-auth" secret
- name: Create the threescale-registry-auth" Secret object for registry authentication (if set)
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: threescale-registry-auth
        namespace: "{{ obsandbox_3scale_namespace }}"
      data:
        .dockerconfigjson: "{{ obsandbox_3scale_registry_token }}"
      type: kubernetes.io/dockerconfigjson
  when: (obsandbox_3scale_registry_token is defined)

# deploy 3scale operator
- name: Create operator subscription for 3scale
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - 3scale-operator-1-group.yml.j2
  - 3scale-operator-2-subscription.yml.j2

# wait for CRD to be a thing
- name: Wait for 3scale CRD to be ready
  k8s_info:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: apimanagers.apps.3scale.net
  register: r_crd
  retries: 60
  delay: 15
  until: r_crd.resources | list | length == 1

# deploy staging API manager instance
- name: Create 3scale API Manager instance Staging
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - 3scale-operator-4-apimanager.yml.j2

# wait to APIManager resource creation
- name: Wait for 3scale pods to be ready
  k8s_info:
    api_version: v1
    kind: DeploymentConfig
    namespace: "{{ obsandbox_3scale_namespace }}"
    name: apicast-production
  register: r_dc
  until:
  - r_dc is defined
  - r_dc.resources is defined
  - r_dc.resources | list | length > 0
  - r_dc.resources[0].status is defined
  - r_dc.resources[0].status.readyReplicas is defined
  - r_dc.resources[0].status.readyReplicas | int >= 1
  retries: 60
  delay: 15

# Leave this as the last task in the playbook.
- name: workload tasks complete
  debug:
    msg: "Workload Tasks completed successfully."
  when: not silent|bool
