---
- name: Resolving page's section relative path for "{{ _page_path }}"
  set_fact:
    _page_section: "{{ _page_path | dirname }}"

- name: Listing all Sections available on the Developer Portal
  uri:
    method: GET
    url: "{{ _3scale_admin_url }}/admin/api/cms/sections.xml?per_page=100"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    headers:
      Authorization: "{{ _3scale_basic_auth_token }}"
    return_content: true
    status_code: 200
  register: _3scale_portal_sections_list
  retries: 8
  delay: 15
  until: _3scale_portal_sections_list.content is defined

- name: Get Section id by Page's relative path "{{ _page_section }}"
  xml:
    xmlstring: '{{ _3scale_portal_sections_list.content }}'
    xpath: "//sections/section[partial_path='{{ _page_section }}']/id"
    content: text
  register: _relpath_query

- name: Set _section_id for relative path "{{ _page_section }}"
  set_fact: _section_id={{ _relpath_query.matches[0].id | int }}

- name: Listing all Templates available on the Developer Portal
  uri:
    method: GET
    url: "{{ _3scale_admin_url }}/admin/api/cms/templates.xml?per_page=100"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    headers:
      Authorization: "{{ _3scale_basic_auth_token }}"
    return_content: true
    status_code: 200
  register: _3scale_portal_templates_list
  until: _3scale_portal_templates_list.content is defined

- name: Querying id for pre-existing Page "{{ _page_path }}"
  xml:
    xmlstring: '{{ _3scale_portal_templates_list.content }}'
    xpath: "//templates/page[path='{{ _page_path }}']/id"
    content: text
  ignore_errors: true
  register: _page_exists

- name: Retrieve the content for Page "{{ _page_path }}"
  set_fact:
    _page_content: "{{ lookup('url', _page_location, split_lines=False) }}"

- name: Exection block when Page already exists "{{ _page_path }}"
  when:
    - _page_exists is defined
    - _page_exists.matches is defined
    - _page_exists.matches | length | int > 0
  block:
    - name: Set _page_id found "{{ _page_path }}"
      set_fact: _page_id="{{ _page_exists.matches[0].id | int }}"

    - name: Update a pre-exising Page "{{ _page_path }}"
      uri:
        method: PUT
        url: "{{ _3scale_admin_url }}/admin/api/cms/templates/{{ _page_id }}.xml"
        validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
        headers:
          Authorization: "{{ _3scale_basic_auth_token }}"
        body_format: form-urlencoded
        body:
          - [id, '{{ _page_id }}']
          - [title, '{{ _page_title }}']
          - [section_id, '{{ _section_id }}']
          - [section_name, '{{ _page_section }}']
          - [path, '{{ _page_path }}']
          - [layout_name, '{{ _page_layout }}']
          - [type, 'page']
          - [liquid_enabled, '1']
          - [draft, '{{ _page_content }}']
        status_code: 200

- when: ( _page_exists is undefined) or ( _page_exists.matches is undefined )
  block:
    - name: Upload a new Page "{{ _page_path }}"
      uri:
        method: POST
        url: "{{ _3scale_admin_url }}/admin/api/cms/templates.xml"
        validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
        headers:
          Authorization: "{{ _3scale_basic_auth_token }}"
        body_format: form-urlencoded
        body:
          - [title, '{{ _page_title }}']
          - [section_id, '{{ _section_id }}']
          - [section_name, '{{ _page_section }}']
          - [path, '{{ _page_path }}']
          - [layout_name, '{{ _page_layout }}']
          - [type, 'page']
          - [liquid_enabled, '1']
          - [draft, '{{ _page_content }}']
        return_content: true
        status_code: 201
      register: _page_created

    - name: Parse created page ID from XML response "{{ _page_path }}"
      xml:
        xmlstring: '{{ _page_created.content }}'
        xpath: "//page/id"
        content: text
      register: _created_page_id

    - name: Setting _page_id param for the created Page "{{ _page_path }}"
      set_fact: _page_id="{{ _created_page_id.matches[0].id }}"

- name: Publish the Page "{{ _page_path }} ({{ _page_id }})"
  uri:
    method: PUT
    url: "{{ _3scale_admin_url }}/admin/api/cms/templates/{{ _page_id }}/publish"
    validate_certs: "{{ obsandbox_validate_certs|d(false)|bool }}"
    headers:
      Authorization: "{{ _3scale_basic_auth_token }}"
    status_code: 200
