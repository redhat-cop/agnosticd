---
- name: Step 00xxxxx software
  hosts: bastions
  gather_facts: false
  become: false
  tasks:
    - tags:
        - install_sandbox
      block:
        - name: Get awscli bundle
          get_url:
            url: https://s3.amazonaws.com/aws-cli/awscli-bundle.zip
            dest: /tmp/awscli-bundle.zip

        - name: Unzip awscli-bundle.zip
          unarchive:
            src: /tmp/awscli-bundle.zip
            dest: /tmp/
            remote_src: true

        - name: Install awscli
          command: /tmp/awscli-bundle/install -i /usr/local/aws -b /bin/aws
          args:
            creates: /usr/local/aws
          become: true

        - name: cleanup archive and tmp files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/awscli-bundle
            - /tmp/awscli-bundle.zip

        - name: Create .aws directory
          file:
            path: ~/.aws
            state: directory

        - name: Add aws credentials
          blockinfile:
            path: ~/.aws/credentials
            block: |-
              [default]
              aws_access_key_id = {{ hostvars.localhost.student_access_key_id }}
              aws_secret_access_key = {{ hostvars.localhost.student_secret_access_key }}

        - name: Generate SSH keys
          shell: ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""
          args:
            creates: ~/.ssh/id_rsa

        - name: Generate SSH pub key
          shell: ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          args:
            creates: ~/.ssh/id_rsa.pub

        - name: Slurp public key
          slurp:
            path: /home/{{ ansible_user }}/.ssh/id_rsa.pub
          register: idrsapub


        - name: Set aws access user data
          agnosticd_user_info:
            data:
              subdomain_base_suffix: "{{ subdomain_base_suffix }}"
              aws_access_key_id: "{{ student_access_key_id }}"
              aws_secret_access_key: "{{ student_secret_access_key }}"

    - when:
        - install_student_user | bool
        - student_name is defined
        - student_password is defined or hostvars[groups.bastions.0].student_password is defined
      block:
        - name: Print Student SSH access as user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - ""
            - "SSH Access: ssh {{ student_name }}@bastion.{{ guid }}{{ subdomain_base_suffix }}"
            - "SSH password: {{ student_password | default(hostvars[groups.bastions.0].student_password) }}"
          when:
            - install_student_user | bool
            - student_name is defined
            - student_password is defined or hostvars[groups.bastions.0].student_password is defined

        - name: User access data
          agnosticd_user_info:
            data:
              student_ssh_command: "ssh {{ student_name }}@bastion.{{ guid }}{{ subdomain_base_suffix }}"
              student_ssh_password: "{{ student_password | default(hostvars[groups.bastions.0].student_password) }}"

        - name: Print Student aws access as user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "Top level domain: {{ subdomain_base_suffix }}"
            - ""
            - "WARNING: with great power comes great responsibility. We monitor usage."
            - "Your AWS programmatic access is preconfigured in ~/.aws/credentials"
            #- "aws_access_key_id = {{ student_access_key_id }}"
            #- "aws_secret_access_key = {{ student_secret_access_key }}"
