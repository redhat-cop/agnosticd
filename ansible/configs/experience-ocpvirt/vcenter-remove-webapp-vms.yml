- name: Delete folder and VMs
  block:
  - name: Get all VMs in the folder
    community.vmware.vmware_vm_info:
      validate_certs: false
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      folder: "/{{ vcenter_datacenter }}/vm/Workloads/{{ hostvars['localhost']['vcenter_folder'] }}"
    ignore_errors: true
    register: r_folder_vms

  - name: Debug VMs
    ansible.builtin.debug:
      msg: "{{ r_folder_vms }}"

  - name: Set datastore
    when:
    - r_folder_vms.virtual_machines is defined
    - r_folder_vms.virtual_machines | length > 0
    ansible.builtin.set_fact:
      vcenter_datastore: "{{ r_folder_vms.virtual_machines[0].datastore_url[0].name }}"

  - name: Debug datastore
    ansible.builtin.debug:
      msg: "Datastore: {{ vcenter_datastore | default('datastore1') }}"

  - name: Remove the VMs
    when:
    - r_folder_vms.virtual_machines is defined
    - r_folder_vms.virtual_machines | length > 0
    ansible.builtin.include_tasks: vcenter-remove-vm.yml
    vars:
      vm_uuid: "{{ item.uuid }}"
      vm_power_state: "{{ item.power_state }}"
    loop: "{{ r_folder_vms.virtual_machines }}"

  - name: Delete folder for the project
    community.vmware.vcenter_folder:
      validate_certs: false
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ vcenter_datacenter }}"
      folder_name: "{{ hostvars['localhost']['vcenter_folder'] }}"
      parent_folder: "Workloads"
      folder_type: vm
      state: absent
    register: r_delete_folder
    until: r_delete_folder is success
    retries: 5
    delay: 10
