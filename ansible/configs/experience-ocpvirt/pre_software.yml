---
- name: Step 003 Pre Software
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
  - name: Step 003
    ansible.builtin.debug:
      msg: "Step 003 Pre Software"

  - name: Create ssh key
    when: set_env_authorized_key | bool
    ansible.builtin.include_role:
      name: infra-local-create-ssh_key

- name: Prepare Hypervisor for Workshop
  hosts: hypervisor
  become: true
  gather_facts: true
  roles:
  - role: set_env_authorized_key
    when: set_env_authorized_key | bool
  tasks:
  - name: Add GUID to /etc/skel/.bashrc
    ansible.builtin.lineinfile:
      path: "/etc/skel/.bashrc"
      regexp: "^export GUID"
      line: "export GUID={{ guid }}"

  - name: Set mtu to 9000
    ansible.builtin.command: ip link set dev bond0 mtu 9000
    when: cloud_provider == "equinix_metal"

  - name: Install epel-release
    ansible.builtin.yum:
      name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
      disable_gpg_check: true
    retries: 5

  - name: Install required software
    ansible.builtin.yum:
      name: "{{ item }}"
    loop:
    - gcc
    - python3
    - python3-devel
    - python3-libselinux
    - python3-pip
    - libcurl-devel
    - openssl-devel
    - libxml2-devel
    - mariadb
    - vim
    - bind-utils
    - certbot

  - name: Write Route53 credentials into /root/.aws/credentials
    ansible.builtin.blockinfile:
      dest: "/root/.aws/credentials"
      create: true
      owner: "root"
      mode: u=rw,g=,o=
      content: |
        [default]
        aws_access_key_id={{ route53_aws_access_key_id }}
        aws_secret_access_key={{ route53_aws_secret_access_key }}

  - name: Request Both Let's Encrypt Static and Wildcard Certificates
    ansible.builtin.include_role:
      name: host-lets-encrypt-certs-certbot
    vars:
      _certbot_domain: "api.{{ guid }}.{{ cluster_dns_zone }}"
      _certbot_wildcard_domain: "*.apps.{{ guid }}.{{ cluster_dns_zone }}"
      _certbot_production: true
      _certbot_dns_provider: "route53"
      _certbot_remote_dir: "/root/"
      _certbot_cache_cert_file: "/tmp/server.cert"
      _certbot_cache_key_file: "/tmp/server.key"
      _certbot_cache_ca_file: "/tmp/server_ca.cer"
      _certbot_cache_fullchain_file: "/tmp/fullchain.cer"
      _certbot_cache_archive_file: "/tmp/certbot.tar.gz"
      _certbot_renew_automatically: false
      _certbot_force_issue: false
      _certbot_user: "root"

  - name: Remove credentials once LE certs complete
    ansible.builtin.file:
      state: absent
      path: "/root/.aws"

  - name: Create student user
    when: install_student_user | bool
    ansible.builtin.include_role:
      name: bastion-student-user

  - name: Deploy base software
    ansible.builtin.include_role:
      name: ocp4_aio_base_software
    vars:
      ocp4_aio_baremetal_provider: "{{ cloud_provider }}"

  - name: Setup base virt
    ansible.builtin.include_role:
      name: ocp4_aio_base_virt
    vars:
      aio_host_ip_address: "{{ hostvars['hypervisor']['public_ip_address'] | default(hostvars[groups.bastions.0].private_ip_address) }}"

  - name: Prepare Bastion VM
    when: cloud_provider == 'equinix_metal'
    ansible.builtin.include_role:
      name: ocp4_aio_prepare_bastion
    vars:
      ocp4_aio_ssh_key: "{{ lookup('file', '{{ output_dir }}/{{ guid }}_id_rsa.pub') }}"
      ocp4_aio_root_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"

  - name: Prepare Bastion VM
    when: cloud_provider == 'ec2'
    ansible.builtin.include_role:
      name: ocp4_aio_prepare_bastion
    vars:
      ocp4_aio_ssh_key: "{{ lookup('file', hostvars['localhost']['env_authorized_key_path_pub']) }}"
      ocp4_aio_root_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"

- name: Setup Bastion VM
  hosts: bastion_vms
  gather_facts: false
  tasks:
  - name: Deploy bastion (Equinix)
    when: cloud_provider == 'equinix_metal'
    ansible.builtin.include_role:
      name: ocp4_aio_deploy_bastion
    vars:
      ocp4_aio_ssh_key: "{{ lookup('file', '{{ output_dir }}/{{ guid }}_id_rsa.pub') }}"

  - name: Deploy bastion (EC2)
    when: cloud_provider == 'ec2'
    ansible.builtin.include_role:
      name: ocp4_aio_deploy_bastion
    vars:
      ocp4_aio_ssh_key: "{{ lookup('file', hostvars['localhost']['env_authorized_key_path_pub']) }}"

  - name: Install httpd
    ansible.builtin.yum:
      name: httpd

  - name: Start and enable httpd
    ansible.builtin.service:
      name: httpd
      state: restarted
      enabled: true

  - name: Download required files for the lab
    ansible.builtin.get_url:
      url: "https://www.opentlc.com/download/ocp4_virt_foundations/{{ item }}"
      dest: "/var/www/html/{{ item }}"
      owner: apache
      group: apache
    loop:
    - Fedora35.qcow2
    - Windows2019.iso

- name: PreSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
  - name: Pre-software checks
    ansible.builtin.debug:
      msg: "Pre-Software checks completed successfully"
