---
# DNS settings for environmnet
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"

zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

ansible_user: ec2-user
remote_user: ec2-user

# The region to be used, if not specified by -e in the command line
aws_region: us-east-1

node_instance_image: RHEL8-default
bastion_instance_image: RHEL8-default

###################################
# AWS Capacity Reservations
# Change this to enable
agnosticd_aws_capacity_reservation_enable: true
# You need to know the type of image first:
bastion_instance_platform: >-
  {%- if agnosticd_images.bastion.platform_details | default('') == 'Red Hat BYOL Linux' -%}
  Linux/UNIX
  {%- else -%}
  Red Hat Enterprise Linux
  {%- endif -%}

node_instance_platform: >-
  {%- if agnosticd_images.node.platform_details | default('') == 'Red Hat BYOL Linux' -%}
  Linux/UNIX
  {%- else -%}
  Red Hat Enterprise Linux
  {%- endif -%}

# You can use the above or hardcode the platform:
# For public images:
#node_instance_image: RHEL8-latest
#bastion_instance_image: RHEL8-latest
#bastion_instance_platform: Red Hat Enterprise Linux
#node_instance_platform: Red Hat Enterprise Linux

# For GOLD images:
#node_instance_image: RHEL8GOLD-latest
#bastion_instance_image: RHEL8GOLD-latest
#bastion_instance_platform: Linux/UNIX
#node_instance_platform: Linux/UNIX

# AWS on-demand capacity reservation
agnosticd_aws_capacity_reservation_regions:
  - "{{ aws_region }}"
agnosticd_aws_capacity_reservations:
  az1:
    - instance_count: 1
      instance_platform: "{{ bastion_instance_platform }}"
      instance_type: "{{ bastion_instance_type.ec2 }}"
    - instance_count: "{{ node_instance_count }}"
      instance_platform: "{{ node_instance_platform }}"
      instance_type: "{{ node_instance_type.ec2 }}"
