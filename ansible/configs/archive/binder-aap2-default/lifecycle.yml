---
# NOTE: This file only exists as the default lifecycle.yml uses older `ec2` module
#       which is no longer supported in more modern amazon.aws collection releases
# NOTE: This playbook does not support ACTION=destroy which is left to the default       

- name: Custom Automate the Enterprise Lifecycle management (start,stop,status)
  hosts: localhost
  become: false
  gather_facts: false

  tasks:

    - name: Entering custom lifecyle play for Enterprise Demo Automate the Enterprise
      ansible.builtin.debug:  
        msg: "Executing custom lifecycle tasks ACTION = {{ ACTION }}"

    - name: ACTION block
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_DEFAULT_REGION: "{{ aws_region_final | default(aws_region) }}"
      block:

        - name: Stop instances by (guid,env_type) tags
          when: ACTION == 'stop'
          amazon.aws.ec2_instance:  
            state: stopped
            wait: false
            filters:
              "tag:guid": "{{ guid }}"
              "tag:env_type": "{{ env_type }}"

        - name: Start instances by (guid, env_type) tags
          when: ACTION == 'start'
          amazon.aws.ec2_instance:  
            state: running
            wait: false
            filters:
              "tag:guid": "{{ guid }}"
              "tag:env_type": "{{ env_type }}"
      
        - name: Get instance status but take no action
          when: ACTION == 'status'
          block:

            - name: Get EC2 facts using (guid, env_type) tag
              amazon.aws.ec2_instance_info:
                filters:
                  "tag:guid": "{{ guid }}"
                  "tag:env_type": "{{ env_type }}"
              register: r_instances

            - name: Output register information to a file
              ansible.builtin.copy:  
                dest: "{{ output_dir }}/{{ guid }}-instances.txt"
                content: "{{ r_instances }}"

            - name: Report status in user info
              agnosticd_user_info:
                msg: |-
                  {{ "%-60s %-10s %s" | format("Instance", "State", "Type") }}
                  ----------------------------------------------------------------
                  {% for instance in r_instances.instances %}
                  {{ "%-60s %-10s %s" | format(instance.tags.Name, instance.state.name, instance.instance_type) }}
                  {% endfor %}

            - name: Print status information to a file
              ansible.builtin.copy:  
                dest: "{{ output_dir }}/{{ guid }}-status.txt"
                force: yes
                content: |-
                  {{ "%-25s %-10s %-18s %-15s %-20s" | format("Instance", "State", "Type", "OS", "Ansible Group") }}
                  -----------------------------------------------------------------------------------------------
                  {% for instance in r_instances.instances %}
                  {{ "%-25s %-10s %-18s %-15s %-20s" | format(instance.tags.Name, instance.state.name, instance.instance_type, instance.tags.ostype, instance.tags.AnsibleGroup) }}
                  {% endfor %}

...