#jinja2: lstrip_blocks: "True"
---
heat_template_version: 2018-03-02

description: >-
  Top level HOT for creating new project, network resources and instances.
  This template relies on ResourceGroups and a nested template that is
  called to provision instances, ports, & floating IPs.

resources:

  {{ guid }}-infra_key:
    type: OS::Nova::KeyPair
    properties:
      name: {{ guid }}-infra_key
      save_private_key: true

  ###############################
  # Network, Subnet and Routers #
  ###############################

{% for network in networks %}

  {{ network['name'] }}-network:
    type: OS::Neutron::Net
    properties:
      name: "{{ guid }}-{{ network['name'] }}-network"
      shared: {{ network['shared'] }}

  {{ network['name'] }}-subnet:
    type: OS::Neutron::Subnet
    properties:
      name: "{{ guid }}-{{ network['name'] }}-subnet"
      network_id: {get_resource: {{ network['name'] }}-network}
{% if network['dns_nameservers'] is defined %}
      dns_nameservers: [{{ network['dns_nameservers'] | list | join(",") }}]
{% endif %}
      cidr: {{ network['subnet_cidr'] }}
{% if network['gateway_ip'] is defined %}
      gateway_ip: {{ network['gateway_ip'] }}
{% endif %}
      allocation_pools:
        - start: {{ network['allocation_start'] }}
          end: {{ network['allocation_end'] }}
    depends_on:
      - {{ network['name'] }}-network

{% if network['create_router'] %}
  {{ network['name'] }}-router:
    type: OS::Neutron::Router
    properties:
      name: "{{ guid }}-{{ network['name'] }}-router"
      external_gateway_info:
        network: "{{ provider_network }}"

  {{ network['name'] }}-router_private_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: {get_resource: {{ network['name'] }}-router}
      subnet: {get_resource: {{ network['name'] }}-subnet}
{% endif %}
{% endfor %}

  ###################
  # Security groups #
  ###################
{% for security_group in security_groups | list + default_security_groups | list
   if security_group.name in used_security_groups %}

  {{ security_group['name'] }}:
    type: OS::Neutron::SecurityGroup
    properties:
      name: {{ guid }}-{{ security_group['name'] }}
{% if security_group['description'] is defined %}
      description: "{{ security_group['description'] }}"
{% endif %}
{% for rule in security_group.rules %}
{% if rule['name'] is defined %}
  {{ guid }}-{{ security_group['name'] }}-rule_{{ rule['name'] }}:
{% else %}
  {{ guid }}-{{ security_group['name'] }}-rule_{{ lookup('password', '/dev/null length=5 chars=ascii_letters,digits') }}:
{% endif %}
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: {get_resource: {{ security_group['name'] }}}
      direction: {{ rule['direction'] | default(rule.rule_type) | lower }}
      protocol: {{ rule['protocol'] | lower }}
{% if rule['description'] is defined %}
      description: {{ rule['description'] }}
{% endif %}
{% if rule['port_range_min'] is defined or
  rule.from_port is defined %}
      port_range_min: {{ rule['port_range_min'] | default(rule.from_port) }}
{% endif %}
{% if rule['port_range_max'] is defined or
  rule.to_port is defined %}
      port_range_max: {{ rule['port_range_max'] | default(rule.to_port) }}
{% endif %}
{% if rule['remote_ip_prefix'] is defined or
  rule.cidr is defined %}
      remote_ip_prefix: {{ rule['remote_ip_prefix'] | default(rule.cidr) }}
{% endif %}
{% if rule['remote_group'] is defined or
  rule.from_group is defined %}
      remote_group: {get_resource: {{ rule['remote_group'] | default(rule.from_group) }}}
{% endif %}
    depends_on: {{ security_group['name'] }}
{% endfor %}
{% endfor %}

  #############
  # Instances #
  #############
{% for instance in instances %}
  {% for myinstanceindex in range(instance.count|int) %}
    {% set iname = instance.name if instance.count|int == 1 else [instance.name, loop.index] | join() %}
  ########### {{ iname }} ###########
  {% for network in networks %}
    {% set nname = network.name %}
    {% if nname in instance['networks'] %}
  port_{{ nname }}_{{ iname }}:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: {{ nname | default('default') }}-network }
      {% if instance.port_security is defined and not instance.port_security %}
      port_security_enabled: false
      {% else %}
      security_groups:
        {% if instance.security_groups is defined %}
          {% for security_group in instance.security_groups %}
        - {get_resource: {{ security_group }}}
          {% endfor %}
        {% endif %}
      {% endif %}
    depends_on:
      {% if networks[loop.index-1].create_router %}
      - {{ nname }}-router_private_interface
      {% endif %}
      {% if instance.security_groups is defined %}
        {% for security_group in instance.security_groups %}
      - {{ security_group }}
        {% endfor %}
      {% endif %}

      {% if instance.floating_ip | default(false) or instance.public_dns | default(false) and network.create_router %}
  fip_{{ nname }}_{{ iname }}:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {{ provider_network }}
    depends_on:
      - {{ nname }}-router_private_interface

  fip_association_{{ nname }}_{{ iname }}:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: {get_resource: fip_{{ nname }}_{{ iname }}}
      port_id: {get_resource: port_{{ nname }}_{{ iname }}}
      {% endif %}
    {% endif %}
  {% endfor %}

  server_{{ iname }}:
    type: OS::Nova::Server
    properties:
      name: {{ iname }}
      flavor: {{ instance.flavor.osp }}
      key_name: {get_resource: {{ guid }}-infra_key}
      config_drive: True
      image: {{ instance.image_id | default(instance.image) }}

      user_data:
        str_replace:
          template: |
            {% if instance['vnios'] is defined and instance['vnios'] %}
            #infoblox-config
            remote_console_enabled: y
            temp_license: {{ nios_temp_license }}
            default_admin_password: {{ nios_admin_password }}
            {% else %}
            #cloud-config
            ssh_authorized_keys: {{ all_ssh_authorized_keys | to_json }}
              {% if networks | length > 1 %}
            runcmd:
                {% for network in networks %}
                  {% if network.name in instance['networks'] and not network.create_router and network.gateway_ip is defined %}
                - ip r d default via {{  network.gateway_ip }}
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endif %}
          params:
            lan_addr: { get_attr: [ port_LAN-1_nios, fixed_ips, 0,  ip_address ] }
            lan_netmask: { get_attr: [ port_LAN-1_nios, fixed_ips, 0,  netmask ] }
            lan_gw: { get_attr: [ port_LAN-1_nios, fixed_ips, 0,  gateway ] }
      user_data_format: RAW
      networks:
      {% for network in instance['networks'] %}
          {% set nname = network %}
        - port: { get_resource: port_{{ nname }}_{{ iname }} }
      {% endfor %}
    {% if instance['metadata'] is defined %}
      metadata: {{ instance.metadata | combine(default_metadata) | to_json }}
    {% endif %}

    {% if instance.tags is defined %}
      # Convert EC2 tags
      metadata:
      {% for key, value in default_metadata.items() %}
        '{{ key }}': {{ value | to_json }}
      {% endfor %}
      {% for tag in instance.tags %}
        '{{ tag.key }}': {{ tag.value | to_json }}
      {% endfor %}
    {% endif %}

    depends_on:
    {% if 'security_groups' in instance %}
      {% for security_group in instance.security_groups %}
      - {{ security_group }}
      {% endfor %}
    {% endif %}

    {% if instance.volumes is defined %}
  #### Volumes for {{ iname }} ####
      {% for volume in instance.volumes %}
        {% set loopvolume = loop %}
        {% set vname = ["volume", iname, loopvolume.index] | join('_') %}
  {{ vname }}:
    type: OS::Cinder::Volume
    properties:
      size: {{ volume.volume_size | default(volume.size) }}
          {% if volume.volume_name is defined %}
      name: {{ volume.volume_name | default(volume.name) }}
          {% endif %}

  volume_attachment_{{ vname }}:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: {get_resource: {{ vname }}}
      instance_uuid: {get_resource: server_{{ iname }}}
      {% endfor %}
    {% endif %}
  {% endfor %}
{% endfor %}

{% if additional_fips | default( '' ) | length > 0 %}
{% for fipname in additional_fips %}
  {{ fipname }}:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ additional_fips[fipname].network }}"
{% if additional_fips[fipname].description is defined %}
      value_specs:
        description: "{{ additional_fips[fipname].description }}"
{% endif %}
{% endfor %}
{% endif %}

outputs:

  {{ guid }}-infra_key:
    description: The SSH infra key
    value: {get_attr: [{{ guid }}-infra_key, private_key]}

{% if additional_fips | default( '' ) | length > 0 %}
{% for fipname in additional_fips %}
  {{ fipname }}:
    description: {{ additional_fips[fipname].description }}
    value: { get_attr: [ {{ fipname }}, floating_ip_address ] }
{% endfor %}
{% endif %}
