---
#- name: Step 00xxxxx software
#  hosts: localhost
#  gather_facts: False
#  become: false
#  tasks:
#    - debug:
#        msg: "Software tasks Started"

- name: Create and attach additional volumes for Stratis
  hosts: localhost
  connection: local
  become: false
  environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "{{ osp_project_name }}"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"

  tasks:

    - name: List existing volume
      command: >-
        openstack volume list -f json
      register: volume_list
                
    - name: setup variable for volume list
      set_fact:
        disks: "{{ volume_list.stdout | from_json | map(attribute='Name') | list}}"

    - name: Create addtional block dev volumes for stratis lab
      command: >-
        openstack volume create --size 5 {{ item  }}  
      when: 'item not in disks'
      with_items:
        - "{{guid}}_disk1"
        - "{{guid}}_disk2"
        - "{{guid}}_disk3"
        - "{{guid}}_disk4"
        - "{{guid}}_disk5"
        - "{{guid}}_disk6"
        - "{{guid}}_disk7"
        - "{{guid}}_disk8"

    - name: Add additional block dev volumes onto node2 for Stratis lab
      command:  >- 
        openstack server add volume node2 "{{ item }}"
      with_items:
        - "{{guid}}_disk1"
        - "{{guid}}_disk2"
        - "{{guid}}_disk3"
        - "{{guid}}_disk4"
      ignore_errors: true
        
    - name: Add additional block dev volumes onto node3 for Stratis lab
      command:  >- 
        openstack server add volume node3 "{{ item }}"
      with_items:
        - "{{guid}}_disk5"
        - "{{guid}}_disk6"
        - "{{guid}}_disk7"
        - "{{guid}}_disk8"
      ignore_errors: true


    # - name: Add port 443 to the bastion host security group
    #   shell: "mysecgroup=`openstack --os-cloud={{ osp_project_name }}  server show workstation  | grep security_groups | awk '{print $4}' | cut -f2 -d\"'\"`; openstack --os-cloud={{ osp_project_name }} security group rule create $mysecgroup --protocol tcp --dst-port 443:443 --remote-ip 0.0.0.0/0"

    - name: Get security group name
      command: >-
        openstack server show workstation -f json 
      register: sec_group
                
    # - debug:   
    #     msg: "{{ sec_group.stdout |from_json | json_query('security_groups') | regex_replace('^n.*=', '') }}" 
                
    - name: Create variable sec_group_name
      set_fact:
        sec_group_name: "{{ sec_group.stdout |from_json | json_query('security_groups') | regex_replace('^.*=', '')  }}" 

    - name: Add port 443 to the bastion host security group
      command: >-
        openstack security group rule create {{ sec_group_name }}  
        --protocol tcp --dst-port 443:443 
        --remote-ip 0.0.0.0/0
      ignore_errors: true


- name: fix ssh config from Host .example.com to Host 
  hosts: all
  become: yes
  tasks: 
    - name: replace old example.com line
      lineinfile:
        path: /root/.ssh/config
        regexp: '^Host.*example.com$'
        line: 'Host *'


###
### RHEL8-Workshop stuff
###
- name: setup passwd ssh, copy and run RHEL8-Workshop playbooks on "workstation" to set up vms
  hosts: workstation
  become: yes
  tasks:

  - name: Enable password ssh 1
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PasswordAuthentication no'
      line: "#PasswordAuthentication no"

  - name: Enable password ssh 2
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^#PasswordAuthentication yes'
      line: "PasswordAuthentication yes"

  - name: Restart sshd
    service:
      name: sshd
      state: restarted


  - name: git clone the RHEL8-Workshop on the "workstation" node and run
    git:
      repo: 'https://github.com/xtophd/RHEL8-Workshop/'
      dest: /root/RHEL8-Workshop
      version: Summit2020

 
  - name: Change the working directory to RHEL8-Workshop, then run the prep/install script
    shell: |
      cp sample-configs/rhel8-workshop config/rhel8-workshop
      /bin/bash prepare-rhel8-workshop.sh > prepare-rhel8-workshop.log 2>&1
      let status=$?
      echo "status=$status" >> prepare-rhel8-workshop.log
      echo 'done'
    args:
      chdir: /root/RHEL8-Workshop


- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Software checks completed successfully"
