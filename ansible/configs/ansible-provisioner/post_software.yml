#vim: set ft=ansible:
---
- name: Step 000 post software dummy
  hosts: localhost
  connection: local
  become: false
  vars_files:
    - "./env_vars.yml"
    - "./env_secret_vars.yml"
  tags:
    - step005
  tasks:
    - debug:
        msg: "Step 000 post software - Dummy action"

- name: Configure Provisioner for CF integration
  hosts: provisioners
  become: yes
  gather_facts: False
  roles:
    - role: "{{ ANSIBLE_REPO_PATH }}/roles/opentlc-integration"
      when: install_opentlc_integration
      no_log: yes
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/mgr_users.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_secret_vars.yml"
  tags: [ env-specific, cf_integration ]
  tasks:
    - name: Install vim
      yum:
        name: vim

    - name: Copy SSH private key to provisioner for users
      copy:
        src: "~/.ssh/{{ item.private_key }}.pem"
        dest: "{{ item.home }}/.ssh/{{ item.private_key }}.pem"
        mode: 0400
        owner: "{{ item.name }}"
      when: item.private_key is defined
      with_items: "{{ mgr_users }}"
      no_log: yes

    - name: Install EPEL (for python-pip and ansible)
      package:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
        use: yum
        state: installed

    - name: install python-pip
      yum:
        name: python2-pip

    - name: install ansible
      yum:
        name: python2-pip
    - name: install boto3
      command: pip install boto3

    - name: Install awscli
      pip:
        name: awscli

    - name: test awscli
      command: aws --version

    - name: Create ~/.aws for users
      file:
        path: "{{ item.home }}/.aws"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: 0700
        state: directory
      when: item.aws_access_key_id is defined
      with_items: "{{ mgr_users }}"
      no_log: yes

    - name: Insert awscli credentials
      copy:
        dest: "{{ item.home }}/.aws/credentials"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        content: |
          [default]
          aws_access_key_id = {{ item.aws_access_key_id }}
          aws_secret_access_key = {{ item.aws_secret_access_key }}
      when:
        - item.aws_access_key_id is defined
        - item.aws_secret_access_key is defined
      with_items: "{{ mgr_users }}"
      no_log: yes

    - name: Copy boto.cfg file to /etc
      copy:
        src: "{{ ANSIBLE_REPO_PATH }}/inventory/boto.cfg"
        dest: /etc/boto.cfg

    - name: Copy Sync_Repositories.sh file to /root
      copy:
        src: "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/files/Sync_Repositories.sh"
        dest: /root/

    - name: install lvm2
      yum:
        name: lvm2

    - lvg:
        vg: "{{ storage_vg }}"
        pvs: "{{ storage_pvs }}"
      ignore_errors: true

    - lvol:
        vg: "{{ storage_vg }}"
        lv: storagelv
        size: 100%FREE
      ignore_errors: true

    - filesystem:
        fstype: ext4
        dev: "/dev/{{ storage_vg }}/storagelv"
      ignore_errors: true

    - file:
        path: "{{ storage_mount_path }}"
        state: directory
        mode: 0777

    - selinux:
        policy: targeted
        state: permissive

    - lineinfile:
        dest: /etc/fstab
        insertafter: EOF
        line: "/dev/{{ storage_vg }}/storagelv {{ storage_mount_path}} ext4 defaults 0 0"
        state: present
      ignore_errors: true

    - shell: "mkdir -p {{ storage_mount_path }} &&  mount {{ storage_mount_path }}"
      ignore_errors: true

- name: Zabbix
  hosts: provisioners
  gather_facts: true
  become: yes
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_secret_vars.yml"
  roles:
    - { role: "{{ ANSIBLE_REPO_PATH }}/roles/zabbix-client" }
  tags:
    - env-specific
    - install_zabbix
