---
- name: Destroy environment on AWS
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
    AWS_DEFAULT_REGION: "{{aws_region_final|d(aws_region)}}"
  tasks:
  - name: Run infra-ec2-create-inventory role
    include_role:
      name: infra-ec2-create-inventory
  - name: SSH config setup
    when:
    - groups["bastions"] is defined
    - groups["bastions"] | length > 0
    include_role:
      name: infra-common-ssh-config-generate

- name: Set ssh extra args for all hosts, use ssh_config just created
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  ignore_errors: false
  tasks:
  - name: add -F option ansible_ssh_extra_args
    set_fact:
      ansible_ssh_extra_args: "{{ ansible_ssh_extra_args|d() }} -F {{ hostvars['localhost'].ansible_ssh_config }}"

- name: Start all EC2 instances if they are stopped
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
    AWS_DEFAULT_REGION: "{{aws_region_final|d(aws_region)}}"
  tasks:
  - include_tasks: ec2_instances_start.yaml

- name: Destroy ROSA
  hosts: bastions
  gather_facts: false
  become: false
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  tasks:
  - name: Check for ROSA binary
    stat:
      path: /usr/local/bin/rosa
    register: rosa_check
    ignore_errors: true

  - name: Try to gracefully uninstall ROSA if binary is installed, otherwise just nuke the sandbox
    when: rosa_check.stat.exists
    block:
    - set_fact:
        rosa_cluster_name: "rosa-{{ guid }}"

    - name: Destroy ROSA Cluster
      command: "/usr/local/bin/rosa delete cluster -y --cluster={{ rosa_cluster_name }}"
      register: r_rosa_delete
      failed_when: >-
        r_rosa_delete.rc != 0
        and 'ERR: There is no cluster with identifier or name' not in r_rosa_delete.stderr

    - name: Wait for ROSA deletion to complete
      command: "/usr/local/bin/rosa describe cluster -c {{ rosa_cluster_name }}"
      register: rosa_cluster_status
      ignore_errors: true
      until: rosa_cluster_status.rc != 0
      retries: 60
      delay: 60

    - name: Make sure ROSA cluster is gone
      fail:
        msg: "The ROSA cluster still exists after one hour of trying to delete.  Please look at it manually."
      when: rosa_cluster_status.rc == 0

- name: Import cloud provider specific destroy playbook
  import_playbook: "../../cloud_providers/{{ cloud_provider }}_destroy_env.yml"
