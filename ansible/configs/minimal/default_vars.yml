---
# default vars for minimal, see README.adoc for full details

env_type: minimal
cloud_provider: none
software_to_deploy: none

output_dir: "/tmp/output_dir/{{ guid }}"      # Writable working scratch directory
project_tag: "{{ env_type }}-{{ guid }}"      # This var is used to identify stack (cloudformation, azure resourcegroup, ...)
agnosticd_inventory_exporter_enable: true     # Dump inventory in output_dir

# Workloads should be specified in the appropriate var targeting the stage.
# The format for each is a list with role name, hosts, and optional vars
#
# Workload roles use the ACTION var do determine whether they should
# perform provision, start, stop, or destroy.
#
# If vars are included then those will be set with set_fact before the role
# is called. This allows the same role to be called repeatedly on the same
# or different hosts with different variables.
#
# Example:
#
# infra_workloads:
# # Provsision a VM, add host to inventory
# - name: mitzi_vm
#   hosts: localhost
#
# # Configure software on bastion VM
# software_workloads:
# - name: mitzi_software
#   hosts: bastion
#
# # Cleanup is just destroy the bastion
# destroy_workloads:
# - name: mitzi_vm
#   hosts: localhost
#
# # Start the VM, then check software state
# start_workloads:
# - name: mitzi_vm
#   hosts: localhost
# - name: mitzi_software
#   hosts: bastion
#
# # Shutdown the VM
# stop_workloads:
# - name: mitzi_vm
#   hosts: localhost
# - name: mitzi_software
#   hosts: bastion
#
pre_infra_workloads: []
infra_workloads: []
post_infra_workloads: []
pre_software_workloads: []
software_workloads: []
post_software_workloads: []
destroy_workloads: []
start_workloads: []
stop_workloads: []

email: "{{ env_type }}@opentlc.com"
guid: "{{ env_type }}-01"
uuid: "{{ guid }}"

student_name: "{{ requester_username | default('lab-user') }}"
