---
- name: Step 00xxxxx post software
  hosts: support
  gather_facts: false
  become: true
  tasks:
    - debug:
        msg: "Post-Software tasks Started"

- name: Step lab post software deployment
  hosts: bastions
  gather_facts: false
  become: true
  tags:
    - opentlc_bastion_tasks
  pre_tasks:
    - name: create SSH key for user {{ ansible_user }}
      user:
        name: "{{ ansible_user }}"
        generate_ssh_key: true
    - name: fetch locally the newly created SSH key for later usage in git-server-ssh
      fetch:
        src: /home/{{ ansible_user }}/.ssh/id_rsa.pub
        dest: "{{ output_dir }}/{{ guid }}_{{ ansible_user }}_id_rsa.pub"
        flat: true
    - name: install some additional convenience software on the bastion
      package:
        name:
          - tree
        state: present
  roles:
    - role: git-server-ssh
      vars:
        git_user: git
        git_project: structured-content
        git_authorized_keys: "{{ output_dir }}/{{ guid }}_{{ ansible_user }}_id_rsa.pub"
  post_tasks:
    - name: add user {{ ansible_user }} to {{ git_user }} group
      user:
        name: "{{ ansible_user }}"
        groups: "{{ git_user }}"  # it has been created by the git-server-ssh role
        append: true

- name: PostSoftware flight-check
  hosts: bastions
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - name: define the load balanced name for the Tower cluster
      set_fact:
        tower_hostname: "{{ tower_instance_name }}.{{ subdomain_base }}"
    - name: validate the Tower setup
      import_role:
        name: tower_validate
      tags:
        - tower_validate

- name: Output user_info
  hosts: localhost
  connection: local
  gather_facts: false
  become: false

  tags:
    - step005

  tasks:

    - name: Do very annoying normalization of domain name
      set_fact:
        agnosticd_domain_name: >-
          {% if cloud_provider == 'osp' -%}
            {{ guid }}.{{ osp_cluster_dns_zone }}
          {% elif cloud_provider == 'ec2' -%}
            {{ guid }}{{ subdomain_base_suffix }}
          {%- endif %}
    - name: setting some variables only existing inside RHPDS environment
      when: student_name is not defined
      set_fact:
        student_name: "JAMES_BOND"
        student_password: LicenseToKill

    - name: Output user_info for osp or ec2 based deploys
      agnosticd_user_info:
        msg: |
          {% if install_vscode_server is true %}
            To Access VScode UI via browser:
            VScode UI URL: https://{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ agnosticd_domain_name }}
            VScode UI Password: {{ vscode_user_password | default('password_not_set') }}

          {% endif %}
            To Access Ansible controller console via browser:
            Automation controller URL: https://{{ tower_instance_name }}.{{ agnosticd_domain_name }}
            Automation controller Username: {{ automationcontroller_admin_user | default('admin') }}
            Automation controller Admin Password: {{ automationcontroller_admin_password }}

          To Access Control node via SSH:
          ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ agnosticd_domain_name }}
          Enter ssh password when prompted: {{ student_password }}

    - name: Set visual studio code agnosticd_user_info data
      when: install_vscode_server | default(false) | bool
      agnosticd_user_info:
        data:
          vscode_ui_url: "https://{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ agnosticd_domain_name }}"
          vscode_ui_password: "{{ vscode_user_password }}"

    - name: Set agnosticd_user_info automationcontroller data
      agnosticd_user_info:
        data:
          automationcontroller_url: "https://{{ tower_instance_name }}.{{ agnosticd_domain_name }}"
          automationcontroller_admin_user: "{{ automationcontroller_admin_user | default('admin') }}"
          automationcontroller_admin_password: "{{ automationcontroller_admin_password }}"

    - name: Set agnosticd_user_info ssh data
      agnosticd_user_info:
        data:
          ssh_command: >-
            ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ agnosticd_domain_name }}
          ssh_password: "{{ student_password }}"

    - name: Deploy Bookbag
      when: bookbag_git_repo is defined
      include_role:
        name: bookbag
      vars:
        ACTION: create
