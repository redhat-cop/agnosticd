---
# TIP: CHANGEME needs to be adapted once for each developer, CHANGEME-ec2 needs to be adapted for each AWS sandbox
cloudformation_retries: 0

# ## Environment size
#tower_instance_count: 3
#support_instance_count: 5 # 1 DB, 2 normal nodes, 2 isolated nodes
#tower_instance_type: "t2.medium"
#support_instance_type: "t2.medium"
root_filesystem_size: 20                #Size of the root filesystem

# Env config basics
env_type: ansible-tower-advanced               # Name of config to deploy
output_dir: /var/tmp/ans_tower_adv_workdir     # Writable working scratch directory
email: jsmith@example.com                      # User info for notifications CHANGEME

# AWS specific
guid: whateverunique                           # A short unique enough identifier CHANGEME
subdomain_base_suffix: sandboxNNN.example.com  # Your domain used in FQDN CHANGEME-ec2
# Note: the Tower ELB answers under tower.{{ guid }}.{{ subdomain_base_suffix }}

# parameters to connect hosts to Satellite
set_repositories_satellite_org: org_CHANGEME
set_repositories_satellite_activationkey: ak_CHANGEME
set_repositories_satellite_url: url_CHANGEME
set_repositories_satellite_ha: true
use_content_view: true
set_repositories_satellite_pool: "^Ansible Automation .*"


# Cloud specfic settings - example given here for AWS
# Follow those steps to find out the correct parameters:
# 1. Edit `~/.aws/credentials` based on information from sandbox e-mail
#    and enter aws_access_key_id & aws_secret_access_key
# 2. Call `aws route53 list-hosted-zones --query 'HostedZones[*]' --output text`.
#    Note down the first /hostedzone/XYZ123... ID (the one named like the sandbox domain without GUID).
# 3. Call `aws ec2 import-key-pair --key-name id_rsa_aws --region=us-west-1 --output=text \
#              --public-key-material "$(cat ~/.ssh/id_rsa_xxx.pub)"`.

cloud_provider: ec2                     # Which AgnosticD Cloud Provider to use
aws_region: us-west-1                   # CHANGEME-ec2
HostedZoneId: XYZ123ABX456R6            # CHANGEME-ec2
key_name: id_rsa_xxx                    # CHANGEME-ec2

aws_access_key_id: CHANGEME-ec2
aws_secret_access_key: CHANGEME-ec2

key_local_path:
- "~/.ssh/{{key_name}}.pem"

#Ansible Tower related vars

software_to_deploy: tower              # Define tower to install tower or none to have only infra ready.


#### Worker Node for Isolated Node group
#worker_instance_type: "t2.medium"
#worker_instance_count: 1              # Set 0 to not to provision worker(isolated) nodes.

## target_region for worker regions
target_regions:
- name: emea
#  - name: apac

default_workloads:
- tower-license-injector
- cleanup-tower-default

#infra_workloads:
#  - tower-copy-ssh                  ;;; specific to dark-tower
#  - tower-settings-update
#  - tower-pip-packages
#  - tower-user-create
#  - tower-custom-venv
#  - tower-org-create
#  - tower-credential-create
#  - tower-project-create
#  - tower-inventory-create
#  - tower-job-template-create
#  - tower-babylon-job-runner


### tower project roles
tower_projects:
- name: darktower-dev
  description: "babylon dev project"
  organization: "gpte"
  scm_url: "https://github.com/redhat-gpte-devopsautomation/dark-tower.git"
  #scm_type:
  #scm_credential:
  scm_branch: dev
  scm_update_on_launch: true

tower_inventories:
- name: empty-inventory-default
  description: "Empty inventory default"
  organization: gpte
  # instance_group: ""

#Define users you want to create. Set superuser: yes to make user system wide System Administrator
tower_user_accounts:
- user: babylon
  password: changeme
  email: babylon@example.com
  firstname: Baby
  lastname: Lon
  superuser: true
- user: babylon-viewer
  password: changeme
  email: babylon1@example.com
  firstname: Babylon
  lastname: Viewer
#   - user: test3
#   - user: test4
#     lastname: four


tower_credentials:
- name: babylon-tower-credential
  username: babylon
  password: changeme
  description: Babylon Tower Credential
  organization: gpte
  type: tower
  state: present
  host: localhost

tower_organization:
- name: gpte
- name: BU

tower_job_templates:
- name: job-runner-dev
  description: "babylon job runner"
  job_type: run
  #vault_credential:
  project: darktower-dev
  playbook: job-runner.yml
  become: true
  inventory: empty-inventory-default

# Tower settings
tower_setting_params:
  AWX_PROOT_BASE_PATH: "/tmp"
  AWX_PROOT_SHOW_PATHS: "'/var/lib/awx/projects/', '/tmp', '/var/lib/awx/.ssh/'"

# List of virtual environment which will be created
# restart of tower service is required
# ansible-tower-service restart
# https://docs.ansible.com/ansible-tower/latest/html/userguide/security.html
tower_virtual_environment:
- /var/lib/awx/venv/ansible

# Path of Virtual Env for update
tower_update_venv: /var/lib/awx/venv/ansible

# Pip packages with version which needs to be updated for venv
pip_requirements:
- boto==2.49.0
- boto3==1.9.200
- awscli==1.16.210
- ansible-tower-cli==3.3.6

### Variables to check against in the tower_validate role, they must be aligned with what you expect
tower_expected_instances: 4            # number of instances in the cluster, normal and isolated
tower_expected_instance_groups: 2      # number of instance groups in the cluster
tower_expected_licensed_min_nodes: 20  # how many managed nodes must be covered
tower_expected_licensed_min_days: 2    # how many days there must be left on the license

# Enter the base64 encoded content of a manifest file
# See the role tower-license-injector for other options
tower_license_manifest:
  type: content
  content: |
    CHANGEME
