################################################################################
################################################################################
### Environment Structure
################################################################################
################################################################################
## Environment Sizing

bastion_instance_type: "t2.medium"
  # ec2: "t2.medium"

bastion_instance_image: RHEL81

node_instance_type: "t2.medium"
  # ec2: "t2.medium"

node_instance_image: RHEL81
node7_instance_image: RHEL75
nbde_instance_image: RHEL81NBDE


# How many do you want for each instance type

security_groups:
  - name: RemoteDesktopRDPSG
    rules:
    - name: RemoteDesktopXRDP
      description: "RemoteDesktopXRDP"
      from_port: 3389
      to_port: 3389
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress

  - name: RemoteDesktopVNCSG
    rules:
    - name: RemoteDesktopTigerVNC
      description: "RemoteDesktopTigerVNC"
      from_port: 5901
      to_port: 5901
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress

  - name: OpenIPSECports
    rules:
    - name: ike50udp
      description: "Ike 50/UDP"
      from_port: 50
      to_port: 50
      protocol: udp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: ike4500udp
      description: "Ike 4500/UDP"
      from_port: 4500
      to_port: 4500
      protocol: udp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: ike500udp
      description: "500/UDP"
      from_port: 500
      to_port: 500
      protocol: udp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: ike50
      description: "Ike 50/TCP"
      from_port: 50
      to_port: 50
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: ike500
      description: "500/TCP"
      from_port: 500
      to_port: 500
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: ike4500
      description: "Ike 4500/TCP"
      from_port: 4500
      to_port: 4500
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
  
  - name: OpenIdMports
    rules:
    - name: ldap
      description: "Directory Server"
      from_port: 389
      to_port: 389
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: ldaps
      description: "Directory Server"
      from_port: 636
      to_port: 636
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: kerberosUDP
      description: "Kerberos Authentication"
      from_port: 88
      to_port: 88
      protocol: udp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: kerberosUDP2
      description: "Kerberos Authentication"
      from_port: 464
      to_port: 464
      protocol: udp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: kerberos
      description: "Kerberos Authentication"
      from_port: 88
      to_port: 88
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: kerberos2
      description: "Kerberos Authentication"
      from_port: 464
      to_port: 464
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: kadmind
      description: "Kerberos Authentication"
      from_port: 749
      to_port: 749
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: dns
      description: "DNS"
      from_port: 53
      to_port: 53
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: dnsUDP
      description: "DNS UDP"
      from_port: 53
      to_port: 53
      protocol: udp
      cidr: "0.0.0.0/0"
      rule_type: Ingress

  - name: OpenEverythingSG
    rules:
    - name: AllowICMP
      description: "Local network"
      from_port: -1
      to_port: -1
      protocol: icmp
      cidr: 0.0.0.0/0
      rule_type: Ingress
    - name: SSH
      description: "SSH public"
      from_port: 22
      to_port: 22
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: HTTP
      description: "HTTP public"
      from_port: 80
      to_port: 80
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: HTTP8080
      description: "HTTP public 8080"
      from_port: 8080
      to_port: 8080
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: HTTPS
      description: "HTTPS public"
      from_port: 443
      to_port: 443
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: Cockpit
      description: "Cockpit public"
      from_port: 9090
      to_port: 9090
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: BastionTcp
      description: "ALL from bastion tcp"
      from_port: 0
      to_port: 65535
      protocol: tcp
      group: BastionSG
      rule_type: Ingress
    - name: BastionUdp
      description: "ALL from bastion udp"
      from_port: 0
      to_port: 65535
      protocol: udp
      group: BastionSG
      rule_type: Ingress
    - name: Shellshock
      description: "Allow tcp/3113 for shellshock attack"
      from_port: 3113
      to_port: 3113
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: SELinuxpart1
      description: "Allow tcp/999 for shellshock attack"
      from_port: 9999
      to_port: 9999
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: AllInternaltcp
      description: "All other nodes tcp"
      from_port: 0
      to_port: 65535
      protocol: tcp
      group: HostSG
      rule_type: Ingress
    - name: AllInternaludp
      description: "All other nodes udp"
      from_port: 0
      to_port: 65535
      protocol: udp
      group: HostSG
      rule_type: Ingress

  - name: OpenNBDESG
    rules:
    - name: AllowICMP
      description: "Local network"
      from_port: -1
      to_port: -1
      protocol: icmp
      cidr: 0.0.0.0/0
      rule_type: Ingress
    - name: SSH
      description: "SSH public"
      from_port: 22
      to_port: 22
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: HTTP
      description: "HTTP public"
      from_port: 80
      to_port: 80
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress
    - name: Cockpit
      description: "Cockpit public"
      from_port: 9090
      to_port: 9090
      protocol: tcp
      cidr: "0.0.0.0/0"
      rule_type: Ingress

# Environment Instances
instances:
  - name: "bastion"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: false
    image: "{{ bastion_instance_image }}"
    flavor: 
      ec2: "{{ bastion_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    volumes:
      - name: '/dev/sda1'
        size: 20
    security_groups:
      - BastionSG
      - OpenEverythingSG

  - name: "openscap"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: false
    image: "{{ bastion_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "openscap"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    volumes:
      - name: '/dev/sda1'
        size: 20
    security_groups:
      - BastionSG
      - OpenEverythingSG
      - RemoteDesktopRDPSG
      - RemoteDesktopVNCSG

  # - name: "idmserver"
  #   count: 1
  #   unique: true
  #   public_dns: true
  #   dns_loadbalancer: false
  #   image: "{{ bastion_instance_image }}"
  #   flavor: "{{ bastion_instance_type }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "idmserver"
  #     - key: "ostype"
  #       value: "linux"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   volumes:
  #     - name: '/dev/sda1'
  #       size: 20
  #   security_groups:
  #     - BastionSG
  #     - OpenIdMports
  #     - OpenEverythingSG
  #     - RemoteDesktopRDPSG
  #     - RemoteDesktopVNCSG

  # - name: "idm"
  #   count: 2
  #   public_dns: false
  #   dns_loadbalancer: false
  #   image: "{{ node_instance_image }}"
  #   flavor: "{{ node_instance_type }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "idm"
  #     - key: "ostype"
  #       value: "linux"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   security_groups:
  #     - DefaultSG
  #     - OpenEverythingSG

  - name: "aide"
    count: 1
    unique: true
    public_dns: false
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "aide"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenEverythingSG

  - name: "gpg"
    count: 1
    unique: true
    public_dns: false
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "gpg"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenEverythingSG

  - name: "audit"
    count: 1
    unique: true
    public_dns: false
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "audit"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenEverythingSG

  - name: "firewalld"
    count: 1
    unique: true
    public_dns: false
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "firewalld"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenEverythingSG

  - name: "ipsec"
    count: 2
    public_dns: false
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "ipsec"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenIPSECports
      - OpenEverythingSG

  - name: "cryptopolicies"
    count: 1
    unique: true
    public_dns: false
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "cryptopolicies"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenEverythingSG

  - name: "sessionrecording"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "sessionrecording"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenEverythingSG

  - name: "rhel8selinux"
    count: 2
    public_dns: false
    dns_loadbalancer: false
    image: "{{ node_instance_image }}"
    flavor: 
      ec2: "{{ node_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "rhel8selinux"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - DefaultSG
      - OpenEverythingSG

  # - name: "rhel7selinux"
  #   count: 2
  #   public_dns: false
  #   dns_loadbalancer: false
  #   image: "{{ node7_instance_image }}"
  #   flavor: "{{ node_instance_type }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "rhel7selinux"
  #     - key: "ostype"
  #       value: "linux"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   security_groups:
  #     - DefaultSG
  #     - OpenEverythingSG

  - name: "nbde"
    count: 3
    # TODO: enable when we have a solution for number of maximum public IP address. Which is 5 currently in AWS
    public_dns: false
    dns_loadbalancer: false
    image: "{{ nbde_instance_image }}"
    flavor:
      ec2: "t2.medium"
      azure: Standard_A2_V2
    security_groups:
      - OpenNBDESG
    tags:
      - key: "AnsibleGroup"
        value: "nbde"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"

# DNS settings for environmnet
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"

zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

# Stuff that only GPTE cares about:
install_ipa_client: false


################################################################################
################################################################################
### Common Host settings
################################################################################
################################################################################
# Other Options are: file, satellite and rhn
#If using repo_method: satellite, you must set these values as well.
# satellite_url: satellite.example.com
# satellite_org: Sat_org_name
# satellite_activationkey: "rhel7basic"

repo_method: file
repo_version: "3.10"
# Do you want to run a full yum update
update_packages: false
common_packages:
  - python
  - unzip
  - bash-completion
  - tmux
  - wget
  - git
  - vim-enhanced
  - at

rhel_repos:
  - rhel-7-server-rpms
  - rhel-7-server-extras-rpms
  - epel-release-latest-7

###V2WORK, these should just be set as default listed in the documentation
install_bastion: true
install_common: true
## SB Don't set software_to_deploy from here, always use extra vars (-e) or "none" will be used
#software_to_deploy: none


## guid is the deployment unique identifier, it will be appended to all tags,
## files and anything that identifies this environment from another.
# Using GUID is required, if it is not passed in the command line or uncommented
# here the deployment will fail
#guid: defaultguid



###V2WORK, these should just be set as default listed in the documentation
# This is where the ssh_config file will be created, this file is used to
# define the communication method to all the hosts in the deployment
deploy_local_ssh_config_location: "{{output_dir}}/"


### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})

###V2WORK, these should just be set as default listed in the documentation
use_own_key: true
env_authorized_key: "{{guid}}key"
set_env_authorized_key: true

###V2WORK THIS SHOULD MOVE INTO THE ROLE
# This var is used to identify stack (cloudformation, azure resourcegroup, ...)
project_tag: "{{ env_type }}-{{ guid }}"
