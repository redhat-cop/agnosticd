---
## TODO: What variables can we strip out of here to build complex variables?
## i.e. what can we add into group_vars as opposed to config_vars?
## Example: We don't really need "subdomain_base_short". If we want to use this,
## should just toss in group_vars/all.
### Also, we should probably just create a variable reference in the README.md
### For now, just tagging comments in line with configuration file.

env_type: ansible-workshops-test
output_dir: /tmp/workdir                # Writable working scratch directory
email: "{{ env_type }}@example.com"
guid: defaultguid
key_name: ocpkey

lab_user: devops                        # Ansible Service Account

## guid is the deployment unique identifier, it will be appended to all tags,
## files and anything that identifies this environment from another "just like it"

# This var is used to identify stack (cloudformation, azure resourcegroup, ...)
project_tag: "{{ env_type }}-{{ guid }}"

# This is where the ssh_config file will be created, this file is used to
# define the communication method to all the hosts in the deployment
deploy_local_ssh_config_location: "{{ output_dir }}/"

install_bastion: true
install_common: true

### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})
#use_own_key: true
#env_authorized_key: "{{ guid }}key"
#ansible_ssh_private_key_file: ~/.ssh/{{ key_name }}.pem
#set_env_authorized_key: true

# Is this running from Red Hat Ansible Tower
tower_run: false

### Azure
# Create a dedicated resourceGroup for this deployment
az_destroy_method: resource_group
az_resource_group: "{{ project_tag }}"

# you can operate differently: if you share on resourceGroup for all you deployments,
# you can specify a different resourceGroup and method:
#az_destroy_method: deployment
#az_resource_group: my-shared-resource-group

###### VARIABLES YOU SHOULD ***NOT*** CONFIGURE FOR YOUR DEPLOYEMNT
###### You can, but you usually wouldn't need to.
ansible_user: ec2-user
remote_user: ec2-user

### Vars that can be removed:
# use_satellite: true
# use_subscription_manager: false
# use_own_repos: false
#If using repo_method: satellite, you must set these values as well.
# satellite_url: satellite.example.com
# satellite_org: Sat_org_name
# satellite_activationkey: "rhel7basic"
# Other Options are: file, satellite and rhn
repo_method: file
repo_version: 3.7.0-4
rhel_repos:
  - rhel-7-server-rpms
  - rhel-7-server-rh-common-rpms
  - rhel-7-server-extras-rpms
  - rhel-7-server-optional-rpms
  - rhel-server-rhscl-7-rpms
  - rhel-7-server-ansible-2.9-rpms

cf_template_description: "{{ env_type }}-{{ guid }} Ansible Agnostic Deployer "









































# vars from ansible/workshops






# vpc_rules.yml

workshops:
  common:
    ports:
      - proto: 47
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 443
        from_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        to_port: -1
        from_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 80
        from_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 22
        from_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 3389
        from_port: 3389
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8000
        from_port: 8000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8080
        from_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8088
        from_port: 8088
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8089
        from_port: 8089
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 8443
        from_port: 8443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 830
        from_port: 830
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        to_port: 5986
        from_port: 5986
        cidr_ip: 0.0.0.0/0
        rule_desc: WinRM
      - proto: udp
        to_port: 514
        from_port: 514
        cidr_ip: 0.0.0.0/0
        rule_desc: WinRM
      - proto: tcp
        to_port: 5432
        from_port: 5432
        cidr_ip: 172.16.0.0/14
        rule_desc: Cluster option DB port
  f5:
    ports:
      - proto: tcp
        to_port: 8081
        from_port: 8081
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8082
        from_port: 8082
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8083
        from_port: 8083
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8084
        from_port: 8084
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8085
        from_port: 8085
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8086
        from_port: 8086
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8087
        from_port: 8087
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8090
        from_port: 8090
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8091
        from_port: 8091
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8092
        from_port: 8092
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8093
        from_port: 8093
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8094
        from_port: 8094
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8095
        from_port: 8095
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8096
        from_port: 8096
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8097
        from_port: 8097
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8098
        from_port: 8098
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8099
        from_port: 8099
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
      - proto: tcp
        to_port: 8100
        from_port: 8100
        cidr_ip: 0.0.0.0/0
        rule_desc: f5 port
  devops:
    ports:
      - proto: tcp
        to_port: 8888
        from_port: 8888
        cidr_ip: 0.0.0.0/0
        rule_desc: DevOps Sphinx Listener
      - proto: tcp
        to_port: 8081
        from_port: 8081
        cidr_ip: 0.0.0.0/0
        rule_desc: DevOps GOGs listener
      - proto: tcp
        to_port: 5000
        from_port: 5000
        cidr_ip: 0.0.0.0/0
        rule_desc: DevOps Container Registry
  windows:
    ports:
      - proto: tcp
        to_port: 8081
        from_port: 8081
        cidr_ip: 0.0.0.0/0
  rhel:
  rhel_90:
  smart_mgmt:
    ports:
      - proto: tcp
        to_port: 5647
        from_port: 5647
        cidr_ip: 0.0.0.0/0
        rule_desc: katello-agent
      - proto: tcp
        to_port: 9090
        from_port: 9090
        cidr_ip: 0.0.0.0/0
        rule_desc: SCAP reports
  network:
    ports:
      - proto: tcp
        to_port: 179
        from_port: 179
        cidr_ip: 0.0.0.0/0
        rule_desc: BGP
  security:
    ports:
      - proto: tcp
        to_port: 256
        from_port: 256
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point fetch policy
      - proto: tcp
        to_port: 257
        from_port: 257
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point logging
      - proto: tcp
        to_port: 18183
        from_port: 18183
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point FW1 sam
      - proto: tcp
        to_port: 18190
        from_port: 18190
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point SmartConsole CPMI
      - proto: tcp
        to_port: 18191
        from_port: 18191
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point SIC policy inst
      - proto: tcp
        to_port: 18192
        from_port: 18192
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point SIC get topology
      - proto: tcp
        to_port: 18194
        from_port: 18194
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point temain
      - proto: tcp
        to_port: 18202
        from_port: 18202
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point CP RTM
      - proto: tcp
        to_port: 18208
        from_port: 18208
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point FW1 remote install
      - proto: tcp
        to_port: 18209
        from_port: 18209
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point
      - proto: tcp
        to_port: 18210
        from_port: 18210
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point FW ICA pull
      - proto: tcp
        to_port: 18211
        from_port: 18211
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point SIC ICA push
      - proto: tcp
        to_port: 18221
        from_port: 18221
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point CP redundant
      - proto: tcp
        to_port: 18264
        from_port: 18264
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point FW ICA services
      - proto: tcp
        to_port: 18266
        from_port: 18266
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point seam
      - proto: tcp
        to_port: 19009
        from_port: 19009
        cidr_ip: 0.0.0.0/0
        rule_desc: Check Point SmartConsole CPMI

network_demo_second_vpc_ingress:
  ports:
    - proto: 47
      to_port: -1
      from_port: -1
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      to_port: 443
      from_port: 443
      cidr_ip: 0.0.0.0/0
    - proto: icmp
      to_port: -1
      from_port: -1
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      to_port: 80
      from_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      to_port: 22
      from_port: 22
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      to_port: 8443
      from_port: 8443
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      to_port: 830
      from_port: 830
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      to_port: 179
      from_port: 179
      cidr_ip: 0.0.0.0/0






# group_vars/all.yml

#admin_password: ansible
code_server: true
workshop_dns_zone: "agnosticd-devel.xlab.si"
s3_state: "present"
teardown: false
#towerinstall: false
populatetower: true
website_information: ""
login_website_information: ""
dns_information: "No errors with DNS"
callback_information: "No issue with Ansible Tower callback"
demo_information: "No errors with Demos"
#workshop_type: ""
#dns_type: aws
valid_dns_type:
  - aws
  - none
valid_workshop_types:
  - network
  - f5
  - rhel
  - devops
  - security
  - storage
  - windows
  - rhel_90
  - demo
  - smart_mgmt
  - middleware
network_type: multivendor
valid_network_types:
  - cisco
  - arista
  - juniper
  - multivendor
doubleup: false
attendance: true
security_console: qradar
valid_security_console_types:
  - splunk
  - qradar
ibm_community_grid: false
#create_cluster: false
default_tower38_url: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.8.0-1.tar.gz
default_tower37_url: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.7.3-1.tar.gz
use_manifest: false
automation_hub: true



















# manage_ec2_instances role defaults

#ec2_name_prefix: TRAINING
#ec2_region: us-east-1
ec2_wait: true
# need to circle back and fix this for teardown - sean
ec2_az: "{{ec2_region}}a"
ec2_subnet: "172.16.0.0/16"
ec2_subnet2: "172.17.0.0/16"
ec2_network_vpc2: "172.18.0.0/16"
ssh_port: 22
#create_cluster: false
## The default is multivendor, 1 x Cisco, 2 x Arista, 1 x Juniper
##
##   VPC1       VPC2
##  (rtr1)  -   (rtr2)
##    |           |
##  (rtr3)  -   (rtr4)
##
control_type: "rhel8-tower"
rtr1_type: "cisco"
rtr2_type: "arista"
rtr3_type: "juniper"
rtr4_type: "arista"
rhel: "rhel8"
# additional info needed by AWS ec2 modules
ec2_info:
  juniper:
    size: c4.xlarge
    ami: "{{juniper_ami | default(omit)}}"
    os: junos
    username: ec2-user
    filter: "junos-vsrx3-x86-*byol*"
    volume:
      - device_name: /dev/sda1
        volume_type: io1
        iops: 1000
        volume_size: 40
        delete_on_termination: true
  cisco:
    size: t2.medium
    ami: "{{cisco_ami | default(omit)}}"
    os: ios
    username: ec2-user
  arista:
    size: c5.xlarge
    ami: "{{arista_ami | default(omit)}}"
    os: eos
    username: ec2-user
    filter: "*VEOSRouter*"
  checkpoint_mgmt:
    owners: 679593333241
    filter: 'Check Point CloudGuard IaaS BYOL*R80.40*'
    architecture: x86_64
    size: m5.xlarge
    ami: "{{ checkpoint_mgmt_ami| default(omit) }}"
    username: admin
  checkpoint_gw:
    owners: 679593333241
    filter: 'Check Point CloudGuard IaaS GW*BYOL*R80.40*'
    architecture: x86_64
    size: c5.large
    ami: "{{ checkpoint_gw_ami| default(omit) }}"
    username: admin
  windows_ws:
    owners: 679593333241
    filter: 'Windows_Server-2016-English-Full-Base*'
    size: m5.xlarge
    ami: "{{ windows_ws_ami| default(omit) }}"
    username: Administrator
  # Look for owner 309956199498 to find official Red Hat AMIs
  rhel8-tower:
    owners: 309956199498
    size: t3.medium
    os_type: linux
    disk_space: 20
    architecture: x86_64
    filter: 'RHEL-8*HVM-*Hourly*'
    username: ec2-user
  rhel8:
    owners: 309956199498
    size: t3.micro
    os_type: linux
    disk_space: 10
    architecture: x86_64
    filter: 'RHEL-8*HVM-*Hourly*'
    username: ec2-user
  rhel7:
    owners: 309956199498
    size: t2.medium
    os_type: linux
    disk_space: 10
    architecture: x86_64
    filter: 'RHEL-7.9_HVM*'
    username: ec2-user
    python_interpreter: '/usr/bin/python'
  rhel68:
    owners: 309956199498
    size: t2.medium
    os_type: linux
    disk_space: 10
    architecture: x86_64
    filter: 'RHEL-6.8_HVM_GA*'
    username: ec2-user
    python_interpreter: '/usr/bin/python'
  centos78:
    owners: 125523088429
    size: t2.medium
    os_type: linux
    disk_space: 10
    architecture: x86_64
    filter: 'CentOS*7.8*x86_64'
    username: centos
    python_interpreter: '/usr/bin/python'
  centos79:
    owners: 125523088429
    size: t2.medium
    os_type: linux
    disk_space: 10
    architecture: x86_64
    filter: 'CentOS*7.9*x86_64'
    username: centos
    python_interpreter: '/usr/bin/python'
  f5node:
    owners: 679593333241
    size: t2.large
    os_type: linux
    disk_space: 40
    architecture: x86_64
    filter: 'F5 BIGIP-16.0.*PAYG-Best 25Mbps*'
    username: admin
    password: admin
  splunk_enterprise:
    owners: 309956199498
    size: c4.4xlarge
    os_type: linux
    disk_space: 200
    architecture: x86_64
    filter: 'RHEL-7.7_HVM_GA-20190723-x86_64-1-Access2-GP2'
    username: ec2-user
    python_interpreter: '/usr/bin/python'
  netapp:
    owners: 679593333241
    size: t2.medium
    os_type: linux
    disk_space: 10
    architecture: x86_64
    filter: 'OnCommand_Cloud_Manager_3.7.0_Marketplace*'
    username: ec2-user
  qradar:
    owners: 721066863947
    size: t2.2xlarge
    os_type: linux
    disk_space: 300
    architecture: x86_64
    filter: 'AnsibleSecurity-QRadarCE*'
    username: ec2-user
    python_interpreter: '/usr/bin/python'
  skylight_windows_ws:
    filter: 'Windows_Server-2016-English-Full-Base*'
    size: t3.medium
  skylight_windows_instance:
    filter: 'Windows_Server-2019-English-Core-Base*'
    size: t3.medium
  skylight_rhel7_gitlab:
    filter: 'RHEL-7.6_HVM_GA*x86_64*'
    size: t2.xlarge
    username: ec2-user
  skylight_rhel8_gitlab:
    owners: 309956199498
    filter: 'RHEL-8*HVM-*Hourly*'
    size: t2.xlarge
    username: ec2-user
    architecture: x86_64
  attendance_host:
    owners: 309956199498
    size: t3.micro
    os_type: linux
    disk_space: 10
    architecture: x86_64
    filter: 'RHEL-8*HVM-*Hourly*'
    username: ec2-user
  satellite:
    owners: 551178754270
    filter: Satellite*
    username: ec2-user
    os_type: linux
    size: r5a.xlarge
  middleware:
    owners: 309956199498
    size: t2.xlarge
    os_type: linux
    disk_space: 20
    architecture: x86_64
    filter: 'RHEL-8*HVM-*Hourly*'
    username: ec2-user
debug_teardown: false






























# (modified) sample vars for a workshop (rhel)

# region where the nodes will live
ec2_region: eu-north-1
# name prefix for all the VMs
ec2_name_prefix: amtw  # this must be short because there's a 65 char limit for "studentXXX-code.{{ec2_name_prefix|lower}}.{{workshop_dns_zone}}"
# amount of work benches to provision
student_total: 2
# workshop is put into rhel mode
workshop_type: rhel
## Optional Variables
# password used for student account on control node
admin_password: agnosticd-migration-admin-password
# turn DNS on for control nodes, and set to type in valid_dns_type
#dns_type: aws
dns_type: none
# this will install Ansible Tower on all control nodes
towerinstall: false
create_cluster: false





















# variables from other workshops that fix things that are executed
centos7: centos79
windows_password: Ansible+Red*Hat19!20
