# The type of cloud provider this will be deployed to
cloud_provider: osp

# Authenication credentials for OpenStack in order to create the things.
# These should be included with your secrets, but are listed here for reference
# osp_auth_url:
# osp_auth_username:
# osp_auth_password:
# osp_auth_cloud:
# osp_auth_project_domain: #usually set to "default"
# osp_auth_user_domain: #usually set to "default"

# This is an account that must exist in OpenStack.
# It is used to create projects, access, Heat templates
admin_user: opentlc-mgr

# This is the user that Ansible will use to connect to the nodes it is
# configuring from the admin/control host
ansible_user: cloud-user

###Repo method
repo_method: file

# The domain that you want to add DNS entries to
osp_cluster_dns_zone: FROMSECRET

# The dynamic DNS server you will add entries to.
# NOTE: This is only applicable when {{ use_dynamic_dns}} is true
osp_cluster_dns_server: FROMSECRET

# Whether to wait for an ack from the DNS servers before continuing
wait_for_dns: true

# Authenticaion for DDNS, Must be set in secrets
# ddns_key_name:
# ddns_key_algorithm:                # default value set to: "hmac-md5"
# ddns_secret_name:

# OpenStack Infrastructure
# -------------------------------------------------------------------

# See cloud_providers/osp_default_vars.yml
# See roles-infra/infra-osp-project-create/defaults/main.yml

# The name of the project that will be created in OpenStack for the user
osp_project_name: "{{ guid }}-project"
project_tag: "{{ osp_project_name }}"

# The name of the cloud where ocp-cluster will be created
osp_cloud_name: "{{ osp_project_name }}"

# Set this to true if you need to create a new project in OpenStack
# This should almost always be set to true for OpenShift installations
# If it is set to false, the {{ osp_project_name }} must already exist and
# should be able to run whatever you are deploying
osp_project_create: true

# The external network in OpenStack where the floating IPs (FIPs) come from
provider_network: external

# Networking (OSP)
subdomain_base_short: "{{ guid }}"
# osp_cluster_dns_zone needs to come from secrets
subdomain_base_suffix: "{{ osp_cluster_dns_zone }}"
subdomain_base: "{{ subdomain_base_short }}.{{ subdomain_base_suffix }}"

# A list of the private networks and subnets to create in the project
# You can create as many as you want, but at least one is required.
# Use the name of the networks where appropriate in the instance list
networks:
- name: tower
  shared: "false"
  subnet_cidr: 192.168.47.0/24
  gateway_ip: 192.168.47.1
  allocation_start: 192.168.47.10
  allocation_end: 192.168.47.254
  dns_nameservers: []
  create_router: true

# If osp_project_create is set to yes, define those:
# Quotas to set for new project that is created
quota_num_instances: 10
quota_num_cores: 36
quota_memory: 19074 # in MB
quota_num_volumes: 10
quota_volumes_gigs: 500
quota_fip: 5
quota_sg: 10




bastion_instance_type: 2c2g30d
server_instance_type: 2c2g30d
git_instance_type: 2c2g30d
tower_instance_type: 2c4g30d
 
_image: rhel-server-7.7-update-2 
bastion_instance_image: "{{ _image }}"
server_instance_image: "{{ _image }}"
git_instance_image: "{{ _image }}"
tower_instance_image: "{{ _image }}"

tower_instance_count: 1
server_instance_count: 2
git_instance_count: 1

rootfs_size_bastion: 50

security_groups:
  - name: TowerSG
    rules:
      - protocol: tcp
        description: "HTTPS Public"
        port_range_min: 443
        port_range_max: 443
        remote_ip_prefix: 0.0.0.0/0
        rule_type: Ingress
      - protocol: tcp
        description: "HTTP Public"
        port_range_min: 80 
        port_range_max: 80
        remote_ip_prefix: "0.0.0.0/0"
        rule_type: Ingress
      - protocol: udp
        description: "Only from bastion"
        port_range_min: 1
        port_range_max: 65535
        remote_group: DefaultSG
        rule_type: Ingress
      - protocol: tcp
        description: "Only from bastion"
        port_range_min: 1
        port_range_max: 65535
        remote_group: DefaultSG
        rule_type: Ingress
  - name: GitSG
    rules:    
      - protocol: tcp
        description: "from tower"
        port_range_min: 1
        port_range_max: 65535
        remote_group: TowerSG
        rule_type: Ingress
  - name: ServerSG
    rules:    
      - protocol: tcp
        description: "from tower"
        port_range_min: 1
        port_range_max: 65535
        remote_group: TowerSG
        rule_type: Ingress
 





# Environment Instances

instances:
  - name: bastion
    count: 1
    unique: true
    alt_name: bastion
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    network: tower
    image_id: "{{ bastion_instance_image }}"
    flavor:
      osp: "{{bastion_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_bastion }}"
    security_groups:
      - BastionSG
      - DefaultSG

  - name: "tower"
    count: "{{tower_instance_count}}"
    public_dns: true
    dns_loadbalancer: true
    network: tower
    floating_ip: true
    image_id: "{{ tower_instance_image }}"
    flavor:
      osp: "{{tower_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "towers"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - TowerSG
      - DefaultSG

  - name: "server"
    count: "{{server_instance_count}}"
    public_dns: false
    floating_ip: false
    network: tower
    image_id: "{{ server_instance_image }}"
    flavor:
      osp: "{{server_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "servers"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - DefaultSG
      - ServerSG


  - name: "git"
    count: "{{git_instance_count}}"
    public_dns: false
    floating_ip: false
    network: tower
    image_id: "{{ git_instance_image }}"
    flavor:
      osp: "{{git_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "gitserver"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - DefaultSG
      - GitSG

