###### VARIABLES YOU SHOULD CONFIGURE FOR YOUR DEPLOYEMNT
###### OR PASS as "-e" args to ansible-playbook command

## guid is the deployment unique identifier, it will be appended to all tags,
## files and anything that identifies this environment from another "just like it"
guid: defaultguid

# Project Tag for all generated resources
project_tag: "{{ env_type }}-{{ guid }}"

# Is this running from Red Hat Ansible Tower
tower_run: false

### Where to get Red Hat Repos. Only 'satellite' is supported for RHEL 8
repo_method: file

# If using satellite, these are needed and should
# come from secrets:
# satellite_url: satellite.opentlc.com
# satellite_org: # This should be stored in secrets
# satellite_activationkey: # This should be stored in secrets

# Do you want to run a full yum update
update_packages: true

# student_name. Usually comes from CloudForms
student_name: lab-user

# Install FTL
# requirements.yml should have the right version of FTL injector
# Set ftl_injector_tag to the version desired"
# ftl_injector_tag: "v0.17.0"

# To be added as an additional tag on resources
purpose: development

# Tags to be added to VMs
cloud_tags:
  env_type: "{{ env_type }}"
  guid: "{{ guid }}"
  course_name: "{{ course_name | default( 'unknown' ) }}"
  platform: "{{ platform | default( 'unknown' ) }}"

### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})

use_own_key: false
set_env_authorized_key: true
env_authorized_key: "{{guid}}key"
key_name: "opentlc_admin_backdoor"
ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem

rhel_repos:
  - rhel-7-server-rpms
  - rhel-7-server-rh-common-rpms
  - rhel-7-server-extras-rpms
  - rhel-7-server-optional-rpms
  - rhel-server-rhscl-7-rpms
  - rhel-7-server-ansible-2.9-rpms
  
# Which StudentVM Roles to run after provisioning.
# This is how a Student VM should be customized for special courses (OCP, 3Scale, App Dev, ...)
# studentvm_roles:
# - studentvm_user
# - studentvm_bash_prompt
# - studentvm_ocp4
# - studentvm_java_development

# # Settings for role studentvm_user
# # Install a user id 'lab-user'.
# studentvm_user_name: "{{ student_name }}"
# # If no student_password is provided a randomly generated password will be used
# studentvm_user_password: ""
