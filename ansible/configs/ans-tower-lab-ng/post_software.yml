- name: Step 00xxxxx post software
  hosts: localhost
  gather_facts: False
  become: yes
  tasks:
    - debug:
        msg: "Post-Software tasks Started"

- name: Step lab post software deployment
  hosts: bastions
  gather_facts: false
  become: yes
  tags:
    - post_bastion_tasks

  tasks:
    - name: Copy Tower License File
      copy:
        content: "{{ tower_license | from_json }}"
        dest: "/root/license.txt"
        mode: 0644

    - name: Copy Openstack PEM key
      blockinfile:
        path: "/root/.ssh/openstack.pem"
        block: |
          {{ openstack_pem | b64decode }}
        mode: 0440
        state: present
        create: yes

    - name: Copy Openstack Pub key
      blockinfile:
        path: "/root/.ssh/openstack.pub"
        block: |
          {{ openstack_pub | b64decode }}
        mode: 0440
        state: present
        create: yes

    - name: Remove first and last lines from Openstack keys
      lineinfile:
        path: "/root/.ssh/{{ item }}"
        regexp: '^#(.*)$'
        state: absent
      loop:
        - "openstack.pem"
        - "openstack.pub"

    - name: Block for software_deploy is tower
      when: software_to_deploy | d('None') == 'tower'
      block:

        - name: Inject Ansible Tower license
          command: tower-cli setting modify LICENSE @/root/license.txt --insecure

        - when: tower_credentials is defined
          name: Add tower credential(s)
          tower_credential:
            name: "{{ __tower_credential.name }}"
            username: "{{ __tower_credential.username | default(omit) }}"
            password: "{{ __tower_credential.password | default(omit) }}"
            description: "{{ __tower_credential.description | default(omit) }}"
            organization: "{{ __tower_credential.organization | default('Default') }}"
            kind: "{{ __tower_credential.type }}"
            state: "{{ __tower_credential.state | default('present') }}"
            host: "{{ __tower_credential.host | default(omit) }}"
            ssh_key_data: "{{ __tower_credential.ssh_key_data | default(omit) }}"
            domain: "{{ __tower_credential.domain | default(omit) }}"
            project: "{{ __tower_credential.project | default(omit) }}"
            validate_certs: "{{ __tower_credential.validate_certs | default(omit) }}"
            tower_host: "{{ tower_hostname }}"
            tower_username: "{{ tower_admin_username | default('admin') }}"
            tower_password: "{{ tower_admin_password }}"
            tower_verify_ssl: "{{ tower_verify_ssl | default(false) }}"
          loop: "{{ tower_credentials }}"
          loop_control:
            loop_var: __tower_credential
          tags:
            - tower-credential-create


    - name: Include lab user
      include_tasks: setup_lab_user.yml


- name: Deploy user setup
  hosts: localhost
  connection: local
  gather_facts: false
  tags:
    - step005
  tasks:
    - name: osp user.info
      when: cloud_provider == 'osp'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To access Ansible Tower console via browser:"
            - "Tower URL: https://tower0.{{ guid }}.{{ osp_cluster_dns_zone }}"
            - "{% if software_to_deploy | d('None') == 'tower' %}Ansible Tower Admin Password: {{ tower_admin_password }}{% endif %}"
            - ""
            - "To access bastion via SSH:"
            - "ssh {{ student_name }}@control.{{ guid }}.{{ osp_cluster_dns_zone }}"
            - "Enter ssh password when prompted: {{ hostvars['bastion']['student_password'] }}"

        - name: Save user data
          agnosticd_user_info:
            data:
              tower_url: "https://tower0.{{ guid }}.{{ osp_cluster_dns_zone }}"
              tower_admin_password: "{% if software_to_deploy | d('None') == 'tower' %}{{ tower_admin_password }}{% endif %}"
              ssh_command: "ssh {{ student_name }}@control.{{ guid }}.{{ osp_cluster_dns_zone }}"
              ssh_password: "{{ hostvars['bastion']['student_password'] }}"

    - name: ec2 user.info
      when: cloud_provider == 'ec2'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To access Ansible Tower console via browser:"
            - "https://tower1.{{ guid }}{{ subdomain_base_suffix }}"
            - "{% if software_to_deploy | d('None') == 'tower' %}Ansible Tower Admin Password: {{ tower_admin_password }}{% endif %}"
            - ""
            - "To access bastion via SSH:"
            - "ssh {{ student_name }}@control.{{ guid }}{{ subdomain_base_suffix }}"
            - "Enter ssh password when prompted: {{ hostvars[groups['bastions'][0]]['student_password'] }}"

        - name: Save user data
          agnosticd_user_info:
            data:
              tower_url: "https://tower1.{{ guid }}{{ subdomain_base_suffix }}"
              tower_admin_password: "{% if software_to_deploy | d('None') == 'tower' %}{{ tower_admin_password }}{% endif %}"
              ssh_command: "ssh {{ student_name }}@control.{{ guid }}{{ subdomain_base_suffix }}"
              ssh_password: "{{ hostvars[groups['bastions'][0]]['student_password'] }}"


- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
