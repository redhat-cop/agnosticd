---
## TODO: What variables can we strip out of here to build complex variables?
## i.e. what can we add into group_vars as opposed to config_vars?
## Example: We don't really need "subdomain_base_short". If we want to use this,
## should just toss in group_vars/all.
### Also, we should probably just create a variable reference in the README.md
### For now, just tagging comments in line with configuration file.

env_type:                     ansible-platform-foundations
output_dir:                   /tmp/output_dir               # Writable working scratch directory
email:                        "{{ env_type }}@opentlc.com"
guid:                         "{{ env_type }}-00"
uuid:                         "{{ guid }}"

cloud_provider:               osp

key_name:                     ocpkey
student_name:                 student                       # Default ssh account
lab_user:                     devops                        # Ansible Service Account

student_password: r3dh4t1!
devops_password_tower: r3dh4t1!

###### VARIABLES YOU SHOULD CONFIGURE FOR YOUR DEPLOYEMNT
###### OR PASS as "-e" args to ansible-playbook command

### Common Host settings

# FTL Settings
install_ftl: false
ftl_use_python3: true

# Login Settings
install_ipa_client: false
install_student_user: true

# This var is used to identify stack (cloudformation, azure resourcegroup, ...)
project_tag: "{{ env_type }}-{{ guid }}"

# This is where the ssh_config file will be created, this file is used to
# define the communication method to all the hosts in the deployment
deploy_local_ssh_config_location: "{{ output_dir }}/"

### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})
use_own_key: true
env_authorized_key: "{{guid}}key"
ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem
set_env_authorized_key: true

# Is this running from Red Hat Ansible Tower
tower_run: false

###### VARIABLES YOU SHOULD ***NOT*** CONFIGURE FOR YOUR DEPLOYEMNT
###### You can, but you usually wouldn't need to.
ansible_user: cloud-user
remote_user: cloud-user

common_packages:
  - python
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - git
  - vim-enhanced
  - at
  - ansible

cf_template_description: "{{ env_type }}-{{ guid }} Ansible Agnostic Deployer "

inventory_groups:
  - tower
  - webservers

common_packages_el8:
  - python3
  - python3-pip
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - git
  - vim-enhanced
  - at
  - gcc
  - ansible

update_packages: true

# Repositories that will be available in the environment when using repo_methods rhn & file.
# rhel_repos:
#   - rhel-8-for-x86_64-baseos-rpms
#   - rhel-8-for-x86_64-appstream-rpms
#   - ansible-2.9-for-rhel-8-x86_64-rpms


install_bastion: false
install_common: true
install_bastion_lite: true

software_to_deploy: tower 

tower_version: 3.7.3-1
tower_hostname: "tower.{{ guid }}.{{ osp_cluster_dns_zone }}"

# Tower Configuration Dictionaries, correspond with configure_tower.yml
tower_user_accounts: 
  - user: devops
    password: "{{ devops_password_tower }}"
    email: devops@example.com
    firstname: Devon
    lastname: Operations
    superuser: yes

tower_projects:
  - name: Webserver SCM
    description: Webserver Deployment Project
    organization: Default
    scm_url: https://github.com/wilson-walrus/ansible-automation-platform-labs.git
    scm_type: git
    state: present
    tower_host: "{{ tower_hostname }}"  
    tower_username: admin
    tower_password: "{{ tower_admin_password }}"

tower_inventories:
  - name: Webserver Inventory
    description: Webserver Inventory
    organization: Default

tower_inventory_source:
  - name: Webserver Static
    description: Sourced from project
    inventory: Webserver Inventory
    source: scm
    source_project: Webserver SCM
    source_path: hosts-ec2
    update_on_launch: yes
    state: present

tower_credentials:
  - name: Webserver Private Key
    username: cloud-user
    description: Private key to connect to Webservers
    organization: Default
    type: ssh
    become_method: sudo
    state: present
    ssh_key_data: "{{ lookup('file', '{{ output_dir}}/{{ guid }}key') }}"

tower_job_templates:
  - name: Webserver Deploy
    description: Deploy Webservers
    inventory: Webserver Inventory
    credential: Webserver Private Key
    project: Webserver SCM
    playbook: main.yml
    become: yes
    ask_extra_vars: no

...
