heat_template_version: rocky

description: >
  Tenant network definition (automatically generated).

parameters:
  # the defaults here work for static IP assignment (IPAM) only
  TenantNetCidr:
    default: "172.16.0.0/24"
    description: Cidr for the tenant network.
    type: string
  TenantNetValueSpecs:
    default: {'provider:physical_network': 'tenant', 'provider:network_type': 'flat'}
    description: Value specs for the tenant network.
    type: json
  TenantNetEnableDHCP:
    default: false
    description: Whether to enable DHCP on the associated subnet (IPv4 only).
    type: boolean
  TenantNetAdminStateUp:
    default: false
    description: The admin state of the network.
    type: boolean
  TenantNetShared:
    default: false
    description: Whether this network is shared across all tenants.
    type: boolean
  TenantNetName:
    default: tenant
    description: The name of the tenant network.
    type: string
  TenantSubnetName:
    default: tenant_subnet
    description: The name of the tenant subnet in Neutron.
    type: string
  TenantAllocationPools:
    default: [{'start': '172.16.0.4', 'end': '172.16.0.250'}]
    description: Ip allocation pool range for the tenant network.
    type: json
  TenantInterfaceDefaultRoute:
    default: ""
    description: default route for the tenant network
    type: string
  TenantNetworkVlanID:
    default: 50
    description: Vlan ID for the tenant network traffic.
    type: number
  TenantRoutes:
    default: []
    description: >
      Routes for the tenant network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Routes are added to the host_routes property on the subnet in neutron
      when the network and subnet is created.
    type: json
  TenantMtu:
    default: 1500
    description: The maximum transmission unit (MTU) size(in bytes) that is
      guaranteed to pass through the data path of the segments in the
      Tenant network.
    type: number
  ManageNetworks:
    default: true
    type: boolean
    description: >
      Manage the network and related resources (subnets and segments) with
      either create, update, or delete operations (depending on the stack
      operation). Does not apply to ports which will always be managed as
      needed. Defaults to true. For multi-stack use cases where the network
      related resources have already been managed by a separate stack, this
      parameter can be set to false.

conditions:
  manage_networks: {get_param: ManageNetworks}

resources:
  TenantNetwork:
    type: OS::Neutron::Net
    condition: manage_networks
    properties:
      admin_state_up: {get_param: TenantNetAdminStateUp}
      name: {get_param: TenantNetName}
      shared: {get_param: TenantNetShared}
      value_specs:
        map_merge:
          - {get_param: TenantNetValueSpecs}
          - {'mtu': {get_param: TenantMtu}}

  TenantSubnet:
    type: OS::Neutron::Subnet
    condition: manage_networks
    properties:
      enable_dhcp: {get_param: TenantNetEnableDHCP}
      cidr: {get_param: TenantNetCidr}
      name: {get_param: TenantSubnetName}
      network: {get_resource: TenantNetwork}
      allocation_pools: {get_param: TenantAllocationPools}
      gateway_ip: {get_param: TenantInterfaceDefaultRoute}
      host_routes: {get_param: TenantRoutes}
      # All networks have an implicit network segment when created, map this subnet to that segment.
      segment: {get_attr: [TenantNetwork, segments, 0, id]}



outputs:
  OS::stack_id:
    description: tenant network
    value: {get_resource: TenantNetwork}
  network_cidrs:
    description: List of Tenant network's subnets in CIDR notation.
    value:
      list_concat:
        if:
          - manage_networks
          - - - {get_attr: [TenantSubnet, cidr]}
            -
          - -
              - "172.16.0.0/24"
            -