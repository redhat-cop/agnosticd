heat_template_version: rocky

parameters:
  ControlPlaneIpList:
    default: []
    type: comma_delimited_list
  StorageIpList:
    default: []
    type: comma_delimited_list
  StorageNetName:
    default: storage
    description: The name of the storage network.
    type: string
  StorageMgmtIpList:
    default: []
    type: comma_delimited_list
  StorageMgmtNetName:
    default: storage_mgmt
    description: The name of the storage_mgmt network.
    type: string
  InternalApiIpList:
    default: []
    type: comma_delimited_list
  InternalApiNetName:
    default: internal_api
    description: The name of the internal_api network.
    type: string
  TenantIpList:
    default: []
    type: comma_delimited_list
  TenantNetName:
    default: tenant
    description: The name of the tenant network.
    type: string
  ExternalIpList:
    default: []
    type: comma_delimited_list
  ExternalNetName:
    default: external
    description: The name of the external network.
    type: string
  ManagementIpList:
    default: []
    type: comma_delimited_list
  ManagementNetName:
    default: management
    description: The name of the management network.
    type: string
  EnabledServices:
    default: []
    type: comma_delimited_list
  ServiceNetMap:
    default: {}
    type: json
  ServiceHostnameList:
    default: []
    type: comma_delimited_list
  NetworkHostnameMap:
    default: []
    type: json
  NovaAdditionalCell:
    default: false
    description: Whether this is an cell additional to the default cell.
    type: boolean
  RoleNetworks:
    default: ctlplane
    type: comma_delimited_list

conditions:
  is_cell: {equals: [{get_param: NovaAdditionalCell}, true]}

resources:
   # This adds the extra "services" on for keystone
   # so that keystone_admin_api_network and
   # keystone_public_api_network point to the correct
   # network on the nodes running the "keystone" service
  EnabledServicesValue:
    type: OS::Heat::Value
    properties:
      type: comma_delimited_list
      value:
        yaql:
          expression: let(root => $) -> $.data.extra_services.items().where($[0] in $root.data.enabled_services).select($[1]).flatten() + $root.data.enabled_services
          data:
            enabled_services: {get_param: EnabledServices}
            extra_services:
              # If anything other than keystone needs this
              # then we should add an extra_networks interface
              # to the service templates role_data but for
              # now we hard-code the keystone special case
              keystone:
                - keystone_admin_api
                - keystone_public_api

  NetIpMapValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_replace:
          - yaql:
              expression: let(root => $) -> dict($.data.net_ip_map.items().where($[0] in $root.data.role_networks))
              data:
                role_networks: {get_param: RoleNetworks}
                net_ip_map:
                  ctlplane: {get_param: ControlPlaneIpList}
                  storage: {get_param: StorageIpList}
                  storage_mgmt: {get_param: StorageMgmtIpList}
                  internal_api: {get_param: InternalApiIpList}
                  tenant: {get_param: TenantIpList}
                  external: {get_param: ExternalIpList}
                  management: {get_param: ManagementIpList}
          - keys:
              ctlplane: ctlplane  # Ensure one key is present, in case no enabled networks
              storage: {get_param: StorageNetName}
              storage_mgmt: {get_param: StorageMgmtNetName}
              internal_api: {get_param: InternalApiNetName}
              tenant: {get_param: TenantNetName}
              external: {get_param: ExternalNetName}
              management: {get_param: ManagementNetName}

outputs:
  net_ip_map:
    description: >
      A Hash containing a mapping of network names to assigned lists
      of IP addresses.
    value: {get_attr: [NetIpMapValue, value]}
  ctlplane_service_ips:
    description: >
      Map of enabled services to a list of their ctlplane IP addresses
    value:
      map_merge:
        repeat:
          template:
            SERVICE_ctlplane_node_ips: $$ groups['SERVICE'] | default ([]) | map('extract', hostvars, 'ctlplane_ip') | list | to_json $$
          for_each:
            SERVICE: {get_attr: [EnabledServicesValue, value]}