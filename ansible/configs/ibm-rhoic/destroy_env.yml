---
- import_playbook: ../../include_vars.yml

- name: Cleanup and Delete all Infrastructure for the RHOIC cluster
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - debug:
        msg: "Cleaning up Networking, Storage, and RHOIC cluster"

- name: Logging into IBM Cloud
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - name: Get token for sandbox-api
      uri:
        url: "{{ sandbox_api_url }}/token"
        method: POST
        body_format: json
        body:
          api_key: "{{ sandbox_account_db_api_key }}"
      register: r_sandbox_account_db_api_key
      until: r_sandbox_account_db_api_key.status != 500
      retries: 10
      delay: 6

    - name: Get details of sandbox account
      uri:
        url: "{{ sandbox_api_url }}/sandbox"
        method: GET
        headers:
          Authorization: Bearer {{ r_sandbox_account_db_api_key['json']['access_token'] }}
        body_format: json
        body:
          # This should move to UUID
          guid: "{{ guid }}"
          cloud_provider: "{{ cloud_provider }}"
      register: r_sandbox_account
      until: r_sandbox_account.status != 500
      retries: 10
      delay: 6

    - name: Set IBM Cloud account_id
      set_fact:
        sandbox_account_id: "{{ r_sandbox_account['json']['account_id']['S'] }}"

    - name: Set IBM Cloud account_name
      set_fact:
        sandbox_account_name: "{{ r_sandbox_account['json']['account_name']['S'] }}"

    - name: Set account master API key
      set_fact:
        sandbox_master_api_key: "{{ r_sandbox_account['json']['master_api_key']['S'] }}"

    ## Authenticating
    - name: Authorize to get bearer access and refresh tokens
      uri:
        url: "{{ ibm_cloud_api_iam_url }}"
        headers:
          Authorization: Basic Yng6Yng=
        method: POST
        body_format: form-urlencoded
        body:
          grant_type: "urn:ibm:params:oauth:grant-type:apikey"
          response_type: "cloud_iam"
          apikey: "{{ sandbox_master_api_key }}"
      register: r_token
      tags: create-token
      until: r_token.status == 200
      retries: 10
      delay: 3

    - name: Set fact for bearer access token
      set_fact:
        ibm_access_token: "{{ r_token.json.access_token }}"
      tags: store-access-token

    - name: Set fact for bearer refresh token
      set_fact:
        ibm_refresh_token: "{{ r_token.json.refresh_token }}"
      tags: store-refresh-token

- name: Delete both IBM Schematics workspaces including resources
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Get a list of all IBM Schematics workspaces
      uri:
        url: "{{ ibm_cloud_schematics_url }}"
        method: GET
        status_code: 200
        headers:
          Authorization: "{{ ibm_access_token }}"
      register: r_ws_list
      tags: retrieve-ws-list
      until: r_ws_list.status == 200
      retries: 10
      delay: 3

    - set_fact:
        vpc_ws_id: "{{ item.id }}"
      with_items: "{{ r_ws_list.json.workspaces }}"
      when: item.name == "rhpds-vpc"

    - set_fact:
        rhoic_ws_id: "{{ item.id }}"
      with_items: "{{ r_ws_list.json.workspaces }}"
      when: item.name == "rhpds-rhoic"

    - name: Delete RHOIC workspace
      uri:
        url: "{{ ibm_cloud_schematics_url }}/{{ rhoic_ws_id }}?destroyResources=true"
        method: DELETE
        status_code: 200
        headers:
          Authorization: "{{ ibm_access_token }}"
          refresh_token: "{{ ibm_refresh_token }}"
      register: r_ws_delete
      tags: delete-ws
      until: r_ws_delete.status == 200
      retries: 10
      delay: 3

    - name: Get a list of workspaces and loop until RHOIC is gone
      uri:
        url: "{{ ibm_cloud_schematics_url }}/{{ rhoic_ws_id }}"
        method: GET
        status_code: 200
        headers:
          Authorization: "{{ ibm_access_token }}"
      register: r_ws_list
      tags: retrieve-ws-list
      until: r_ws_list.status.json | json_query(_rhoic_ws_query) | length == 0
      retries: 30
      delay: 120
      vars:
        _rhoic_ws_query: "[?contains(keys(@), 'name') && name=='rhpds-rhoic']"

    - name: Delete VPC workspace
      uri:
        url: "{{ ibm_cloud_schematics_url }}/{{ vpc_ws_id }}?destroyResources=true"
        method: DELETE
        status_code: 200
        headers:
          Authorization: "{{ ibm_access_token }}"
          refresh_token: "{{ ibm_refresh_token }}"
      register: r_ws_delete
      tags: delete-ws
      until: r_ws_delete.status == 200
      retries: 10
      delay: 3

    - name: Get a list of workspaces and loop until VPC is gone
      uri:
        url: "{{ ibm_cloud_schematics_url }}"
        method: GET
        status_code: 200
        headers:
          Authorization: "{{ ibm_access_token }}"
      register: r_ws_list
      tags: retrieve-ws-list
      until: r_ws_list.status.json | json_query(_vpc_ws_query) | length == 0
      retries: 30
      delay: 120
      vars:
        _vpc_ws_query: "[?contains(keys(@), 'name') && name=='rhpds-vpc']"

    - debug:
        msg: "IBM-RHOIC is all cleaned up"

- name: Disable sandbox account and mark for cleanup
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Remove the sandbox account access
      import_role:
        name: sandbox-ibm
      vars:
        action: "destroy"
        ibm_rhoic_install: true
        ibm_roks_install: true

    - name: Get token for sandbox-api
      uri:
        url: "{{ sandbox_api_url }}/token"
        method: POST
        body_format: json
        body:
          api_key: "{{ sandbox_account_db_api_key }}"
      register: r_sandbox_account_db_api_key
      until: r_sandbox_account_db_api_key.status != 500
      retries: 10
      delay: 6

    - name: Update account for cleanup
      uri:
        url: "{{ sandbox_api_url }}/sandbox"
        method: DELETE
        headers:
          Authorization: Bearer {{ r_sandbox_account_db_api_key['json']['access_token'] }}
        body_format: json
        body:
          account_name: "{{ r_sandbox_account['json']['account_name']['S'] }}"
          cloud_provider: "{{ cloud_provider }}"
          available: false
          needs_cleanup: true
