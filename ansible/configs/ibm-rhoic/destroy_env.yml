---
- import_playbook: ../../include_vars.yml

- name: Cleanup and Delete all Infrastructure for the RHOIC cluster
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - debug:
        msg: "Cleaning up Networking, Storage, and RHOIC cluster"

- name: Logging into IBM Cloud
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - name: Get token for sandbox-api
      uri:
        url: "{{ sandbox_api_url }}/token"
        method: POST
        body_format: json
        body:
          api_key: "{{ sandbox_account_db_api_key }}"
      register: r_sandbox_account_db_api_key

    - name: Get details of sandbox account
      uri:
        url: "{{ sandbox_api_url }}/sandbox"
        method: GET
        headers:
          Authorization: Bearer {{ r_sandbox_account_db_api_key['json']['access_token'] }}
        body_format: json
        body:
          # This should move to UUID
          guid: "{{ guid }}"
          cloud_provider: "{{ cloud_provider }}"
      register: r_sandbox_account

    - name: Update account for cleanup
      uri:
        url: "{{ sandbox_api_url }}/sandbox"
        method: DELETE
        headers:
          Authorization: Bearer {{ r_sandbox_account_db_api_key['json']['access_token'] }}
        body_format: json
        body:
          account_name: "{{ r_sandbox_account['json']['account_name']['S'] }}"
          cloud_provider: "{{ cloud_provider }}"
          available: false
          needs_cleanup: true

    - name: Set IBM Cloud account_id
      set_fact:
        sandbox_account_id: "{{ r_sandbox_account['json']['account_id']['S'] }}"

    - name: Set account master API key
      set_fact:
        sandbox_master_api_key: "{{ r_sandbox_account['json']['master_api_key']['S'] }}"

    - name: Get bearer token
      uri:
        url: "{{ ibm_cloud_api_iam_url }}"
        method: POST
        body_format: form-urlencoded
        body: "grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey&apikey={{ sandbox_master_api_key }}"
      register: r_token
      tags: create-token
    - name: Set fact for bearer token
      set_fact:
        ibm_access_token: "{{ r_token.json.access_token }}"
      tags: store-token

- name: Cleanup and Delete all Infrastructure for the RHOIC cluster
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    ## Processing delete for RHOIC Cluster
    - name: Delete RHOIC cluster if it exists
      uri:
        url: "{{ ibm_cloud_api_container_v1_url }}/{{ guid }}-rhpds?{{ ibm_cloud_api_rhoic_del_uri_parameters }}"
        method: DELETE
        status_code: 204,404,-1,500
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      tags: delete-rhoic
      register: r_rm_rhoic
    - name: Wait 5 minutes for cluster to delete
      pause:
        minutes: 5
      when: r_rm_rhoic.status == 204
    - name: Keep checking every minute until cluster is deleted
      uri:
        url: "{{ ibm_cloud_api_container_v2_url }}/getCluster?cluster={{ guid }}-rhpds"
        method: GET
        status_code: 200,404,500
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_existing_rhoic
      tags: retrieve-rhoic
      until: r_existing_rhoic.json.code is defined and r_existing_rhoic.json.code == "G0004"
      retries: 30
      delay: 60
      when: r_rm_rhoic.status == 204
    ## Processing delete for Subnet
    - name: Get a list of Subnets
      uri:
        url: "{{ ibm_cloud_api_subnet_url }}?{{ ibm_cloud_api_query_params }}"
        method: GET
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_subnets
      tags: list-subnets
    - name: set Subnet Name
      set_fact:
        rhoic_subnet_name: "{{ guid }}-subnet"
    - name: get Subnet ID
      set_fact:
        rhoic_subnet_id: "{{ item.id }}"
      with_items: "{{ r_subnets.json.subnets }}"
      when: item.name == rhoic_subnet_name
    - name: Delete Subnet if it exists
      when: rhoic_subnet_id is defined and rhoic_subnet_id != ""
      uri:
        url: "{{ ibm_cloud_api_subnet_url }}/{{ rhoic_subnet_id }}?{{ ibm_cloud_api_query_params }}"
        method: DELETE
        status_code: 204,409
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_existing_subnet
      until: r_existing_subnet.status == 204
      retries: 60
      delay: 30
      tags: delete-subnet
    - name: Pausing for 10 seconds to allow the Subnet to be removed
      when: rhoic_subnet_id is defined and rhoic_subnet_id != ""
      pause:
        seconds: 10
    ## Processing delete for Public Gateway
    - name: Get a list of Public Gateways
      uri:
        url: "{{ ibm_cloud_api_public_gateway_url }}?{{ ibm_cloud_api_query_params }}"
        method: GET
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_public_gateways
      tags: list-public-gateways
    - name: set Public Gateway Name
      set_fact:
        rhoic_public_gateway_name: "{{ guid }}-public-gateway"
    - name: get Public Gateway ID
      set_fact:
        rhoic_public_gateway_id: "{{ item.id }}"
      with_items: "{{ r_public_gateways.json.public_gateways }}"
      when: item.name == rhoic_public_gateway_name
    - name: Delete Public Gateway if it exists
      when: rhoic_public_gateway_id is defined and rhoic_public_gateway_id != ""
      uri:
        url: "{{ ibm_cloud_api_public_gateway_url }}/{{ rhoic_public_gateway_id }}?{{ ibm_cloud_api_query_params }}"
        method: DELETE
        status_code: 204
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      tags: delete-public-gateway
    - name: Pausing for 10 seconds to allow the Public Gateway to be removed
      when: rhoic_public_gateway_id is defined and rhoic_public_gateway_id != ""
      pause:
        seconds: 10
    ## Processing delete for VPC
    - name: Get a list of VPCs
      uri:
        url: "{{ ibm_cloud_api_vpc_url }}?{{ ibm_cloud_api_query_params }}"
        method: GET
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_vpcs
      tags: list-vpcs
    - name: set VPC Name
      set_fact:
        rhoic_vpc_name: "{{ guid }}-vpc"
    - name: get VPC ID
      set_fact:
        rhoic_vpc_id: "{{ item.id }}"
      with_items: "{{ r_vpcs.json.vpcs }}"
      when: item.name == rhoic_vpc_name
    - name: Delete VPC if it exists
      when: rhoic_vpc_id is defined and rhoic_vpc_id != ""
      uri:
        url: "{{ ibm_cloud_api_vpc_url }}/{{ rhoic_vpc_id }}?{{ ibm_cloud_api_query_params }}"
        method: DELETE
        status_code: 204
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      tags: delete-vpc
    ## Processing delete for COS
    - name: Get a list of Resource Instances
      uri:
        url: "{{ ibm_cloud_api_resource_instances_url }}?{{ ibm_cloud_api_query_params }}?name={{ guid }}-cos"
        method: GET
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_ris
      tags: list-ris
    - name: set Resource Instance name for the Cloud Storage Object
      set_fact:
        rhoic_cos_name: "{{ guid }}-cos"
    - name: get Resource Instance ID for the Cloud Storage Object
      set_fact:
        rhoic_cos_id: "{{ item.guid }}"
      with_items: "{{ r_ris.json.resources }}"
      when: item.name == rhoic_cos_name
    - name: Delete Resource Instances if it exists
      when: rhoic_cos_id is defined and rhoic_cos_id != ""
      uri:
        url: "{{ ibm_cloud_api_resource_instances_url }}/{{ rhoic_cos_id }}"
        method: DELETE
        status_code: 204
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      tags: delete-cos
    - name: Pausing for 10 seconds to allow the Object Storage to be removed
      when: rhoic_cos_id is defined and rhoic_cos_id != ""
      pause:
        seconds: 10
    - debug:
        msg: "IBM-RHOIC is all cleaned up"

- name: Disable sandbox account and mark for cleanup
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - name: Remove the sandbox account access
      import_role:
        name: sandbox-ibm
      vars:
        action: "destroy"
        ibm_rhoic_install: true
        ibm_roks_install: true
