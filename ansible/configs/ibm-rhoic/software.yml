---
- name: Step 000 Software
  hosts: localhost
  connection: local
  become: false
  tags:
    - step001
    - software
  tasks:
    - debug:
        msg: "Software tasks Started"

- name: Software deployment
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - actual_sausage_making
  tasks:
    ## Authenticating
    - name: Authorize to get bearer access and refresh tokens
      uri:
        url: "{{ ibm_cloud_api_iam_url }}"
        headers:
          Authorization: Basic Yng6Yng=
        method: POST
        body_format: form-urlencoded
        body:
          grant_type: "urn:ibm:params:oauth:grant-type:apikey"
          response_type: "cloud_iam"
          apikey: "{{ sandbox_master_api_key }}"
      register: r_token
      tags: create-token
      until: r_token.status == 200
      retries: 10
      delay: 3

    - name: Set fact for bearer access token
      set_fact:
        ibm_access_token: "{{ r_token.json.access_token }}"
      tags: store-access-token

    - name: Set fact for bearer refresh token
      set_fact:
        ibm_refresh_token: "{{ r_token.json.refresh_token }}"
      tags: store-refresh-token

    ## Getting Exact OpenShift version to deploy
    - name: Get full OpenShift version
      uri:
        url: "{{ ibm_cloud_api_openshift_version_url }}"
        method: GET
        status_code: 200
      register: r_openshift_version_list
      tags: get-versions
      until: r_openshift_version_list.status == 200
      retries: 10
      delay: 6

    - name: Displaying the JSON output of the API call if verbosity 2+
      debug:
        var: r_openshift_version_list.json.openshift
        verbosity: 2
      tags: get-versions

    - name: Set fact for RHOIC patch version
      set_fact:
        rhoic_openshift_version_patch: "{{  r_openshift_version_list.json.openshift | json_query(jmesquery) }}"
      vars:
        jmesquery: "[?major==`{{ rhoic_openshift_version_major }}` && minor==`{{ rhoic_openshift_version_minor }}`].patch"
      tags: get-versions

    - name: Set fact for RHOIC version
      set_fact:
        rhoic_openshift_version: "{{ rhoic_openshift_version_major }}.{{ rhoic_openshift_version_minor }}.{{ rhoic_openshift_version_patch[0] }}_openshift"
      tags: get-versions

    - debug:
        var: rhoic_openshift_version
      tags: get-versions

- name: Building the Cloud Object Storage and RHOIC Cluster
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    ## Authenticated from last section in this playbook
    # Create Workspace to support RHOIC
    - name: Create a new workspace
      uri:
        url: "{{ ibm_cloud_schematics_url }}"
        method: POST
        status_code: 201
        headers:
          Authorization: "Bearer {{ ibm_access_token }}"
        body_format: json
        body:
          name: "rhpds-rhoic"
          type:
            - terraform_v0.14
          location: "us-east"
          description: "Creating Cloud Object Storage and the RHOIC cluster"
          tags: []
          template_repo:
            url: "{{ terraform_rhoic }}"
          template_data:
            - folder: "."
              type: terraform_v0.14
              variablestore:
                - name: ibmcloud_api_key
                  value: "{{ sandbox_master_api_key }}"
                  secure: true
                - name: ibmcloud_region
                  value: "{{ rhoic_region }}"
                - name: cluster_version
                  value: "{{ rhoic_openshift_version }}"
                - name: cluster_flavor
                  value: "{{ rhoic_compute_type }}"
      register: r_ws_rhoic_create
      tags: create-ws-rhoic
      until: r_ws_rhoic_create.status == 201
      retries: 10
      delay: 3

    - name: Get a list of workspaces
      uri:
        url: "{{ ibm_cloud_schematics_url }}"
        method: GET
        status_code: 200
        headers:
          Authorization: "{{ ibm_access_token }}"
      register: r_ws_list
      tags: retrieve-ws-list
      until: r_ws_list.status == 200
      retries: 10
      delay: 3

    - name: Setting the rhoic_ws_id variable
      set_fact:
        rhoic_ws_id: "{{ item.id }}"
      with_items: "{{ r_ws_list.json.workspaces }}"
      when: item.name == "rhpds-rhoic"

    - name: Pausing for 30 seconds for lock to be released
      pause:
        seconds: 30

    - name: Making the plan that IBM Schematics will run
      uri:
        url: "{{ ibm_cloud_schematics_url }}/{{ rhoic_ws_id }}/plan"
        method: POST
        status_code: 202
        headers:
          Authorization: "Bearer {{ ibm_access_token }}"
          refresh_token: "{{ ibm_refresh_token }}"
      register: r_ws_rhoic_plan
      tags: plan-ws-rhoic
      until: r_ws_rhoic_plan.status == 202
      retries: 10
      delay: 3

    - name: Waiting for the plan to finish creating
      uri:
        url: "{{ ibm_cloud_schematics_url }}/{{ rhoic_ws_id }}"
        method: GET
        status_code: 200
        headers:
          Authorization: "Bearer {{ ibm_access_token }}"
      register: r_ws_detail
      tags: retrieve-ws
      until: r_ws_detail.json.status is defined and r_ws_detail.json.status != "INPROGRESS"
      retries: 30
      delay: 30

    - name: Pausing for 30 seconds for lock to be released
      pause:
        seconds: 30

    - name: Applying the plan
      uri:
        url: "{{ ibm_cloud_schematics_url }}/{{ rhoic_ws_id }}/apply"
        method: PUT
        status_code: 202
        headers:
          Authorization: "Bearer {{ ibm_access_token }}"
          refresh_token: "{{ ibm_refresh_token }}"
      register: r_ws_rhoic_apply
      tags: apply-ws-rhoic
      until: r_ws_rhoic_apply.status == 202
      retries: 10
      delay: 3

    - name: Pausing for 55 minutes to allow the RHOIC cluster to build
      pause:
        minutes: 55

    ## Re-Authenticating because token only good for 60 minutes
    ## and we don't want it to expire
    - name: Authorize to get bearer access and refresh tokens
      uri:
        url: "{{ ibm_cloud_api_iam_url }}"
        headers:
          Authorization: Basic Yng6Yng=
        method: POST
        body_format: form-urlencoded
        body:
          grant_type: "urn:ibm:params:oauth:grant-type:apikey"
          response_type: "cloud_iam"
          apikey: "{{ sandbox_master_api_key }}"
      register: r_token
      tags: create-token
      until: r_token.status == 200
      retries: 10
      delay: 3

    - name: Set fact for bearer access token
      set_fact:
        ibm_access_token: "{{ r_token.json.access_token }}"
      tags: store-access-token

    - name: Set fact for bearer refresh token
      set_fact:
        ibm_refresh_token: "{{ r_token.json.refresh_token }}"
      tags: store-refresh-token

    - name: Waiting for the plan to be active
      uri:
        url: "{{ ibm_cloud_schematics_url }}/{{ rhoic_ws_id }}"
        method: GET
        status_code: 200
        headers:
          Authorization: "Bearer {{ ibm_access_token }}"
      register: r_ws_detail
      tags: retrieve-ws
      until: r_ws_detail.json.status is defined and r_ws_detail.json.status == "ACTIVE"
      retries: 60
      delay: 60

    ## Re-Authenticating because token only good for 60 minutes
    ## and we don't want it to expire
    - name: Authorize to get bearer access and refresh tokens
      uri:
        url: "{{ ibm_cloud_api_iam_url }}"
        headers:
          Authorization: Basic Yng6Yng=
        method: POST
        body_format: form-urlencoded
        body:
          grant_type: "urn:ibm:params:oauth:grant-type:apikey"
          response_type: "cloud_iam"
          apikey: "{{ sandbox_master_api_key }}"
      register: r_token
      tags: create-token
      until: r_token.status == 200
      retries: 10
      delay: 3

    - name: Set fact for bearer access token
      set_fact:
        ibm_access_token: "{{ r_token.json.access_token }}"
      tags: store-access-token

    - name: Set fact for bearer refresh token
      set_fact:
        ibm_refresh_token: "{{ r_token.json.refresh_token }}"
      tags: store-refresh-token

    - name: Gathering RHOIC Cluster information
      uri:
        url: "{{ ibm_cloud_api_container_v2_url }}/getCluster?cluster={{ rhoic_cluster_name }}"
        method: GET
        status_code: 200
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_existing_rhoic
      tags: retrieve-rhoic
      until: r_existing_rhoic.json.state is defined and r_existing_rhoic.json.state == "normal"
      retries: 60
      delay: 60

    - name: Displaying RHOIC cluster details if verbosity 2+
      debug:
        var: r_existing_rhoic
        verbosity: 2

    - name: Setting the email variable if it is not defined so next step won't fail
      set_fact:
        email: "no-valid-email-set"
      when: email is not defined

    ## Sending details of the cluster to the client
    - name: Passing along the cluster info
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
        - "The information below can be used to access your Red Hat OpenShift on IBM Cloud Sandbox environment."
        - "IBM Cloud User: {{ email }}"
        - "OpenShift Admin Console: {{ r_existing_rhoic.json.masterURL }}"
        - "IBM Cloud Console: https://cloud.ibm.com/"
        - "RHOIC RHPDS Lab Guide (README IMPORTANT!): https://red.ht/ROKSRHPDS"

- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Software checks completed successfully"
