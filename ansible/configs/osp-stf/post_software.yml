# The reason we are doing it after software is because OSP installation disables password authentication
- name: Configuring osp host to be able to access by the student user
  hosts: osps
  become: true
  roles:
  - {role: "bastion-student-user"}
  tags:
  - osp-student-user-access

- name: Providing the OSP standlone with flavors, test image, external network and tenant network
  hosts: osps
  gather_facts: false
  tags:
    - openstack-demo-environment
  tasks:
    - name: "Create flavors"
      os_nova_flavor: 
        cloud: standalone
        name: "{{ item.name }}"
        ram: "{{ item.ram }}"
        vcpus: "{{ item.vcpus }}"
        disk: "{{ item.disk }}"
        ephemeral: "{{ item.ephemeral }}"
        flavorid: "{{ item.flavorid }}"
      loop:
        - name: 'm1.small'
          ram: '512'
          vcpus: '1'
          disk: '0'
          ephemeral: '1'
          flavorid: '1'
        - name: 'm1.medium'
          ram: '1024'
          vcpus: '1'
          disk: '0'
          ephemeral: '0'
          flavorid: '2'
        
    - name: Get cirros images
      get_url: 
        url: "http://download.cirros-cloud.net/0.5.1/cirros-0.5.1-x86_64-disk.img"
        dest: "/home/{{ ansible_user }}/"

    - name: Upload images
      os_image:
        cloud: standalone
        name: 'cirros'
        container_format: bare
        disk_format: qcow2
        is_public: yes
        filename: '/home/{{ ansible_user }}/cirros-0.5.1-x86_64-disk.img'

    - name: create tenant network
      os_network:
        cloud: standalone
        name: test-network
        external: false
        wait: yes

    - name: create tenant subnet
      os_subnet:
        cloud: standalone
        network_name: test-network
        name: test-subnet
        cidr: 192.168.1.0/24
        dns_nameservers:
          - 8.8.8.8
        wait: yes

    - name: create provider networks and subnetworks
      when: 'create_demo_provider_network | bool'
      block:
        - name: create provider nets
          os_network:
            cloud: standalone
            name: external
            external: True
            shared: True
            provider_network_type: flat
            provider_physical_network: datacentre

    # We are using the end range of our management network as a floating IP/provider FLAT network for instances.

        - name: create provider subnets
          os_subnet:
            cloud: standalone
            network_name: external
            name: subnet-external
            ip_version: 4
            cidr: "{{ networks[0].subnet_cidr }}"
            gateway_ip: "{{ networks[0].gateway_ip }}"
            allocation_pool_start: "{{ networks[0].allocation_end }}"
            allocation_pool_end: "{{ networks[0].subnet_cidr | ansible.netcommon.ipaddr('-2') | ansible.netcommon.ipaddr('address') }}"
            enable_dhcp: yes
            dns_nameservers:
              - 8.8.8.8

        - name: create a router
          os_router:
            cloud: standalone
            name: test-router
            network: external
            interfaces:
              - test-subnet

    - name: create security group
      os_security_group:
        cloud: standalone
        name: test-security-group
        description: Security group for our test instances

    - name: create security group rule for ping
      os_security_group_rule:
        cloud: standalone
        security_group: test-security-group
        protocol: icmp
        remote_ip_prefix: 0.0.0.0/0

    - name: create security group rule for SSH
      os_security_group_rule:
        cloud: standalone
        security_group: test-security-group
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: 0.0.0.0/0

    - name: Fetch clouds.yamls information
      shell: 'cat /home/{{ ansible_user }}/.config/openstack/clouds.yaml'
      register: clouds_yamls_file

    - name: Register crc host with ip
      add_host:
        name: "osp_with_variables"
        credentials: " {{ clouds_yamls_file.stdout }}"
    - debug:
        var: hostvars['osp_with_variables']['credentials']

- name: Output lab console
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    crc_find_ip_query: ansible_facts.openstack_servers[?name=='stfcrc'].public_v4 | [0]
    crc_public_ip: "{{ r_osp_facts | json_query(crc_find_ip_query) }}"
  tasks:
    - name: Print labconsole information as user.info
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
        - "You can access your bastion via SSH:"
        - "ssh {{ student_name }}@bastionstf.{{ guid }}.{{ osp_cluster_dns_zone }}"
        - ""
        - "Make sure you use the username '{{ student_name }}' and the password '{{ hostvars['bastionstf']['student_password'] }}' when prompted."
        - ""
        - "You can also access (with the same credentials) to your OSP standalone via SSH:"
        - "ssh {{ student_name }}@ospallinone.{{ guid }}.{{ osp_cluster_dns_zone }}"
        - ""
        - "You can also access (with the same credentials) to your Code Ready Containers + Service Telemetry Framework workload via SSH:"
        - "ssh {{ student_name }}@stfcrc.{{ guid }}.{{ osp_cluster_dns_zone }}"
        - ""
        - "Your base domain is '{{ student_dns_zone | default(osp_cluster_dns_zone) }}'"
        - ""
        - ""
        - "OSP Console access: http://ospallinone.{{ guid }}.{{ osp_cluster_dns_zone }}"
        - ""
        - "Credentials : "
        - "{{ hostvars['osp_with_variables']['credentials'] }}"
        - ""
        - "To access to the CRC OCP Console add this line to your /etc/hosts: "
        - "{{ crc_public_ip }} console-openshift-console.apps-crc.testing api.crc.testing oauth-openshift.apps-crc.testing console-openshift-console.apps-crc.testing default-route-openshift-image-registry.apps-crc.testing grafana-route-service-telemetry.apps-crc.testing"
        - "Or access through the bastion using: "
        - ""
        - "sshuttle -H -r {{ student_name }}@bastionstf.{{ guid }}.{{ osp_cluster_dns_zone }} {{ networks[0].subnet_cidr }}"
        - ""
        - "OCP Console acces: https://console-openshift-console.apps-crc.testing"
        - ""
        - "Credentials :"
        - "{{ hostvars['crc_with_stf_installed']['crc_console_credentials_stdout'] }}"
        - ""
        - "Grafana access: https://grafana-route-service-telemetry.apps-crc.testing/login"
        - ""
        - "Credentials :"
        - "user: root / password: secret "

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
