---
# -------------------------------------------------
# AWS Network settings
# -------------------------------------------------
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{ subdomain_base_short }}{{ subdomain_base_suffix }}"
aws_dns_zone_private: "example.com."
aws_dns_zone_private_chomped: "example.com"

# -------------------------------------------------
# AWS EC2 Environment Sizing
# -------------------------------------------------
default_instance_image: "RHEL87GOLD-latest"
__windows_instance_image: WIN2019
__windows_instance_image_id: ami-0bf9c6c2e7ac638a4
default_rootfs_size: 50
#[ Instance type ]
default_instance_type: "t3a.medium"
__windows_instance_type: m5.2xlarge
# -------------------------------------------------
# AWS EC2 Security Groups
# -------------------------------------------------
security_groups:
- name: BastionSG
  rules:
  - name: BasSSHPublic
    description: "SSH public"
    from_port: 22
    to_port: 22
    protocol: tcp
    cidr: "0.0.0.0/0"
    rule_type: Ingress

- name: WebSG
  rules:
  - name: HTTPPorts
    description: "HTTP Public"
    from_port: 80
    to_port: 80
    protocol: tcp
    cidr: "0.0.0.0/0"
    rule_type: Ingress
  - name: HTTPSPorts
    description: "HTTP Public"
    from_port: 443
    to_port: 443
    protocol: tcp
    cidr: "0.0.0.0/0"
    rule_type: Ingress

- name: HostSG
  rules:
  - name: FromHostSG
    description: "Allow everything from HostSG nodes"
    from_port: 0
    to_port: 65535
    protocol: -1
    from_group: HostSG
    rule_type: Ingress

- name: WinSG
  rules:
  - name: WinSGTCP
    description: "All TCP"
    from_port: 1
    to_port: 65535
    protocol: tcp
    cidr: "0.0.0.0/0"
    rule_type: Ingress
  - name: WinSGUdp
    description: "All UDP"
    from_port: 1
    to_port: 65535
    protocol: udp
    cidr: "0.0.0.0/0"
    rule_type: Ingress

# -------------------------------------------------
# AWS EC2 Instances
# -------------------------------------------------
instances:
  - name: "{{ bastion_instance_name | default('ansible-1') }}"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image: "{{ bastion_instance_image | default(default_instance_image) }}"
    flavor:
      ec2: "{{bastion_instance_type | default(default_instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ default_rootfs_size }}"
    security_groups:
      - BastionSG
      - DefaultSG
      - HostSG
      - WebSG
  
  - name: "gitlab"
    count: 1
    unique: true
    public_dns: true
    image: "{{ gitea_instance_image | default(default_instance_image) }}"
    flavor:
      ec2: "{{ gitea_instance_type | default(default_instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "gitlab"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ default_rootfs_size }}"
    security_groups:
      - DefaultSG
      - HostSG
      - WebSG

  - name: win
    count: "{{ windows_server_instance_count | default(1) }}"
    public_dns: true
    image:
      name: "Windows_Server-2016-English-Full-Base*"
    flavor:
      ec2: "{{ windows_server_instance_type | default(__windows_instance_type) }}"
    tags:
    - key: "AnsibleGroup"
      value: "windows"
    - key: "ostype"
      value: "windows"
    security_groups:
    - DefaultSG
    - WinSG
    - HostSG
    UserData: |
        UserData:
                "Fn::Base64":
                  "Fn::Join":
                    - ""
                    - - "<powershell>\n"
                      - "$admin = [adsi]('WinNT://./administrator, user')\n"
                      - "$admin.PSBase.Invoke('SetPassword', '{{windows_password}}')\n"
                      - "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n"
                      - "$scriptPath=((New-Object System.Net.Webclient).DownloadString('https://gpte-public.s3.amazonaws.com/CI+Assets/Ansible+Windows+Workshop/ConfigureRemotingForAnsible.ps1'))\n"
                      - "Invoke-Command -ScriptBlock ([scriptblock]::Create($scriptPath)) -ArgumentList '-skipNetworkProfileCheck'\n"
                      - "Enable-WSManCredSSP -Role 'Server' -Force"
                      - "</powershell>"
# -------------------------------------------------
# Ansible hosts_template.j2 inventory groups
# -------------------------------------------------
inventory_groups:
  - nodes
  - gitlab
  - windows
