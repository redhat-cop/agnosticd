---
- name: Step 004 software
  hosts: localhost
  gather_facts: false
  become: false
  tags:
    - step004_01
    - software
  tasks:
    - debug:
        msg: "Software tasks Started"


- name: Config gitea server
  hosts: gitea
  become: true
  tasks:
    - name: Generate letsecrypt cert
      include_role:
        name: aap_controller_cert_issue

    - name: set permissions on cert for gitea
      shell: chmod -R 0755 /etc/letsencrypt/{live,archive}

    - name: Include role from ansible.workshops collections
      include_role:
        name: ansible.workshops.vendor_do1jlr_gitea
      vars:
        gitea_fqdn: "{{ groups['gitea'][0].split('.')[0] }}.{{ subdomain_base }}"
        gitea_root_url: 'https://{{ gitea_fqdn }}'
        gitea_http_listen: '0.0.0.0'
        gitea_http_port: '443'
        gitea_protocol: 'https'
        gitea_start_ssh: false
        gitea_systemd_cap_net_bind_service: true
        gitea_group: 'root'
        gitea_db_password: "{{ common_password }}"
        gitea_server_extra_config: |
          CERT_FILE = /etc/letsencrypt/live/{{ gitea_fqdn }}/fullchain.pem
          KEY_FILE = /etc/letsencrypt/live/{{ gitea_fqdn }}/privkey.pem
          LANDING_PAGE = login
        gitea_repository_extra_config: |
          ENABLE_PUSH_CREATE_USER = true
          DEFAULT_BRANCH = main

    - name: Make sure gitea is correctly running and connecting
      block:
        - name: Waits for port 443 on gitea to listen
          ansible.builtin.wait_for:
            host: "{{ groups['gitea'][0].split('.')[0] }}.{{ subdomain_base }}"
            port: 443
            timeout: 30

        - name: use gitea cli to create user
          ansible.builtin.shell: >
            /usr/local/bin/gitea -c /etc/gitea/gitea.ini admin user create
            --username "{{ student_name }}"
            --password "{{ common_password }}"
            --email {{ student_name }}@example.com
            --must-change-password=false
          become_user: gitea
          register: gitearesult
          failed_when:
            - '"successfully created" not in gitearesult.stdout'
            - '"user already exists" not in gitearesult.stdout'

- name: Install softwares on bastion
  hosts: bastions
  become: true
  tags:
    - step004_02
    - software
  pre_tasks:
    - name: Add control host in automationcontroller group
      add_host:
        name: "{{ groups['bastions'][0] }}"
        groups: automationcontroller

  tasks:
    - when: install_automationcontroller | bool
      include_role:
        name: deploy_automationcontroller

    - when: configure_automationcontroller | bool
      include_role:
        name: automation_platform_loader

    - when: enable_letsencyrpt_cert | bool
      include_role:
        name: aap_controller_cert_issue

    - when: install_vscode_server | bool
      include_role:
        name: vscode-server

  post_tasks:
    - name: remove ansible_automation_controller installer file
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/automationcontroller_installer"
        - "/tmp/automationcontroller.tar.gz"
        - "/tmp/code-server.rpm"

    - name: vscode config block
      when: install_vscode_server | bool
      block:
        - name: Insert vscode proxy conf in nginx
          blockinfile:
            path: /etc/nginx/conf.d/automation-controller.nginx.conf
            marker: "    # ANSIBLE MANAGED BLOCK"
            insertbefore: '.*location \/ \{.*'
            block: "{{ lookup('file', './files/vscode_nginx.conf') }}"

        - name: Restart nginx
          service:
            name: nginx
            state: restarted


- name: configure bastion for workshop
  hosts: bastions
  become: true
  tags:
    - step004_02.1
    - software
  tasks:
    - name: Configure git client
      include_role:
        name: ansible.workshops.gitlab_client
      vars:
        username: "{{ student_name }}"
        student: "{{ student_name }}"
        admin_password: "{{ common_password }}"
        ec2_name_prefix: "{{ guid }}"
        workshop_dns_zone: "{{ subdomain_base_suffix }}"

    - name: Enable offline automation controller repo
      command: >-
        yum config-manager --enable ansible-automation-platform

    - name: Install ansible core & navigator
      yum:
        name:
          - ansible-core
          - ansible-navigator
        state: present

    - name: copy ansible-navigator.yml 
      copy:
        src: ./files/ansible-navigator.yml
        dest: "/home/{{ student_name }}/.ansible-navigator.yml"
        owner: "{{ student_name }}"
        group: users


- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step004_03
    - software
  tasks:
    - debug:
        msg: "Software checks completed successfully"
