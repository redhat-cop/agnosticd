---
# -------------------------------------------------
# Infra variables
# -------------------------------------------------
env_type: ansible-windows-workshop
output_dir: /tmp/workdir# Writable working scratch directory
email: "{{ env_type }}@opentlc.com"
guid: "{{ env_type }}"
uuid: "{{ guid }}"
cloud_provider: ec2
#[ Login Settings ]
install_ipa_client: false
#[ Run a full yum update ]
update_packages: false
#[ This var is used to identify stack (cloudformation, azure resourcegroup, ...) ]
project_tag: "{{ env_type }}-{{ guid }}"
#[ Variables you should ***NOT*** Configure for you deployment ]
#[ You can, but you usually wouldn't need to. ]
admin_user: opentlc-mgr
ansible_user: ec2-user
remote_user: ec2-user
#[ Is this running from Red Hat Ansible Tower ]
tower_run: false
software_to_deploy: none

# -------------------------------------------------
# FTL Settings
# -------------------------------------------------
install_ftl: false
ftl_use_python3: true

# -------------------------------------------------
# Role: set_env_authorized_key
# -------------------------------------------------
set_env_authorized_key: true
key_name: opentlc_admin_backdoor.pem
deploy_local_ssh_config_location: "{{output_dir}}/"
env_authorized_key: "{{guid}}key"
ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem

# -------------------------------------------------
# Role: bastion-student-user
# -------------------------------------------------
# install_student_user: true


# -------------------------------------------------
# Role: control-user
# -------------------------------------------------
install_control_user: true
#[ Ansible Service Account ]
student_name: student1
student_password: "{{ common_password }}"
control_user_name: "{{ student_name }}"
control_user_password: "{{ common_password }}"
control_user_private_group: "{{ omit }}"
control_user_ssh_config: ./files/ssh_config.j2

# -------------------------------------------------
# Role: bastion-lite
# -------------------------------------------------
install_bastion_lite: true

# -------------------------------------------------
# Role: set-repositories
# -------------------------------------------------
repo_method: satellite
use_content_view: true

# -------------------------------------------------
# Role: common
# -------------------------------------------------
install_common: true
common_packages_el8:
  - python3
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - nano
  - git
  - vim-enhanced
  - httpd-tools
  - python3-pip
  - tree
  
# -------------------------------------------------
# Ansible Workshop Variables
# -------------------------------------------------
workshop_type: windows
workshop_version: 1.0.18
workshop_ee_image: quay.io/acme_corp/windows-ee
workshop_ee_image_version: latest
# ansible_navigator_ee_images: quay.io/acme_corp/windows-ee:latest
# -------------------------------------------------
# Role: ansible.workshops.vendor_do1jlr_gitea
# -------------------------------------------------
gitea_fqdn: "{{ groups['gitlab'][0].split('.')[0] }}.{{ subdomain_base }}"
gitea_root_url: 'https://{{ gitea_fqdn }}'
gitea_http_listen: '0.0.0.0'
gitea_http_port: '443'
gitea_protocol: 'https'
gitea_start_ssh: false
gitea_systemd_cap_net_bind_service: true
gitea_group: 'root'
gitea_db_password: "{{ common_password }}"
gitea_server_extra_config: |
  CERT_FILE = /etc/letsencrypt/live/{{ gitea_fqdn }}/fullchain.pem
  KEY_FILE = /etc/letsencrypt/live/{{ gitea_fqdn }}/privkey.pem
  LANDING_PAGE = login
gitea_repository_extra_config: |
  ENABLE_PUSH_CREATE_USER = true
  DEFAULT_BRANCH = main

gitea_certbot_dependencies:
  - python3-pip
  - python3-devel
  - certbot

# -------------------------------------------------
# Role: ansible.workshops.gitlab_client
# -------------------------------------------------
username: "{{ student_name }}"
student: "{{ student_name }}"
admin_password: "{{ common_password }}"
ec2_name_prefix: "{{ guid }}"
workshop_dns_zone: "{{ sandbox_zone }}"

# -------------------------------------------------
# Role: vscode-server
# -------------------------------------------------
install_vscode_server: true
vscode_server_install_nginx: false
vscode_user_name: "{{ student_name }}"
vscode_user_password: "{{ common_password }}"
vscode_server_default_extensions: []
vscode_server_extension_urls:
  - https://github.com/ansible/workshops/raw/devel/files/bierner.markdown-preview-github-styles-0.1.6.vsix
  - https://github.com/ansible/workshops/raw/devel/files/hnw.vscode-auto-open-markdown-preview-0.0.4.vsix
  - https://github.com/ansible/workshops/raw/devel/files/redhat.ansible-0.4.5.vsix

# -------------------------------------------------
# Role: deploy_automationcontroller
# -------------------------------------------------
install_automationcontroller: true
deploy_automationcontroller_admin_password: "{{ common_password }}"
# deploy_automationcontroller_installer_url: <CHANGEME>
# deploy_automationcontroller_manifest_url: <CHANGEME>
# registry_username: <CHANGEME>
# registry_password: <CHANGEME>

# -------------------------------------------------
# Role: aap_controller_cert_issue
# -------------------------------------------------
enable_letsencyrpt_cert: true
controller_admin_password: "{{ common_password }}"

# -------------------------------------------------
# Role: automation_platform_loader
# -------------------------------------------------
configure_automationcontroller: true

aap_auth:
  controller_host: "{{ groups['bastions'][0].split('.')[0] }}.{{ subdomain_base }}"
  controller_username: admin
  controller_password: "{{ common_password }}"
  controller_verify_ssl: false

controller_configuration_dispatcher_roles:

  - role: credentials
    var: controller_credentials
    tags: credentials
  - role: inventories
    var: controller_inventories
    tags: inventories
  - role: hosts
    var: controller_hosts
    tags: hosts
  - role: groups
    var: controller_groups
    tags: groups
  - role: execution_environments
    var: controller_execution_environments
    tags: execution_environments
  - role: settings
    var: controller_settings
    tags: settings
  # - role: users
  #   var: controller_user_accounts
  #   tags: users

controller_credentials:
  - name: "Workshop Credential"
    organization: Default
    credential_type: "Machine"
    inputs:
      username: "ec2-user"
      ssh_key_data: "{{ lookup('file', hostvars.localhost.env_authorized_key_path) }}"
    state: present
  - name: "registry.redhat.io credential"
    organization: Default
    credential_type: "Container Registry"
    inputs:
      host: "registry.redhat.io"
      username: "{{ registry_username }}"
      password: "{{ registry_password }}"
      verify_ssl: true
    state: present

controller_inventories:
  - name: "Workshop Inventory"
    organization: Default
    state: present

controller_hosts:
  - name: "{{ student_name }}-{{ groups['windows'][0].split('.')[0] }}"
    inventory: "Workshop Inventory"
    state: present
    variables:
      ansible_host: "{{ groups['windows'][0].split('.')[0] }}.{{ guid }}.{{ sandbox_zone }}"
      ansible_password: "{{ windows_password }}"
      ansible_user: "Administrator"
  - name: "{{ student_name }}-{{ groups['bastions'][0].split('.')[0] }}"
    inventory: "Workshop Inventory"
    state: present
    variables:
      ansible_host: "{{ groups['bastions'][0] }}"

controller_groups:
  - name: attendance
    inventory: "Workshop Inventory"
    state: present
  - name: control_nodes
    inventory: "Workshop Inventory"
    state: present
    variables:
      ansible_port: 22
      ansible_ssh_private_key_file: "/runner/project/provisioner/5sj2f/5sj2f-private.pem"
      ansible_ssh_user: "ec2-user"
    hosts:
      - "{{ student_name }}-{{ groups['bastions'][0].split('.')[0] }}"
  - name: "{{ student_name }}"
    inventory: "Workshop Inventory"
    state: present
    hosts:
      - "{{ student_name }}-{{ groups['bastions'][0].split('.')[0] }}"
      - "{{ student_name }}-{{ groups['windows'][0].split('.')[0] }}"
  - name: windows
    inventory: "Workshop Inventory"
    state: present
    variables:
      ansible_connection: "winrm"
      ansible_port: 5986
      ansible_winrm_server_cert_validation: "ignore"
      ansible_winrm_transport: credssp
    hosts:
      - "{{ student_name }}-{{ groups['windows'][0].split('.')[0] }}"

controller_execution_environments:
  - name: "windows workshop execution environment"
    image: "{{ workshop_ee_image }}:{{ workshop_ee_image_version }}"
    pull: missing
    state: present

controller_settings:
  - name: AD_HOC_COMMANDS
    value:
      - 'command'
      - 'shell'
      - 'ping'
      - 'setup'
      - 'win_ping'
      - 'win_service'
      - 'win_updates'
      - 'win_group'
      - 'win_user'
      - 'win_shell'
      - 'win_feature'
      - 'win_reboot'
      - 'win_chocolatey'

# controller_user_accounts:
#   - user: "{{ student_name }}"
#     password: "{{ common_password }}"
#     is_superuser: true
#     state: present

# controller_configuration_users_secure_logging: false