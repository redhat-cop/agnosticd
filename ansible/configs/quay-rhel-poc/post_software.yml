---
- name: Step 005 Post Software
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
    - debug:
        msg: "Step 005 Post Software"

- name: Deploy user setup
  hosts: bastions
  become: yes
  gather_facts: false
  tags:
    - step005
  tasks:
    - name: Generate cloud_user_password if not defined
      set_fact:
        cloud_user_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"
      ignore_errors: true
      when: cloud_user_password is not defined

    - name: Set password for cloud-user
      when: cloud_provider == 'osp'
      ansible.builtin.user:
        name: cloud-user
        state: present
        password: "{{ cloud_user_password | password_hash('sha512') }}"

    - name: Set password for ec2-user
      when: cloud_provider == 'ec2'
      ansible.builtin.user:
        name: ec2-user
        state: present
        password: "{{ cloud_user_password | password_hash('sha512') }}"

    - name: Enable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: PasswordAuthentication yes
        state: present

    - name: Restart sshd
      service:
        name: sshd
        state: restarted
        enabled: yes

    - name: osp user.info
      when: cloud_provider == 'osp'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To access bastion via SSH:"
            - "ssh cloud-user@quay.{{ guid }}.{{ osp_cluster_dns_zone }}"
            - "Enter ssh password when prompted: {{ cloud_user_password }}"
            - "Public IP of the machine is {{ hostvars[groups['bastions'][0]]['public_ip_address'] }}"

        - name: Save user data
          agnosticd_user_info:
            data:
              ssh_command: "ssh cloud-uesr@quay.{{ guid }}.{{ osp_cluster_dns_zone }}"
              ssh_password: "{{ cloud_user_password }}"
              ip: "{{ hostvars[groups['bastions'][0]]['public_ip_address'] }}"

    - name: ec2 user.info
      when: cloud_provider == 'ec2'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To access the host via SSH:"
            - "ssh ec2-user@quay.{{ guid }}{{ subdomain_base_suffix }}"
            - "Enter ssh password when prompted: {{ cloud_user_password }}"
            - "Public IP of the machine is {{ hostvars[groups['bastions'][0]]['public_ip_address'] }}"

        - name: Save user data
          agnosticd_user_info:
            data:
              ssh_command: "ssh ec2-user@quay.{{ guid }}{{ subdomain_base_suffix }}"
              ssh_password: "{{ cloud_user_password }}"
              ip: "{{ hostvars[groups['bastions'][0]]['public_ip_address'] }}"

- name: Step 002 Post Software
  hosts: localhost
  connection: local
  become: false
  tags:
    - step001
    - post_software
  tasks:
    - name: Deploy Bookbag
      when:
        - bookbag_deploy | default(false) | bool
        - bookbag_git_repo | default('') != ''
      include_role:
        name: bookbag
      vars:
        ACTION: create

    - debug:
        msg: "Step 002 Post Software - Completed"

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
