####### VARIABLES YOU SHOULD CONFIGURE FOR YOUR DEPLOYEMNT
####### OR PASS as "-e" args to ansible-playbook command

#
#      Lightbulb comes with its OWN deployer which AAD simply wraps
#      Hence many of the variables typically used are redundant
#      
#      Note: both AAD and Lightbulb use "email" as a var for different
#      purposes. Below the lightbulb usage is used.
#

###### Variables from the Ansible Lightbulb AWS Provisioner:

ec2_key_name: ansible             # SSH key in AWS to put in all the instances
ec2_region: us-east-1             # region where the nodes will live
ec2_az: us-east-1a                # the availability zone
ec2_name_prefix: lightbulb        # name prefix for all the VMs
admin_password: lightbulb            # dw.Set this to something better if you'd like. 
                                  # Defaults to 'LearnAnsible[two digit month][two digit year]', e.g., LearnAnsible0416


## Optional Variables

email: no                               # Set this if you wish to disable email
# sendgrid_user: username               # username for the Sendgrid module.  Not required if "email: no" is set
# sendgrid_pass: 'passwordgoeshere'     # sendgrid accound password.  Not required if "email: no" is set
# sendgrid_api_key: 'APIkey'            # Instead of username and password, you may use an API key. Don't define both. Not required if "email: no" is set
# instructor_email: 'Ansible Instructor <helloworld@acme.com>'  # address you want the emails to arrive from. Not required if "email: no" is set

## Users - Lightbulb generates an environment for each user

users:
  - name: Tyrion Lannister
    username: tyrion
    email: tyrion@got.com
  - name: Jon Snow
    username: jon
    email: jon@got.com


## END OF ANSIBLE Lightbulb AWS Provisioner Variables    

### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})
#use_own_key: true
#env_authorized_key: "{{guid}}key"
#ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem
use_own_key: true
env_authorized_key: "{{guid}}key"
ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem
set_env_authorized_key: true

