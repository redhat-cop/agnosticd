---
# ---------------------------------------------------------
# AWS Network settings
# ---------------------------------------------------------
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{ subdomain_base_short }}{{ subdomain_base_suffix }}"
zone_internal_dns: "example.com."
chomped_zone_internal_dns: "example.com"

# ---------------------------------------------------------
# AWS EC2 Environment settings & Sizing
# ---------------------------------------------------------
cf_template_description: "{{ env_type }}-{{ guid }} Ansible Agnostic Deployer "
aws_region: us-east-2
default_instance_image: "RHEL92GOLD-latest"
default_instance_type: "t3a.medium"
default_rootfs_size: 50

# ---------------------------------------------------------
# AWS EC2 Security Groups
# ---------------------------------------------------------
security_groups:
  - name: BastionSG
    rules:
      - name: BastionSSHPorts
        description: "Bastion ssh"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: BastionHTTPSPorts
        description: "HTTPS Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: BastionOHTTPSPorts
        description: "Open HTTPS Public"
        from_port: 8443
        to_port: 8443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: NodeSG
    rules:
      - name: ToNodeSGssh
        description: "Allow ssh to NodeSG"
        from_port: 22
        to_port: 22
        protocol: tcp
        from_group: NodeSG
        rule_type: Ingress

      - name: ToNodeSGhttp
        description: "Allow HTTP to NodeSG"
        from_port: 80
        to_port: 80
        protocol: tcp
        from_group: NodeSG
        rule_type: Ingress

# ---------------------------------------------------------
# AWS EC2 Instances
# ---------------------------------------------------------
instances:
  - name: "{{ bastion_instance_name | default('control') }}"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image: "{{ bastion_instance_image | default(default_instance_image) }}"
    flavor:
      ec2: "{{bastion_instance_type | default(default_instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ default_rootfs_size }}"
    security_groups:
      - BastionSG
      - NodeSG

  - name: "node"
    count: 1
    public_dns: false
    image: "{{ node_instance_image | default(default_instance_image) }}"
    flavor:
      ec2: "{{node_instance_type | default(default_instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "nodes"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ default_rootfs_size }}"
    security_groups:
      - NodeSG


# ---------------------------------------------------------
# Enable or disable DNS availablity on the VPC after
# the deployment
# ---------------------------------------------------------
dns_support_state: true

# ---------------------------------------------------------
# Lock down the bastion network for outbound traffic at
# the end of post_software.yml import
# lock_env_security_groups.yml
# Finaly Inbound Ingress and Outbound Egress rules
# ---------------------------------------------------------
lock_env_security_groups: true

zero_touch_lock_security_rules:
  - name: BastionSG
    rules_ingress:
      - ports:
          - 443
          - 8443
        proto: tcp
        cidr_ip: "0.0.0.0/0"
    rules_egress: []
  - name: NodeSG
    rules_ingress:
      - ports:
          - 80
          - 22
        proto: tcp
        group_name: NodeSG
    rules_egress:
      - ports:
          - 80
          - 22
        proto: tcp
        group_name: NodeSG

...
