[tower]

{% for host in groups['tower'] %}
tower{{loop.index}}.{{chomped_zone_internal_dns}} public_host_name=tower{{loop.index}}.{{ guid }}{{subdomain_base_suffix}} ssh_host={{host}}
{% endfor %}

[database]
## This should be replaced by supports[0] name
support1.{{chomped_zone_internal_dns}}

## Add isolated if needed, we should have an "IF" statement, only if worker groups exist and have instances.

{% if target_regions is defined %}
{%for i_region in target_regions[1:] %}
[isolated_group_{{i_region.name}}]
{% for host in groups['workers'] %}
    {% if '.' + i_region.name + '.' in host %} 
{{ host }} public_host_name=worker{{loop.index}}.{{ guid }}{{subdomain_base_suffix}} ssh_host={{host}}
    {% endif %}
{% endfor %}

[isolated_group_{{i_region.name}}:vars]
controller=tower
{% endfor %}
{% endif %}


[all:vars]
ansible_become=true
admin_password={{tower_admin_password}}

## This should be replaced by supports[0] name
pg_host='support1.{{guid}}.internal'
pg_port='5432'

pg_database='awx'
pg_username='awx'
pg_password={{tower_admin_password}}

rabbitmq_port=5672
rabbitmq_vhost=tower

rabbitmq_username=tower
rabbitmq_password={{ tower_admin_password | regex_replace('[^a-zA-Z0-9]') }}
rabbitmq_cookie=cookiemonster

rabbitmq_use_long_name=true


### For our use, not Tower install use (so you can run ansible command line)
[supports]
{% for host in groups['support'] %}
support{{loop.index}}.{{chomped_zone_internal_dns}} public_host_name=support{{loop.index}}.{{ guid }}{{subdomain_base_suffix}} ssh_host={{host}}
{% endfor %}
