- name: Step 002 Post Infrastructure
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
    - debug:
        msg: "Step 002 Post Infrastructure"

    - name: Deploy secondary stacks
      loop: "{{ target_regions[1:] }}"
      vars:
        stack_file: "{{ _region.stack }}"
        aws_region: "{{ _region.region }}"
        aws_vpc_cidr: "{{ _region.vpc_cidr }}"
        aws_public_subnet_cidr: "{{ _region.subnet_cidr }}"
        aws_dns_zone_private: "{{ _region.name }}.{{ guid }}.internal."
        aws_dns_zone_public_prefix: "{{ _region.name }}."
        secondary_stack: yes
      loop_control:
        loop_var: _region
      include_tasks: deploy_stack.yml

- import_playbook: ../../include_vars.yml
  tags:
    - create_inventory
    - must

- name: Step 001.3 Configure Linux Hosts and Wait for Connection
  hosts:
    - all:!windows:!network
  gather_facts: false
  any_errors_fatal: true
  ignore_errors: false
  become: true
  tags:
    - step001
    - step001.3
    - wait_ssh
    - set_hostname
  tasks:
    - name: set facts for remote access
      tags:
        - create_inventory
      set_fact:
        aws_region_final: "{{hostvars['localhost'].aws_region_final}}"
        ansible_ssh_extra_args: "{{ ansible_ssh_extra_args|d() }} -F {{output_dir}}/{{ env_type }}_{{ guid }}_ssh_conf"

    - name: Run infra-ec2-wait_for_linux_hosts Role
      import_role:
        name: infra-ec2-wait_for_linux_hosts

    - name: Run infra-ec2-linux-set-hostname Role
      import_role:
        name: infra-ec2-linux-set-hostname

- name: Step 002 Create VPC peering
  hosts: localhost
  gather_facts: false
  become: false
  tags: vpc_peering
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
  tasks:
    - include_role:
        name: infra-ec2-vpc-peering
      tags: vpcpeering
      vars:
        vpc_region: "{{ _region[0].region }}"
        peer_region: "{{ _region[1].region }}"
        vpc_private_zone: "{{ _region[0].name }}.{{ guid }}.internal."
        peer_private_zone: "{{ _region[1].name }}.{{ guid }}.internal."
      loop: "{{ target_regions | product(target_regions) | list }}"
      loop_control:
        loop_var: _region
      when:
        - _region[0].region != _region[1].region
        - _region[0].region < _region[1].region
