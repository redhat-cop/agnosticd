################################################################################
################################################################################
### Environment Structure
################################################################################
################################################################################
## Environment Sizing

# target_regions:
#   - region: us-east-1
#     stack: default
#     name: na
#     vpc_cidr: 10.1.0.0/16
#     subnet_cidr: 10.1.0.0/24
#   - region: eu-central-1
#     stack: default
#     name: emea
#     vpc_cidr: 10.2.0.0/16
#     subnet_cidr: 10.2.0.0/24
#   - region: ap-southeast-1
#     stack: default
#     name: apac
#     vpc_cidr: 10.3.0.0/16
#     subnet_cidr: 10.3.0.0/24
default_key_name: ~/.ssh/{{key_name}}.pem
bastion_instance_type:
  ec2: "t2.medium"
  azure: Standard_A2_V2

bastion_instance_image: RHEL75

tower_instance_type:
  ec2: "t2.medium"
  azure: Standard_A2_V2

tower_instance_image: RHEL75

support_instance_type:
  ec2: "t2.medium"
  azure: Standard_A2_V2

support_instance_image: RHEL75

worker_instance_type:
  ec2: "t2.medium"
  azure: Standard_A2_V2

worker_instance_image: RHEL75

# How many do you want for each instance type
tower_instance_count: 3
support_instance_count: 2
worker_instance_count: 2

# security_groups:
#   - name: LocalSG
#     rules:
#       - name: AllowLocalUdp
#         description: "Local network"
#         from_port: 0
#         to_port: 65535
#         protocol: udp
#         cidr: 10.0.0.0/8
#         rule_type: Ingress

#       - name: AllowLocalTcp
#         description: "Local network"
#         from_port: 0
#         to_port: 65535
#         protocol: tcp
#         cidr: 10.0.0.0/8
#         rule_type: Ingress

#       - name: AllowICMP
#         description: "Local network"
#         from_port: -1
#         to_port: -1
#         protocol: icmp
#         cidr: 10.0.0.0/8
#         rule_type: Ingress


security_groups:
  - name: BastionSG
    rules:
      - name: BasSSHPublic
        description: "SSH public"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
  - name: TowerSG
    rules:
    ### start Updates #####
      - name: TowerHTTPSPorts
        description: "HTTPS Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      - name: TowerHTTPPorts
        description: "HTTPS Public"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      - name: BastionUDPPorts
        description: "Only from bastion"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: DefaultSG
        rule_type: Ingress
      - name: BastionTCPPorts
        description: "Only from bastion"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: DefaultSG
        rule_type: Ingress
    #### enb updates ####
      # - name: SSHTower
      #   description: "SSH public"
      #   from_port: 22
      #   to_port: 22
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: HTTPTower
      #   description: "HTTP public"
      #   from_port: 80
      #   to_port: 80
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: HTTPSTower
      #   description: "HTTP public"
      #   from_port: 443
      #   to_port: 443
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: RabbitMq
      #   description: "RabbitMq"
      #   from_port: 5672
      #   to_port: 5672
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: EPMD
      #   description: "EPMD"
      #   from_port: 4369 
      #   to_port: 4369
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: RabbitMqCLi
      #   description: "RabbitMq Cli"
      #   from_port: 25672
      #   to_port: 25672
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: RabbitMqAPi
      #   description: "RabbitMq Api"
      #   from_port: 15672
      #   to_port: 15672
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: RabbitMqCliTools
      #   description: "RabbitMq CLi tools"
      #   from_port: 35672
      #   to_port: 35672
      #   protocol: tcp
      #   cidr: "0.0.0.0/0"
      #   rule_type: Ingress
      # - name: BasTowerTcp
      #   description: "ALL from bastion tcp"
      #   from_port: 0
      #   to_port: 65535
      #   protocol: tcp
      #   group: BastionSG
      #   rule_type: Ingress
      # - name: BasTowerUdp
      #   description: "ALL from bastion udp"
      #   from_port: 0
      #   to_port: 65535
      #   protocol: udp
      #   group: BastionSG
      #   rule_type: Ingress
      # - name: AllInternaltcp
      #   description: "All other nodes tcp"
      #   from_port: 0
      #   to_port: 65535
      #   protocol: tcp
      #   group: HostSG
      #   rule_type: Ingress
      # - name: AllInternaludp
      #   description: "All other nodes udp"
      #   from_port: 0
      #   to_port: 65535
      #   protocol: udp
      #   group: HostSG
      #   rule_type: Ingress
      # - name: AllTowerNodestcp
      #   description: "All tower nodes tcp"
      #   from_port: 0
      #   to_port: 65535
      #   protocol: tcp
      #   group: TowerSG
      #   rule_type: Ingress
      # - name: AllTowerNodesudp
      #   description: "All tower nodes udp"
      #   from_port: 0
      #   to_port: 65535
      #   protocol: udp
      #   group: TowerSG
      #   rule_type: Ingress
  - name: HostSG
    rules:
    ### start update ##
      - name: BastionUDPPorts
        description: "Only from bastion"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: DefaultSG
        rule_type: Ingress
      - name: BastionTCPPorts
        description: "Only from bastion"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: DefaultSG
        rule_type: Ingress
    # ## end update ##
    #   - name: HostUDPPorts
    #     description: "Only from Itself udp"
    #     from_port: 0
    #     to_port: 65535
    #     protocol: udp
    #     group: HostSG
    #     rule_type: Ingress
    #   - name: Postgresql
    #     description: "PostgreSql"
    #     from_port: 5432
    #     to_port: 5432
    #     protocol: tcp
    #     cidr: "0.0.0.0/0"
    #     rule_type: Ingress
    #   - name: HostTCPPorts
    #     description: "Only from Itself tcp"
    #     from_port: 0
    #     to_port: 65535
    #     protocol: tcp
    #     group: HostSG
    #     rule_type: Ingress
    #   - name: TowerUDPPorts
    #     description: "Only from tower"
    #     from_port: 0
    #     to_port: 65535
    #     protocol: udp
    #     group: TowerSG
    #     rule_type: Ingress
    #   - name: TowerTCPPorts
    #     description: "Only from tower"
    #     from_port: 0
    #     to_port: 65535
    #     protocol: tcp
    #     group: TowerSG
    #     rule_type: Ingress
    #   - name: BastionUDPPorts
    #     description: "Only from bastion"
    #     from_port: 0
    #     to_port: 65535
    #     protocol: udp
    #     group: BastionSG
    #     rule_type: Ingress
    #   - name: BastionTCPPorts
    #     description: "Only from bastion"
    #     from_port: 0
    #     to_port: 65535
    #     protocol: tcp
    #     group: BastionSG
    #     rule_type: Ingress



# Environment Instances
instances:
  - name: "bastion"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: false
    image: "{{ bastion_instance_image }}"
    flavor:
      ec2: "t2.medium"
      azure: Standard_A2_V2
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    volumes:
      - name: '/dev/sda1'
        size: 20
    security_groups:
      - BastionSG
      - DefaultSG

  - name: "tower"
    count: "{{tower_instance_count}}"
    public_dns: true
    dns_loadbalancer: false
    image: "{{ tower_instance_image }}"
    security_groups:
      - TowerSG
      - DefaultSG
    flavor:
      ec2: "t2.medium"
      azure: Standard_A2_V2
    tags:
      - key: "AnsibleGroup"
        value: "towers"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
  - name: "support"
    count: "{{support_instance_count}}"
    public_dns: true
    dns_loadbalancer: false
    image: "{{ support_instance_image }}"
    security_groups:
      - TowerSG
      - DefaultSG
    flavor:
      ec2: "t2.medium"
      azure: Standard_A2_V2
    tags:
      - key: "AnsibleGroup"
        value: "support"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"

instances_worker:
  - name: "worker"
    count: "{{worker_instance_count}}"
    public_dns: true
    dns_loadbalancer: false
    image: "{{ worker_instance_image }}"
    security_groups:
      - HostSG
      - DefaultSG
      - BastionSG
    flavor:
      ec2: "t2.medium"
      azure: Standard_A2_V2
    tags:
      - key: "AnsibleGroup"
        value: "workers"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"



# DNS settings for environmnet
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"

zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

# Stuff that only GPTE cares about:
install_ipa_client: false


################################################################################
################################################################################
### Common Host settings
################################################################################
################################################################################
# Other Options are: file, satellite and rhn
#If using repo_method: satellite, you must set these values as well.
# satellite_url: satellite.example.com
# satellite_org: Sat_org_name
# satellite_activationkey: "rhel7basic"

repo_method: file
repo_version: "{{ tower_version }}"
# Do you want to run a full yum update
update_packages: false
common_packages:
  - python
  - unzip
  - bash-completion
  - tmux
  - wget
  - git
  - vim-enhanced
  - at
  - ansible
  - gcc
  - python-pip

rhel_repos:
  - rhel-7-server-rpms
  - rhel-7-server-rh-common-rpms
  - rhel-7-server-extras-rpms
  - rhel-7-server-optional-rpms
  - rhel-7-server-rhscl-rpms
  - epel-release-latest-7

###V2WORK, these should just be set as default listed in the documentation
install_bastion: true
install_common: true
## SB Don't set software_to_deploy from here, always use extra vars (-e) or "none" will be used
#software_to_deploy: none


## guid is the deployment unique identifier, it will be appended to all tags,
## files and anything that identifies this environment from another.
# Using GUID is required, if it is not passed in the command line or uncommented
# here the deployment will fail
#guid: defaultguid



###V2WORK, these should just be set as default listed in the documentation
# This is where the ssh_config file will be created, this file is used to
# define the communication method to all the hosts in the deployment
deploy_local_ssh_config_location: "{{output_dir}}/"


### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})

###V2WORK, these should just be set as default listed in the documentation
use_own_key: true
env_authorized_key: "{{guid}}key"
set_env_authorized_key: true

################################################################################
################################################################################
### AWS EC2 Specific Variables
################################################################################
################################################################################

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
HostedZoneId: Z3IHLWJZOU9SRT

# The key that is used to connect to the AWS instance initially, it should
# exist in your aws account and the private key should exist on the local machine
# you are provisioning from.
#key_name: "default_key_name"

###V2WORK THIS SHOULD MOVE INTO THE ROLE
# This var is used to identify stack (cloudformation, azure resourcegroup, ...)
project_tag: "{{ env_type }}-{{ guid }}"

################################################################################
################################################################################
### Azure Specific Variables
################################################################################
################################################################################
# Create a dedicated resourceGroup for this deployment
az_destroy_method: resource_group
az_resource_group: "{{ project_tag }}"

# you can operate differently: if you share on resourceGroup for all you deployments,
# you can specify a different resourceGroup and method:
#az_destroy_method: deployment
#az_resource_group: my-shared-resource-group
