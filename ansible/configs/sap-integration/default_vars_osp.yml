# -------------------------------------------------------------------
# Default Variables for OpenStack
# -------------------------------------------------------------------

# The type of cloud provider this will be deployed to
cloud_provider: osp

# Authenication credentials for OpenStack in order to create the things.
# These should be included with your secrets, but are listed here for reference
# osp_auth_url:
# osp_auth_username:
# osp_auth_password:
# osp_auth_cloud:
# osp_auth_project_domain: #usually set to "default"
# osp_auth_user_domain: #usually set to "default"

# This is an account that must exist in OpenStack.
# It is used to create projects, access, Heat templates
admin_user: opentlc-mgr

# This is the user that Ansible will use to connect to the nodes it is
# configuring from the admin/control host
ansible_user: cloud-user

# -------------------------------------------------------------------
# OpenStack Infrastructure
# -------------------------------------------------------------------

# See cloud_providers/osp_default_vars.yml
# See roles-infra/infra-osp-project-create/defaults/main.yml

# openshift-install will try to pull in a copy of RHCOS for every cluster
# and store it in Glance. These vars will let you override that behaviour
# and use an existing image.
# rhcos_image_name: rhcos-ocp43

# -------------------------------------------------------------------
# OpenStack Project
# -------------------------------------------------------------------

# The name of the project that will be created in OpenStack for the user
osp_project_name: "{{ guid }}-project"

# The name of the cloud where ocp-cluster will be created
osp_cloud_name: "{{ osp_project_name }}"

# Set this to true if you need to create a new project in OpenStack
# This should almost always be set to true for OpenShift installations
# If it is set to false, the {{ osp_project_name }} must already exist and
# should be able to run whatever you are deploying
osp_project_create: true

# Quotas to set for new project that is created
quota_num_instances: 15
quota_num_cores: 72
quota_memory: 163840 # in MB
quota_num_volumes: 25
quota_volumes_gigs: 1000
#quota_loadbalancers: #when Octavia is available
#quota_pool: #when Octavia is available
quota_networks: 3
quota_subnets: 3
quota_routers: 3
quota_fip: 5
quota_sg: 10
quota_sg_rules: 100

# -------------------------------------------------------------------
# OpenStack SWIFT
# -------------------------------------------------------------------

# This needs to be True for 4.3 and earlier.
# For OpenShift 4.4 and later it can be false
osp_use_swift: false

# -------------------------------------------------------------------
# OpenStack Networking
# -------------------------------------------------------------------

# The domain that you want to add DNS entries to
osp_cluster_dns_zone: FROMSECRET

# The dynamic DNS server you will add entries to.
# NOTE: This is only applicable when {{ use_dynamic_dns}} is true
osp_cluster_dns_server: FROMSECRET

# Whether to wait for an ack from the DNS servers before continuing
wait_for_dns: true

# Authenticaion for DDNS, Must be set in secrets
# ddns_key_name:
# ddns_key_algorithm:                # default value set to: "hmac-md5"
# ddns_secret_name:

# The base domain
# osp_cluster_dns_zone needs to come from secrets
# subdomain_base_suffix: "{{ osp_cluster_dns_zone }}"
ocp4_base_domain: "{{ osp_cluster_dns_zone }}"

# If you are deploying OpenShift, this should be set to the network that you
# want to use and will be used to create security groups.
# It will pull the subnet CIDR from the defined network below, based on the
# name you define for {{ ocp_network }}
ocp_network: "ocp"
ocp_network_subnet_cidr: "{{ networks | json_query(query_subnet_cidr) | first }}"
query_subnet_cidr: "[?name=='{{ ocp_network }}'].subnet_cidr"

# Set this to true if you want a Floating IPs provisioned for
# an OpenShift on OpenStack install
# This will provision an API and Ingress FIP
openshift_fip_provision: True

# This requires DDNS or other DNS solution configured
# If enabled, it will add DNS entries for the API and Ingress FIPs
openshift_fip_dns: True

# The external network in OpenStack where the floating IPs (FIPs) come from
provider_network: external

# Provision Floating IPs for API and Ingress
additional_fips:
  ocp_api_fip:
    description: The floating IP of the OpenShift API
    network: "{{ provider_network }}"
  ocp_ingress_fip:
    description: The floating IP of the OpenShift ingress
    network: "{{ provider_network }}"

# A list of the private networks and subnets to create in the project
# You can create as many as you want, but at least one is required.
# Use the name of the networks where appropriate in the instance list
networks:
- name: ocp
  shared: "false"
  subnet_cidr: 192.168.47.0/24
  gateway_ip: 192.168.47.1
  allocation_start: 192.168.47.10
  allocation_end: 192.168.47.254
  dns_nameservers: []
  create_router: true

# Security groups and associated rules. This will be provided
#when the Heat template is generated separate groups and rules
security_groups:
  - name: HanaSG
    rules:
      - name: HanaSSHPrivate
        description: "SSH private"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
        group: BastionSG
      - name: HanaUDPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: udp
        group: BastionSG
        rule_type: Ingress
      - name: HanaTCPPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: tcp
        group: BastionSG
        rule_type: Ingress
  - name: BastionSG
    rules:
      - name: BastionUDPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: udp
        group: HanaSG
        rule_type: Ingress
      - name: BastionTCPPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: tcp
        group: HanaSG
        rule_type: Ingress

# -------------------------------------------------------------------
# OpenStack Instances
# -------------------------------------------------------------------

# Bastion Configuration
bastion_instance_type: "2c2g30d"
#bastion_instance_image: rhel-server-7.7-update-2
bastion_instance_image: rhel-8.1
# Root Filesystem Size
bastion_rootfs_size: 30

# Instance Types to be passed to OpenShift Installer
master_instance_type: 4c16g30d
worker_instance_type: 4c16g30d

# Instances to be provisioned in new project
# Provide these as a list.
# Each instance type can have any number of replicas deployed with the same
# configuration.
# Metadata in OpenStack is equivelent to tags in AWS
# These instances will be created with Cinder persistent volumes
instances:
- name: "bastion-{{ guid }}"
  count: 1
  unique: true
  public_dns: true
  dns_loadbalancer: true
  floating_ip: true
  image_id: "{{ bastion_instance_image }}"
  sofware_image_id: "{{ sap_software_image }}"
  flavor:
    osp: "{{ bastion_instance_type }}"
  tags:
    - key: "AnsibleGroup"
      value: "bastions"
    - key: "ostype"
      value: "linux"
    - key: "instance_filter"
      value: "{{ env_type }}-{{ email }}"
    - key: ansible_python_interpreter
      value: /usr/libexec/platform-python
  rootfs_size: "50"
  network: ocp
  softwarefs_size: "{{ software_size }}"
  security_groups:
    - BastionSG

- name: "hana-{{ guid }}"
  count: 1
  public_dns: false
  dns_loadbalancer: false
  floating_ip: false
  image_id: "{{ hana_instance_image }}"
  flavor:
    osp: "{{ hana_instance_type }}"
  tags:
    - key: "AnsibleGroup"
      value: "hanas"
    - key: "ostype"
      value: "rhel"
    - key: "instance_filter"
      value: "{{ env_type }}-{{ email }}"
    - key: ansible_python_interpreter
      value: /usr/libexec/platform-python
  rootfs_size: "100"
  network: ocp
  volumes:
    - volume_name: "hana_pv"
      volume_size: "{{ pv_size_hana }}"
  security_groups:
    - HanaSG

- name: "s4hana-{{ guid }}"
  count: 1
  public_dns: true
  dns_loadbalancer: true
  floating_ip: true
  image_id: "{{ s4hana_instance_image }}"
  flavor:
    osp: "{{ s4hana_instance_type }}"
  tags:
    - key: "AnsibleGroup"
      value: "s4hanas"
    - key: "ostype"
      value: "rhel"
    - key: "instance_filter"
      value: "{{ env_type }}-{{ email }}"
    - key: ansible_python_interpreter
      value: /usr/libexec/platform-python
  rootfs_size: "100"
  network: ocp
  volumes:
    - volume_name: "s4hana_pv"
      volume_size: "{{ pv_size_s4hana }}"
  security_groups:
    - HanaSG

# Variable used to identify the request being made by a Red Hatter or Partner (external)
rh_internal: false

# SAP HANA and S/4HANA instances variables

hana_instance_image: rhel-8.1
hana_instance_type: "sap-4-64"
rootfs_size_hana: "{{ rootfs_size_hana }}"
pv_size_hana: 500

s4hana_instance_image: rhel-8.1
s4hana_instance_type: "sap-4-32"
rootfs_size_s4hana: "{{ rootfs_size_s4hana }}"
pv_size_s4hana: 200

# SAP Software image and variables
sap_software_image: sap-software-v1.2
sap_software_size: "{{ software_size }}"

# rhel_repos:
#    - "rhel-8-for-x86_64-baseos-e4s-rpms"
#    - "rhel-8-for-x86_64-appstream-e4s-rpms"
#    - "ansible-2-for-rhel-8-x86_64-rpms"
#    - "rhel-8-for-x86_64-sap-solutions-e4s-rpms"
#    - "rhel-8-for-x86_64-sap-netweaver-e4s-rpms"