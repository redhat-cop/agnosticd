- name: Set Ansible Python interpreter to k8s virtualenv
  set_fact:
    ansible_python_interpreter: /opt/virtualenvs/k8s/bin/python

- name: Create openshift-storage namespace
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/ns_storage.j2' ) | from_yaml }}"

- name: Label nodes for OCS
  # Using shell to support stream operations
  shell: >
    for n in $(oc get nodes | grep worker 
    | awk {'print $1'}); do oc label node $n 
    cluster.ocs.openshift.io/openshift-storage='';done

- name: Create ocs operatorgroup
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/ocs_operatorgroup.j2' ) | from_yaml }}"

- name: Create ocs subscription
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/ocs_subscription.j2' ) | from_yaml }}"

- name: Wait until both ClusterServiceVersion moves to phase Succeeded
  shell: oc get csv -n openshift-storage | grep Succeeded | wc -l
  register: phaseokcount
  until: phaseokcount.stdout == '1'
  retries: 30
  delay: 10

- name: Create ocs cluster
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/storage_cluster.j2' ) | from_yaml }}"

- name: Wait until storage classes are available
  k8s_info:
    api_version: v1
    kind: StorageClass
    name: "{{ item }}"
  register: sc
  until: sc.resources | length > 0
  retries: 60
  delay: 10
  loop:
    - ocs-storagecluster-cephfs
    - ocs-storagecluster-ceph-rbd
    - openshift-storage.noobaa.io

- name: Patch Storage Class standard to remove it as the default storage class
  k8s:
    definition:
      apiVersion: v1
      kind: StorageClass
      metadata:
        name: "{{ cloud_storageclass_name }}"
        annotations:
          storageclass.kubernetes.io/is-default-class: "false"
  
- name: Patch Storage Class ocs-storagecluster-cephfs to select it as the default storage class 
  k8s:
    definition:
      apiVersion: v1
      kind: StorageClass
      metadata:
        name: ocs-storagecluster-cephfs
        annotations:
          storageclass.kubernetes.io/is-default-class: "true"

- name: Create fuse online namespace
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/ns_fuse.j2' ) | from_yaml }}"

- name: Create secret for image pull
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/syndesis-pull-secret.j2' ) | from_yaml }}"

- name: Create fuse operatorgroup
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/fuse_operatorgroup.j2' ) | from_yaml }}"

- name: Create fuse subscription
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/fuse_subscription.j2' ) | from_yaml }}"

- name: Wait until Fuse Online ClusterServiceVersion moves to phase Succeeded
  shell: oc get csv -n fuse-online | grep -v jaeger | grep Succeeded | wc -l
  register: phaseokcount
  until: phaseokcount.stdout == '1'
  retries: 30
  delay: 10

- name: Link secret for syndesis
  command: oc secrets link syndesis-operator syndesis-pull-secret --for=pull -n fuse-online

- name: Create Syndesis resource
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/fuse_syndesis.j2' ) | from_yaml }}"

- name: Create 3scale namespace 
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/ns_3scale.j2' ) | from_yaml }}"

- name: Create secret for image pull
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/3scale-pull-secret.j2' ) | from_yaml }}"

- name: Create 3scale operatorgroup
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/3scale_operatorgroup.j2' ) | from_yaml }}"

- name: Create 3scale subscription
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/3scale_subscription.j2' ) | from_yaml }}"

- name: Wait until 3scale ClusterServiceVersion moves to phase Succeeded
  shell: oc get csv -n 3scale | grep -v jaeger | grep Succeeded | wc -l
  register: phaseokcount
  until: phaseokcount.stdout == '1'
  retries: 30
  delay: 10

- name: Create API Manager resource
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/3scale_apimanager.j2' ) | from_yaml }}"

- name: Deploy Side by Side Namespace and Microservices
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', '{{ item }}' ) | from_yaml }}"
  loop:
    - ./files/k8s/ns_side.j2
    - ./files/k8s/scc_side.j2
    - ./files/k8s/cm_side_fe.j2
    - ./files/k8s/dc_side_be.j2
    - ./files/k8s/dc_side_fe.j2
    - ./files/k8s/svc_side_be.j2
    - ./files/k8s/svc_side_fe.j2
    - ./files/k8s/route_side_be.j2
    - ./files/k8s/route_side_fe.j2

- name: Create OpenShift Pipelines subscription
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/pipelines_subscription.j2' ) | from_yaml }}"

- name: Wait until Openshift Pipelines ClusterServiceVersion moves to phase Succeeded
  shell: oc get csv -n openshift-operators | grep -i redhat-openshift-pipelines | grep Succeeded | wc -l
  register: phaseokcount
  until: phaseokcount.stdout == '1'
  retries: 30
  delay: 10

- name: Create OpenShift GitOps subscription
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/gitops_subscription.j2' ) | from_yaml }}"

- name: Wait until Openshift GitOps ClusterServiceVersion moves to phase Succeeded
  shell: oc get csv -n openshift-operators | grep -i openshift-gitops | grep Succeeded | wc -l
  register: phaseokcount
  until: phaseokcount.stdout == '1'
  retries: 30
  delay: 10

- name: Create Cluster Role Binding for GitOps
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/gitops_cluster_role.j2' ) | from_yaml }}"

- name: Create Serverless namespace
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/ns_serverless.j2' ) | from_yaml }}"

- name: Create SAP Serverless namespace
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/ns_sapserverless.j2' ) | from_yaml }}"

- name: Create Serverless operatorgroup
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/serverless_operatorgroup.j2' ) | from_yaml }}"

- name: Create Serverless subscription
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/serverless_subscription.j2' ) | from_yaml }}"

- name: Wait until Openshift Serverless ClusterServiceVersion moves to phase Succeeded
  shell: oc get csv -n openshift-serverless | grep -i serverless | grep Succeeded | wc -l
  register: phaseokcount
  until: phaseokcount.stdout == '1'
  retries: 30
  delay: 10

- name: Create Camel-K subscription
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/camelk_subscription.j2' ) | from_yaml }}"

- name: Wait until Camel-K ClusterServiceVersion moves to phase Succeeded
  shell: oc get csv -n openshift-operators | grep -i camel | grep Succeeded | wc -l 
  register: phaseokcount
  until: phaseokcount.stdout == '1'
  retries: 30
  delay: 10

- name: Create Knative Eventing
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/serverless_knativeeventing.j2' ) | from_yaml }}"

- name: Create Knative Serving
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/serverless_knativeserving.j2' ) | from_yaml }}"

- name: Create Channel OrderCheck
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/channel_ordercheck.j2' ) | from_yaml }}"
  register: k8sres
  until: k8sres.failed == False
  retries: 30
  delay: 10

- name: Create Channel ReturnTxt
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/channel_returntxt.j2' ) | from_yaml }}"
  register: k8sres
  until: k8sres.failed == False
  retries: 30
  delay: 10

- name: Create Integration ODATA
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/integration_sap_odata.j2' ) | from_yaml }}"

- name: Create Integration Sales Slack
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/integration_sap_sales_slack.j2' ) | from_yaml }}"

- name: Create Slack Source
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/kamelet_slack_source.j2' ) | from_yaml }}"

- name: Create Slack Binding
  k8s:
    state: present
    resource_definition: "{{ lookup( 'template', './files/k8s/kamelet_bind_slack.j2' ) | from_yaml }}"