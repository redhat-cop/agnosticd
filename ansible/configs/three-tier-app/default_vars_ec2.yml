---
### AWS EC2 Environment settings

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
HostedZoneId: Z3IHLWJZOU9SRT
# The region to be used, if not specified by -e in the command line
aws_region: us-east-1
# The key that is used to

## Networking (AWS)
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"
zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

## Environment Sizing
# Instance Type
__instance_type: "t2.small"
bastion_instance_type: "t2.medium"
# Image ID
# __image: RHELAMI
__image: RHEL75
security_groups:
  - name: FrontendSG
    rules:
      - name: FrontHTTPPorts
        description: "HTTP Public"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: HostSG
    rules:
      - name: FromFrontendTCP
        description: "Allow everything from Frontend"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: FrontendSG
        rule_type: Ingress
      - name: FromFrontendUDP
        description: "Allow everything from Frontend"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: FrontendSG
        rule_type: Ingress

instances:
  - name: bastion
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image_id: "{{ bastion_instance_image | default(__image) }}"
    flavor:
      ec2: "{{bastion_instance_type}}"
      osp: "{{bastion_instance_type}}"
      azure: Standard_A2_V2
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_bastion | default(50)  }}"
    security_groups:
      - BastionSG

  - name: "frontend"
    count: "{{ frontend_instance_count | default(1) }}"
    public_dns: true
    dns_loadbalancer: false
    image_id: "{{ frontend_instance_image | default(__image) }}"
    flavor:
      ec2: "{{ frontend_instance_type  | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "frontends"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - FrontendSG
      - DefaultSG

  - name: "app"
    count: "{{ app_instance_count | default(2) }}"
    public_dns: false
    image_id: "{{ app_instance_image | default(__image) }}"
    flavor:
      ec2: "{{ app_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "apps"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - DefaultSG
      - HostSG

  - name: "appdb"
    count: "{{ appdb_instance_count | default(1) }}"
    public_dns: false
    image_id: "{{ appdb_instance_image | default(__image) }}"
    flavor:
      ec2: "{{ appdb_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "appdbs"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - DefaultSG
      - HostSG

...