- name: Step 00xxxxx post software
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
    - debug:
        msg: "Post-Software tasks Started"

- name: Step lab post software deployment
  hosts: bastions
  become: yes
  tags:
    - bastion_post_software
  tasks:
    - name: Create control-user
      include_role: 
        name: control-user      


- name: Play to setup postfix
  hosts: towers
  become: yes
  roles:
    - setup-postfix


- name: Download and install Ansible Tower
  hosts: tower
  become: true
  tasks:
    - name: Remove directory if it exists
      file:
       path: /root/ansible-tower-setup-{{tower_version}}
       state: absent

    - name: Create new directory
      file:
       path: /root/ansible-tower-setup-{{tower_version}}
       state: directory


    - name: Install pre-requisites for ansible-tower 
      package:
        name:
          - ansible
          - vim
          - curl
          - unzip


    - name: Download Tower Setup file
      unarchive:
        src: "https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{tower_version}}.tar.gz"
        dest: /root/ansible-tower-setup-{{tower_version}}
        remote_src: yes
        extra_opts: [--strip-components=1]
      tags:
        - install-tower

    - name: Set pg_password in ansible tower setup inventory file
      lineinfile:
        path: /root/ansible-tower-setup-{{tower_version}}/inventory
        regexp: '^pg_password='
        line: pg_password={{ tower_admin_password }}

    - name: Set rabbitmq_password in ansible tower setup inventory file
      lineinfile:
        path: /root/ansible-tower-setup-{{tower_version}}/inventory
        regexp: '^rabbitmq_password='
        line: rabbitmq_password={{ tower_admin_password }}

    - name: Set  admin_password in ansible tower setup inventory file
      lineinfile:
        path: /root/ansible-tower-setup-{{tower_version}}/inventory
        regexp: '^admin_password='
        line: admin_password={{ tower_admin_password }}

    - name: Configure and install latest ansible tower setup.
      shell: |
        cd /root
        ansible-tower-setup*/setup.sh

    - name: Inject License
      uri:
        url: https://{{ inventory_hostname }}/api/v2/config/
        user: admin
        password: "{{ tower_admin_password }}"
        method: POST
        body_format: json
        force_basic_auth: yes
        validate_certs: false
        body: "{{ tower_license }}"

- name: Deploy user setup
  hosts: localhost
  connection: local
  gather_facts: false
  tags:
    - step005
  tasks:
    - name: osp user.info
      when: cloud_provider == 'osp'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To access Red Hat Ansible Tower console via browser:"
            - "Tower URL: https://tower.{{ guid }}.{{ osp_cluster_dns_zone }}"
            - ""
            - "To access spunk and elk on server via browser:"
            - "Splunk URL: http://server.{{ guid }}.{{ osp_cluster_dns_zone }}:8000"
            - "ELK URL: http://server.{{ guid }}.{{ osp_cluster_dns_zone }}:5601"
            - ""
            - "To access bastion via SSH:"
            - "ssh {{ student_name }}@bastion.{{ guid }}.{{ osp_cluster_dns_zone }}"
            - "Enter ssh password when prompted: {{ hostvars['bastion']['student_password'] }}"
            
        - name: Save user data
          agnosticd_user_info:
            data:
              ssh_command: "ssh {{ student_name }}@bastion.{{ guid }}.{{ osp_cluster_dns_zone }}"
              ssh_password: "{{ hostvars['bastion']['student_password'] }}"

        - name: Tag project with the name of the student
          environment:
            OS_AUTH_URL: "{{ osp_auth_url }}"
            OS_USERNAME: "{{ osp_auth_username }}"
            OS_PASSWORD: "{{ osp_auth_password }}"
            OS_PROJECT_NAME: "admin"
            OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
            OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
          command: openstack project set --tag "student={{ student_name }}" "{{ osp_project_name }}"

    - name: ec2 user.info
      when: cloud_provider == 'ec2'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To access Red Hat Ansible Tower console via browser:"
            - "https://tower1.{{ guid }}{{ subdomain_base_suffix }}"
            - ""
            - "To access bastion via SSH:"
            - "ssh {{ student_name }}@bastion.{{ guid }}{{ subdomain_base_suffix }}"
            - "Enter ssh password when prompted: {{ hostvars[groups['bastions'][0]]['student_password'] }}"
            
        - name: Save user data
          agnosticd_user_info:
            data:
              ssh_command: "ssh {{ student_name }}@bastion.{{ guid }}{{ subdomain_base_suffix }}"
              ssh_password: "{{ hostvars[groups['bastions'][0]]['student_password'] }}"



- name: Get PNTAE coursescript on bastion
  hosts: bastion
  become: true
  vars:
    course_data_action: 'getscript'
  tasks:
    - include_role:
        name: handle-course-data-pntae
      tags: handle-course-data-pntae


- name: Get PNTAE course data on localhost
  hosts: localhost
  vars:
    course_data_action: 'getdata'
  tasks:
    - include_role:
        name: handle-course-data-pntae
      tags: handle-course-data-pntae

- name: Run PNTAE's course customization scripts on required hosts
  hosts: all
  vars:
    course_data_action: 'run'
  tasks:
    - include_role:
        name: handle-course-data-pntae
      tags: handle-course-data-pntae


- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"

