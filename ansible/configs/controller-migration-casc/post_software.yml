---
- name: Step 00xxxxx post software
  hosts: support
  gather_facts: false
  become: true
  tasks:
    - debug:
        msg: "Post-Software tasks Started"

- name: PostSoftware flight-check
  hosts: automationcontroller
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - name: define the load balanced name for the Tower cluster
      set_fact:
        tower_hostname: "{{ inventory_hostname | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
    - name: validate the Tower setup (config role)
      import_role:
        name: tower_validate
      tags:
        - tower_validate

- name: Output user_info
  hosts: localhost
  connection: local
  gather_facts: false
  become: false

  tags:
    - step005

  tasks:

    - name: Do very annoying normalization of domain name
      set_fact:
        agnosticd_domain_name: >-
          {% if cloud_provider == 'osp' -%}
            {{ guid }}.{{ osp_cluster_dns_zone }}
          {% elif cloud_provider == 'ec2' -%}
            {{ guid }}{{ subdomain_base_suffix }}
          {%- endif %}

    - name: setting some variables only existing inside RHPDS environment
      when: student_name is not defined
      set_fact:
        student_name: "student"
        student_password: "{{ tower_admin_password }}"

    - name: setting our own output variable
      ansible.builtin.set_fact:
        my_msg: |
          {{ (my_msg | default('')) }}
          Server: {{ current_host }} - Password: {{ hostvars[current_host].tower_admin_password }}
      loop: "{{ groups['linux'] | sort }}"
      loop_control:
        loop_var: current_host

    - name: Output user_info for osp or ec2 based deploys
      agnosticd_user_info:
        msg: |
            To Access to the available resources:
            {{ my_msg }}

            To Access to the available resources (students):
            &nbsp;&nbsp;URL: https://bastion.{{ agnosticd_domain_name }}
            &nbsp;&nbsp;Password: {{ tower_admin_password | default(hostvars[groups['bastions'][0]]['tower_admin_password']) }}
            To Access to the available resources (Instructor):
            &nbsp;&nbsp;URL: https://bastion.{{ agnosticd_domain_name }}/list.php
            &nbsp;&nbsp;Password: {{ tower_admin_password | default(hostvars[groups['bastions'][0]]['tower_admin_password']) }}
        data:
          ansible_controller_web_ui_url: "{{ groups['automationcontroller'] | map('regex_replace', '([^\\.]*)\\..*$', 'https://\\1.' + agnosticd_domain_name) }}"
          ansible_controller_username: "{{ automationcontroller_admin_user | default('admin') }}"
          ansible_controller_admin_password: "{{ tower_admin_password | default(hostvars[groups['bastions'][0]]['tower_admin_password']) }}"
          bastion_host_name: "bastion.{{ agnosticd_domain_name }}"
          bastion_student_name: "{{ student_name }}"
          vscode_web_ui_url: "{{ groups['automationcontroller'] | map('regex_replace', '([^\\.]*)\\..*$', 'https://\\1.' + agnosticd_domain_name + '/editor') }}"
          vscode_web_ui_password: "{{ tower_admin_password | default(hostvars[groups['bastions'][0]]['tower_admin_password']) }}"

    - name: Deploy Bookbag
      when: bookbag_git_repo is defined
      include_role:
        name: bookbag
      vars:
        ACTION: create

- name: Step 00xxxxx post software
  hosts: localhost
  become: false
  gather_facts: false
  tasks:
    - debug:
        msg: "Post-Software Steps starting"

    - name: Deploy Showroom on shared cluster
      when: showroom_deploy_shared_cluster_enable | default(false) | bool
      include_role:
        name: ocp4_workload_showroom

    - debug:
        msg: "Post-Software checks completed successfully"
