reverse_proxy: true
repo_method: file
opentlc_integration: true

################################################################################
#### GENERIC EXAMPLE
################################################################################

install_common: true
install_bastion: false
env_authorized_key: "{{guid}}key"
set_env_authorized_key: true
## SB Don't set software_to_deploy from here, always use extra vars (-e) or "none" will be used
#software_to_deploy: "openshift"

################################################################################
#### Common host variables
################################################################################

update_packages: false
common_packages:
  - python
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - git
  - vim-enhanced
  - ansible

rhel_repos:
  - rhel-7-server-rpms
  - rhel-7-server-extras-rpms
  - rhel-7-server-ansible--{{install_ansible_version}}-rpms

use_subscription_manager: false
use_own_repos: true
#rhn_pool_id_string: "Red Hat Enterprise Linux Server"
rhn_pool_id_string: OpenShift Container Platform

################################################################################
#### CLOUD PROVIDER: AWS SPECIFIC VARIABLES
################################################################################

#### Route 53 Zone ID (AWS)
HostedZoneId: ''
key_name: ''
aws_region: us-east-1

admin_user: ''
admin_user_password: ''

#### Connection Settings

ansible_user: ec2-user
remote_user: ec2-user

#### Networking (AWS)
guid: defaultguid
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"
tower_run: false

#### Environment Sizing

bastion_instance_type: "t2.medium"
loadbalancer_instance_type: "t2.medium"
web_instance_type: "t2.micro"
app_instance_type: "t2.micro"
appdb_instance_type: "t2.micro"
isolated_instance_type: "t2.medium"

bastion_instance_count: 3
web_instance_count: 2
app_instance_count: 1
appdb_instance_count: 1
isolated_instance_count: 1

ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem

## This needs to removed after we clean up the CF tempalate
osrelease: "6.0"

#### VARIABLES YOU SHOULD ***NOT*** CONFIGURE FOR YOUR DEPLOYEMNT
#### You can, but you usually wouldn't need to.

#### CLOUDFORMATIONS vars

project_tag: "{{ env_type }}-{{ guid }}"

zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"


bastion_public_dns: "bastion.{{subdomain_base}}."
bastion_public_dns_chomped: "bastion.{{subdomain_base}}"


vpcid_cidr_block: "192.168.0.0/16"
vpcid_name_tag: "{{subdomain_base}}"

# rootfs_size_node: 50
# rootfs_size_infranode: 50
# rootfs_size_master: 50
# rootfs_size_bastion: 20
# rootfs_size_isolated: 20
# rootfs_size_support: 20
# rootfs_size_loadbalancer: 20


security_groups:
  - name: LBSG
    rules:
      - name: LBHTTP
        description: "HTTP for public"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      - name: LBHTTPS
        description: "HTTPS for public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      - name: LBSSHPublic
        description: "SSH for public"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      - name: LBSSH
        description: "SSH from Bastion"
        from_port: 22
        to_port: 22
        protocol: tcp
        from_group: BastionSG
        rule_type: Ingress
      - name: LBEGRESStoAll
        description: "Egress to PrivateSubnetWeb"
        from_port: 0
        to_port: 65535
        protocol: tcp
        cidr: "192.168.2.0/24"
        rule_type: Egress
      # - name: LBEGRESSIsolatedHTTP
      #   description: "HTTP Egress Isolated"
      #   from_port: 80
      #   to_port: 80
      #   protocol: tcp
      #   from_group: ISOLATEDSG
      #   rule_type: Egress
  - name: BastionSG
    rules:
      - name: MoshPublic
        description: "Public Mosh Access for bastions"
        from_port: 60000
        to_port: 61000
        protocol: udp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      - name: SSHPublic
        description: "Public Access for bastions"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
  - name: WebSG
    rules:
      - name: HTTPS
        description: "HTTPS from LB"
        from_port: 443
        to_port: 443
        protocol: tcp
        from_group: LBSG
        rule_type: Ingress
      - name: WebSSH
        description: "SSH from Bastion"
        from_port: 22
        to_port: 22
        protocol: tcp
        from_group: BastionSG
        rule_type: Ingress
      - name: WebEGRESSIsolatedHTTPproxy
        description: "HTTP Proxy Egress Isolated"
        from_port: 8080
        to_port: 8080
        protocol: tcp
        from_group: ISOLATEDSG
        rule_type: Egress
      - name: WebEGRESSIsolatedHTTP
        description: "HTTP Egress Isolated"
        from_port: 80
        to_port: 80
        protocol: tcp
        from_group: ISOLATEDSG
        rule_type: Egress

  - name: AppSG
    rules:
      - name: AppEGRESSIsolatedHTTP
        description: "HTTP Egress Isolated"
        from_port: 80
        to_port: 80
        protocol: tcp
        from_group: ISOLATEDSG
        rule_type: Egress
      - name: AppEGRESSIsolatedHTTPproxy
        description: "HTTP Proxy Egress Isolated"
        from_port: 8080
        to_port: 8080
        protocol: tcp
        from_group: ISOLATEDSG
        rule_type: Egress
      - name: AppSSH
        description: "SSH from Bastion"
        from_port: 22
        to_port: 22
        protocol: tcp
        from_group: BastionSG
        rule_type: Ingress
      - name: AppHTTPS
        description: "HTTPS from LB"
        from_port: 443
        to_port: 443
        protocol: tcp
        from_group: WebSG
        rule_type: Ingress
      - name: AppHTTP
        description: "HTTP from LB"
        from_port: 80
        to_port: 80
        protocol: tcp
        from_group: WebSG
        rule_type: Ingress
      - name: AppTomCat
        description: "HTTP from LB"
        from_port: 8080
        to_port: 8080
        protocol: tcp
        from_group: WebSG
        rule_type: Ingress
      - name: InfraEGRESSLBHTTPS
        description: "HTTPSEgress To LB"
        from_port: 443
        to_port: 443
        protocol: tcp
        from_group: LBSG
        rule_type: Egress
  - name: ISOLATEDSG
    rules:
      - name: ISOBASIngress
        description: "Ingress Bastion"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: BastionSG
        rule_type: Ingress
      - name: ISOINFRAIngress
        description: "Ingress from LB"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: LBSG
        rule_type: Ingress
      - name: ISONODIngress
        description: "Ingress from WeB"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: WebSG
        rule_type: Ingress
      - name: ISOLBIngress
        description: "Ingress from APP"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: AppSG
        rule_type: Ingress
      - name: ISOMasterIngress
        description: "Ingress from DB"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: AppDBSG
        rule_type: Ingress
      - name: ISOSupportIngress
        description: "Ingress from support"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: SUPPORTSG
        rule_type: Ingress
      - name: ISOBASIngress
        description: "Ingress Bastion"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: BastionSG
        rule_type: Ingress
      - name: ISOINFRAIngress
        description: "Ingress from LB"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: LBSG
        rule_type: Ingress
      - name: ISONODIngress
        description: "Ingress from WeB"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: WebSG
        rule_type: Ingress
      - name: ISOLBIngress
        description: "Ingress from APP"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: AppSG
        rule_type: Ingress
      - name: ISOMasterIngress
        description: "Ingress from DB"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: AppDBSG
        rule_type: Ingress
      - name: ISOSupportIngress
        description: "Ingress from support"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: SUPPORTSG
        rule_type: Ingress

subnets:
  - name: PublicSubnet
    cidr: "192.168.1.0/24"
    routing_table: true
  - name: PrivateSubnetAPP
    cidr: "192.168.2.0/24"
    routing_table: false # this could be wrong [sborenst]
  - name: PrivateSubnetDB
    cidr: "192.168.3.0/24"
    routing_table: false # this could be wrong [sborenst]
  # - name: PrivateSubnetDB
  #   cidr: "192.168.4.0/24"
  #   routing_table: false # this could be wrong [sborenst]
  # - name: PrivateSubnetDBrtr1
  #   cidr: "192.168.5.0/24"
  #   routing_table: false # this could be wrong [sborenst]
  # - name: PrivateSubnetDBrtr2
  #   cidr: "192.168.6.0/24"
  #   routing_table: false # this could be wrong [sborenst]




instances:
  - name: "bastion"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    flavor:
      "ec2": "{{bastion_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
#    rootfs_size: "{{ rootfs_size_bastion }}"
    security_group: "BastionSG"
    subnet: "PublicSubnet"

  - name: "loadbalancer"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    flavor:
      "ec2": "{{loadbalancer_instance_type}}"
    image_id: F5AMI
    tags:
      - key: "AnsibleGroup"
        value: "f5"
      - key: "ostype"
        value: "network"
    security_group: "LBSG"
    subnet: "PublicSubnet"
    ## This is an ugly way to fix this.
    nodisk: true

  - name: "router"
    count: 1
    unique: true
    public_dns: true ##should be false
    dns_loadbalancer: false
    flavor:
      "ec2": "{{loadbalancer_instance_type}}"
    image_id: CISCOAMI
    tags:
      - key: "AnsibleGroup"
        value: "cisco"
      - key: "ostype"
        value: "network"
    security_group: "ROUTERSG" #This does not exist
    subnet: "PublicSubnet"
    ## This is an ugly way to fix this.
    nodisk: true

  - name: "web"
    count: "{{web_instance_count}}"
    public_dns: false
    dns_loadbalancer: false
    flavor:
      "ec2": "{{web_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "web"
      - key: "ostype"
        value: "linux"
    security_group: "WebSG"
    subnet: "PublicSubnet"

  - name: "app"
    count: "{{app_instance_count}}"
    public_dns: false
    dns_loadbalancer: false
    flavor:
      "ec2": "{{app_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "apps"
      - key: "ostype"
        value: "linux"
    security_group: "AppSG"
    subnet: "PublicSubnet"

  - name: "isolated"
    count: "{{isolated_instance_count}}"
    public_dns: false
    dns_loadbalancer: false
    flavor:
      "ec2": "{{isolated_instance_type}}"
    tags:
      - key: "AnsibleGroup"
        value: "isolated"
      - key: "ostype"
        value: "linux"
    security_group: "ISOLATEDSG"
    subnet: "PublicSubnet"
