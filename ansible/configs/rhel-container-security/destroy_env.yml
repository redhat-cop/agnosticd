---
- name: Build inventory for unsubscribe.
  hosts: localhost
  connection: local
  gather_facts: False
  become: no
  tasks:
    - when: cloud_provider == 'ec2'
      block:
      - name: Run infra-ec2-create-inventory Role
        include_role:
          name: infra-ec2-create-inventory

      - name: Run Common SSH Config Generator Role
        include_role:
          name: infra-common-ssh-config-generate
        when: "'bastions' in groups"

- import_playbook: ../../setup_runtime.yml

- name: Start instances if they are stopped
  hosts: localhost
  connection: local
  gather_facts: False
  become: no
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
    AWS_DEFAULT_REGION: "{{aws_region_final|d(aws_region)}}"
  tasks:
    - when:
        - stack_status is defined
        - stack_status == 'CREATE_COMPLETE'
      block:
        - name: Get instance Ids
          command: >-
            aws ec2 describe-instances
            --filters
            "Name=tag:Project,Values={{ project_tag }}"
            "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped"
            --query 'Reservations[*].Instances[*].InstanceId'
            --output text
          changed_when: false
          register: instanceids
          until: instanceids is succeeded
          retries: 10
          delay: "{{ 60|random(start=3, step=1) }}"

        - name: Start instances
          when: instanceids.stdout | trim | length > 0
          command: >-
            aws ec2 start-instances --instance-ids {{ instanceids.stdout | trim }}
          register: _startinstances
          until: _startinstances is succeeded
          retries: 10
          delay: "{{ 60|random(start=3, step=1) }}"
          ignore_errors: true

        - name: Wait for cluster instances
          when: instanceids.stdout | trim | length > 0
          command: >-
            aws ec2 wait instance-running
            --filters "Name=tag:Project,Values={{ project_tag }}"
          ignore_errors: true

- name: Unsubscribe systems from Satellite
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Set facts for ssh proxy
      set_fact:
        ansible_ssh_extra_args: >-
          {{ ansible_ssh_extra_args|d() }}
          -F {{hostvars.localhost.output_dir}}/{{ env_type }}_{{ guid }}_ssh_conf

    - name: Attempt to unsubscribe systems
      shell: "subscription-manager unsubscribe --all"
      ignore_errors: true
      ignore_unreachable: true

- name: Import default destroy playbook
  import_playbook: ../../cloud_providers/{{cloud_provider}}_destroy_env.yml
