#jinja2: lstrip_blocks: "True"
---
heat_template_version: 2018-03-02

description: >-
  Top level HOT for creating new project, network resources and instances.
  This template relies on ResourceGroups and a nested template that is
  called to provision instances, ports, & floating IPs.

resources:

  {{ guid }}-infra_key:
    type: OS::Nova::KeyPair
    properties:
      name: {{ guid }}-infra_key
      save_private_key: true

{% for network in networks %}
  {{ network['name'] }}-network:
    type: OS::Neutron::Net
    properties:
      name: "{{ guid }}-{{ network['name'] }}-network"
      shared: {{ network['shared'] }}

  {{ network['name'] }}-subnet:
    type: OS::Neutron::Subnet
    properties:
      name: "{{ guid }}-{{ network['name'] }}-subnet"
      network_id: {get_resource: {{ network['name'] }}-network}
{%   if network['dns_nameservers'] is defined %}
      dns_nameservers: [{{ network['dns_nameservers'] | list | join(",") }}]
{%   endif %}
      cidr: {{ network['subnet_cidr'] }}
      gateway_ip: {{ network['gateway_ip']|default("null") }}
      enable_dhcp: "{{ network['enable_dhcp']|default('True') }}"
{%   if 'allocation_start' in network %}
      allocation_pools:
        - start: {{ network['allocation_start'] }}
          end: {{ network['allocation_end'] }}
{%   endif %}

{%   if network['create_router'] | default(False) %}
  {{ network['name'] }}-router:
    type: OS::Neutron::Router
    properties:
      name: "{{ guid }}-{{ network['name'] }}-router"
      external_gateway_info:
        network: "{{ provider_network }}"
{%     if osp_public_subnet is defined %}
        external_fixed_ips:
        - subnet: "{{ osp_public_subnet }}"
{%     endif %}

  {{ network['name'] }}-router_private_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: {get_resource: {{ network['name'] }}-router}
      subnet: {get_resource: {{ network['name'] }}-subnet}
{%   endif %}

{%   if network['router_network'] | default(False) %}

  {{ network['name'] }}-router_private_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: {get_resource: {{ network['router_network']}}-router}
      subnet: {get_resource: {{ network['name'] }}-subnet}
{%   endif %}

{% endfor %}

  ###################
  # Security groups #
  ###################
{% for security_group in security_groups | list + default_security_groups | list
   if security_group.name in used_security_groups %}

  {{ security_group['name'] }}:
    type: OS::Neutron::SecurityGroup
    properties:
      name: {{ guid }}-{{ security_group['name'] }}
{%   if security_group['description'] is defined %}
      description: "{{ security_group['description'] }}"
{%   endif %}
{%   for rule in security_group.rules %}
{%     if rule['name'] is defined %}
  {{ guid }}-{{ security_group['name'] }}-rule_{{ rule['name'] }}:
{%     else %}
  {{ guid }}-{{ security_group['name'] }}-rule_{{ lookup('password', '/dev/null length=5 chars=ascii_letters,digits') }}:
{%     endif %}
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: {get_resource: {{ security_group['name'] }}}
      direction: {{ rule['direction'] | default(rule.rule_type) | lower }}
      protocol: {{ rule['protocol'] | lower }}
{%     if rule['description'] is defined %}
      description: {{ rule['description'] }}
{%     endif %}
{%     if rule['port_range_min'] is defined or
  rule.from_port is defined %}
      port_range_min: {{ rule['port_range_min'] | default(rule.from_port) }}
{%     endif %}
{%     if rule['port_range_max'] is defined or
  rule.to_port is defined %}
      port_range_max: {{ rule['port_range_max'] | default(rule.to_port) }}
{%     endif %}
{%     if rule['remote_ip_prefix'] is defined or
  rule.cidr is defined %}
      remote_ip_prefix: {{ rule['remote_ip_prefix'] | default(rule.cidr) }}
{%     endif %}
{%     if rule['remote_group'] is defined or
  rule.from_group is defined %}
      remote_group: {get_resource: {{ rule['remote_group'] | default(rule.from_group) }}}
{%     endif %}
{%   endfor %}
{% endfor %}

  #############
  # Instances #
  #############
{% for instance in instances %}
{%   for myinstanceindex in range(instance.count|int) %}
{%     set iname = instance.name if instance.count|int == 1 else [instance.name, loop.index] | join() %}
  ########### {{ iname }} ###########
{%     for network in instance['networks'] %}
  port_{{ network }}_{{ iname }}:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: {{ network }}-network }
{%       if instance.security_groups is defined %}
      security_groups:
{%         for security_group in instance.security_groups %}
        - {get_resource: {{ security_group }}}
{%         endfor %}
{%       else %}
      port_security_enabled: false
{%       endif %}
{%       if "fixed_macs" in instance | default(false) %}
{%         if network in instance.fixed_macs %}
      mac_address: "{{ instance.fixed_macs[network] }}"
{%         endif %}
{%       endif %}
{%       if "fixed_ips" in instance | default(false) %}
{%         if network in instance.fixed_ips %}
      fixed_ips:
        - ip_address: "{{ instance.fixed_ips[network] }}"
{%         endif %}
{%       endif %}

{%       if (instance.floating_ip | default(false) | bool or instance.public_dns | default(false)) and (instance.floating_ip_network  | default("") == network) %}
  fip_{{ network }}_{{ iname }}:
    type: OS::Neutron::FloatingIP
    depends_on:
      - {{ instance.floating_ip_network }}-router
      - {{ instance.floating_ip_network }}-router_private_interface
    properties:
      floating_network: {{ provider_network }}
{%         if osp_public_subnet is defined %}
      floating_subnet: "{{ osp_public_subnet }}"
{%         endif %}

  fip_association_{{ iname }}:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: {get_resource: fip_{{ network }}_{{ iname }}}
      port_id: {get_resource: port_{{ network }}_{{ iname }}}
    depends_on:
      - {{ instance.floating_ip_network }}-router
      - {{ instance.floating_ip_network }}-router_private_interface
{%       endif %}
{%     endfor %}
  server_{{ iname }}:
    type: OS::Nova::Server
    properties:
      name: {{ iname }}
      flavor: {{ instance.flavor.osp }}
      key_name: {get_resource: {{ guid }}-infra_key}
      config_drive: True
      image: {{ instance.image_id }}
      user_data: |
        #cloud-config
        ssh_authorized_keys: {{ all_ssh_authorized_keys | to_json }}
{%     if "userdata" in instance %}
{%       set _userdata = instance.userdata if instance.userdata is mapping else instance.userdata | from_yaml %}
{%       for key, value in _userdata.items() %}
        {{ key }}: {{ value | to_json }}
{%       endfor %}
{%     endif %}

      user_data_format: RAW
      networks:
{%     for network in instance['networks'] %}
        - port: {get_resource: port_{{ network }}_{{ iname }}}
{%     endfor %}
{%     if instance['metadata'] is defined %}
      metadata: {{ instance.metadata | combine(default_metadata) | to_json }}
{%     endif %}
{%     if instance.volumes is defined %}
      block_device_mapping_v2:
{%       for volume in instance.volumes %}
{%         set loopvolume = loop %}
{%         set vname = ["volume", iname, loopvolume.index] | join('_') %}
        - volume_id: { get_resource: {{ vname }} }
          boot_index: -1
{%       endfor %}
{%     endif %}



{%     if instance.volumes is defined %}
  #### Volumes for {{ iname }} ####
{%       for volume in instance.volumes %}
{%         set loopvolume = loop %}
{%         set vname = ["volume", iname, loopvolume.index] | join('_') %}
  {{ vname }}:
    type: OS::Cinder::Volume
    properties:
      size: {{ volume.volume_size | default(volume.size) }}
{%         if volume.volume_name is defined %}
      name: {{ volume.volume_name | default(volume.name) }}
{%         endif %}

{%       endfor %}
{%     endif %}
{%   endfor %}
{% endfor %}

{% if additional_fips | default( '' ) | length > 0 %}
{%   for fipname in additional_fips %}
  {{ fipname }}:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ additional_fips[fipname].network }}"
{%     if osp_public_subnet is defined %}
      floating_subnet: "{{ osp_public_subnet }}"
{%     endif %}
{%     if additional_fips[fipname].description is defined %}
      value_specs:
        description: "{{ additional_fips[fipname].description }}"
{%     endif %}
{%   endfor %}
{% endif %}

outputs:

  {{ guid }}-infra_key:
    description: The SSH infra key
    value: {get_attr: [{{ guid }}-infra_key, private_key]}

{% if additional_fips | default('') | length > 0 %}
{%   for fipname in additional_fips %}
  {{ fipname }}:
    description: {{ additional_fips[fipname].description }}
    value: { get_attr: [ {{ fipname }}, floating_ip_address ] }
{%   endfor %}
{% endif %}
