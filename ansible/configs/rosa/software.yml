---
- name: Generate user password if not defined
  when:
  - studentvm_user_use_password | bool
  - studentvm_user_password | default("") | length == 0
  set_fact:
    studentvm_user_student_password: >-
      {{ lookup('password', '/dev/null length={{ studentvm_user_password_length }} chars=ascii_letters,digits') }}

- name: Use provided password
  when:
  - studentvm_user_use_password | bool
  - studentvm_user_password | default("") | length > 0
  set_fact:
    studentvm_user_student_password: "{{ studentvm_user_password }}"

- name: Add GUID to /etc/skel/.bashrc
  lineinfile:
    path: "/etc/skel/.bashrc"
    regexp: "^export GUID"
    line: "export GUID={{ guid }}"

# If we don't delete the user the next task fails if the user already exists
- name: Ensure User does not exist
  become: true
  user:
    state: absent
    name: "{{ studentvm_user_name }}"
- name: Remove user home directory if it exists
  become: true
  file:
    state: absent
    path: "/home/{{ studentvm_user_name }} "

- name: User with Password
  when: studentvm_user_use_password | bool
  block:
  - name: Create user with password
    become: true
    user:
      state: present
      name: "{{ studentvm_user_name }}"
      password: "{{ studentvm_user_student_password | password_hash( 'sha512' ) }}"
      password_lock: true
      comment: GTPE Student
      group: users
      groups: "{{ 'wheel' if studentvm_user_enable_sudo | bool else '' }}"
      shell: /bin/bash

  - name: Enable password authentication
    become: true
    lineinfile:
      line: PasswordAuthentication yes
      regexp: '^ *PasswordAuthentication'
      path: /etc/ssh/sshd_config

  - name: Generate student SSH Key if no public key specified
    when: studentvm_user_public_key | default("") | length == 0
    become: true
    block:
    - name: Ensure .ssh directory exists
      file:
        state: directory
        path: "/home/{{ studentvm_user_name }}/.ssh"
        owner: "{{ studentvm_user_name }}"
        mode: 0700

    - name: Generate student SSH Key
      openssh_keypair:
        state: present
        comment: GPTE Student User
        path: "/home/{{ studentvm_user_name }}/.ssh/student"
        owner: "{{ studentvm_user_name }}"
        mode: 0600
      register: r_student_key

    - name: Read student Private SSH Key
      slurp:
        src: "/home/{{ studentvm_user_name }}/.ssh/student"
      register: r_student_private_key

    - name: Set Public and Private Key
      set_fact:
        studentvm_user_public_key: "{{ r_student_key.public_key }}"
        studentvm_user_private_key: "{{ r_student_private_key['content'] | b64decode }}"

  - name: Set student key
    when: studentvm_user_public_key | default("") | length > 0
    set_fact:
      studentvm_user_public_key: "{{ studentvm_user_public_key }}"

  - name: Add student public key to student vm
    authorized_key:
      user: "{{ studentvm_user_name }}"
      key: "{{ studentvm_user_public_key }}"

- name: Set up root user
  when: studentvm_user_enable_sudo | bool
  become: true
  block:
  - name: Disable root password authentication
    lineinfile:
      line: PermitRootLogin without-password
      regexp: '^ *PermitRootLogin'
      path: /etc/ssh/sshd_config

  - name: Allow passwordless sudo
    become: true
    lineinfile:
      path: '/etc/sudoers'
      state: present
      line: "{{ studentvm_user_name }}         ALL=(ALL)       NOPASSWD: ALL"
      insertafter: "'^{{ remote_user }}"

- name: Restart sshd
  become: true
  service:
    name: sshd
    state: restarted

- name: Ensure output_dir exists
  delegate_to: localhost
  become: false
  file:
    path: "{{ output_dir | default('/tmp')}}"
    state: directory

- name: Ensure output_dir/user_data.yaml file exists
  delegate_to: localhost
  become: false
  copy:
    content: ""
    dest: "{{ output_dir | default('/tmp') }}/user_data.yaml"
    force: false
    mode: 0664

- name: Print User Info for Password authentication
  when: studentvm_user_use_password | bool
  block:
  - name: Print User Info for Password authentication to stdout
    debug:
      msg: "{{ item }}"
    loop:
    - "user.info: user: {{ studentvm_user_name }}"
    - "user.info: ssh_command: ssh {{ studentvm_user_name }}@bastion.{{ subdomain_base }}"
    - "user.info: password: {{ studentvm_user_student_password }}"
    - "user.info: workstation: bastion.{{ subdomain_base }}"
  - name: Add User Info for Password authentication to user_data.yaml
    agnosticd_user_info:
      user: "{{ studentvm_user_name }}"
      data:
        ssh_command: "ssh {{ studentvm_user_name }}@bastion.{{ subdomain_base }}"
        password: "{{ studentvm_user_student_password }}"

- name: Step 00xxxxx software
  hosts: bastions
  gather_facts: false
  become: false
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  tasks:
    - tags:
        - install_awscli
      block:
        - name: Get awscli bundle
          get_url:
            url: https://s3.amazonaws.com/aws-cli/awscli-bundle.zip
            dest: /tmp/awscli-bundle.zip
        - name: Unzip awscli-bundle.zip
          unarchive:
            src: /tmp/awscli-bundle.zip
            dest: /tmp/
            remote_src: true
        - name: Install awscli
          command: /tmp/awscli-bundle/install -i /usr/local/aws -b /bin/aws
          args:
            creates: /usr/local/aws
          become: true
        - name: cleanup archive and tmp files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/awscli-bundle
            - /tmp/awscli-bundle.zip

    - tags:
        - create_aws_dir
      block:
        - name: Create .aws directory
          file:
            path: ~/.aws
            state: directory

    - tags:
        - create_aws_creds
      block:
        - name: Add aws credentials
          blockinfile:
            path: ~/.aws/credentials
            create: yes
            mode: 0600
            block: |-
              [default]
              aws_access_key_id={{ hostvars.localhost.student_access_key_id }}
              aws_secret_access_key={{ hostvars.localhost.student_secret_access_key }}

    - tags:
        - create_aws_config
      block:
        - name: Add aws config
          blockinfile:
            path: ~/.aws/config
            create: yes
            mode: 0600
            block: |-
              [default]
              region={{ aws_region }}

    - tags:
        - install_rosacli
      block:
        - name: Get ROSA CLI
          get_url:
            url: "{{ rosa_installer_url }}"
            dest: /tmp/rosa-linux.tar.gz
        - name: Unzip rosa-linux.tar.gz
          unarchive:
            src: /tmp/rosa-linux.tar.gz
            dest: /usr/local/bin/
            remote_src: true
          become: true
        - name: cleanup archive file
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/rosa-linux.tar.gz

    - tags:
        - verify_rosa_installer
      block:
        - name: Log into ROSA
          command: "/usr/local/bin/rosa login --token {{ rosa_token }}"
        - name: Verify permissions for ROSA
          command: "/usr/local/bin/rosa verify permissions"
        - name: Verify quota for ROSA
          command: "/usr/local/bin/rosa verify quota"

    - tags:
        - run_rosa_installer
      block:
        - name: Create ROSA Cluster
          command: "/usr/local/bin/rosa create cluster --cluster-name={{ rosa_cluster_name }}"

    - tags:
        - wait_rosa_installer
      block:
        - name: Wait 5 minutes for the ROSA installer to start
          pause:
            minutes: 5
        - name: Check for ROSA installer completion
          command: "/usr/local/bin/rosa describe cluster -c {{ rosa_cluster_name }} |grep ^State:|awk '{print $2}'"
          register: rosa_installer_status
          until: rosa_installer_status.stdout.find("ready") != -1
          retries: 60
          delay: 60

    - tags:
        - get_rosa_console_url
      block:
        - name: Get ROSA Console URL
          command: "/usr/local/bin/rosa describe cluster -c {{ rosa_cluster_name }} |grep '^Console URL:'|awk '{print $3}'"
          register: rosa_console_url

    - tags:
        - create_rosa_admin
      block:
        - name: Create ROSA admin user
          command: "/usr/local/bin/rosa create admin --cluster={{ rosa_cluster_name }} | grep 'oc login' | awk '{print $7}'"
          register: rosa_admin_result
        - name: Copy ROSA token to student user dir
          become: true
          ansible.builtin.copy:
            src: ~/.ocm.json
            dest: "~{{ student_name }}/.ocm.json"
            owner: "{{ student_name }}"
            mode: '0600'
            remote_src: true

    - when:
        - rosa_admin_result is defined
        - rosa_console_url is defined
      block:
        - name: Print ROSA admin credentials as user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "WARNING: with great power comes great responsibility. We monitor usage."
            - "Your AWS programmatic access is preconfigured in ~/.aws/credentials"
            - ""
            - "OpenShift admin user: cluster-admin"
            - "cluster-admin password: {{ rosa_admin_result.stdout }}"
            - ""
            - "OpenShift console URL: {{ rosa_console_url.stdout }}"
            - ""
            - "The ROSA CLI is in /usr/local/bin/rosa"
