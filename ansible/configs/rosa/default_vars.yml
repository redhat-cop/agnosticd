---
#### Things you can change ####

# Why is this config being deployed? Override for specific environments
# Some valid: development, ilt, production, event
purpose: development

# The {{ guid }} is used everywhere and it is what differentiates otherwise
# identical environments. Make this unique. Usually they are 4 characters, but
# it can be any reasonable length.
guid: notset

# These values will be added to the account tracking database
# and may be used as resources tags as well
owner_name: "{{ student_name }}"
owner_email: "{{ email }}"


#### Things you probably shouldn't change ####

# The output_dir holds all of the files generated during the deployment
# This includes generated Heat templates, SSH config, SSH keys
# This must be an absolute path and no vars (like $HOME or ~)
output_dir: /tmp/output_dir

# Used for tagging resources
# Not yet implemented
project_tag: "{{ env_type }}-{{ guid }}"

# This identifies the config being deployed
env_type: rosa

update_packages: false

worker_instance_count: 2

# ROSA Cluster Name
rosa_cluster_name: "{{ guid }}"

# ROSA Version
rosa_version: latest

# Where to download the ROSA installer from
rosa_installer_url: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/rosa/{{ rosa_version }}/rosa-linux.tar.gz"

### Common Host settings

## Networking (AWS)
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{ subdomain_base_short ~ subdomain_base_suffix }}"

### CLOUDFORMATIONS vars
zone_internal_dns: "{{ guid }}.internal."
chomped_zone_internal_dns: "{{ guid }}.internal"

infra_ec2_template_generate_auto_select_availability_zone: false

sandbox_enable_ui: true

# -------------------------------------------------------------------
# Default Variables for Amazon Web Services
# -------------------------------------------------------------------

# The type of cloud provider this will be deployed to
cloud_provider: ec2

# This is an account that must exist in OpenStack.
# It is used to create projects, access, Heat templates
admin_user: opentlc-mgr

# This is the user that Ansible will use to connect to the nodes it is
# configuring from the admin/control host
ansible_user: ec2-user

# -------------------------------------------------------------------
# AWS Infrastructure
# -------------------------------------------------------------------

# See cloud_providers/ec2_default_vars.yml
# See roles-infra/infra-ec2-project-create/defaults/main.yml

# The region to be used, if not specified by -e in the command line
aws_region: us-east-2

# The availability Zones for which to create worker MachineSets for.
# Leave empty for the default (set up one MachineSet for
# each availability zone).
# Set to 5 entries or less for deployment in Sandboxes (each MachineSet needs an EIP
# and Sandboxes only have 5 EIPs available).
openshift_machineset_aws_zones: []
# openshift_machineset_aws_zones:
# - us-east-1a
# - us-east-1b
# - us-east-1c

# -------------------------------------------------------------------
# Project Tag
# -------------------------------------------------------------------

project_tag: "{{ env_type }}-{{ guid }}"

# -------------------------------------------------------------------
# AWS Networking
# -------------------------------------------------------------------

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
# It needs to match the subdomain_base_suffix below
HostedZoneId: Z3IHLWJZOU9SRT

## Networking (AWS)
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base_short: "{{ guid }}"
subdomain_base: "{{ guid }}{{ subdomain_base_suffix }}"

zone_internal_dns: "{{ guid }}.internal."
chomped_zone_internal_dns: "{{ guid }}.internal"

bastion_public_dns: "bastion.{{ subdomain_base }}."
bastion_public_dns_chomped: "bastion.{{ subdomain_base }}"
vpcid_name_tag: "{{ subdomain_base }}"

# The OpenShift 4 base domain (must match the HostedZoneId)
ocp4_base_domain: "{{ subdomain_base }}"

# -------------------------------------------------------------------
# AWS EC2 Instances
# -------------------------------------------------------------------

# Bastion Configuration
bastion_instance_type: "t3a.small"
bastion_instance_image: RHEL82GOLD
#bastion_instance_platform: Linux/UNIX
# For standard (not GOLD) RHEL images:
#bastion_instance_platform: Red Hat Enterprise Linux
# used for on-demand capacity reservation:
bastion_instance_platform: >-
  {%- if 'RHEL' in bastion_instance_image -%}
  {%-   if 'GOLD' in bastion_instance_image -%}
  Linux/UNIX
  {%-   else -%}
  Red Hat Enterprise Linux
  {%-   endif -%}
  {%- else -%}
  Linux/UNIX
  {%- endif -%}

# Root Filesystem Size
bastion_rootfs_size: 30

instances:
- name: "bastion"
  count: 1
  unique: true
  public_dns: true
  alt_name:
  - clientvm
  image: "{{ bastion_instance_image }}"
  flavor:
    "ec2": "{{ bastion_instance_type }}"
  tags:
  - key: "AnsibleGroup"
    value: "bastions,clientvms"
  - key: "ostype"
    value: "linux"
  - key: "Purpose"
    value: "{{ purpose }}"
  - key: "project"
    value: "{{ project_tag }}"
  - key: "user"
    value: "{{ student_name }}"
  rootfs_size: "{{ bastion_rootfs_size }}"
  security_groups:
  - BastionSG
