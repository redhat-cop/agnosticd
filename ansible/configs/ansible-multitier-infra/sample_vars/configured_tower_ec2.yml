---
################################################################################
### EC2 Environment variables
################################################################################
env_type: ansible-multitier-infra       # Name of config to deploy
output_dir: /tmp/output_dir             # Writable working scratch directory
guid: defaultguid                            # Your Global UNIQUE Identifier
cloud_provider: ec2                     # Which AgnosticD Cloud Provider to use
ansible_user: ec2-user
remote_user: ec2-user
student_user: devops
student_password: r3dh4t1!

use_dynamic_dns: true

# Default instance type
instance_type: "t2.medium" 
tower_instance_type: "t2.xlarge"

# Default Image AMI in (AWS)
image: RHEL77GOLD

inventory_groups:
  - tower
  - webservers

security_groups:
  - name: TowerSG
    rules:
      - name: TowerHTTPPorts
        description: "HTTP Public"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: TowerHTTPsPorts
        description: "HTTPs Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      
      - name: TowerSSH
        description: "SSH public"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: HostSG
    rules:
      - name: FromHostsgTCP
        description: "Allow everything from HostSG nodes"
        from_port: 1
        to_port: 65535
        protocol: tcp
        from_group: HostSG
        rule_type: Ingress

      - name: FromHostsgUDP
        description: "Allow everything from HostSG nodes"
        from_port: 1
        to_port: 65535
        protocol: udp
        from_group: HostSG
        rule_type: Ingress

  - name: WebserverSG
    rules:
      - name: WebSerHTTPPorts
        description: "HTTP Public"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: WebSerHTTPsPorts
        description: "HTTPs Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

# Environment Instances
instances:
  - name: "control"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image: "{{ bastion_instance_image | default(image) }}"
    flavor:
      ec2: "{{ bastion_instance_type | default(instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_bastion | default(50)  }}"
    security_groups:
      - BastionSG
      - TowerSG 

  - name: "tower"
    count: 1 
    unqiue: true
    public_dns: true
    dns_loadbalancer: true
    image: "{{ tower_instance_image | default(image) }}"
    flavor:
      ec2: "{{ tower_instance_type | default(instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "tower"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - TowerSG
      - DefaultSG
      - HostSG

  - name: "webserver"
    count: "{{ node_instance_count | default(2) }}"
    public_dns: false
    image: "{{ webserver_instance_image | default(image) }}"
    flavor:
      ec2: "{{ webserver_instance_type | default(instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "webservers"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - HostSG
      - WebserverSG
      - DefaultSG

common_packages:
  - python
  - python2-pip
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - git
  - vim-enhanced
  - at
  - gcc
  - ansible

update_packages: true

software_to_deploy: tower

tower_version: 3.7.2-1
tower_hostname: "tower1.{{ subdomain_base }}"
devops_password_tower: r3dh4t1!

#Define users you want to create. Set superuser: yes to make user system wide System Administrator
tower_user_accounts: 
  - user: devops
    password: "{{ devops_password_tower }}"
    email: devops@example.com
    firstname: Devon
    lastname: Operations
    superuser: yes

tower_projects:
  - name: Webserver SCM
    description: Webserver Deployment Project
    organization: Default
    scm_url: https://github.com/wilson-walrus/ansible-automation-platform-labs.git
    scm_type: git
    state: present
    tower_host: "{{ tower_hostname }}"  
    tower_username: admin
    tower_password: "{{ tower_admin_password }}"

tower_inventories:
  - name: Webserver Inventory
    description: Webserver Inventory
    organization: Default

tower_inventory_source:
  - name: Webserver Static
    description: Sourced from project
    inventory: Webserver Inventory
    source: scm
    source_project: Webserver SCM
    source_path: hosts-ec2
    update_on_launch: yes
    state: present

tower_credentials:
  - name: Webserver Private Key
    username: ec2-user
    description: Private key to connect to Webservers
    organization: Default
    type: ssh
    become_method: sudo
    state: present
    ssh_key_data: "{{ lookup('file', '{{ output_dir}}/{{ guid }}key') }}"

tower_job_templates:
  - name: Webserver Deploy
    description: Deploy Webservers
    inventory: Webserver Inventory
    credential: Webserver Private Key
    project: Webserver SCM
    playbook: main.yml
    become: yes
    ask_extra_vars: no

...