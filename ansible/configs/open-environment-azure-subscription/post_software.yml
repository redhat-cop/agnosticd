---
- name: Step 005 Post Software
  hosts: localhost
  connection: local
  become: false
  tags:
  - step005
  - post_software
  tasks:
  - ansible.builtin.debug:
      msg: "Step 005 Post Software - Starting"

  - name: Print AAP Information
    when: enable_aap_email | default(false) | bool
    agnosticd_user_info:
      msg: |
        Ansible Automation Platform on Azure - Open Environment.

        Welcome to the Red Hat Ansible Automation Platform on Microsoft Azure RHPDS.
        This Environment gives Red Hatters on demand access to an Azure environment with access to the Ansible Automation Platform on Azure service offering. This time bound sandbox offers access to experience the Ansible Automation Platform on Azure - Managed Application.  You as a Red Hat associate will be enabled to test, create, and demo this offering!  YOU will help make our customers and account teams successful.

        The demo guide is available here https://docs.google.com/document/d/1TFFVL5-gcX7FeeIXItr1LxiUAeTb2aHevyNZPt1rucs/edit?usp=sharing

  - name: Print Azure Subscription Based Sandbox Subscription Information (internal user)
    when: internal_user | default(false) | bool
    agnosticd_user_info:
      msg: |
        We have temporarily allocated subscription {{ assignedsubscription.subscriptions[0].subscription_id }} in the redhat0.onmicrosoft.com Azure organization to you.
        You can log into https://portal.azure.com using your Red Hat SSO credentials.

  - name: Print Azure Subscription Based Sandbox Subscription Information (external user)
    when: not internal_user | default(false) | bool
    agnosticd_user_info:
      msg: |
        We have temporarily allocated subscription {{ assignedsubscription.subscriptions[0].subscription_id }} in Azure to you.

  - name: Print Azure Subscription Based Sandbox Subscription Information
    agnosticd_user_info:
      msg: |
        NOTE: This subscription may default to low quotas and disabled Resource Providers.  You may request quota extensions and enable Resource Providers as needed.
        NOTE: When this OPEN environment is deleted, the subscription will be reallocated to someone else and all of its resource groups will be deleted.  All data will be irrecovably removed.
        Before retiring your OPEN environment, please try to clean up any App Registrations that you have created to reduce clutter in Azure.
        Please regularly back up your data and script your changes in case you need to rebuild.
        Please see this page for more information: https://www.opentlc.com/azure/openenv_sub_based_documentation.html
        WARNING: Please do NOT delete your subscription.  We will be notified and will have to re-enable it and it could cause problems for subsequent users.

  - name: Print Azure Subscription Based Sandbox Resource Group Information
    when: not enable_aap_email | default(false) | bool
    agnosticd_user_info:
      msg: |
        The resource group 'openenv-{{ guid }}' was pre-created in your temporary subscription.
        When this OPEN environment is deleted, the resource group will be removed and all data will be irrecovably removed.

  - name: Print Azure OPEN Environment Details
    when:
    - azpass is defined
    - not enable_aap_email | default(false) | bool
    agnosticd_user_info:
      msg: |

        Your Azure environment details:
        Resource Group: openenv-{{ guid }}
        DNS Zone: {{ guid }}.{{ azure_root_dns_zone }}
        Application: openenv-{{ guid }}
        Application/Client/Service Principal ID: {{ azapp.applications[0].app_id }}
        Password: {{ azpass }}
        Tenant ID: {{ azure_tenant }}
        Subscription ID: {{ assignedsubscription.subscriptions[0].subscription_id }}

        Azure CLI quickstart:
        export GUID={{ guid }}
        export CLIENT_ID={{ azapp.applications[0].app_id }}
        export PASSWORD={{ azpass }}
        export TENANT={{ azure_tenant }}
        export SUBSCRIPTION={{ assignedsubscription.subscriptions[0].subscription_id }}
        export RESOURCEGROUP=openenv-{{ guid }}

        curl -L https://aka.ms/InstallAzureCli | bash

        Login to the subscription using the service principal:
        az login --service-principal -u $CLIENT_ID -p $PASSWORD --tenant $TENANT

        Login to the subscription using web authentication and your SSO credentials:
        az login --tenant $TENANT
        ...Follow the instructions that appear next...

        az account set --subscription $SUBSCRIPTION

        See https://docs.microsoft.com/en-us/cli/azure/install-azure-cli for more info on installing the azure CLI
        See https://docs.microsoft.com/en-us/cli/azure/ for full documentation of the azure CLI

  - name: Print Info For Manual ARO Installation
    when:
    - not install_aro | default(false) | bool
    - aro_install_prep_only | default(false) | bool
    - azpass is defined
    agnosticd_user_info:
      msg: |
        Example ARO installation commands (log in using az login command from above):
        az network vnet create --resource-group openenv-{{ guid }} --name aro-vnet-{{ guid }} --address-prefixes 10.0.0.0/22
        az network vnet subnet create --resource-group openenv-{{ guid }} --vnet-name aro-vnet-{{ guid }} --name master-subnet --address-prefixes 10.0.0.0/23 --service-endpoints Microsoft.ContainerRegistry
        az network vnet subnet create --resource-group openenv-{{ guid }} --vnet-name aro-vnet-{{ guid }} --name worker-subnet --address-prefixes 10.0.2.0/23 --service-endpoints Microsoft.ContainerRegistry
        az network vnet subnet update --name master-subnet --resource-group openenv-{{ guid }} --vnet-name aro-vnet-{{ guid }} --disable-private-link-service-network-policies true
        az aro create --resource-group openenv-{{ guid }} --name aro-cluster-{{ guid }} --vnet aro-vnet-{{ guid }} --master-subnet master-subnet --worker-subnet worker-subnet --client-id {{ azapp.applications[0].app_id }} --client-secret '{{ azpass }}' --pull-secret @/path/to/pull-secret.txt

  - name: Provide Pre-Installed ARO Information
    when:
    - install_aro | default(false) | bool
    - not enable_aap_email | default(false) | bool
    agnosticd_user_info:
      msg: |

        IMPORTANT: Please review the ARO Demo Guide at https://red.ht/ARORHPDS

        Your ARO Console: {{ az_aro4_console_url }}
        Your ARO Kubernetes/OpenShift API Endpoint: {{ az_aro4_public_api_url }}

        Username 'kubeadmin' Credentials: {{ az_aro4_kubeadmin_password.stdout }}

        You can SSH using the following command:
        ssh {{ remote_user }}@bastion.{{ guid }}.{{ cluster_dns_zone }}
        Password: {{ generated_password }}
      data:
        aro_console: "{{ az_aro4_console_url }}"
        aro_kube_password: "{{ az_aro4_kubeadmin_password.stdout }}"
        aro_public_api_url: "{{ az_aro4_public_api_url }}"

  - name: Update user info
    agnosticd_user_info:
      data:
        azure_tenant: "{{ azure_tenant }}"
        azure_subscription: "{{ assignedsubscription.subscriptions[0].subscription_id }}"
        azure_resource_group: "openenv-{{ guid }}"
        azure_dns_zone: "{{ guid }}.{{ azure_root_dns_zone }}"
        azure_application: "openenv-{{ guid }}"
        azure_service_principal_id: "{{ azapp.applications[0].app_id }}"
        azure_service_principal_password: "{{ azpass }}"
        azure_tenant_id: "{{ azure_tenant }}"
        bastion_ssh_command: "ssh {{ remote_user }}@bastion.{{ guid }}.{{ cluster_dns_zone }}"
        bastion_public_hostname: "bastion.{{ guid }}.{{ cluster_dns_zone }}"
        bastion_ssh_user_name: "{{ remote_user }}"
        guid: "{{ guid }}"

  - name: Provide installed bastion data
    when:
    - azure_deploy_bastion | default(false) | bool
    agnosticd_user_info:
      data:
        bastion_ssh_command: "ssh {{ remote_user }}@bastion.{{ guid }}.{{ azure_root_dns_zone }}"
        bastion_public_hostname: "bastion.{{ guid }}.{{ cluster_dns_zone }}"
        bastion_ssh_user_name: "{{ remote_user }}"
        bastion_ssh_password: "{{ generated_password }}"

  - name: Deploy Showroom on shared cluster
    when: showroom_deploy_shared_cluster_enable | default(false) | bool
    include_role:
      name: ocp4_workload_showroom

- name: Step 005.2 Lab Documentation (Showroom)
  hosts: bastions
  become: true
  gather_facts: false
  tasks:
  # Workaround to deploy Showroom on bastion VM until podified version
  # is available via workload
  - name: Deploy Showroom
    when: showroom_deploy | default(false) | bool
    block:
    - name: Set Ansible Python interpreter to system python
      ansible.builtin.set_fact:
        ansible_python_interpreter: /usr/libexec/platform-python

    # Workaround to generate a showroom password to avoid
    # reusing the rosa user's password. Can be removed
    # once Showroom uses SSH keys to log into the terminal
    - name: Generate showroom user password
      when: showroom_user_password | default("") | length == 0
      ansible.builtin.set_fact:
        _showroom_user_password: >-
          {{ lookup('password', '/dev/null chars=ascii_letters,digits '
              ~ 'length=' ~ showroom_user_password_length | default(16)
          ) }}

    - name: Use provided showroom user password
      when: showroom_user_password | default("") | length > 0
      ansible.builtin.set_fact:
        _showroom_user_password: >-
          {{ showroom_user_password }}

    - name: Call Showroom role
      vars:
        common_password: "{{ _showroom_user_password }}"
      ansible.builtin.include_role:
        name: showroom

- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
  - post_flight_check
  tasks:
  - ansible.builtin.debug:
      msg: "Post-Software checks completed successfully"
