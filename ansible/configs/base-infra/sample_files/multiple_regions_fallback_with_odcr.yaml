---
cloud_provider: ec2
env_type: base-infra
inventory_groups:
  - bastions

bastion_instance_image: RHEL9-default

# Use the information from the infra-images role to determine the platform
bastion_instance_platform: >-
  {%- if agnosticd_images.bastion.platform_details | default('') == 'Red Hat BYOL Linux' -%}
  Linux/UNIX
  {%- else -%}
  Red Hat Enterprise Linux
  {%- endif -%}

bastion_instance_type: t3a.small
# If you try with one of those:
#bastion_instance_type: g5.xlarge
#bastion_instance_type: g6.xlarge
#bastion_instance_type: g6.12xlarge
# it'll loop on different regions until it gets a reservation.

# Instead of aws_region, specify a list of regions you want to loop on
agnosticd_aws_capacity_reservation_regions:
  - eu-west-3
  - eu-central-1
  - us-east-2
  - us-east-1
  - us-west-2
  - us-west-1

agnosticd_aws_capacity_reservations:
  az1:
    - instance_count: 1
      instance_platform: "{{ bastion_instance_platform }}"
      instance_type: "{{ bastion_instance_type }}"

# Define the availability zone based on the results of the on-demand capacity reservation
# module. Use the az 'az1' as defined above.
# That variable is then used in the default cloudformation template to place the VPC.
aws_availability_zone: >-
  {{ agnosticd_aws_capacity_reservation_results.reservations.az1.availability_zone }}

# Don't install common packages
update_packages: false  # Do you want to run a full yum update
bastion_install_basic_packages: false
agd_install_common: false # Immutable OS
config_user_preferred_python: false
