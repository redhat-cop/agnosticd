---
- name: Step 005 post software
  hosts: localhost
  gather_facts: false
  become: true
  tags:
    - step005
    - post_software

  tasks:

    - name: "Post-Software tasks Started"
      ansible.builtin.debug:
        msg: "Post-Software tasks Started"

    - name: Report Access Information for CNV
      when:
        - cloud_provider == "openshift_cnv"
      vars:
        _bastion_inventory_name: "{{ groups['bastions'][0] }}"
        _bastion_ssh_password: "{{ hostvars[bastion_hostname]['student_password'] }}"
        _kubeadmin_password: "{{ hostvars[bastion_hostname]['kubeadmin_password']['content'] | b64decode }}"
      block:
        - name: Print access user info
          agnosticd_user_info:
            msg: |
              You can access your bastion via SSH:
              ssh {{ student_name }}@{{ openshift_cnv_ssh_address }} -p {{ hostvars[groups['bastions'][0]].bastion_ssh_port }}

              Enter ssh password when prompted: {{ hostvars[groups['bastions'][0]]['student_password'] }}

        - name: Save user data
          agnosticd_user_info:
            data:
              cloud_provider: "{{ cloud_provider }}"
              ssh_command: "sh {{ student_name }}@{{ openshift_cnv_ssh_address }} -p {{ hostvars[groups['bastions'][0]].bastion_ssh_port }}"
              ssh_password: "{{ student_password }}"
              ssh_username: "{{ student_name }}"
              guid: "{{ guid }}"
              targethost: "{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
              targetport: "{{ hostvars[groups['bastions'][0]].bastion_ssh_port }}"
              subdomain: "{{ guid }}{{ subdomain_base_suffix }}"
              subdomain_internal: "{{ chomped_zone_internal_dns | default('') }}"
          vars:
            student_name: "{{ ansible_service_account_user_name }}"
          register: r_user_data


    - name: Output ssh user_info for ec2 based deploys
      when:
        - cloud_provider == "ec2"
      block:
        - name: Set ssh user_info
          agnosticd_user_info:
            msg: "{{ __user_info }}"
          loop:
            - "To Access development node via SSH:"
            - "ssh_command: ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
            - "Enter ssh password when prompted: {{ student_password }}"
            - ""
          loop_control:
            loop_var: __user_info

        - name: Save user data
          agnosticd_user_info:
            data:
              cloud_provider: "{{ cloud_provider }}"
              ssh_command: "ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
              ssh_password: "{{ student_password }}"
              ssh_username: "{{ student_name }}"
              guid: "{{ guid }}"
              targethost: "{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
              subdomain: "{{ guid }}{{ subdomain_base_suffix }}"
              subdomain_internal: "{{ chomped_zone_internal_dns | default('') }}"
          vars:
            student_name: "{{ ansible_service_account_user_name }}"
          register: r_user_data

    - name: Deploy Bookbag
      when: bookbag_git_repo is defined
      ansible.builtin.include_role:
        name: bookbag
      vars:
        ACTION: create

- name: PostSoftware flight-check
  hosts: bastions[0]
  gather_facts: true
  become: true
  tags:
    - showroom

  tasks:

    - name: Deploy Showroom Web Interface
      when:
        - showroom_git_repo is defined
        - nookbag_git_repo is not defined
      ansible.builtin.include_role:
        name: showroom

    - name: Deploy nookbag Web Interface
      when:
        - nookbag_git_repo is defined
      ansible.builtin.include_role:
        name: nookbag

- name: Run post_software_validation playbook
  when: >-
    agd_post_software_validation | default(false) | bool
      or agd_validation | default(false) | bool
  ansible.builtin.import_playbook: post_software_validation.yml
  tags:
    - post_software_validation
    - agd_validation

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:

    - name: "Post-Software checks completed successfully"
      ansible.builtin.debug:
        msg: "Post-Software checks completed successfully"
...
