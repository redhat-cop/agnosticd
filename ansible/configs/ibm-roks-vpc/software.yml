---
- name: Step 000 Software
  hosts: localhost
  connection: local
  become: false
  tags:
    - step001
    - software
  tasks:
    - debug:
        msg: "Software tasks Started"

- name: Software deployment
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - actual_sausage_making
  tasks:
    ## Authenticated alredy from infrastructure creation
    ## Cluster Creation
    - name: Create ROKS cluster
      uri:
        url: "{{ ibm_cloud_api_container_v2_url }}/createCluster"
        method: POST
        body_format: json
        status_code: 201
        headers:
          Authorization: Bearer {{ ibm_access_token }}
        body: '{
          "cosInstanceCRN": "{{ roks_cos_id }}",
          "cseACLEnabled": true,
          "disablePublicServiceEndpoint": false,
          "kubeVersion": "{{ roks_openshift_version }}",
          "name": "{{ guid }}-rhpds",
          "podSubnet": "{{ roks_subnet_pod }}",
          "provider": "vpc-gen2",
          "serviceSubnet": "{{ roks_subnet_service }}",
          "workerPool": {
            "diskEncryption": true,
            "flavor": "{{ roks_compute_type }}",
            "isolation": "public",
            "name": "default",
            "vpcID": "{{ roks_vpc_id }}",
            "workerCount": {{ roks_compute_count }},
            "zones": [
              {
                "id": "{{ roks_zone }}",
                "subnetID": "{{ roks_subnet_id }}"
              }
            ]
          }
        }'
      register: r_new_roks
      tags: create-roks
    - debug:
        var: r_new_roks
        verbosity: 2
    - name: Set fact for ROKS Cluster ID
      set_fact:
        roks_cluster_id: "{{ r_new_roks.json.clusterID }}"
      tags: store-roks-id
    - name: Pausing for 45 minutes to allow the ROKS cluster to build
      pause:
        minutes: 45
    ## Re-Authenticating because token only good for 60 minutes
    ## and we don't want it to expire
    - name: Authorize to get bearer token for REST calls
      uri:
        url: "{{ ibm_cloud_api_iam_url }}"
        method: POST
        body_format: form-urlencoded
        body: "grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey&apikey={{ ibm_admin_api_key }}"
      register: r_token
      tags: create-token
    - name: Set fact for bearer token
      set_fact:
        ibm_access_token: "{{ r_token.json.access_token }}"
      tags: store-token
    ## Now let us wait for the cluster to come alive (2 minutes between checks)
    - pause:
        seconds: 15
    - name: Wait for the ROKS cluster to finish deploying
      uri:
        url: "{{ ibm_cloud_api_container_v2_url }}/getCluster?cluster={{ roks_cluster_id }}"
        method: GET
        status_code: 200,404,500
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      register: r_existing_roks
      tags: retrieve-roks
      until: r_existing_roks.json.state is defined and r_existing_roks.json.state == "normal"
      retries: 30
      delay: 120
    - name: Download cluster client configuration
      uri:
        url: "{{ ibm_cloud_api_container_v1_url }}/{{ roks_cluster_id }}/config/admin"
        method: GET
        dest: "{{ output_dir }}/{{ r_roks.json.id }}.zip"
        headers:
          Authorization: Bearer {{ ibm_access_token }}
      tags: get-certificates
    - name: Unarchiving the client config zip file
      unarchive:
        src: "{{ output_dir }}/{{ r_roks.json.id }}.zip"
        dest: "{{ output_dir }}"
    - name: Retrieve file names
      find:
        paths: "{{ output_dir }}/kubeConfig000000000"
        recurse: yes
        file_type: file
      register: r_files
    - name: Displaying ROKS cluster details
      debug:
        var: r_existing_roks
        verbosity: 2
    - name: Passing along the cluster info
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
        - "ROKS RHPDS Lab Guide (README IMPORTANT!): https://red.ht/ROKSRHPDS"
        - "Control Plane Console: {{ r_existing_roks.json.masterURL }}/console"
    - name: Passing along the cluster admin
      agnosticd_user_info:
        msg: "=== {{ item.split('/')[-1] }} ===\n{{ lookup('file', item) }}"
      with_items: "{{ r_files.files | map(attribute='path') | list }}"

- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Software checks completed successfully"
