---
### AWS EC2 Environment settings

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
#HostedZoneId: Z3IHLWJZOU9SRT
# The region to be used, if not specified by -e in the command line
#aws_region: us-east-1
# The key that is used to

## Networking (AWS)
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{ subdomain_base_short }}{{ subdomain_base_suffix }}"
zone_internal_dns: "{{ guid }}.internal."
chomped_zone_internal_dns: "{{ guid }}.internal"

## Environment Sizing
# Instance Type
instance_type: "t3a.medium"

#bastion_instance_type: "t3a.medium"
# Image ID
# __image: RHELAMI

control_user_ssh_config: ./files/ssh_config.j2

security_groups:

  - name: BastionSG
    rules:
      - name: BastionHTTPSPorts
        description: "Cockpit HTTPS Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: NodeSG
    rules:
      - name: FromNodeSGtcp
        description: "Allow everything from HostSG nodes"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: NodeSG
        rule_type: Ingress

      - name: FromNodeSGudp
        description: "Allow everything from HostSG nodes"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: NodeSG
        rule_type: Ingress

      - name: FromBastionTCP
        description: "Allow everything from Bastion"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: BastionSG
        rule_type: Ingress

      - name: FromBastionUDP
        description: "Allow everything from Bastion"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: BastionSG
        rule_type: Ingress


workstation_instance_image: "RHEL84GOLD"
node_instance_image: "RHEL84GOLD"
rootfs_size_workstation: 30
rootfs_size_node: 30
#rhel8lab_device1: /dev/xvdb

# Instance type
workstation_instance_type: "{{ instance_type }}"
node_instance_type: "{{ instance_type }}"

###
instances:
  - name: bastion
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image_id: "{{ workstation_instance_image | default(aws_default_image) }}"
    image: "{{ workstation_instance_image | default(aws_default_image) }}"
    flavor:
      ec2: "{{workstation_instance_type | default(instance_type) }}"
      osp: "{{workstation_instance_type | default(instance_type) }}"
      azure: Standard_A2_V2
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_workstation }}"
    security_groups:
      - BastionSG
            
  - name: "node"
    count: 4
    public_dns: false
    image_id: "{{ node_instance_image | default(aws_default_image) }}"
    image: "{{ node_instance_image | default(aws_default_image) }}"
    flavor:
      ec2: "{{node_instance_type | default(instance_type) }}"
      azure: "Standard_A2_V2"
      osp: "{{node_instance_type | default(instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "nodes"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_node }}"
    volumes:
      - device_name: /dev/xvda
        size: 5
      - device_name: /dev/xvdb
        size: 5
      - device_name: /dev/xvdc
        size: 5
      - device_name: /dev/xvdd
        size: 5
      - device_name: /dev/xvd5
        size: 5
    key_name: "{{key_name}}"
    security_groups:
      - NodeSG      
