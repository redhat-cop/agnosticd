---
- import_playbook: ../../include_vars.yml

- name: Delete Infrastructure
  hosts: localhost
  connection: local
  gather_facts: False
  become: no
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
    AWS_DEFAULT_REGION: "{{aws_region_final|d(aws_region)}}"
  tasks:
    - name: Fetch autoscaling name
      slurp:
        src: "{{output_dir}}/{{ env_type }}.{{ guid }}.AutoScalingGroupClientVM"
      register: asg_r
      ignore_errors: yes

    - when: asg_r is succeeded
      block:
        - name: Delete AutoScalingGroupClientVM
          command: >-
              aws autoscaling delete-auto-scaling-group --force-delete --auto-scaling-group-name {{asg_r.content|b64decode}}
          ignore_errors: yes

        - name: Delete instance
          ec2_instance:
            state: absent
            filters:
              instance-state-name: running
              "tag:Project": "{{project_tag}}"
          when: project_tag is defined

        - name: Delete clientvms DNS names
          command: >-
            aws route53 change-resource-record-sets
            --hosted-zone-id {{HostedZoneId}}
            --change-batch file:///{{output_dir}}/{{env_type}}-{{guid}}_clientvms_dns_delete.json
          ignore_errors: yes

        - name: Fetch EIP for clientvms 
          slurp:
            src: "{{output_dir}}/{{env_type}}-{{guid}}_clientvms_eip.json"
          register: clientvms_eip_r
          ignore_errors: yes

        - set_fact:
            clientvms_eip: "{{ clientvms_eip_r.content|b64decode|from_json }}"

        - name: Delete EIP of the clientVMs
          ec2_eip:
            release_on_disassociation: yes
            ip: "{{ _ip }}"
            state: absent
          loop: "{{ clientvms_eip }}"
          loop_control:
            loop_var: _ip

    - name: Delete S3 bucket
      s3_bucket:
        name: "{{ env_type }}-{{ guid }}"
        state: absent
        force: yes
        region: "{{ aws_region_final|d(aws_region) }}"
      tags:
        - remove_s3
      register: s3_result
      until: s3_result is succeeded
      retries: 5
      delay: 60
      ignore_errors: yes
      when: cloud_provider == 'ec2'

    - name: report s3 error
      fail:
        msg: "FAIL {{ project_tag }} delete s3"
      when:
        - s3_result is not succeeded
        - cloud_provider == 'ec2'

    - name: Run infra-ec2-template-destroy
      include_role:
        name: "infra-{{cloud_provider}}-template-destroy"
      when: cloud_provider == 'ec2'

- name: Import default azure destroy playbook
  import_playbook: ../../cloud_providers/azure_destroy_env.yml
  when: cloud_provider == 'azure'
