---
- name: Step 002 Post Infrastructure, Configuring Bastion Hosts
  hosts: bastions
  become: true
  gather_facts: false
  tags:
    - step002
  tasks:
    - name: Ping bastion
      ping:

    - include_role:
        name: bastion
      when: install_bastion | bool

    - name: Enable password authentication
      replace:
        replace: "PasswordAuthentication yes"
        regexp: '^ *PasswordAuthentication.*'
        path: /etc/ssh/sshd_config
      when: install_student_user | bool

    - include_role:
        name: bastion-student-user
      when: install_student_user | bool

    - name: Check if open-init exists
      stat:
        path: /usr/local/bin/open-init.sh
      register: open_init

    - name: Execute open-init script on bastion
      command: "/usr/local/bin/open-init.sh {{ student_name }} {{ student_password | d(hostvars[groups.bastions.0].student_password) }}"
      when:
        - open_init.stat.exists
        - open_init.stat.executable

    - name: Print Student SSH access as user.info
      debug:
        msg: "{{ item }}"
      with_items:
        - "user.info: "
        - "user.info: You can access your bastion via SSH:"
        - "user.info: SSH Access: ssh {{ student_name }}@{{ groups.bastions.0 ~ '.' ~ osp_cluster_dns_zone }}"

    - name: Print Student SSH password as user.info
      debug:
        msg: "user.info: SSH password: {{ student_password | d(hostvars[groups.bastions.0].student_password) }}"
      when: print_student_password | default(true) | bool

    - name: Print guacamole information as user.info
      debug:
        msg: "{{ item }}"
      with_items:
        - "user.info: "
        - "user.info: To access to guacamole use the following credentials:"
        - "user.info: Username: {{ student_name }}"
        - "user.info: Password: {{ student_password | d(hostvars[groups.bastions.0].student_password) }}"
      when:
        - open_init.stat.exists
        - open_init.stat.executable


- name: Set ssh extra args for all hosts, use ssh_config just created
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  ignore_errors: false
  tags:
    - step001
    - ssh_args
  tasks:
    - name: add -F option ansible_ssh_extra_args
      set_fact:
        ansible_ssh_extra_args: "{{ ansible_ssh_extra_args|d() }} -F {{ hostvars['localhost'].ansible_ssh_config }}"

- name: Step 002 Post Infrastructure, Configuring Satellite
  hosts: satellites
  become: true
  gather_facts: false
  tags:
    - step002
  tasks:
    - name: Set hostname as a fact
      set_fact:
        satellite_hostname: "satellite.{{ guid ~ '.' ~ osp_cluster_dns_zone }}"
    - name: Reset satellite instance_id
      command: "hammer settings set --name instance_id --value {{ 9995 | random | to_uuid }}"
    - name: Change hostname for satellite
      command: "satellite-change-hostname {{ satellite_hostname }} -u {{ satellite_admin }} -p {{ satellite_admin_password }} -y"
    - name: Cleanup old hosts
      command: "hammer host delete --name {{ item }}"
      loop:
      - satellite.bdj7s.red.osp.opentlc.com
      - aqua.example.com
      - skylab.example.com

- name: Step 002 Post Infrastructure, Configuring Satellite hosts
  hosts: satellite_hosts
  become: true
  gather_facts: false
  tags:
    - step002
  tasks:
    - name: Remove old katello-ca-consumer
      command: rpm -e katello-ca-consumer-satellite.bdj7s.red.osp.opentlc.com-1.0-1.noarch
    - name: Purge subscriptions
      shell: 'subscription-manager clean'
    - name: Install new katello-ca-consumer
      command: rpm -Uvh http://{{ satellite_hostname }}/pub/katello-ca-consumer-latest.noarch.rpm
    - name: Register again to satellite
      redhat_subscription:
        state: present
        server_hostname: "{{ satellite_hostname }}"
        activationkey: "{{ satellite_hosts_register_key }}"
        org_id: "{{ satellite_org_label }}"
  vars:
    satellite_hostname: "{{ hostvars[groups.satellites.0]['satellite_hostname'] }}"
