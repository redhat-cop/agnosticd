## Subscription Settings
repo_method: satellite
satellite_org: Red_Hat_GPTE_Labs
satellite_activationkey: rhel8-summit
satellite_url: labsat.opentlc.com
use_content_view: false

rhel_repos:
   - "rhel-8-for-x86_64-baseos-rpms"
   - "rhel-8-for-x86_64-appstream-rpms"
   - "ansible-2-for-rhel-8-x86_64-rpms"
   - "rhel-8-for-x86_64-sap-solutions-rpms"
   - "rhel-8-for-x86_64-sap-netweaver-rpms"

### Common Host settings

install_ipa_client: false

install_student_user: false

# Do you want to run a full yum update
update_packages: false

## guid is the deployment unique identifier, it will be appended to all tags,
## files and anything that identifies this environment from another "just like it"
guid: defaultguid

# This var is used to identify stack (cloudformation, azure resourcegroup, ...)
project_tag: "{{ env_type }}-{{ guid }}"

# This is where the ssh_config file will be created, this file is used to
# define the communication method to all the hosts in the deployment
deploy_local_ssh_config_location: "{{output_dir}}/"

install_bastion: true
install_common: true

### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})
use_own_key: true
env_authorized_key: "{{guid}}key"
#ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem
set_env_authorized_key: true

# Is this running from Red Hat Ansible Tower
tower_run: false

## Networking
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"

## Environment Sizing and OS

bastion_instance_image: rhel-8.0-update-3
bastion_instance_type: "2-16"
bastion_instance_count: 1
rootfs_size_bastion: "{{ rootfs_size_bastion }}"

hana_instance_image: rhel-8.0-update-3
hana_instance_type: "4-32"
hana_instance_count: 1
rootfs_size_hana: "{{ rootfs_size_hana }}"
pv_size_hana: 200

s4hana_instance_image: rhel-8.0-update-3
s4hana_instance_type: "4-32"
s4hana_instance_count: 1
rootfs_size_s4hana: "{{ rootfs_size_s4hana }}"
pv_size_s4hana: 200

## Variables required when deploying Ansible Tower alongside the HANA and bastion instances
tower_instance_image: rhel8.1_01
tower_instance_type: "4-32"
tower_instance_count: "{{ tower_instance_count }}"
rootfs_size_tower: "{{ rootfs_size_tower }}"

# SAP Software image and variables
sap_software_image: software-sap
sap_software_size: "{{ sap_software_size }}"

#Ansible Tower Variables
ansible_tower_download_url: "https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-3.6.2-1.tar.gz"
ansible_tower_epel_download_url: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"

# OSP Security Groups
security_groups:
  - name: HanaSG
    rules:
      - name: HanaSSHPrivate
        description: "SSH private"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
        group: BastionSG
      - name: HanaUDPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: udp
        group: BastionSG
        rule_type: Ingress
      - name: HanaTCPPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: tcp
        group: BastionSG
        rule_type: Ingress
  - name: BastionSG
    rules:
      - name: BastionUDPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: udp
        group: HanaSG
        rule_type: Ingress
      - name: BastionTCPPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: tcp
        group: HanaSG
        rule_type: Ingress
  - name: TowerSG
    rules:
      - name: TowerHTTP
        description: "Tower HTTP"
        from_port: 80
        to_port: 80
        protocol: tcp
        rule_type: Ingress
      - name: TowerHTTPS
        description: "Tower HTTPS"
        from_port: 443
        to_port: 443
        protocol: tcp
        rule_type: Ingress
      - name: TowerSSHPrivate
        description: "SSH private"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
        group: BastionSG
      - name: TowerUDPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: udp
        group: BastionSG
        rule_type: Ingress
      - name: TowerTCPPPortsPrivate
        description: "Only from bastion"
        from_port: 1
        to_port: 65535
        protocol: tcp
        group: BastionSG
        rule_type: Ingress

instances:
  - name: "bastion"
    count: "{{ bastion_instance_count }}"
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image_id: "{{ bastion_instance_image }}"
    sofware_image_id: "{{ sap_software_image }}"
    flavor:
      osp: "{{ bastion_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
      - key: ansible_python_interpreter
        value: /usr/libexec/platform-python
    rootfs_size: "50"
    softwarefs_size: "{{ sap_software_size }}"
    security_groups:
      - BastionSG

  - name: "hana"
    count: "{{ hana_instance_count }}"
    public_dns: false
    dns_loadbalancer: false
    floating_ip: false
    image_id: "{{ hana_instance_image }}"
    flavor:
      osp: "{{ hana_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "hanas"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
      - key: ansible_python_interpreter
        value: /usr/libexec/platform-python
    key_name: "{{key_name}}"
    rootfs_size: "100"
    volumes:
      - volume_name: "hana_pv"
        volume_size: "{{ pv_size_hana }}"
    security_groups:
      - HanaSG

  - name: "s4hana"
    count: "{{ s4hana_instance_count }}"
    public_dns: false
    dns_loadbalancer: false
    floating_ip: false
    image_id: "{{ s4hana_instance_image }}"
    flavor:
      osp: "{{ s4hana_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "s4hanas"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
      - key: ansible_python_interpreter
        value: /usr/libexec/platform-python
    key_name: "{{key_name}}"
    rootfs_size: "100"
    volumes:
      - volume_name: "s4hana_pv"
        volume_size: "{{ pv_size_s4hana }}"
    security_groups:
      - HanaSG

  - name: "tower"
    count: "{{ tower_instance_count }}"
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image_id: "{{ tower_instance_image }}"
    flavor:
      osp: "{{ tower_instance_type }}"
    tags:
      - key: "AnsibleGroup"
        value: "towers"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
      - key: ansible_python_interpreter
        value: /usr/libexec/platform-python
    key_name: "{{key_name}}"
    rootfs_size: "200"
    security_groups:
      - TowerSG



common_packages:
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - git
  - vim-enhanced
  - at

zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

bastion_public_dns: "bastion.{{subdomain_base}}."
bastion_public_dns_chomped: "bastion.{{subdomain_base}}"
vpcid_cidr_block: "192.168.0.0/16"
vpcid_name_tag: "{{subdomain_base}}"


rtb_public_name_tag: "{{subdomain_base}}-public"
rtb_private_name_tag: "{{subdomain_base}}-private"


cf_template_description: "{{ env_type }}-{{ guid }} Ansible Agnostic Deployer "

#### OSP ####
# See cloud_providers/osp_default_vars.yml
# See roles/infra-osp-project-create/defaults/main.yml

# Set this to true if you need to create a new project in OpenStack
# This should almost always be set to true for OpenShift installations
# If it is set to false, the {{ osp_project_name }} must already exist and
# should be able to run whatever you are deploying
#osp_project_create: true

# If osp_project_create is set to yes, define those:
# Quotas to set for new project that is created
#quota_num_instances: 15
#quota_num_cores: 72
#quota_memory: 131072 # in MB
#quota_num_volumes: 25
#quota_volumes_gigs: 500
#quota_loadbalancers: #when Octavia is available
#quota_pool: #when Octavia is available
#quota_networks: 3
#quota_subnets: 3
#quota_routers: 3
quota_fip: 7
#quota_sg: 10
#quota_sg_rules: 100
