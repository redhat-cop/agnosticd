---
- name: Step 00xxxxx software
  hosts: localhost
  gather_facts: False
  become: false
  tasks:
    - debug:
        msg: "Software tasks Started"

- name: Ensure NFS Server is installed, SAP Software Device Mounted and Ansible Installed
  hosts: bastions
  become: True
  gather_facts: True
  tasks:

    - name: Ensure NFS directory exists
      file:
        path: "/nfs"
        state: directory

    - name: Mount up device by UUID
      mount:
        path: /nfs
        src: "/dev/{{ sap_software_device }}"
        fstype: xfs
        state: present

    - name: 'Ensure required packages are installed'
      package:
        name: nfs-utils
        state: installed

    - name: "Ensure export file contains the directory to be shared"
      lineinfile:
        path: /etc/exports
        state: present
        regexp: "^/nfs"
        line: "/nfs *(insecure,rw,no_root_squash,no_wdelay,sync)"

    - name: 'Ensure nfs-server is restarted and running'
      service:
        name: nfs-server
        state: restarted
        enabled: yes

    - name: Ensure additional packages are installed
      yum:
        name:
          - ansible
          - java-1.8.0-openjdk
          - rhel-system-roles-sap
        state: latest

    - name: Ensure /nfs directory is owned by '{{ remote_user }}'
      file:
        path: /nfs
        state: directory
        owner: "{{ remote_user }}"

    - name: Ensure SAP software is not present for external (non Red Hatters) requesters
      file:
        state: absent
        path: "{{ item }}"
      loop:
        - '/nfs/HANA_installation/'
        - '/nfs/S4HANA_installation/'
        - '/nfs/SAPCAR/'
        - '/nfs/SAPHOSTAGENT/'
      when: not rh_internal

- name: Ensure NFS share is mounted in HANA and S/4HANA Hosts
  hosts: hanas:s4hanas
  become: True
  gather_facts: True
  tasks:

    - name: Ensure additional packages are installed
      yum:
        name:
          - rpcbind
          - nfs-utils
        state: latest

    - name: Ensure Software directory exists
      file:
        path: "/software"
        state: directory

    - name: Ensure NFS share is mounted
      mount:
        path: "/software"
        src: "{{ bastion_hostname }}:/nfs"
        fstype: nfs4
        opts: "rw,bg,hard,_netdev"
        state: mounted

- name: Add short and fqdn resolution for every host
  hosts: hanas:s4hanas
  become: true
  gather_facts: true
  tasks:

    - name: Add HANA and S4HANA hosts info to /etc/hosts
      lineinfile:
        path: /etc/hosts
        state: present
        line: "{{ hostvars[item].ansible_default_ipv4.address }}    {{ hostvars[item].ansible_hostname }}.example.com    {{ hostvars[item].ansible_hostname }}"
      when:
        - cloud_provider is match("osp")
      with_items:
        - "{{ groups['hanas'] }}"
        - "{{ groups['s4hanas'] }}"

- name: Deploy Ansible Tower
  hosts: towers
  gather_facts: False
  become: yes
  tasks:
    # This is a bit hacky but we are facing some issues with Ansible, RHEL8 and python for some
    # modules and this workaround solved this particular issue
    - name: Debug offline token
      debug:
         var: offline_token

    - name: Debug sap-e2e-offline token
      debug:
         var: sap-e2e-offline-token

    - name: Ensure Python3 package is installed and alternatives for python updated
      shell: >
        yum install -y python3 && alternatives --set python /usr/bin/python3

#    - name: Ensure EPEL GPG is installed
#      rpm_key:
#        state: present
#        key: "{{ ansible_tower_epel_gpg_download_url }}"
        
#     - name: Install Ansible Tower
#       include_role:
#         name: infra-ansible/roles/ansible/tower/config-ansible-tower
        
  

    - name: "Download & Unpack Ansible Tower installer"
      unarchive:
        src: "{{ ansible_tower_download_url }}"
        dest: "."
        list_files: true
        remote_src: true
        exclude: "inventory"
      register: ansible_tower_download_fact

    - name: "Set installation facts"
      set_fact:
        # The first file listed in the output of the unarchiving from downloading tower
        # is the directory so set that as ansible_tower_dir
        ansible_tower_dir: "{{ ansible_tower_download_fact.files.0 }}"
        # Need to check if version 3.7 or later as we use different inventory values
        ansible_tower_37_later: "{{ (ansible_tower_version is version(3.7, '>=')) or (ansible_tower_version == 'latest') }}"

    - name: "Set up the Ansible Tower inventory"
      template:
        src: inventory.j2
        dest: "{{ ansible_tower_dir }}/inventory"
      register: inventory

    - name: "run tower installer"
      shell: ./setup.sh
      args:
        chdir: "{{ ansible_tower_dir }}"

    - name: "Download and extract 'oc' client to /bin"
      unarchive:
        src: "{{ ansible_tower_oc_download_url }}"
        dest: /bin
        remote_src: True
      when:
        - ansible_tower_oc_download_url|trim != ''

    - name: "Download and extract 'helm' client to a temporary location"
      unarchive:
        src: "{{ ansible_tower_helm_download_url }}"
        dest: /tmp
        remote_src: True
        list_files: True
      register: helm_extract
      when:
        - ansible_tower_helm_download_url|trim != ''

    - name: "Move the 'helm' binary to /bin"
      copy:
        src: "/tmp/{{ item }}"
        dest: /bin/
        follow: yes
        mode: '755'
        remote_src: True
      with_items: "{{ helm_extract.files | map('regex_search','.*helm') | select('string') | list }}"
      when:
        - ansible_tower_helm_download_url|trim != ''
        - helm_extract.files
        
    - name: "Copy custom Tower SSL certificate and Key"
      block:
      - copy:
          src: "{{ ansible_tower.install.ssl_certificate.cert }}"
          dest: /etc/tower/tower.cert
        notify:
        - restart-tower

      - copy:
          src: "{{ ansible_tower.install.ssl_certificate.key }}"
          dest: /etc/tower/tower.key
        notify:
        - restart-tower
      when:
      - ansible_tower.install.ssl_certificate is defined
      become: True


- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Software checks completed successfully"

