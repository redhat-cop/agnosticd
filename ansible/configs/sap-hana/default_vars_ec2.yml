bastion_instance_type: "t2.medium"
tower_instance_type: "t2.xlarge"
s4hana_instance_type: "r4.xlarge"
hana_instance_type: "r4.2xlarge"

bastion_instance_image: RHEL81
tower_instance_image: RHEL81
s4hana_instance_image: RHEL81
hana_instance_image: RHEL81

hana_instance_count: 2
s4hana_instance_count: 1
tower_instance_count: 1

ansible_user: ec2-user
remote_user: ec2-user

bastion_public_dns: "bastion.{{subdomain_base}}."
bastion_public_dns_chomped: "bastion.{{subdomain_base}}"
tower_public_dns: "tower.{{subdomain_base}}."
tower_public_dns_chomped: "tower.{{subdomain_base}}"

aws_public_subnet_cidr: "192.168.0.0/24"

cloudformation_retries: 2

rootfs_size_bastion: 50
rootfs_size_tower: 100
rootfs_size_s4hana: 100
rootfs_size_hana: 100

sap_extra_device: xvdf
sap_software_device: xvdg
sap_software_snapshot_name: "sap-software-v1.0"

security_groups:
  - name: WebSG
    rules:
      - name: HTTPPorts
        description: "HTTP Public"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: HTTPSPorts
        description: "HTTP Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: HostSG
    rules:
      - name: FromHostSG
        description: "Allow everything from HostSG nodes"
        from_port: 0
        to_port: 65535
        protocol: -1
        from_group: HostSG
        rule_type: Ingress

instances:
- name: "bastion"
  count: 1
  unique: true
  public_dns: true
  dns_loadbalancer: true
  floating_ip: true
  image: "{{ bastion_instance_image }}"
  flavor:
    ec2: "{{ bastion_instance_type }}"
  tags:
    - key: "AnsibleGroup"
      value: "bastions"
    - key: "ostype"
      value: "linux"
    - key: ansible_python_interpreter
      value: /usr/libexec/platform-python
  rootfs_size: "{{ rootfs_size_bastion }}"
  volumes:
    - name: /dev/sdg
      size: 60
      snapshot_id: "{{ sap_software_snapshot_id }}"
  security_groups:
    - HostSG
    - BastionSG

- name: "tower"
  count: "{{ tower_instance_count }}"
  unique: true
  public_dns: true
  dns_loadbalancer: true
  floating_ip: true
  image: "{{ tower_instance_image }}"
  flavor:
    ec2: "{{ tower_instance_type }}"
  tags:
    - key: "AnsibleGroup"
      value: "towers"
    - key: "ostype"
      value: "linux"
    - key: ansible_python_interpreter
      value: /usr/libexec/platform-python
  rootfs_size: "{{ rootfs_size_tower }}"
  security_groups:
    - HostSG
    - BastionSG
    - WebSG

- name: "s4hana"
  count: "{{ s4hana_instance_count }}"
  unique: true
  public_dns: true
  dns_loadbalancer: true
  floating_ip: false
  image: "{{ s4hana_instance_image }}"
  flavor:
    ec2: "{{ s4hana_instance_type }}"
  tags:
  - key: "AnsibleGroup"
    value: "s4hanas"
  - key: "ostype"
    value: "linux"
  - key: ansible_python_interpreter
    value: /usr/libexec/platform-python
  rootfs_size: "{{ rootfs_size_s4hana }}"
  volumes:
    - name: /dev/sdf
      size: 100
  security_groups:
  - HostSG

- name: "hana"
  count: "{{ hana_instance_count }}"
  unique: false
  public_dns: true
  dns_loadbalancer: true
  floating_ip: false
  image: "{{ hana_instance_image }}"
  flavor:
    ec2: "{{ hana_instance_type }}"
  tags:
  - key: "AnsibleGroup"
    value: "hanas"
  - key: "ostype"
    value: "linux"
  - key: ansible_python_interpreter
    value: /usr/libexec/platform-python
  rootfs_size: "{{ rootfs_size_hana }}"
  volumes:
    - name: /dev/sdf
      size: 500
  security_groups:
  - HostSG

ansible_hana1_hostname: "hana1"
ansible_hana1_fqdn_hostname: "hana1.{{ guid }}.internal"
ansible_hana2_hostname: "hana2"
ansible_hana2_fqdn_hostname: "hana2.{{ guid }}.internal"
ansible_hana_hostname: "hana1"
ansible_s4hana_hostname: "s4hana"
bastion_hostname: "bastion.{{ guid }}.internal"
deployment_db_host: "hana1.{{ guid }}.internal"
