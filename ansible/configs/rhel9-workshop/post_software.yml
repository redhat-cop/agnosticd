---

- name: Step 00xxxxx post software
  hosts: localhost
  gather_facts: false
  become: true
  tasks:
    - debug:
        msg: "Post-Software tasks Started"

- name: Deploy user setup
  hosts: localhost
  connection: local
  gather_facts: false
  tags:
    - step005
  tasks:
    - name: osp user.info
      when:
        - cloud_provider == 'osp'
        - software_to_deploy == ''
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To Access Control node via SSH:"
            - "ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}.{{ osp_cluster_dns_zone }}"
            - "Enter ssh password when prompted: {{ student_password }}"

        - name: Save user data
          agnosticd_user_info:
            data:
              cloud_provider: "{{ cloud_provider }}"
              ssh_command: "ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}.{{ osp_cluster_dns_zone }}"
              ssh_password: "{{ student_password }}"
              dns_zone: "{{ osp_cluster_dns_zone }}"
              guid: "{{ guid }}"
              username: "{{ student_name }}"
              targethost: "{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
              subdomain: "{{ guid }}{{ subdomain_base_suffix }}"
              subdomain_internal: "{{ chomped_zone_internal_dns | default('') }}"

    - name: osp user.info
      when:
        - cloud_provider == 'osp'
        - software_to_deploy == 'tower'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To Access Control node via SSH:"
            - "ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}.{{ osp_cluster_dns_zone }}"
            - "Enter ssh password when prompted: {{ student_password }}"

        - name: Save user data
          agnosticd_user_info:
            data:
              cloud_provider: "{{ cloud_provider }}"
              ssh_command: "ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}.{{ osp_cluster_dns_zone }}"
              ssh_password: "{{ student_password }}"
              ssh_username: "{{ student_name }}"
              dns_zone: "{{ osp_cluster_dns_zone }}"
              guid: "{{ guid }}"
              targethost: "{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
              subdomain: "{{ guid }}{{ subdomain_base_suffix }}"
              subdomain_internal: "{{ chomped_zone_internal_dns | default('') }}"

    - name: ec2 user.info
      when:
        - cloud_provider == 'ec2'
      block:
        - name: print out user.info
          agnosticd_user_info:
            msg: "{{ item }}"
          loop:
            - "To Access Control node via SSH:"
            - "ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
            - "Enter ssh password when prompted: {{ student_password }}"

        - name: Save user data
          agnosticd_user_info:
            data:
              cloud_provider: "{{ cloud_provider }}"
              ssh_command: "ssh {{ student_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
              ssh_password: "{{ student_password }}"
              ssh_username: "{{ student_name }}"
              guid: "{{ guid }}"
              targethost: "{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ subdomain_base_suffix }}"
              subdomain: "{{ guid }}{{ subdomain_base_suffix }}"
              subdomain_internal: "{{ chomped_zone_internal_dns | default('') }}"

- name: Showroom deployer
  hosts: bastions[0]
  gather_facts: true
  become: true
  tags:
    - showroom

  tasks:

    # Workaround to generate a showroom password to avoid
    # reusing the rosa user's password. Can be removed
    # once Showroom uses SSH keys to log into the terminal
    - name: Generate showroom user password
      when: showroom_user_password | default("") | length == 0
      ansible.builtin.set_fact:
        showroom_user_password: >-
          {{ lookup('password', '/dev/null chars=ascii_letters,digits '
              ~ 'length=' ~ showroom_user_password_length | default(16)
          ) }}

    - name: Deploy Showroom Web Interface
      when: showroom_git_repo is defined
      ansible.builtin.include_role:
        name: showroom

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
