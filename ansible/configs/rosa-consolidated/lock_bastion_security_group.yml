---
- name: Get bastion IP address
  ansible.builtin.set_fact:
    ocp4_workload_rosa_lockdown_bastion_bastion_ip_address: "{{ lookup('dig', 'bastion.' + subdomain_base) }}"

- name: Debug bastion IP address
  ansible.builtin.debug:
    msg: "Bastion IP: {{ ocp4_workload_rosa_lockdown_bastion_bastion_ip_address }}"

- name: Retrieve VPC for bastion
  amazon.aws.ec2_vpc_net_info:
    filters:
      tag:Name: "{{ subdomain_base }}"
  register: r_vpcs

- name: Print VPC id and name
  ansible.builtin.debug:
    msg: "VPC ID: {{ r_vpcs.vpcs[0].vpc_id }}, Name: {{ r_vpcs.vpcs[0].tags.Name }}"

- name: Retrieve BastionSG security group
  amazon.aws.ec2_security_group_info:
    filters:
      tag:Name: BastionSG
  register: r_security_groups

- name: Print security group name
  ansible.builtin.debug:
    msg: "{{ r_security_groups.security_groups[0].group_name }}"

- name: Compute base SSH ingress rules (allow bastion to connect to itself)
  ansible.builtin.set_fact:
    _ssh_ingress_rules:
      - ports: [22]
        proto: tcp
        cidr_ip: "{{ ocp4_workload_rosa_lockdown_bastion_bastion_ip_address }}/32"

- name: Append allowed SSH IPs to ingress rules
  when: rosa_bastion_allowed_ssh_ips | default([]) | length > 0
  ansible.builtin.set_fact:
    _ssh_ingress_rules: "{{ _ssh_ingress_rules + [{'ports': [22], 'proto': 'tcp', 'cidr_ip': ip + '/32'}] }}"
  loop: "{{ rosa_bastion_allowed_ssh_ips }}"
  loop_control:
    loop_var: ip

- name: Append predefined security group rules to ingress rules
  when: rosa_bastion_security_group_ingress_rules | default([]) | length > 0
  ansible.builtin.set_fact:
    _ssh_ingress_rules: "{{ _ssh_ingress_rules + rosa_bastion_security_group_ingress_rules }}"

- name: Debug SSH ingress rules
  ansible.builtin.debug:
    msg: "{{ _ssh_ingress_rules }}"

- name: Compute base SSH egress rules (allow bastion to connect to itself)
  ansible.builtin.set_fact:
    _ssh_egress_rules:
      - ports: [22]
        proto: tcp
        cidr_ip: "{{ ocp4_workload_rosa_lockdown_bastion_bastion_ip_address }}/32"

- name: Append predefined security group rules to egress rules
  when: rosa_bastion_security_group_egress_rules | default([]) | length > 0
  ansible.builtin.set_fact:
    _ssh_egress_rules: "{{ _ssh_egress_rules + rosa_bastion_security_group_egress_rules }}"

- name: Debug SSH egress rules
  ansible.builtin.debug:
    msg: "{{ _ssh_egress_rules }}"

- name: Update Security Group
  amazon.aws.ec2_security_group:
    state: present
    name: "{{ r_security_groups.security_groups[0].group_name }}"
    description: "{{ r_security_groups.security_groups[0].description }}"
    vpc_id: "{{ r_vpcs.vpcs[0].vpc_id }}"
    purge_rules: true
    rules: "{{ _ssh_ingress_rules }}"
    purge_rules_egress: true
    rules_egress: "{{ _ssh_egress_rules }}"
  register: r_sg

- name: Debug SG
  ansible.builtin.debug:
    msg: "{{ r_sg }}"
