---
- name: Init AWS account for ROSA
  ansible.builtin.command: >-
    {{ rosa_binary_path }}/rosa init

- name: Get available ROSA regions
  ansible.builtin.command: >-
    {{ rosa_binary_path }}/rosa list regions --output json
  register: r_rosa_regions

- name: Filter regions that support ROSA with Hosted Control Planes
  set_fact:
    _rosa_hcp_regions: >-
      {{ r_rosa_regions.stdout | from_json | json_query(query) }}
  vars:
    query: "[?supports_hypershift == `true`].id"

- name: Get available ROSA versions
  ansible.builtin.command: >-
    {{ rosa_binary_path }}/rosa list versions --output json
  register: r_rosa_versions

- name: Set default ROSA version
  ansible.builtin.set_fact:
    _rosa_version_to_install: ""
    _rosa_ocp_cli_version: >-
      {{ (r_rosa_versions.stdout | from_json | json_query(query)) [0].raw_id }}
  vars:
    query: "[?default==`true`]"

- name: Set ROSA version to install to specific version
  when:
  - rosa_version | default("") | length > 0
  - rosa_version | default("") != "latest"
  ansible.builtin.set_fact:
    _rosa_version_to_install: "{{ rosa_version }}"
    _rosa_ocp_cli_version: "{{ rosa_version }}"

- name: Set ROSA version to latest available
  when: rosa_version | default("") == "latest"
  ansible.builtin.set_fact:
    _rosa_version_to_install: "{{ (r_rosa_versions.stdout | from_json) [0].raw_id }}"
    _rosa_ocp_cli_version: "{{ (r_rosa_versions.stdout | from_json) [0].raw_id }}"

- name: Set ROSA version to latest available that can be upgraded
  when: rosa_version | default("") == "latest-upgrade"
  block:
  - name: Find upgradable version
    ansible.builtin.set_fact:
      _rosa_version_to_install: "{{ r_rosa_versions.stdout | from_json | community.general.json_query(query) | first }}"
      _rosa_ocp_cli_version: "{{ r_rosa_versions.stdout | from_json | community.general.json_query(query) | first }}"
    vars:
      query: "[?starts_with(id, '{{ rosa_version_base }}') && available_upgrades != `null`].raw_id"

  - name: Find version to upgrade to
    ansible.builtin.set_fact:
      _rosa_version_next: "{{ r_rosa_versions.stdout | from_json | community.general.json_query(query) | first }}"
    vars:
      query: "[?starts_with(id, '{{ rosa_version_base }}') && available_upgrades != `null`].available_upgrades [0]"

- name: Print ROSA version to install
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop:
  - "ROSA Version to be installed: {{ _rosa_version_to_install }}"
  - "ROSA Version available to be upgraded to: {{ _rosa_version_next | default('not set') }}"
  - "OCP CLI to be installed: {{ _rosa_ocp_cli_version}}"
