---
### AWS EC2 Environment settings

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
HostedZoneId: Z3IHLWJZOU9SRT
# The region to be used, if not specified by -e in the command line
aws_region: us-east-1
# The key that is used to
key_name: ocpkey

## Networking (AWS)
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"
zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

## Environment Sizing
# Instance Type
__instance_type: "t2.medium"
__windows_instance_type: m5.xlarge

# Image ID
# __image: RHELAMI
__image: RHEL77
__windows_instance_image: WIN2019

security_groups:
  - name: WebSG
    rules:
      - name: WebSGHTTPPort
        description: "Allow HTTP port"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: WebSGHTTPsPort
        description: "Allow HTTPs port"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: HostSG
    rules:
      - name: HostSGTCP
        description: "Allow everything from HostSG nodes"
        from_port: 1
        to_port: 65535
        protocol: tcp
        from_group: HostSG
        rule_type: Ingress

      - name: HostSGUDP
        description: "Allow everything from HostSG nodes"
        from_port: 1
        to_port: 65535
        protocol: udp
        from_group: HostSG
        rule_type: Ingress

  - name: WinSG
    rules:
      - name: WinSGTCP
        description: "All TCP"
        from_port: 1
        to_port: 65535
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

      - name: WinSGUdp
        description: "All UDP"
        from_port: 1
        to_port: 65535
        protocol: udp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

# Environment Instances
instances:
  - name: control
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    image: "{{ bastion_instance_image | default(__image) }}"
    flavor:
      ec2: "{{ bastion_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_bastion | default(50)  }}"
    security_groups:
      - BastionSG
      - WebSG

  - name: utility
    count: "{{ utility_instance_count | default(1) }}"
    public_dns: true
    image: "{{ utility_instance_image | default(__image) }}"
    flavor:
      ec2: "{{ utility_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "utilities"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - BastionSG
      - DefaultSG
      - WebSG
      - HostSG

  - name: "tower"
    count: "{{ tower_instance_count | default(1) }}"
    public_dns: true
    dns_loadbalancer: true
    image: "{{ tower_instance_image | default(__image) }}"
    flavor:
      "ec2": "{{ tower_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "towers"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - DefaultSG
      - WebSG
      - HostSG

  - name: "server"
    count: "{{ windows_server_instance_count | default(1) }}"
    public_dns: true
    image: "{{ windows_server_instance_image | default(__windows_instance_image) }}"
    flavor:
      ec2: "{{ windows_server_instance_type | default(__windows_instance_type) }}"
    UserData: |
         UserData:
                "Fn::Base64":
                   "Fn::Join":
                     - ""
                     - - "<powershell>\n"
                       - "$admin = [adsi]('WinNT://./administrator, user')\n"
                       - "$admin.PSBase.Invoke('SetPassword', '{{windows_password}}')\n"
                       - "$scriptPath=((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))\n"
                       - "Invoke-Command -ScriptBlock ([scriptblock]::Create($scriptPath)) -ArgumentList '-skipNetworkProfileCheck'\n"
                       - "</powershell>"
    tags:
      - key: "AnsibleGroup"
        value: "servers"
      - key: "ostype"
        value: "windows"
    security_groups: 
      - DefaultSG
      - WinSG
      - HostSG

  - name: "client"
    count: "{{ windows_client_instance_count | default(1) }}"
    public_dns: true
    image: "{{ windows_client_instance_image | default(__windows_instance_image) }}"
    flavor:
      ec2: "{{ windows_client_instance_type | default(__windows_instance_type) }}"
    UserData: |
         UserData:
                "Fn::Base64":
                   "Fn::Join":
                     - ""
                     - - "<powershell>\n"
                       - "$admin = [adsi]('WinNT://./administrator, user')\n"
                       - "$admin.PSBase.Invoke('SetPassword', '{{windows_password}}')\n"
                       - "$scriptPath=((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))\n"
                       - "Invoke-Command -ScriptBlock ([scriptblock]::Create($scriptPath)) -ArgumentList '-skipNetworkProfileCheck'\n"
                       - "</powershell>"
    tags:
      - key: "AnsibleGroup"
        value: "clients"
      - key: "ostype"
        value: "windows"
    security_groups:
      - DefaultSG
      - WinSG
      - HostSG
...