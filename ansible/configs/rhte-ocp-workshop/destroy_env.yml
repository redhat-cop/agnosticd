---
- name: Delete Infrastructure
  hosts: localhost
  connection: local
  gather_facts: False
  become: no
  vars_files:
    - "./env_vars.yml"
    - "./env_secret_vars.yml"
  environment:
    AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
    AWS_DEFAULT_REGION: "{{aws_region_final|d(aws_region)}}"
  tasks:
    - name: Fetch autoscaling name
      slurp:
        src: "{{ANSIBLE_REPO_PATH}}/workdir/{{ env_type }}.{{ guid }}.AutoScalingGroupClientVM"
      register: asg_r
      ignore_errors: yes

    - name: Delete AutoScalingGroupClientVM
      command: >-
          aws autoscaling delete-auto-scaling-group --force-delete --auto-scaling-group-name {{asg_r.content|b64decode}}
      ignore_errors: yes

    - name: Get DNS record for each clientVM
      route53:
        state: get
        zone: "{{subdomain_base_suffix[1:]}}."
        record: "clientvm{{idx}}.{{subdomain_base}}."
        type: A
      with_sequence: start=0 end={{num_users|default(100)}}
      loop_control:
        index_var: idx
      ignore_errors: yes
      register: rec

    - name: Delete DNS record for each clientVM
      route53:
        zone: "{{item.set.zone}}"
        record: "{{item.set.record}}"
        type: "{{item.set.type}}"
        value: "{{item.set.value}}"
        ttl: "{{item.set.ttl}}"
        state: absent
      when: >-
        'set' in item and 'record' in item.set
      with_items: "{{rec.results}}"
      ignore_errors: yes

    - name: Delete instance
      ec2_instance:
        state: absent
        filters:
          instance-state-name: running
          "tag:Project": "{{project_tag}}"
      when: project_tag is defined

    - name: Delete S3 bucket
      environment:
        AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
        AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
        AWS_DEFAULT_REGION: "{{aws_region_final|d(aws_region)}}"
      s3_bucket:
        name: "{{ env_type }}-{{ guid }}"
        state: absent
        force: yes
        region: "{{ aws_region_final|d(aws_region) }}"
      tags:
        - remove_s3
      register: s3_result
      until: s3_result is succeeded
      retries: 5
      delay: 60
      ignore_errors: yes
      when: cloud_provider == 'ec2'

    - name: report s3 error
      fail:
        msg: "FAIL {{ project_tag }} delete s3"
      when:
        - s3_result is not succeeded
        - cloud_provider == 'ec2'

    - name: Destroy cloudformation template
      cloudformation:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        stack_name: "{{project_tag}}"
        state: "absent"
        region: "{{aws_region_final|d(aws_region)}}"
        disable_rollback: false
        tags:
          Stack: "project {{env_type}}-{{ guid }}"
      tags: [ destroying, destroy_cf_deployment ]
      register: cloudformation_result
      until: cloudformation_result is succeeded
      retries: 5
      delay: 60
      ignore_errors: yes
      when: cloud_provider == 'ec2'

    - name: report Cloudformation error
      fail:
        msg: "FAIL {{ project_tag }} Destroy Cloudformation"
      when:
        - cloudformation_result is not succeeded
        - cloud_provider == 'ec2'
      tags: [ destroying, destroy_cf_deployment ]

- name: Import default azure destroy playbook
  import_playbook: "{{ANSIBLE_REPO_PATH}}/cloud_providers/azure_destroy_env.yml"
  when: cloud_provider == 'azure'
