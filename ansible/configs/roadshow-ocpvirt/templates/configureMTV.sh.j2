cat << EOF | oc apply -f -
apiVersion: project.openshift.io/v1
kind: Project
metadata:
  name: openshift-mtv
EOF

SHA1=$(openssl s_client \
    -connect portal.vc.opentlc.com:443 \
    < /dev/null 2>/dev/null \
    | openssl x509 -fingerprint -noout -in /dev/stdin \
    | cut -d '=' -f 2)
cat << EOF | oc apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: vmware-credentials
  namespace: openshift-mtv
type: Opaque
stringData:
  user: {{ env_type }}-{{ guid }}@vc.opentlc.com
  password: {{  hostvars['jumphost']['vcenter_user_generated_password']  }}
  thumbprint: "${SHA1}"
  insecureSkipVerify: "true"
  url: https://portal.vc.opentlc.com/sdk
EOF

cat << EOF | oc apply -f -
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: migration
  namespace: openshift-mtv
spec:
  targetNamespaces:
    - openshift-mtv
EOF
cat << EOF | oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: mtv-operator
  namespace: openshift-mtv
spec:
  channel: release-v2.4
  installPlanApproval: Automatic
  name: mtv-operator
  source: redhat-operators
  sourceNamespace: openshift-marketplace
EOF
until oc get forkliftcontrollers.forklift.konveyor.io; do sleep 60; done
cat << EOF | oc apply -f -
apiVersion: forklift.konveyor.io/v1beta1
kind: ForkliftController
metadata:
  name: forklift-controller
  namespace: openshift-mtv
spec:
  olm_managed: true
EOF

cat << EOF | oc apply -f -
apiVersion: forklift.konveyor.io/v1beta1
kind: Provider
metadata:
  name: vmware
  namespace: openshift-mtv
spec:
  type: vsphere
  url: "https://portal.vc.opentlc.com/sdk"
  settings:
    vddkInitImage: image-registry.openshift-image-registry.svc:5000/openshift/vddk:latest
  secret:
    name: vmware-credentials
    namespace: openshift-mtv
EOF
