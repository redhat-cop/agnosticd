- name: Delete folder and VMs
  block:
    - name: Get a list of all folders
      community.vmware.vmware_folder_info:
      register: r_vmc_folders

    - name: See if folder exists
      when: r_vmc_folders|length>0
      ansible.builtin.set_fact:
        folder_mo_id: "{{ (r_vmc_folders.flat_folder_info | selectattr('path', 'equalto', '/Workloads/{{env_type}}-{{ guid }}') | map(attribute='moid'))[0] }}"

    - name: Power down the VMs
      register: r_vmc_instances_off
      community.vmware.vmware_guest:
        folder: "/Workloads/{{env_type}}-{{ guid }}"
        name: "{{ item }}"
        state: "powered-off"
      loop:
        - haproxy
        - winweb01
        - winweb02
        - database
      until: r_vmc_instances_off is success
      retries: 5
      delay: 10

    - name: Remove the VMs
      register: r_vmc_instances
      community.vmware.vmware_guest:
        folder: "/Workloads/{{env_type}}-{{ guid }}"
        name: "{{ item }}"
        state: "absent"
      loop:
        - haproxy
        - winweb01
        - winweb02
        - database
      until: r_vmc_instances is success
      retries: 5
      delay: 10

    - name: Delete folder for the project
      community.vmware.vcenter_folder:
        folder_name: "{{ env_type }}-{{ guid }}"
        parent_folder: "Workloads"
        folder_type: vm
        state: absent

  module_defaults:
    community.vmware.vmware_guest:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ vcenter_datacenter }}"
      cluster: "{{ vcenter_cluster }}"
    community.vmware.vcenter_folder:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ vcenter_datacenter }}"
