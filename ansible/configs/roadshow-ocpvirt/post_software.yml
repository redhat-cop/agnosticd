---
- name: Step 005 Post Software
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
    - name: Set admin password
      set_fact:
        openshift_admin_password: >-
          {{- lookup('password', '/dev/null length=1 chars=letters') -}}
          {{- lookup('password', '/dev/null length=10') -}}
          {{- lookup('password', '/dev/null length=1 chars=digits') -}}
    - debug:
        msg: "Step 005 Post Software"

- name: Deploy some operators
  hosts: bastion-vm
  tasks:
    - name: Approve certificates
      shell: /usr/bin/oc get csr|grep Pending|awk '{print $1}'|xargs -i /usr/bin/oc adm certificate approve {}
      register: approve_certs
      until: approve_certs.stderr_lines|length == 0
      retries: 30
      delay: 30

    - name: Post tasks
      block:
        - name: Make .kube directory
          ansible.builtin.file:
            path: /root/.kube/
            state: directory
          when: ocp4_aio_deploy_type == 'sno'

        - name: Make rhacm the default cluster for bastion oc commands
          when: ocp4_aio_deploy_type == 'sno'
          ansible.builtin.copy:
            remote_src: true
            src: /root/sno-rhacm/auth/kubeconfig
            dest: /root/.kube/config

        - name: Copy file htpasswd.yaml
          copy:
            src: "htpasswd.yaml"
            dest: "/tmp/htpasswd.yaml"

        - name: Configure admin user
          shell: "{{ item }}"
          args:
            chdir: /tmp/
          loop:
            - htpasswd -c -B -b users.htpasswd admin "{{ hostvars['hypervisor']['student_password'] | default(hostvars[groups.bastions.0]['student_password']) }}"
#            - htpasswd -B -b users.htpasswd developer hostvars['hypervisor']['student_password']
            - /usr/bin/oc create secret generic htpass-secret --from-file=htpasswd=users.htpasswd -n openshift-config
            - /usr/bin/oc apply -f htpasswd.yaml
            - /usr/bin/oc adm policy add-cluster-role-to-user cluster-admin admin
            - /usr/bin/oc delete secrets kubeadmin -n kube-system

        - name: Setting up OCS Storage
          include_role:
            name: ocp4_aio_role_ocs
          when: ocp4_aio_deploy_ocs and ocp4_aio_deploy_type == 'ipi'

        - name: Configure image registry
          shell: >
            oc patch configs.imageregistry.operator.openshift.io cluster
            --type merge --patch '{"spec":{"storage":{"pvc":{"claim":"ocs-imgreg"}}, "managementState": "Managed"}}'

        - name: Enable the route for the image registry
          shell: >
            oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}'
            --type=merge


        - name: Pre-install operators
          script: files/configure_operators.sh
          register: r_preinstall
          until: "r_preinstall is not failed"
          retries: 10
          delay: 30
          when: preinstall_operators | default(False)

        - name: Configure Linux bridge
          script: files/configure_nodenetworkconfigurationpolicy.sh
          register: configure_linux_bridge
          until: "configure_linux_bridge is not failed"
          retries: 5
          delay: 10

    #    - name: Run configure_ssl.sh
    #      script: files/configure_ssl.sh

        - name: Get current Deployment information
          k8s_info:
            kind: Deployment
            name: apiserver
            namespace: openshift-apiserver
          register: current_deployment

        - name: Set current observedGeneration
          set_fact:
            current_observed: "{{ current_deployment.resources[0].status.observedGeneration }}"


        - name: Rename default appsDomain
          shell: >
            oc patch ingresses.config cluster --type merge -p '{"spec":{"appsDomain": "apps.{{ guid }}.{{ cluster_dns_zone }}"}}'

        - name: Get current Deployment information
          k8s_info:
            kind: Deployment
            name: apiserver
            namespace: openshift-apiserver
          until: new_deployment.resources[0].status.observedGeneration != current_observed|int and new_deployment.resources[0].status.readyReplicas|int == 3
          delay: 30
          retries: 30
          register: new_deployment


        - name: Install OADP Operator
          script: files/configure_backup_operator.sh

        - name: Configue VDDK
          script: files/configure_vddk.sh
          register: configure_vddk
          until: "configure_vddk is not failed"
          retries: 5
          delay: 10


        - name: Copy configureMTV.sh
          template:
            src: configureMTV.sh.j2
            dest: /root/configureMTV.sh
            mode: 0755

        - name: Execute configureMTV.sh
          shell: /root/configureMTV.sh

        - name: Copy importVMs.sh
          template:
            src: importVMs.sh.j2
            dest: /root/importVMs.sh
            mode: 0755

        - name: Execute importVMs.sh
          shell: /root/importVMs.sh
          when: preinstall_operators | default(False)

    #- name: Execute script to change the domain
    #  ansible.builtin.shell: "sh -x /root/renameDomain.sh"
    #  when: not build_lab|bool

    - name: Set agnosticd user info data for bastion
      agnosticd_user_info:
        data:
          preinstall_operators: "{{ preinstall_operators }}"
          vcenter_user: "{{ env_type }}-{{ guid }}"
          vcenter_password: "{{ hostvars['jumphost']['vcenter_user_generated_password'] }}"
          guid: "{{ guid }}"
          ocp_password: "{{ hostvars['hypervisor']['student_password'] | default(hostvars[groups.bastions.0]['student_password']) }}"
          ocp_url: "https://console-openshift-console.apps.{{ guid }}.{{ cluster_dns_zone }}"

    - name: Deploy Bookbag
      when:
        - bookbag_git_repo | default('') != ''
      include_role:
        name: bookbag
      vars:
        ACTION: create

- name: Prepare Hypervisor for proxypass
  hosts: hypervisor
  gather_facts: false
  become: true
  tasks:

    - name: Disabling SELinux state
      ansible.posix.selinux:
        state: disabled
    - name: Install required packages
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - httpd
        - mod_ssl

    - name: Copy ssl.conf
      template:
        src: httpd/ssl.conf
        dest: /etc/httpd/conf.d/ssl.conf

    - name: Copy ocp.conf
      template:
        src: httpd/ocp.conf
        dest: /etc/httpd/conf.d/ocp.conf

    - name: Enable httpd service
      service:
        name: httpd
        state: started
        enabled: yes

    - name: Fill /etc/hosts with internal names
      blockinfile:
        dest: /etc/hosts
        content: |
          192.168.123.11 console-openshift-console.apps.ocp.example.com
          192.168.123.11 oauth-openshift.apps.ocp.example.com
          192.168.123.11 zzzzz.apps.ocp.example.com

- name: Print informations
  hosts: localhost
  tasks:
    - name: Print Bastion Connection Information
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
        - "Host you will be using for lab : {{ hostvars['hypervisor']['public_ip_address'] | default(hostvars[groups.bastions.0]['public_ip_address']) }}"
        - "SSH User : {{ student_name }}"
        - "SSH Password : {{ hostvars['hypervisor']['student_password'] | default(hostvars[groups.bastions.0]['student_password']) }}"
#        - "OpenShift web console : https://console-openshift-console.apps.{{ guid }}.{{ cluster_dns_zone }}"
#        - "kubeadmin user Password : {{ hostvars['kube_holder']['kubeadmin_password'] }}"

    - name: Print Kube Configuration for IPI
      when: ocp4_aio_deploy_ipi
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
        - "OpenShift web console is available at: https://console-openshift-console.apps.{{ guid }}.{{ cluster_dns_zone }}"
        - "The password for admin user is: {{ hostvars['hypervisor']['student_password'] | default(hostvars[groups.bastions.0]['public_ip_address']) }}"
#        - "The password for developer user is: {{ hostvars['localhost']['openshift_admin_password'] }}"
        - "If you'd like CLI access, the bastion host will have already been setup - `sudo ssh root@192.168.123.100`"
        - "You should then automatically have oc/kubectl access to the cluster. Check out ~/ocp-install/auth/."


- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
