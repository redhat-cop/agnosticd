- name: Step 002 - Post Infrastructure
  hosts: localhost
  connection: local
  become: false
  tags:
  - step002
  - post_infrastructure
  tasks:
  - name: OpenStack Post Infrastructure
    when: cloud_provider is match("osp")
    environment:
      OS_AUTH_URL: "{{ osp_auth_url }}"
      OS_USERNAME: "{{ osp_auth_username }}"
      OS_PASSWORD: "{{ osp_auth_password }}"
      OS_PROJECT_NAME: "{{ osp_project_name }}"
      OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
      OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
    block:
    - name: OpenShift Floating IPs on OpenStack
      include_role:
        name: ocp-infra-osp-fip

  - name: Azure Post Infrastructure
    when: cloud_provider is match("azure")
    block:
    - name: Set FQDN for the bastion VM
      when: item.name is match('bastion')
      set_fact: 
        rhel_remote_host: "{{item.fqdns|d(item.publicIps)|d('')}}"
      with_items: "{{vm_list}}"
    - name: Set FQDN for each Windows VM
      set_fact: 
        windows_remote_hosts: ""
    - name: Set FQDN for each Windows VM
      when: item.name is match ('vmwin*')
      set_fact: 
        windows_remote_hosts: "{{item.fqdns|d(item.publicIps)|d('')}},{{windows_remote_hosts}}"
      with_items: "{{vm_list}}"

    - name: Print Host Information
      debug:
        msg: "{{ item }}"
      with_items:
      - "user.info: Remote User: {{ remote_user }}"
      - "user.info: RHEL Bastion Host: {{ rhel_remote_host }}"
      - "user.info: Windows Host(s): {{ windows_remote_hosts }}"
      - "user.info: Windows Password: {{ windows_password }}"

  - name: AWS Post Infrastructure - get credentials
    when: cloud_provider is match("ec2")
    block:
    - name: Get Route53User credentials from stack outputs
      when:
      - cloudformation_out_final is defined
      - cloudformation_out_final.stack_outputs.Route53User is defined
      - cloudformation_out_final.stack_outputs.Route53UserAccessKey is defined
      - cloudformation_out_final.stack_outputs.Route53UserSecretAccessKey is defined
      set_fact:
        route53user: "{{ cloudformation_out_final.stack_outputs.Route53User }}"
        route53user_access_key: "{{ cloudformation_out_final.stack_outputs.Route53UserAccessKey }}"
        route53user_secret_access_key: "{{ cloudformation_out_final.stack_outputs.Route53UserSecretAccessKey }}"
      tags:
      - provision_cf_template
    - name: Get StudentUser credentials from stack outputs
      when:
      - cloudformation_out_final is defined
      - cloudformation_out_final.stack_outputs.StudentUser is defined
      - cloudformation_out_final.stack_outputs.StudentUserAccessKey is defined
      - cloudformation_out_final.stack_outputs.StudentUserSecretAccessKey is defined
      set_fact:
        student_stack_user: "{{ cloudformation_out_final.stack_outputs.StudentUser }}"
        student_access_key_id: "{{ cloudformation_out_final.stack_outputs.StudentUserAccessKey }}"
        student_secret_access_key: "{{ cloudformation_out_final.stack_outputs.StudentUserSecretAccessKey }}"
      tags:
      - provision_cf_template

- name: Step 002.1 - Post Infrastructure Bastion
  hosts: bastions
  become: false
  tags:
  - step002.1
  - post_infrastructure
  tasks:
  - name: AWS configuration for Bastions
    when: cloud_provider == 'ec2'
    block:
    - name: Create .aws for awscli
      file:
        path: ~/.aws
        mode: 0700
        state: directory

    - name: Write down Route53User credentials
      when: hostvars.localhost.route53user_access_key is defined
      blockinfile:
        state: present
        path: "~/.aws/credentials"
        create: yes
        insertafter: EOF
        marker: "# {mark} ANSIBLE MANAGED BLOCK Route 53 Credentials"
        content: |-
          [route53]
          aws_access_key_id={{ hostvars.localhost.route53user_access_key }}
          aws_secret_access_key={{ hostvars.localhost.route53user_secret_access_key }}
