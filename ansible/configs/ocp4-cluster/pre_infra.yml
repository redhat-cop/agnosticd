---
- name: Step 000 - Pre Infrastructure
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tags:
  - step000
  - pre_infrastructure
  tasks:
  - debug:
      msg: "Step 000 Pre Infrastructure"

  - name: Call infra-local-create-ssh-key role
    when: set_env_authorized_key | bool
    import_role:
      name: infra-local-create-ssh_key
    tags:
    - generate_env_keys

  - name: Ensure variables are set
    assert:
      that:
      - ocp4_pull_secret is defined
      - ocp4_pull_secret | default("") | length > 0
      fail_msg: ocp4_pull_secret variable must be defined
      success_msg: ocp4_pull_secret variable is defined

  - name: GCP Pre Infrastructure tasks
    when: cloud_provider == 'gcp'
    block:
    - name: Create GCP Credentials File
      include_role:
        name: infra-gcp-credentials-file
    - name: Get Google Cloud SDK
      include_role:
        name: infra-gcp-install-sdk

  - name: Azure Pre Infrastructure tasks
    when: cloud_provider == 'azure'
    block:
    - name: if windows_password is not defined, generate one
      when: windows_password is not defined
      block:
      - name: Generate windows Administrator password if not already defined
        command: openssl rand -base64 25
        register: password_gen_r
      - name: set_fact generated_windows_password (just generated)
        set_fact:
          generated_windows_password: "{{ password_gen_r.stdout }}"

  - name: AWS Pre Infrastructure tasks
    when: cloud_provider == 'ec2'
    block:
    - name: Create EC2 Infra Key
      when: install_infra_ssh_key | default(false) | bool
      include_role:
        name: infra-ec2-ssh-key

    # Find and set the AWS Availability Zones using on-demand capacity reservations
    - when: ocp4_cluster_pre_infra_odcr_profile == 'workshop'
      name: Run infra-aws-capacity-reservation
      include_role:
        name: infra-aws-capacity-reservation
      vars:
        ACTION: 'provision'
        # Zones can be the same, not necessarly distinct.
        agnosticd_aws_capacity_reservation_distinct: false
        agnosticd_aws_capacity_reservations:
          # Bastion can have its own AZ
          az1:
          - instance_type: "{{ bastion_instance_type }}"
            instance_count: 1
            instance_platform: "{{ bastion_instance_platform }}"

          masters:
          - instance_type: "{{ master_instance_type }}"
            instance_count: 3
            instance_platform: Linux/UNIX

          # Split workers in 2 AZs if possible.  Could be the same zone.
          workers1:
          # Workers: half of workers
          - instance_type: "{{ worker_instance_type }}"
            instance_count: >-
              {{ ( worker_instance_count | int / 2 )
              | round(0, 'ceil')
              | int }}
            instance_platform: Linux/UNIX
          workers2:
          # Workers: half of workers + 1 in case it's odd
          - instance_type: "{{ worker_instance_type }}"
            instance_count: >-
              {{ ( worker_instance_count | int / 2 )
              | round(0, 'ceil')
              | int }}
            instance_platform: Linux/UNIX

    - when: ocp4_cluster_pre_infra_odcr_profile == 'ha'
      name: Run infra-aws-capacity-reservation
      include_role:
        name: infra-aws-capacity-reservation
      vars:
        ACTION: 'provision'
        # Zones must be distinct
        agnosticd_aws_capacity_reservation_distinct: true

        agnosticd_aws_capacity_reservations:
          az1:
          - instance_type: "{{ bastion_instance_type }}"
            instance_count: 1
            instance_platform: "{{ bastion_instance_platform }}"
          # master
          - instance_type: "{{ master_instance_type }}"
            instance_count: 1
            instance_platform: Linux/UNIX
          # Workers
          - instance_type: "{{ worker_instance_type }}"
            instance_count: >-
              {{ ( worker_instance_count | int / 3 )
              | round(0, 'ceil')
              | int }}
            instance_platform: Linux/UNIX

          az2:
          - instance_type: "{{ master_instance_type }}"
            instance_count: 1
            instance_platform: Linux/UNIX
          # Workers
          - instance_type: "{{ worker_instance_type }}"
            instance_count: >-
              {{ ( worker_instance_count | int / 3 )
              | round(0, 'ceil')
              | int }}
            instance_platform: Linux/UNIX
          az3:
          - instance_type: "{{ master_instance_type }}"
            instance_count: 1
            instance_platform: Linux/UNIX
          # Workers
          - instance_type: "{{ worker_instance_type }}"
            instance_count: >-
              {{ ( worker_instance_count | int / 3 )
              | round(0, 'ceil')
              | int }}
            instance_platform: Linux/UNIX

    - when: agnosticd_aws_capacity_reservation_results.reservations | default({}) | length > 0
      block:

      - when: ocp4_cluster_pre_infra_odcr_profile == 'workshop'
        name: Set availability zone for bastion, masters and workers (Workshop)
        set_fact:
          # Cloudformation (bastion)
          aws_availability_zone: "{{ agnosticd_aws_capacity_reservation_results.reservations.az1.availability_zone }}"
          # masters
          openshift_controlplane_aws_zones_odcr:
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.masters.availability_zone }}"
          # workers
          openshift_machineset_aws_zones_odcr:
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.workers1.availability_zone }}"
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.workers2.availability_zone }}"

      - when: ocp4_cluster_pre_infra_odcr_profile == 'ha'
        name: Set availability zone for bastion, masters and workers (High Availability)
        set_fact:
          # Cloudformation (bastion)
          aws_availability_zone: "{{ agnosticd_aws_capacity_reservation_results.reservations.az1.availability_zone }}"
          # masters
          openshift_controlplane_aws_zones_odcr:
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.az1.availability_zone }}"
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.az2.availability_zone }}"
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.az3.availability_zone }}"
          # workers
          openshift_machineset_aws_zones_odcr:
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.az1.availability_zone }}"
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.az2.availability_zone }}"
          - "{{ agnosticd_aws_capacity_reservation_results.reservations.az3.availability_zone }}"
