---
# -------------------------------------------------------------------
# Default Variables for Amazon Web Services
# -------------------------------------------------------------------

# The type of cloud provider this will be deployed to
cloud_provider: ec2

# This is an account that must exist in OpenStack.
# It is used to create projects, access, Heat templates
admin_user: opentlc-mgr

# This is the user that Ansible will use to connect to the nodes it is
# configuring from the admin/control host
ansible_user: ec2-user

# -------------------------------------------------------------------
# AWS Infrastructure
# -------------------------------------------------------------------

# See cloud_providers/ec2_default_vars.yml
# See roles-infra/infra-ec2-project-create/defaults/main.yml

# The region to be used, if not specified by -e in the command line
aws_region: us-east-2

# The availability Zones for which to create worker MachineSets for.
# Leave empty for the default (set up one MachineSet for
# each availability zone).
# Set to 5 entries or less for deployment in Sandboxes (each MachineSet needs an EIP
# and Sandboxes only have 5 EIPs available).
openshift_machineset_aws_zones: []
# openshift_machineset_aws_zones:
# - us-east-1a
# - us-east-1b
# - us-east-1c

# -------------------------------------------------------------------
# Project Tag
# -------------------------------------------------------------------

project_tag: "{{ env_type }}-{{ guid }}"

# -------------------------------------------------------------------
# AWS Networking
# -------------------------------------------------------------------

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
# It needs to match the subdomain_base_suffix below
HostedZoneId: Z3IHLWJZOU9SRT

## Networking (AWS)
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base_short: "{{ guid }}"
subdomain_base: "{{ guid }}{{ subdomain_base_suffix }}"

zone_internal_dns: "{{ guid }}.internal."
chomped_zone_internal_dns: "{{ guid }}.internal"

bastion_public_dns: "bastion.{{ subdomain_base }}."
bastion_public_dns_chomped: "bastion.{{ subdomain_base }}"
vpcid_name_tag: "{{ subdomain_base }}"

# The OpenShift 4 base domain (must match the HostedZoneId)
ocp4_base_domain: "{{ subdomain_base }}"

# -------------------------------------------------------------------
# AWS EC2 Instances
# -------------------------------------------------------------------

# Bastion Configuration
bastion_instance_type: "t3a.medium"
bastion_instance_image: RHEL82GOLD
#bastion_instance_platform: Linux/UNIX
# For standard (not GOLD) RHEL images:
#bastion_instance_platform: Red Hat Enterprise Linux
# used for on-demand capacity reservation:
bastion_instance_platform: >-
  {%- if 'RHEL' in bastion_instance_image -%}
  {%-   if 'GOLD' in bastion_instance_image -%}
  Linux/UNIX
  {%-   else -%}
  Red Hat Enterprise Linux
  {%-   endif -%}
  {%- else -%}
  Linux/UNIX
  {%- endif -%}

# Root Filesystem Size
bastion_rootfs_size: 30

# Masters

master_instance_type_family: m5a
master_instance_type_size: >-
  {{ 'xlarge' if worker_instance_count|int <= 10
  else '2xlarge' if worker_instance_count|int <= 20
  else '4xlarge'
  }}
master_instance_type: "{{ master_instance_type_family }}.{{ master_instance_type_size }}"

master_instance_count: 3
master_storage_type: >-
  {{ 'io1' if worker_instance_count|int >= 10
  else 'gp2' }}

# When master_storage_type is io1 or io2, you can set the IOPS.
# You usually want to leave it as the default IOPS value is calculated in the role host-ocp4-installer
# master_storage_iops: 2000

worker_instance_type: "m5a.4xlarge"
worker_instance_count: 2
worker_storage_type: "gp2"

# Instances to be provisioned
# Provide these as a list.
# Each instance type can have any number of replicas deployed with the same
# configuration.
# Metadata in OpenStack is equivelent to tags in AWS
# These instances will be created with Cinder persistent volumes
instances:
- name: "bastion"
#  count: "{{ bastion_instance_count}}"
#  unique: "{{ true if clientvm_instance_count | int <= 1 else false }}"
  count: 1
  unique: true
  public_dns: true
  alt_name:
  - clientvm
  image: "{{ bastion_instance_image }}"
  flavor:
    "ec2": "{{ bastion_instance_type }}"
  tags:
  - key: "AnsibleGroup"
    value: "bastions,clientvms"
  - key: "ostype"
    value: "linux"
  - key: "Purpose"
    value: "{{ purpose }}"
  - key: "project"
    value: "{{ project_tag }}"
  - key: "user"
    value: "{{ student_name }}"
  rootfs_size: "{{ bastion_rootfs_size }}"
  security_groups:
  - BastionSG

# -------------------------------------------------------------------
# AWS On-demand Capacity
# -------------------------------------------------------------------
# To disable ODCR entirely, just set the following variable to false:
#agnosticd_aws_capacity_reservation_enable: false

######################################
# ocp4-cluster for workshops and labs
######################################
# This ODCR config is the one that has the most chances to successfully deploy.
# It has very few constraints and the goal is to avoid Insufficient
# Instance Capacity errors.
#
# - Workers are split on 2 zones, if possible. Can be a single zone.
# - Masters are all in the same zone.
# - Bastion has its own zone, which can also be the same as the other zones,
#   because we don't request zones to be distinct.
# Zones can be the same, not necessarly distinct.
agnosticd_aws_capacity_reservation_distinct: false
agnosticd_aws_capacity_reservations:
  # Bastion can have its own AZ
  az1:
  - instance_type: "{{ bastion_instance_type }}"
    instance_count: 1
    instance_platform: "{{ bastion_instance_platform }}"

  masters:
  - instance_type: "{{ master_instance_type }}"
    instance_count: 3
    instance_platform: Linux/UNIX

  # Split workers in 2 AZs if possible.  Could be the same zone.
  workers1:
  # Workers: half of workers
  - instance_type: "{{ worker_instance_type }}"
    instance_count: >-
      {{ ( worker_instance_count | int / 2 )
      | round(0, 'ceil')
      | int }}
    instance_platform: Linux/UNIX
  workers2:
  - instance_type: "{{ worker_instance_type }}"
    instance_count: >-
      {{ ( worker_instance_count | int / 2 )
      | round(0, 'ceil')
      | int }}
    instance_platform: Linux/UNIX
