heat_template_version: rocky

description: >
  Creates a port on the External network. The IP address will be chosen
  automatically if FixedIPs is empty.

parameters:
  ExternalNetName:
    description: The name of the external network.
    default: external
    type: string
  PortName:
    description: Name of the port
    default: ''
    type: string
  ControlPlaneIP: # Here for compatibility with noop.yaml
    description: IP address on the control plane
    default: ''
    type: string
  ControlPlaneSubnetCidr: # Here for compatibility with noop.yaml
    default: ''
    description: >
      The subnet CIDR of the control plane network. (The parameter is
      automatically resolved from the ctlplane subnet's cidr attribute.)
    type: string
  ControlPlaneNetwork: # Here for compatibility with ctlplane_vip.yaml
    description: The name of the undercloud Neutron control plane
    default: ctlplane
    type: string
  ControlPlaneSubnet: # Here for compatibility with ctlplane_vip.yaml
    description: The name of the undercloud Neutron control plane subnet
    default: ctlplane-subnet
    type: string
  FixedIPs:
    description: >
        Control the IP allocation for the VIP port. E.g.
        [{'ip_address':'1.2.3.4'}]
    default: []
    type: json
  IPPool: # Here for compatibility with from_pool.yaml
    default: {}
    type: json
  NodeIndex: # Here for compatibility with from_pool.yaml
    default: 0
    type: number

conditions:
  network_is_ctlplane:
    equals:
    - get_param: ExternalNetName
    - ctlplane
  fixed_ip_not_set:
    equals:
    - yaql:
        expression: $.data.where($.get('ip_address'))
        data: {get_param: FixedIPs}
    - []
  net_is_ctlplane_and_fixed_ip_not_set:
    and:
    - network_is_ctlplane
    - fixed_ip_not_set

resources:

  ExternalPort:
    type: OS::Neutron::Port
    properties:
      network: {get_param: ExternalNetName}
      name: {get_param: PortName}
      fixed_ips:
        if:
        - net_is_ctlplane_and_fixed_ip_not_set
        - [{subnet: {get_param: ControlPlaneSubnet}}]
        - get_param: FixedIPs
      replacement_policy: AUTO

outputs:
  ip_address:
    description: External network IP
    value: {get_attr: [ExternalPort, fixed_ips, 0, ip_address]}
  ip_address_uri:
    description: External network IP (with brackets for IPv6 URLs)
    value:
      str_replace:
        template:
          make_url:
            host: {get_attr: [ExternalPort, fixed_ips, 0, ip_address]}
        params:
          //: ''
  ip_subnet:
    description: IP/Subnet CIDR for the External network IP
    value:
          list_join:
            - ''
            - - {get_attr: [ExternalPort, fixed_ips, 0, ip_address]}
              - '/'
              - {str_split: ['/', {get_attr: [ExternalPort, subnets, 0, cidr]}, 1]}
  host_routes:
    description: Host routes of the ports subnet
    value:
          get_attr: [ExternalPort, subnets, 0, host_routes]
  mtu:
    description: The maximum transmission unit (MTU)
    value:
          get_attr: [ExternalPort, network, mtu]
  gateway_ip:
    description: Gateway IP of the ports subnet
    value:
          get_attr: [ExternalPort, subnets, 0, gateway_ip]
  cidr:
    description: CIDR of the ports subnet
    value:
      str_split: ['/', {get_attr: [ExternalPort, subnets, 0, cidr]}, 1]