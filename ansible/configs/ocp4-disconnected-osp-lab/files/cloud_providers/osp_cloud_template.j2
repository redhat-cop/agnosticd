heat_template_version: 2018-03-02

description: New project and bastion for OpenShift

resources:

  network_private:
    type: OS::Neutron::Net
    properties:
      name: "{{ guid }}-network"
      shared: false

  subnet_private:
    type: OS::Neutron::Subnet
    properties:
      name: "{{ guid }}-subnet"
      network_id: { get_resource: network_private }
      cidr: 192.168.47.0/24
      dns_nameservers: [ {{ dns_nameservers }} ]
      gateway_ip: 192.168.47.1
      allocation_pools:
      -  start: 192.168.47.10
         end: 192.168.47.99

  router:
    type: OS::Neutron::Router
    properties:
      name: "{{ guid }}-router"
      external_gateway_info:
        network: "{{ provider_network }}"

  router_private_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet_private }

{% for security_group in security_groups %}
  {{security_group['name']}}:
    type: OS::Neutron::SecurityGroup
    properties:
      name: "{{ security_group['name'] }}"
      description: "{{ security_group['description'] }}"
      rules:
{% for rule in security_group.rules %}
        - protocol: {{ rule['protocol'] }}
          direction: {{ rule['direction'] }}
{% if rule['port_range_min'] is defined %}
          port_range_min: {{ rule['port_range_min'] }}
{% endif %}
{% if rule['port_range_max'] is defined %}
          port_range_max: {{ rule['port_range_max'] }}
{% endif %}
{% if rule['remote_ip_prefix'] is defined %}
          remote_mode: remote_ip_prefix
          remote_ip_prefix: {{ rule['remote_ip_prefix'] }}
{% endif %}
{% if rule['remote_group_id'] is defined %}
          remote_mode: remote_group_id
          remote_group_id: {get_resource: {{ rule['remote_group_id'] }} }
{% endif %}
{% endfor %}
{% endfor %}

{% for instance in instances %}
{% if instance['count'] > 1 %}
  {{ instance['name'] }}_port_{{ loop.index0 }}:
{% else %}
  {{ instance['name'] }}_port:
{% endif %}
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_private }
      security_groups:
{% for security_group in instance.security_groups %}
        - { get_resource: {{ security_group }} }
{% endfor %}

  {{instance['name']}}:
    type: OS::Nova::Server
    properties:
{% if instance['count'] > 1 %}
      name: {{ instance['name'] }}_{{ loop.index0 }}
{% else %}
      name: {{ instance['name'] }}
{% endif %}
      image: {{ instance['image_id'] }}
      flavor: {{ instance['flavor'] }}
      user_data: |
        #cloud-config
        ssh_authorized_keys: {{ all_ssh_authorized_keys | to_json }}
      user_data_format: RAW
      networks:
{% if instance['count'] > 1 %}
        - port: { get_resource: {{ instance['name'] }}_port_{{ loop.index0 }} }
{% else %}
        - port: { get_resource: {{ instance['name'] }}_port }
{% endif %}
{% if instance['metadata'] %}
      metadata:
{% for data in instance['metadata'] %}
{% for key, value in data.items() %}
        {{ key }}: {{ value }}
{% endfor %}
{% endfor %}
{% endif %}

{% if instance.floating_ip %}
{% if instance['count'] > 1 %}
  {{ instance['name']}}_fip_{{ loop.index0 }}:
{% else %}
  {{ instance['name']}}_fip:
{% endif %}
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ provider_network }}"

{% if instance['count'] > 1 %}
  {{instance['name']}}_fip_association_{{ loop.index0 }}:
{% else %}
  {{instance['name']}}_fip_association:
{% endif %}
    type: OS::Neutron::FloatingIPAssociation
    properties:
{% if instance['count'] > 1 %}
      floatingip_id: { get_resource: {{ instance['name'] }}_fip_{{ loop.index0 }} }
      port_id: { get_resource: {{ instance['name'] }}_port_{{ loop.index0 }} }
{% else %}
      floatingip_id: { get_resource: {{ instance['name'] }}_fip }
      port_id: { get_resource: {{ instance['name'] }}_port }
{% endif %}
    depends_on: router_private_interface
{% endif %}
{% endfor %}

{% if openshift_fip_provision %}
  ocp_api_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ provider_network }}"
  
  ocp_ingress_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ provider_network }}"
{% endif %}
{#}
outputs:
{% for instance in instances if instance.floating_ip %}
  {{instance['name']}}_fip:
    description: The floating IP of the bastion instance
    value: {get_attr: [ {{ instance['name'] }}_fip, floating_ip_address ] }
{% endfor %}

{% if openshift_fip_provision %}
  ocp_api_fip:
    description: The floating IP of the OpenShift API
    value: { get_attr: [ ocp_api_fip, floating_ip_address ] }

  ocp_ingress_fip:
    description: The floating IP of the OpenShift ingress
    value: { get_attr: [ ocp_ingress_fip, floating_ip_address ] }
{% endif %}
#}
