heat_template_version: 2018-03-02

description: Top level HOT for creating new project, network resources, and instances. This template relies on ResourceGroups and a nested template that is called to provision instances, ports, & floating IPs.

resources:
  infra_key:
    type: OS::Nova::KeyPair
    properties:
      name: infra_key
      save_private_key: true

{% for network in networks %}
  {{ network['name'] }}-network:
    type: OS::Neutron::Net
    properties:
      name: "{{ guid }}-{{ network['name'] }}-network"
      shared: {{ network['shared'] }}

  {{ network['name'] }}-subnet:
    type: OS::Neutron::Subnet
    properties:
      name: "{{ guid }}-{{ network['name'] }}-subnet"
      network_id: { get_resource: {{ network['name'] }}-network }
{% if network['custom_dns'] is defined %}
      dns_nameservers: [ {{ network['dns_nameservers'] }} ]
{% endif %}
      cidr: {{ network['subnet_cidr'] }}
      gateway_ip: {{ network['gateway_ip'] }}
      allocation_pools:
      -  start: {{ network['allocation_start'] }}
         end: {{ network['allocation_end'] }}

{% if network['create_router'] %}
  {{ network['name'] }}-router:
    type: OS::Neutron::Router
    properties:
      name: "{{ guid }}-{{ network['name'] }}-router"
      external_gateway_info:
        network: "{{ provider_network }}"

  router_private_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: {{ network['name'] }}-router }
      subnet: { get_resource: {{ network['name'] }}-subnet }
{% endif %}
{% endfor %}

{% for security_group in security_groups %}
  {{security_group['name']}}:
    type: OS::Neutron::SecurityGroup
    properties:
      name: "{{ security_group['name'] }}"
      description: "{{ security_group['description'] }}"
      rules:
{% for rule in security_group.rules %}
        - protocol: {{ rule['protocol'] }}
          direction: {{ rule['direction'] }}
{% if rule['port_range_min'] is defined %}
          port_range_min: {{ rule['port_range_min'] }}
{% endif %}
{% if rule['port_range_max'] is defined %}
          port_range_max: {{ rule['port_range_max'] }}
{% endif %}
{% if rule['remote_ip_prefix'] is defined %}
          remote_mode: remote_ip_prefix
          remote_ip_prefix: {{ rule['remote_ip_prefix'] }}
{% endif %}
{% if rule['remote_group_id'] is defined %}
          remote_mode: remote_group_id
          remote_group_id: {get_resource: {{ rule['remote_group_id'] }} }
{% endif %}
{% endfor %}
{% endfor %}

{% for instance in instances %}
  {{instance['name']}}:
    type: OS::Heat::ResourceGroup
    properties:
      count: {{ instance['count'] }}
      resource_def:
        type: {{ heat_nested_template }}
        properties:
          network_private: { get_resource: {{ instance['network']-network }} }
          volume_size: {{ instance['rootfs_size'] | default(osp_default_rootfs_size) }}
          security_groups:
{% for security_group in instance.security_groups %}
            - {{ security_group }}
{% endfor %}
          provider_network: {{ provider_network}}
{% if instance['count'] > 1 %}
          instance_name: {{ instance['name'] }}_%index%
{% else %}
          instance_name: {{ instance['name'] }}
{% endif %}
          instance_flavor: {{ instance['flavor'].osp }}
          instance_image: {{ instance['image_id'] }}
{% if instance.floating_ip %}
          instance_fip: true
{% else %}
          instance_fip: false
{% endif %}
{% if instance['metadata'] %}
          instance_metadata:
{% for data in instance['metadata'] %}
{% for key, value in data.items() %}
            {{ key }}: {{ value }}
{% endfor %}
{% endfor %}
{% endif %}
    depends_on:
      - router_private_interface
{% for security_group in instance.security_groups %}
      - {{ security_group }}
{% endfor %}
{% endfor %}

{% if openshift_fip_provision %}
  ocp_api_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ provider_network }}"
  
  ocp_ingress_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "{{ provider_network }}"
{% endif %}

outputs:
  infra_key:
    description: The SSH infra key
    value: { get_attr: [ infra_key, private_key ] }

{% if openshift_fip_provision %}
  ocp_api_fip:
    description: The floating IP of the OpenShift API
    value: { get_attr: [ ocp_api_fip, floating_ip_address ] }

  ocp_ingress_fip:
    description: The floating IP of the OpenShift ingress
    value: { get_attr: [ ocp_ingress_fip, floating_ip_address ] }
{% endif %}
