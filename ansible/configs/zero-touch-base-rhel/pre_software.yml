---
- name: Step 003 Pre Software
  hosts: localhost
  gather_facts: false
  become: false
  tags:
    - step004
    - pre_software

  tasks:

    - name: "Step 003 Pre Software"
      ansible.builtin.debug:
        msg: "Step 000 Pre Software"

    - name: Set local ssh key
      when: agd_set_env_authorized_key | default(true) | bool
      ansible.builtin.import_role:
        name: create_ssh_provision_key

- name: Configure all hosts with Repositories, Common Files and Set environment key
  hosts: all:!centos
  become: true
  gather_facts: false
  tags:
    - step004
    - common_tasks

  tasks:

    - name: Setup Repositories
      when: repo_method is defined
      ansible.builtin.import_role:
        name: set-repositories

    - name: Install common packages from common_packages list
      when: agd_install_common | default(true) | bool
      ansible.builtin.import_role:
        name: common

    - name: Setup the authorized ssh key
      when: set_env_authorized_key | default(true) | bool
      ansible.builtin.import_role:
        name: set_env_authorized_key

- name: Configuring Bastion Hosts
  hosts: bastions
  become: true
  tags:
    - step004
    - bastion_tasks

  tasks:

    - name: Install basic bastion configuration
      when: agd_install_bastion_base | default(true) | bool
      ansible.builtin.import_role:
        name: bastion-base

    - name: Create a user for RHEL Zero labs
      when: zero_touch_rhel_user | default(true) | bool
      ansible.builtin.include_role:
        name: zero_touch_rhel_user

    - name: Setup ssh for the zero_touch_rhel_user
      block:
        - name: create /home/{{ zero_touch_rhel_user_user_name }}/.ssh
          ansible.builtin.file:
            dest: /home/{{ zero_touch_rhel_user_user_name }}/.ssh
            mode: 0700
            owner: "{{ zero_touch_rhel_user_user_name }}"
            group: "users"
            state: directory

        - name: copy the environment .pem key
          ansible.builtin.copy:
            src: "{{ hostvars.localhost.env_authorized_key_path }}"
            dest: "/home/{{ zero_touch_rhel_user_user_name }}/.ssh/{{ env_authorized_key }}.pem"
            owner: "{{ zero_touch_rhel_user_user_name }}"
            group: "users"
            mode: 0400

        - name: copy the environment .pub key
          ansible.builtin.copy:
            content: "{{ hostvars.localhost.env_authorized_key_content_pub }}"
            dest: "/home/{{ zero_touch_rhel_user_user_name }}/.ssh/{{ env_authorized_key }}.pub"
            owner: "{{ zero_touch_rhel_user_user_name }}"
            group: "users"
            mode: 0400

        - name: copy .ssh/config template
          ansible.builtin.template:
            src: ./files/ssh_config.j2
            dest: /home/{{ zero_touch_rhel_user_user_name }}/.ssh/config
            owner: "{{ zero_touch_rhel_user_user_name }}"
            group: "users"
            mode: 0400

        - name: Set authorized key from file
          authorized_key:
            user: "{{ zero_touch_rhel_user_user_name }}"
            state: present
            key: "{{ hostvars.localhost.ssh_provision_pubkey_content
              | default(hostvars.localhost.env_authorized_key_content_pub) }}"

    - name: Inject assets
      when:
        - asset_injector_assets is defined
        - asset_injector_assets | length > 0
      include_role:
        name: asset_injector

- name: Setup legacy systems
  hosts: all:!bastions
  become: true
  tasks:
    - name: Setup ssh for showroom_ssh_host
      when: (ansible_distribution == "CentOS" or ansible_distribution == "RedHat") and ansible_distribution_major_version == "7"
      block:
        - name: Configure CentOS7 systems for vault repos
          when:
            - "ansible_distribution == 'CentOS'"
            - "ansible_distribution_major_version | int  == 7"
          ansible.builtin.import_role:
            name: centos-eol-repos

        - name: Install common packages from common_packages list
          when:
            - "agd_install_common | default(true) | bool"
            - "ansible_distribution != 'CentOS'"
          ansible.builtin.import_role:
            name: common

        - name: install tmux
          ansible.builtin.package:
            name:
              - tmux
            state: latest

        - name: Inject assets
          when:
            - asset_injector_assets is defined
            - asset_injector_assets | length > 0
          include_role:
            name: asset_injector

    - name: create /root/.ssh
      ansible.builtin.file:
        dest: /root/.ssh
        mode: 0700
        owner: "root"
        group: "root"
        state: directory

    - name: copy the environment .pem key
      ansible.builtin.copy:
        src: "{{ hostvars.localhost.env_authorized_key_path }}"
        dest: "/root/.ssh/{{ env_authorized_key }}.pem"
        owner: "root"
        group: "root"
        mode: 0400

    - name: copy the environment .pub key
      ansible.builtin.copy:
        content: "{{ hostvars.localhost.env_authorized_key_content_pub }}"
        dest: "/root/.ssh/{{ env_authorized_key }}.pub"
        owner: "root"
        group: "root"
        mode: 0400

    - name: copy .ssh/config template
      ansible.builtin.template:
        src: ./files/ssh_config.j2
        dest: /root/.ssh/config
        owner: "root"
        group: "root"
        mode: 0400

    - name: Set authorized key from file
      authorized_key:
        user: "root"
        state: present
        key: "{{ hostvars.localhost.ssh_provision_pubkey_content
          | default(hostvars.localhost.env_authorized_key_content_pub) }}"

- name: Pre-software asset inject
  hosts: all:!bastions
  become: true
  tasks:
    - name: Inject assets
      when:
        - pre_software_asset_injector | default(false) | bool
        - asset_injector_assets is defined
        - asset_injector_assets | length > 0
      include_role:
        name: asset_injector

- name: Setup Satellite systems
  hosts: satellites
  become: true
  tasks:
    - name: Configure satellite admin password
      command: "foreman-rake permissions:reset password={{ zt_satellite_user_password }}"

    - name: Update hammer admin password in /root/.hammer/cli.modules.d/foreman.yml
      lineinfile:
        path: /root/.hammer/cli.modules.d/foreman.yml
        regexp: 'password'
        line: "  :password: '{{ zt_satellite_user_password }}'"

    - name: Set original gold image hostname via hostnamectl
      command: >-
        hostnamectl set-hostname {{ zt_satellite_internal_fqdn }}

    - name: change satellite hostname
      shell: >-
        satellite-change-hostname {{ zt_satellite_external_fqdn }}
        -u {{ zt_satellite_user_name }} -p {{ zt_satellite_user_password }} --skip-dns --assumeyes
      register: satellite_change_hostname
      failed_when: '"Success!" not in satellite_change_hostname.stdout'

    - name: Configure Satellite for Ansible
      block:
        - name: Update satellite with LetsEncrypt cert and enable registration and template modules
          shell: >-
            satellite-installer --scenario satellite
            --foreman-proxy-plugin-remote-execution-script-ssh-identity-dir "/root/.ssh/"
            --foreman-proxy-plugin-remote-execution-script-ssh-identity-file "{{ guid }}key.pem"
            --foreman-proxy-registration true
            --foreman-proxy-templates true
            -y
          register: satellite_update_ansible
          failed_when: '"Success!" not in satellite_update_ansible.stdout'

        - name: Grant foreman-proxy access to ssh-key dir
          ansible.posix.acl:
            path: /root/.ssh/
            default: true
            entity: foreman-proxy
            etype: user
            permissions: rwx
            state: present

        - name: motd
          copy:
            dest: /etc/motd
            content: |
              #########################################
              ## Login with Password {{ zt_satellite_user_password }} ##
              #########################################

    - name: print satellite user.info
      agnosticd_user_info:
        msg: |
          Satellite URL: https://{{ zt_satellite_external_fqdn }}
          Satellite User: {{ zt_satellite_user_name }}
          Satellite User Password: {{ zt_satellite_user_password }}

    - name: Save user data
      agnosticd_user_info:
        data:
          zt_satellite_url: "https://{{ zt_satellite_external_fqdn }}"
          zt_satellite_user_name: "{{ zt_satellite_user_name }}"
          zt_satellite_user_password: "{{ zt_satellite_user_password }}"

- name: PreSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - flight_check

  tasks:

    - name: "Pre-Software checks completed successfully"
      ansible.builtin.debug:
        msg: "Pre-Software checks completed successfully"

- name: Run pre_software_validation playbook
  when: >-
    agd_pre_software_validation | default(false) | bool
      or agd_validation | default(false) | bool
  ansible.builtin.import_playbook: pre_software_validation.yml
  tags:
    - pre_software_validation
    - agd_validation

...
