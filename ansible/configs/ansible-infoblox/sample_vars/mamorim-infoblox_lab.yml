---
email: mamorim@redhat.com
key_name: mamorim-key
guid: mma1
provider_network: external
osp_default_rootfs_size: 30
all_ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvZvn+GL0wTOsAdh1ikIQoqj2Fw/RA6F14O347rgKdpkgOQpGQk1k2gM8wcla2Y1o0bPIzwlNy1oh5o9uNjZDMeDcEXWuXbu0cRBy4pVRhh8a8zAZfssnqoXHHLyPyHWpdTmgIhr0UIGYrzHrnySAnUcDp3gJuE46UEBtrlyv94cVvZf+EZUTaZ+2KjTRLoNryCn7vKoGHQBooYg1DeHLcLSRWEADUo+bP0y64+X/XTMZOAXbf8kTXocqAgfl/usbYdfLOgwU6zWuj8vxzAKuMEXS1AJSp5aeqRKlbbw40IkTmLoQIgJdb2Zt98BH/xHDe9xxhscUCfWeS37XLp75J
default_security_groups: []
use_dynamic_dns: false
osp_project_create: false
#  - default
used_security_groups:
  - WebSG
  - BastionSG
  - HostSG
  - VNIOS

network_private: public
multi_network: true
multi_network_primary: "{{ guid }}-{{ network_private }}-network"

default_metadata:
  guid: "{{ guid }}"
  env_type: "{{ env_type }}"

# sample vars configuration file

env_type: ansible-infoblox           # Name of config to deploy
cloud_provider: osp                     # Which AgnosticD Cloud Provider to use

repo_version: 3.7.3-1

software_to_deploy: tower               # Tower deployment from software/tower.yml
tower_version: 3.7.3-1

inventory_groups:
  - app_servers
  - load_balancers
  - database_servers
  - tower

common_packages:
  - python
  - python-pip
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - git
  - vim-enhanced
  - at
  - ansible
  - tree

# Default instance type

__instance_type: 2c2g30d 

# Default Image

__image: rhel-server-7.7-update-2  

networks:
- name: public
  shared: "false"
  subnet_cidr: 192.168.47.0/24
  gateway_ip: 192.168.47.1
  allocation_start: 192.168.47.10
  allocation_end: 192.168.47.254
  dns_nameservers: []
  create_router: true
- name: internal
  shared: "false"
  subnet_cidr: 10.10.10.0/24
  gateway_ip: 10.10.10.1
  allocation_start: 10.10.10.10
  allocation_end: 10.10.10.254
  dns_nameservers: []
  create_router: false


# Environment Instances
security_groups:
  - name: BastionSG
    rules:
      - name: SSH
        description: "Allow SSH port"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress


  - name: WebSG
    rules:
      - name: WebSGHTTPPort
        description: "Allow HTTP port"
        from_port: 80
        to_port: 80
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
        
      - name: WebSGHTTPsPort
        description: "Allow HTTPs port"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress

  - name: HostSG
    rules:
      - name: HostSGTCP
        description: "Allow everything from HostSG nodes"
        from_port: 1
        to_port: 65535
        protocol: tcp
        from_group: HostSG
        rule_type: Ingress

      - name: HostSGUDP
        description: "Allow everything from HostSG nodes"
        from_port: 1
        to_port: 65535
        protocol: udp
        from_group: HostSG
        rule_type: Ingress
      - name: ICMP
        description: VNIOS SSH
        protocol: icmp
        rule_type: Ingress
        from_group: VNIOS

  - name: VNIOS
    rules:
      - name: https
        description: Allow HTTPS
        from_port: 443
        to_port: 443
        protocol: tcp
        rule_type: Ingress
        from_group: VNIOS

      - name: tunnel
        description: VNIOS Tunnel
        from_port: 1023
        to_port: 1023
        protocol: udp
        rule_type: Ingress
        from_group: VNIOS

      - name: tunnel1
        description: VNIOS Tunnel 1
        from_port: 1194
        to_port: 1194
        protocol: udp
        rule_type: Ingress
        from_group: VNIOS

      - name: tunnel2
        description: VNIOS Tunnel 2
        from_port: 2114
        to_port: 2114
        protocol: udp
        rule_type: Ingress
        from_group: VNIOS

      - name: tunnel3
        description: VNIOS Tunnel 3
        from_port: 802
        to_port: 802
        protocol: udp
        rule_type: Ingress
        from_group: VNIOS

      - name: SSH
        description: VNIOS SSH
        from_port: 22
        to_port: 22
        protocol: udp
        rule_type: Ingress
        from_group: VNIOS

      - name: ICMP
        description: VNIOS SSH
        protocol: icmp
        rule_type: Ingress
        from_group: VNIOS


instances:
  - name: "bastion"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image_id: "{{ bastion_instance_image | default(__image) }}"
    flavor:
      osp: "{{ bastion_instance_type | default(__instance_type) }}"
    security_groups:
      - BastionSG
      - WebSG
    networks:
      - internal
      - public
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"

  - name: "tower"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image_id: "{{ bastion_instance_image | default(__image) }}"
    flavor:
      osp: "2c4g30d"
    security_groups:
      - BastionSG
      - WebSG
    networks:
      - internal
      - public
    tags:
      - key: "AnsibleGroup"
        value: "tower,towers"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"

  - name: "frontend1"
    count: "{{ frontend_instance_count | default(1) }}"
    public_dns: true
    dns_loadbalancer: true
    image_id: "{{ frontend_instance_image | default(__image) }}"
    flavor:
      osp: "{{ frontend_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "load_balancers"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - WebSG
      - HostSG
    networks:
      - internal
      - public

  - name: "nios-1"
    count: 1
    public_dns: true
    image_id: "nios-851"
    rootfs_size: 100
    # Disable port security, this is required when we have a DHCP running on OpenStack
    port_security: false
    flavor:
      osp: "GLOBAL-CPU_4_Memory_12288_Disk_70_flavor"

    tags:
      - key: "AnsibleGroup"
        value: "clientvms"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - HostSG
      - VNIOS
    networks:
      - internal
      - public

  - name: "appdb1"
    count: "{{ appdb_instance_count | default(1) }}"
    public_dns: false
    image_id: "{{ appdb_instance_image | default(__image) }}"
    flavor:
       osp: "{{ appdb_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "database_servers"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"
    security_groups:
      - WebSG
      - HostSG
    networks:
      - internal
      - public


#### OSP ####
# See cloud_providers/osp_default_vars.yml
# See roles-infra/infra-osp-project-create/defaults/main.yml

# Set this to true if you need to create a new project in OpenStack
# This should almost always be set to true for OpenShift installations
# If it is set to false, the {{ osp_project_name }} must already exist and
# should be able to run whatever you are deploying
#osp_project_create: true

# If osp_project_create is set to yes, define those:
# Quotas to set for new project that is created
#quota_num_instances: 15
#quota_num_cores: 72
#quota_memory: 131072 # in MB
#quota_num_volumes: 25
#quota_volumes_gigs: 500
#quota_loadbalancers: #when Octavia is available
#quota_pool: #when Octavia is available
#quota_networks: 3
#quota_subnets: 3
#quota_routers: 3
quota_fip: 7
#quota_sg: 10
#quota_sg_rules: 100
...







...
