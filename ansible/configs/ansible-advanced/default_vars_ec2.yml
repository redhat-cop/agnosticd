---
### AWS EC2 Environment settings

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
HostedZoneId: Z3IHLWJZOU9SRT
# The region to be used, if not specified by -e in the command line
aws_region: us-east-1
# The key that is used to
key_name: ocpkey

## Networking (AWS)
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"
zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

## Environment Sizing
# Instance Type
__instance_type: "t2.medium"
# Image ID
# __image: RHELAMI
__image: RHEL77

security_groups:
  # - name: TowerSG
  #   rules:
  #     - name: AllTowerSG
  #       description: "Allow all traffic among TowerSG nodes"
  #       from_port: 0
  #       to_port: 65535
  #       protocol: -1
  #       from_group: TowerSG
  #       rule_type: Ingress
  #     - name: TowerHTTPPorts
  #       description: "HTTP Public"
  #       from_port: 80
  #       to_port: 80
  #       protocol: tcp
  #       cidr: "0.0.0.0/0"
  #       rule_type: Ingress
  #     - name: TowerHTTPsPorts
  #       description: "HTTPs Public"
  #       from_port: 443
  #       to_port: 443
  #       protocol: tcp
  #       cidr: "0.0.0.0/0"
  #       rule_type: Ingress

  # - name: TowerProdSG
  #   rules:
  #     - name: AllTowerProdSG
  #       description: "Allow all traffics among TowerProdSG nodes"
  #       from_port: 0
  #       to_port: 65535
  #       protocol: -1
  #       from_group: TowerSG
  #       rule_type: Ingress

  - name: HostSG
    rules:
      - name: AllHostSG
        description: "Allow all traffic among HostSG nodes"
        from_port: 0
        to_port: 65535
        protocol: -1
        from_group: HostSG
        rule_type: Ingress
      - name: FromTowerSG
        description: "Allow everything from TowerSG nodes"
        from_port: 0
        to_port: 65535
        protocol: -1
        from_group: DefaultSG
        rule_type: Ingress
      # - name: FromTowerSG
      #   description: "Allow everything from TowerSG nodes"
      #   from_port: 0
      #   to_port: 65535
      #   protocol: -1
      #   from_group: TowerSG
      #   rule_type: Ingress
  # - name: HostProdSG
  #   rules:
  #     - name: AllHostProdSG
  #       description: "Allow all traffic among HostProdSG nodes"
  #       from_port: 0
  #       to_port: 65535
  #       protocol: -1
  #       from_group: HostProdSG
  #       rule_type: Ingress
  #     - name: FromTowerProdSG
  #       description: "Allow all traffic from TowerProdSG nodes"
  #       from_port: 0
  #       to_port: 65535
  #       protocol: -1
  #       from_group: TowerProdSG
  #       rule_type: Ingress


instances:
  - name: control
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image: "{{ bastion_instance_image | default(__image) }}"
    flavor:
      ec2: "{{ bastion_instance_type | default(__instance_type) }}"
    security_groups:
      - BastionSG
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_bastion | default(50)  }}"

  - name: utility
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image: "{{ bastion_instance_image | default(__image) }}"
    flavor:
      ec2: "{{ bastion_instance_type | default(__instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "utilities"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    security_groups:
      - HostSG
      - DefaultSG


  # - name: "tower"
  #   count: "{{ tower_instance_count | default(2) }}"
  #   public_dns: true
  #   dns_loadbalancer: true
  #   image: "{{ tower_instance_image | default(__image) }}"
  #   flavor:
  #     "ec2": "{{ tower_instance_type | default(__instance_type) }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "towers"
  #     - key: "ostype"
  #       value: "linux"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   key_name: "{{key_name}}"
  #   security_groups:
  #     - DefaultSG
  #     - TowerSG

  # - name: "towerprod"
  #   count: "{{ towerprod_instance_count | default(1) }}"
  #   public_dns: true
  #   dns_loadbalancer: true
  #   image: "{{ towerprod_instance_image | default(__image) }}"
  #   flavor:
  #     "ec2": "{{ towerprod_instance_type | default(__instance_type) }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "towers"
  #     - key: "ostype"
  #       value: "linux"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   key_name: "{{key_name}}"
  #   security_groups:
  #     - DefaultSG
  #     - TowerSG
  #     - TowerProdSG
      
  # - name: "towerdb"
  #   count: "{{ db_instance_count | default(1) }}"
  #   public_dns: false
  #   image: "{{ db_instance_image | default(__image) }}"
  #   flavor:
  #     ec2: "{{ db_instance_type | default(__instance_type) }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "towerdbs"
  #     - key: "ostype"
  #       value: "rhel"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   key_name: "{{key_name}}"
  #   security_groups:
  #     - DefaultSG
  #     - HostSG

  # - name: "frontend"
  #   count: "{{ frontend_instance_count | default(1) }}"
  #   public_dns: false
  #   image: "{{ frontend_instance_image | default(__image) }}"
  #   flavor:
  #     ec2: "{{ frontend_instance_type | default(__instance_type) }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "frontends"
  #     - key: "ostype"
  #       value: "rhel"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   key_name: "{{key_name}}"
  #   security_groups:
  #     - DefaultSG
  #     - HostProdSG

  # - name: "app"
  #   count: "{{ app_instance_count | default(2) }}"
  #   public_dns: false
  #   image: "{{ app_instance_image | default(__image) }}"
  #   flavor:
  #     ec2: "{{ app_instance_type | default(__instance_type) }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "apps"
  #     - key: "ostype"
  #       value: "rhel"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   key_name: "{{key_name}}"
  #   security_groups:
  #     - DefaultSG
  #     - HostProdSG

  # - name: "appdb"
  #   count: "{{ appdb_instance_count | default(1) }}"
  #   public_dns: false
  #   image: "{{ appdb_instance_image | default(__image) }}"
  #   flavor:
  #     ec2: "{{ appdb_instance_type | default(__instance_type) }}"
  #   tags:
  #     - key: "AnsibleGroup"
  #       value: "appdbs"
  #     - key: "ostype"
  #       value: "rhel"
  #     - key: "instance_filter"
  #       value: "{{ env_type }}-{{ email }}"
  #   key_name: "{{key_name}}"
  #   security_groups:
  #     - DefaultSG
  #     - HostProdSG


...