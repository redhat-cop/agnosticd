#!/bin/bash

# Generate a tool to connect to, adminster, and monitor 
# Red Hat Cloud Suite Demo environments

# Print help
gentool_help() {
cat << EndGentoolHelp
    flags: -u | --user # username
           -g | --guid # GUID
           -k | --ssh-key # ssh key
           h | --help # print help
EndGentoolHelp
exit
}

# Parse flags
while [[ $# > 0 ]]
do
  key="$1"
  case $key in
    -u|--user)
      USER_NAME=$2
      shift # past argument
      ;;
    -g|--guid)
      ENVIRONMENT_GUID=$2
      shift # past argument
      ;;
    -k|--ssh-key)  
      KEY_PATH=$2
      shift # past argument
      ;;
    -h|--help)
      gentool_help
      shift # past argument
      ;;
    *)
      shift        # unknown option
      ;;
  esac
  shift # past argument or value
done

# Prompt username if not defined
if [[ -z $USER_NAME ]]; then
  echo "username: "
  read USER_NAME
fi

# Prompt guid if not defined
if [[ -z $ENVIRONMENT_GUID ]]; then
  echo "demo guid: "
  read ENVIRONMENT_GUID
fi

# Set ssh-key if not defined
if [[ -z $KEY_PATH ]]; then
  KEY_PATH="~/.ssh/id_rsa"
fi

####### Begin Access File Write #######
cat << FileEnd > $ENVIRONMENT_GUID-access
#!/bin/bash

USER_NAME=$USER_NAME
ENVIRONMENT_GUID=$ENVIRONMENT_GUID
KEY_PATH=$KEY_PATH
THIS_${ENVIRONMENT_GUID}_ACCESS_PATH=`pwd`/$ENVIRONMENT_GUID-access


# ssh into satellite and monitor production log
monitor_forman_production_log () {
  ssh_secondary_monitor satellite /var/log/foreman/production.log
  exit
}

# ssh into cloudforms and monitor migration logs
monitor_cloudforms_migration_logs () {
  ssh_secondary_monitor cf /mnt/migration/ova/mysql.rhcs.cloudlab.redhat.com/*log
  exit
}

# ssh into cloudforms and monitor migration errors
monitor_cloudforms_migration_errs () {
  ssh_secondary_monitor cf /mnt/migration/ova/mysql.rhcs.cloudlab.redhat.com/*err
  exit
}

# ssh into cloudforms and monitor automation logs
monitor_cloudforms_automation_logs () {
  ssh_secondary_monitor cf /var/www/miq/vmdb/log/automation.log
  exit
}

# ssh into demo -> \\\$SECONDARY_SERVER and monitor \\\$LOG_FILE
ssh_secondary_monitor () {
  SECONDARY_SERVER=\$1
  LOG_FILE=\$2
  ssh -i \$KEY_PATH \$USER_NAME@demo-\$ENVIRONMENT_GUID.rhpds.opentlc.com -t \
    "echo 'established connection to demo-"\$ENVIRONMENT_GUID".rhpds.opentlc.com'; sudo -i \
    ssh '\$SECONDARY_SERVER' -t 'echo "established connection to \$SECONDARY_SERVER"; \
    echo "monitoring \$LOG_FILE"; tail -f  "\$LOG_FILE"'"
  SECONDARY_SERVER=''
  LOG_FILE=''
  exit
}

# ssh into demo -> \\\$SECONDARY_SERVER
ssh_secondary_server () {
  SECONDARY_SERVER=\$1
  ssh -i \$KEY_PATH \$USER_NAME@demo-\$ENVIRONMENT_GUID.rhpds.opentlc.com -t \
    "echo 'established connection to demo-"\$ENVIRONMENT_GUID".rhpds.opentlc.com'; sudo -i \
    ssh "\$SECONDARY_SERVER" -t 'echo "established connection to \$SECONDARY_SERVER"; bash -l'"
  exit
  SECONDARY_SERVER=''
}

# ssh into cloudforms server
ssh_cloudforms () {
  ssh_secondary_server 'cf'
  exit
}

# ssh into satellite server
ssh_satellite () {
  ssh_secondary_server 'satellite'
  exit
}

# ssh into demo server
ssh_demo () {
  ssh -i \$KEY_PATH \$USER_NAME@demo-\$ENVIRONMENT_GUID.rhpds.opentlc.com -t \
    "echo 'established connection to demo-"\$ENVIRONMENT_GUID".rhpds.opentlc.com'; bash -l"
  exit
}

# ssh into workstation server
ssh_workstation () {
  ssh -i \$KEY_PATH \$USER_NAME@workstation-\$ENVIRONMENT_GUID.rhpds.opentlc.com -t \
    "echo 'established connection to workstation-"\$ENVIRONMENT_GUID".rhpds.opentlc.com'; bash -l"
  exit
}

ssh_undercloud () {
  ssh -i \$KEY_PATH \$USER_NAME@workstation-\$ENVIRONMENT_GUID.rhpds.opentlc.com -t \
    "echo 'established connection to workstation-"\$ENVIRONMENT_GUID".rhpds.opentlc.com'; ssh root@undercloud -t 'bash -l'"
  exit
}

# ssh into openstack master server (requires password authentication)
ssh_ose_master () {
  ssh -i \$KEY_PATH \$USER_NAME@workstation-\$ENVIRONMENT_GUID.rhpds.opentlc.com -t \
    "echo 'established connection to workstation-"\$ENVIRONMENT_GUID".rhpds.opentlc.com'; echo 'Login workstation root, then login openstack root: '; su -c 'ssh ctrl -t "ssh -i openshift.pem cloud-user@192.168.1.250 -t 'su'"'"
  exit
}

# Open the web clients for accelerating service delivery in a browser
open_web_frontend_acc_serv_dev () {
  RHEVM_URL='https://rhevm-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  VCENTER_URL='https://vcenter-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  CLOUDFORMS_URL='https://cf-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  SATELITE_URL='https://satellite-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  URL_OPEN_LIST="\$RHEVM_URL \$VCENTER_URL \$CLOUDFORMS_URL \$SATELITE_URL"

  for i in \$URL_OPEN_LIST; do 
    xdg-open \$i > /dev/null &
  done
  exit

}

open_web_verify_acc_serv_dev() {
  ACC_WEB_VERIFY_URL='https://demo-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  xdg-open \$ACC_WEB_VERIFY_URL > /dev/null &
}

# open the web clients for optimize i.t. in a browser
open_web_frontend_opt_it () {
  RHEVM_URL='https://rhevm-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  VCENTER_URL='https://vcenter-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  CLOUDFORMS_URL='https://cf-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  OPENSTACK_DASHBOARD_URL='https://osp-$ENVIRONMENT_GUID.rhpds.opentlc.com'

  URL_OPEN_LIST="\$RHEVM_URL \$VCENTER_URL \$CLOUDFORMS_URL \$OPENSTACK_DASHBOARD_URL"

  for i in \$URL_OPEN_LIST; do 
    xdg-open \$i > /dev/null &
  done
  exit
}

# open the web clients for modernize devops in a browser
open_web_frontend_mod_devops () {
  CLOUDFORMS_URL='https://cf-$ENVIRONMENT_GUID.rhpds.opentlc.com'
  OPENSTACK_HORIZON_URL='https://ctrl-$ENVIRONMENT_GUID.rhpds.opentlc.com/dashboard'

  URL_OPEN_LIST="\$CLOUDFORMS_URL \$OPENSTACK_HORIZON_URL"

  for i in \$URL_OPEN_LIST; do 
    xdg-open \$i > /dev/null &
  done
  exit
}

# open openstack workstation console in a browser
open_web_frontend_workstation_console () {
  OPENSHIFT_ENTERPRISE_CONSOLE_URL='https://workstation-$ENVIRONMENT_GUID.rhpds.opentlc.com:8443/console'

  xdg-open \$OPENSHIFT_ENTERPRISE_CONSOLE_URL > /dev/null &
}

open_web_frontend_scalable_infrastructure () {
  CLOUDFORMS_URL='https://cloudforms-$ENVIRONMENT_GUID.rhpds.opentlc.com'

  xdg-open \$CLOUDFORMS_URL > /dev/null &
}

open_rhpds_status_webpage () {
  xdg-open 'https://www.opentlc.com/rhpds-status' > /dev/null &
  
}
 
open_opentlp_status_webpage () {
  xdg-open 'https://www.opentlc.com/opentlc-status/index.php' > /dev/null &
  
}

# open the documentation for accelerating service delivery in a browser
open_accelerating_service_delivery_doc() {
  xdg-open 'https://www.opentlc.com/demo-guides/Lab_redhat-cloud-suite-deployment-demo.html' > /dev/null &
}

# open the documentation for optimize i.t. in a browser
open_optimize_it_doc() {
  xdg-open 'https://www.opentlc.com/demo-guides/Lab_redhat-cloud-suite-migration-demo.html' > /dev/null &
}

# open the documentation for modernize devops in a browser
open_modernize_devops_doc () {
  xdg-open 'https://www.opentlc.com/demo-guides/Lab_redhat-cloud-suite-modernize-devops.html' > /dev/null &
}

# open the documentation for scalable infrestructure in a browser
open_scalable_infrastructure_doc() {
  xdg-open 'https://www.opentlc.com/demo-guides/Lab_redhat-cloud-suite-reporting.html' > /dev/null &
}

# open the documentation for quick start cloud installer in a browser
open_quick_start_cloud_installer_doc () {
  xdg-open 'https://www.opentlc.com/labs/qci_implementation/Lab_Quick-Start-Cloud-Installer-Deployment.html' > /dev/null &
}

# print the access tool help
print_help () {
cat << EndHelp
$ENVIRONMENT_GUID-access <environment-type> <options>:
    flags: -acc <options>  | --accelerating-service-delivery <options>
              options: ssh <server>
                           demo # ssh to the demo server
                           cf   # ssh to the cloudforms server
                           satellite  # ssh to the satellite server
                       monitor <server-log>
                               cf-automation-log # ssh to cloudforms server and 
                                             monitor automation.log
                               forman-production-log   # ssh to satellite and 
                                                         monitor foreman production log
                       gui # opens the admin panels in a browser
                       end-web-page # opens the finished webpage in a browser
                       guide # opens the accelerating service delivery demo guide

           -opt <options>  | --optimize-it <options>
              options: ssh <server>
                           demo # ssh to the demo server
                           cf   # ssh to the cloudforms server
                       monitor <server-log>
                               cf-automation-log     # ssh to cloudforms server and 
                                                 monitor automation.log
                               cf-migration-logs # ssh to cloudforms server and 
                                                 monitor migration logs
                               cf-migration-errs # ssh to cloudforms server and 
                                                 monitor migration errs
                       gui   # opens the admin panels in a browser
                       guide # opens the optimize i.t. demo guide in a browser

           -mod <options>  | --modernize-devops <options>
              options: ssh <server>
                           workstation # ssh to the workstation server
                           ocp-master  # shh to the openstack master server
                       gui     # opens the admin panels in a browser
                       console # opens the web openstack console frontend in a browser
                       guide   # opens the modernizing devops demo guide in a browser

           -scal <options> | --scalable-infrastructure <options>
              options: gui     # opens the admin panels in a browser
                       guide   # opens the scalable infrastructure demo 
                                 guide in a browser
           -qci <options>  | --quick-cloud-installer
              options: ssh <server> 
                           workstation # ssh to the workstation server
                           undercloud  # ssh to the undercloud server
                       gui     # opens the opentlc-status admin panel in a browser
                       guide   # opens the quick start cloud installer demo guide
                       
           -h | --help # print help
EndHelp
  exit
}

# handle accelerate_service_delivery arguments
accelerate_service_delivery () {
  if [[ -z 1 ]]; then
    1='all'
  fi
  case \$1 in
    gui)
      open_web_frontend_acc_serv_dev
      ;;
    end-web-page)
      open_web_verify_acc_serv_dev
      ;;
    ssh)
      case \$2 in
        demo)
          ssh_demo
          ;;
        cf)
          ssh_cloudforms
          ;;
        satellite)
          ssh_satellite
          ;;
        *)
          echo "-acc ssh: invalid argument: \$2"
          exit
          ;;
      esac
      ;;
    monitor)
      case \$2 in
        cf-automation-log)
          monitor_cloudforms_automation_logs
          ;;
        foreman-production-log)
          monitor_forman_production_log
          ;;
        *)
          echo "-acc monitor: invalid argument: \$2"
          exit
          ;;
      esac
      ;;
    guide)
      open_accelerating_service_delivery_doc
      ;;
    *)
      echo "-acc: invalid argument: \${1}"
      exit
      ;;
  esac
  exit
}

# handle optimize i.t. arguments
optimize_it () {
  if [[ -z 1 ]]; then
    1='all'
  fi
  case \$1 in
    gui)
      open_web_frontend_opt_it
      ;;
    ssh)
      case \$2 in
        demo)
          ssh_demo
          ;;
        cf)
          ssh_cloudforms
          ;;
        *)
          echo "-opt ssh: invalid argument: \${2}"
          exit
          ;;
      esac
      ;;
    monitor)
      case \$2 in
        cf-automation-log)
          monitor_cloudforms_automation_logs
          ;;
        cf-migration-logs)
          monitor_cloudforms_migration_logs
          ;;
        cf-migration-errs)
          monitor_cloudforms_migration_errs
          ;;
        *)
          echo "-opt monitor: invalid argument: \${2}"
          exit
          ;;
      esac
      ;;
    guide)
      open_optimize_it_doc
      ;;
    *)
      echo "-opt: invalid argument: \${1}"
      exit
      ;;
  esac
  exit
}

# handle modernize devops arguments 
modernize_devops() {
  if [[ -z 1 ]]; then
    1='all'
  fi
  case \$1 in
    gui)
      open_web_frontend_mod_devops
      ;;
    console)
      open_web_frontend_workstation_console
      ;;
    ssh)
      case \$2 in
        workstation)
          ssh_workstation
          ;;
        ocp-master)
          ssh_ose_master
          ;;
        osp-master)
          ssh_ose_master
          ;;
        *)
          echo "-mod ssh: invalid argument: \${2}"
          exit
          ;;
      esac
      ;;
    guide)
      open_modernize_devops_doc
      ;;
    *)
      echo "-mod: invalid argument: \${1}"
      exit
      ;;
  esac
  exit
}

# handle scalable infrastructure args
scalable_infrastructure () {
  if [[ -z 1 ]]; then
    1='all'
  fi
  case \$1 in
    gui)
      open_web_frontend_scalable_infrastructure
      ;;
    guide)
      open_scalable_infrastructure_doc
      ;;
    *)
      echo "-scal: invalid argument: \${1}"
      exit
      ;;
  esac
}

quick_start_cloud_insaller () {
  if [[ -z 1 ]]; then
    1='all'
  fi
  case \$1 in
    gui)
      open_opentlp_status_webpage
      ;;
    ssh)
      case \$2 in
        workstation)
          ssh_workstation
          ;;
        undercloud)
          ssh_undercloud
          ;;
        *)
          echo "-qci ssh: invalid argument: \${2}"
          exit
          ;;
      esac
      ;;
    guide)
      open_quick_start_cloud_installer_doc
      ;;
    *)
      echo "-qci: invalid argument: \${1}"
      exit
      ;;
  esac
}

# parse command line arguments
while [[ \$# > 0 ]];
do
  key="\$1"
  case \$key in
    -acc | --accelerating-service-delivery)
      accelerate_service_delivery \$2 \$3
      shift
      ;;
    -opt | --optimize-it)
      optimize_it \$2 \$3
      shift
      ;;
    -mod | --modernize-devops)
      modernize_devops \$2 \$3
      shift
      ;;
    -scal | --scalable-infrastructure)
      scalable_infrastructure \$2 \$3
      shift
      ;;
    -qci | --quick-cloud-installer)
      quick_start_cloud_insaller \$2 \$3
      shift
      ;;
    -h | --help)
       print_help
       shift
       ;;
    *)  
      echo "\$ENVIRONMENT_GUID-access: invalid argument: \${1}"
      exit
      ;;
  esac
  shift # past argument or value
done
FileEnd

####### End Access File Write #######

# make script executable
chmod +x $ENVIRONMENT_GUID-access
