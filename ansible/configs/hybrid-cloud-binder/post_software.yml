---
- name: Step 005 Post Software
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tags:
  - step005
  - post_software
  tasks:
  - name: Entering the open-hybrid-cloud-binder post_software.yml
    debug:
      msg:
      - Entering the open-hybrid-cloud-binder post_software.yml

  - name: Logging into Hub
    k8s_auth:
      host: "{{ aws_hub_provision_data.openshift_api_url }}"
      username: "{{ aws_hub_provision_data.openshift_cluster_admin_username }}"
      password: "{{ aws_hub_provision_data.openshift_cluster_admin_password }}"
      validate_certs: false
    register: __r_hub
    retries: 60
    delay: 15
    until:
    - __r_hub.k8s_auth.api_key is defined

  - name: Logging into Azure OCP4 Dev A
    k8s_auth:
      host: "{{ azure_dev_a_provision_data.openshift_api_url }}"
      username: "{{ aws_dev_a_provision_data.openshift_cluster_admin_username }}"
      password: "{{ aws_dev_a_provision_data.openshift_cluster_admin_password }}"
      validate_certs: false
    register: __r_azure_dev_a
    retries: 60
    delay: 15
    until:
    - __r_azure_dev_a.k8s_auth.api_key is defined

  - name: Logging into AWS OCP4 Dev A
    k8s_auth:
      host: "{{ aws_dev_a_provision_data.openshift_api_url }}"
      username: "{{ aws_dev_a_provision_data.openshift_cluster_admin_username }}"
      password: "{{ aws_dev_a_provision_data.openshift_cluster_admin_password }}"
      validate_certs: false
    register: __r_aws_dev_a
    retries: 60
    delay: 15
    until:
    - __r_aws_dev_a.k8s_auth.api_key is defined

  - name: Import clusters into hub
    when:
      - hybrid_cloud_binder_import_clusters_enable is true
    block:

    - name: create namespaces on hub for dev clusters
      k8s:
        host: "{{ __r_hub.k8s_auth.host }}"
        username: "{{ __r_hub.k8s_auth.username }}"
        api_key: "{{ __r_hub.k8s_auth.api_key }}"
        validate_certs: false
        state: present
        kind: Namespace
        name: "{{ item }}"
        api_version: v1
      loop:
      - 'aws-dev-a'
      - 'azure-dev-a'

    - name: Import AWS OCP4 Cluster A to Hub
      vars:
        __managed_cluster_name: 'aws-dev-a'
        __managed_cluster_token: "{{ __r_aws_dev_a.k8s_auth.api_key }}"
        __managed_cluster_api_url: "{{ __r_aws_dev_a.k8s_auth.host }}"
      k8s:
        host: "{{ __r_hub.k8s_auth.host }}"
        username: "{{ __r_hub.k8s_auth.username }}"
        api_key: "{{ __r_hub.k8s_auth.api_key }}"
        validate_certs: false
        state: present
        definition: "{{ lookup('template', item ) | from_yaml }}"
      loop:
      - './templates/managed-cluster.yaml.j2'
      - './templates/auto-import-secret.yaml.j2'
      - './templates/klusterlet-addon-config.yaml.j2'
      register: __r_import_aws_dev_a
      retries: 60
      delay: 15
        # TODO: need a better test
        #until:
        #- __r_import_aws_dev_a is defined


    - name: Import Azure OCP4 Cluster A to Hub
      vars:
        __managed_cluster_name: 'azure-dev-a'
        __managed_cluster_token: "{{ __r_azure_dev_a.k8s_auth.api_key }}"
        __managed_cluster_api_url: "{{ __r_azure_dev_a.k8s_auth.host }}"
      k8s:
        host: "{{ __r_hub.k8s_auth.host }}"
        username: "{{ __r_hub.k8s_auth.username }}"
        api_key: "{{ __r_hub.k8s_auth.api_key }}"
        validate_certs: false
        state: present
        definition: "{{ lookup('template', item ) | from_yaml }}"
      loop:
      - './templates/managed-cluster.yaml.j2'
      - './templates/auto-import-secret.yaml.j2'
      - './templates/klusterlet-addon-config.yaml.j2'
      register: __r_import_azure_dev_a
      retries: 60
      delay: 15
        # TODO: need a better test
        #until:
        #- __r_import_azure_dev_a is defined

    - name: Validate Clusters Joined - aws-dev-a
      k8s_info:
        host: "{{ __r_hub.k8s_auth.host }}"
        username: "{{ __r_hub.k8s_auth.username }}"
        api_key: "{{ __r_hub.k8s_auth.api_key }}"
        validate_certs: false
        api_version: cluster.open-cluster-management.io/v1
        kind: managedcluster
        name: aws-dev-a
        namespace: aws-dev-a
      register: __r_wait_aws_dev_a
      ignore_errors: true
      retries: 60
      delay: 15
      until:
      - __r_wait_aws_dev_a.resources is defined
      - __r_wait_aws_dev_a.resources | length | int > 0
      - __r_wait_aws_dev_a.resources[0].status is defined
      - __r_wait_aws_dev_a.resources[0].status.conditions is defined
      - ( __r_wait_aws_dev_a.resources[0].status | to_json | from_json |
        json_query('conditions[?type == `ManagedClusterConditionAvailable`].status') | join ) == "True"

    - name: Validate Clusters Joined - azure-dev-a
      ignore_errors: true
      k8s_info:
        host: "{{ __r_hub.k8s_auth.host }}"
        username: "{{ __r_hub.k8s_auth.username }}"
        api_key: "{{ __r_hub.k8s_auth.api_key }}"
        validate_certs: false
        api_version: cluster.open-cluster-management.io/v1
        kind: managedcluster
        name: azure-dev-a
        namespace: azure-dev-a
      register: __r_wait_azure_dev_a
      retries: 60
      delay: 15
      until:
      - __r_wait_azure_dev_a.resources is defined
      - __r_wait_azure_dev_a.resources | length | int > 0
      - __r_wait_azure_dev_a.resources[0].status is defined
      - __r_wait_azure_dev_a.resources[0].status.conditions is defined
      - ( __r_wait_azure_dev_a.resources[0].status | to_json | from_json |
        json_query('conditions[?type == `ManagedClusterConditionAvailable`].status') | join ) == "True"

  - name: Call bookbag workload with just the defaults
    when: hybrid_cloud_binder_bookbag_deploy is true | default(true)
    include_role:
      name: ocp4_workload_bookbag_ohc_demo
    vars:
      ocp4_workload_bookbag_ohc_demo_target_ocp_api_url: "{{ aws_dev_a_provision_data.openshift_api_url }}"
      ocp4_workload_bookbag_ohc_demo_target_ocp_api_key: "{{ __r_aws_dev_a.k8s_auth.api_key }}"
      ocp4_workload_bookbag_ohc_demo_vars:
        guid: "{{ guid }}"
        ocp_username: "{{ ocp_username }}"
        aws_dev_a_provision_data: "{{ aws_dev_a_provision_data }}"
        aws_hub_provision_data: "{{ aws_hub_provision_data }}"

  - name: Make directory for UPI file exchange
    file:
      path: "{{ output_dir }}/upi-install"
      state: directory
      mode: 0755

  - name: add aws_hub to inventory
    ansible.builtin.add_host:
      name: "{{ aws_hub_provision_data.bastion_public_hostname }}"
      groups: ohc_hub

  - name: add aws_dev_a to inventory
    ansible.builtin.add_host:
      name: "{{ aws_dev_a_provision_data.bastion_public_hostname }}"
      groups: ohc_aws_dev_a

- name: Step 005 Post Software - Fetch UPI files from AWS Dev A
  hosts: ohc_aws_dev_a
  become: true
  gather_facts: false
  tasks:

  - name: Move UPI files from Dev to Hub
    when:
      - hybrid_cloud_binder_move_upi_files is true
    block:

    - name: fetch the install logs
      ansible.builtin.fetch:
        flat: true
        src: "/home/ec2-user/cluster-{{ aws_dev_a_provision_data.guid }}/.openshift_install.log"
        dest: "{{ output_dir }}/upi-install/openshift_install.log"

    - name: fetch the install config
      ansible.builtin.fetch:
        flat: true
        src: "/home/ec2-user/cluster-{{ aws_dev_a_provision_data.guid }}/install-config.yaml.bak"
        dest: "{{ output_dir }}/upi-install/install-config.yaml.bak"

- name: Step 005 Post Software - Copy UPI files to Hub
  hosts: ohc_hub
  become: true
  gather_facts: false
  tasks:

  - name: Move UPI files from Dev to Hub
    when:
      - hybrid_cloud_binder_move_upi_files is true
    block:

    - name: Make directory for UPI file exchange
      file:
        path: "/home/{{ aws_dev_a_provision_data.bastion_ssh_user_name }}/cluster-{{ aws_dev_a_provision_data.guid }}/"
        state: directory
        owner: "{{ aws_dev_a_provision_data.bastion_ssh_user_name }}"
        mode: 0755

    - name: copy the install logs
      ansible.builtin.copy:
        src: "{{ output_dir }}/upi-install/openshift_install.log"
        dest: "/home/{{ aws_dev_a_provision_data.bastion_ssh_user_name }}/cluster-{{ aws_dev_a_provision_data.guid }}/openshift_install.log"
        owner: "{{ aws_dev_a_provision_data.bastion_ssh_user_name }}"
        mode: 0666

    - name: copy the install config
      ansible.builtin.copy:
        src: "{{ output_dir }}/upi-install/install-config.yaml.bak"
        dest: "/home/{{ aws_dev_a_provision_data.bastion_ssh_user_name }}/cluster-{{ aws_dev_a_provision_data.guid }}/install-config.yaml.bak"
        owner: "{{ aws_dev_a_provision_data.bastion_ssh_user_name }}"
        mode: 0666

- name: Step 005 Post Software - Install RHACS Sensor
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: hybrid_cloud_binder_install_sensor
      when:
        - hybrid_cloud_binder_install_sensor is true
      block:

      - name: Get Central URL
        k8s_info:
          host: "{{ __r_hub.k8s_auth.host }}"
          username: "{{ __r_hub.k8s_auth.username }}"
          api_key: "{{ __r_hub.k8s_auth.api_key }}"
          validate_certs: false
          api_version: route.openshift.io/v1
          kind: Route
          name: central
          namespace: stackrox
        register: __r_rhacs_central_route
        ignore_errors: true
        retries: 60
        delay: 15
        until:
        - __r_rhacs_central_route.resources[0] is defined
        - __r_rhacs_central_route.resources[0].spec.host is defined

      - name: Store central route as a fact
        set_fact:
          __rhacs_central_url: "{{ __r_rhacs_central_route.resources[0].spec.host }}"

      - name: Get cluster init bundle
        ansible.builtin.uri:
          url: "https://{{ __rhacs_central_url }}/v1/cluster-init/init-bundles"
          body: "{ \"name\": \"prod-{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}\"}"
          method: POST
          user: "{{ aws_dev_a_provision_data.openshift_cluster_admin_username }}"
          password: "{{ aws_hub_provision_data.openshift_cluster_admin_password }}"
          body_format: json
          force_basic_auth: true
          validate_certs: false
        register: __r_rhacs_cluster_init_response

      - name: Store cluster init bundle as a fact
        set_fact:
          __rhacs_init_bundle: "{{ __r_rhacs_cluster_init_response.json.kubectlBundle | b64decode }}"

      - name: Create stackrox namespace on AWS Dev A
        k8s:
          host: "{{ __r_aws_dev_a.k8s_auth.host }}"
          username: "{{ __r_aws_dev_a.k8s_auth.username }}"
          api_key: "{{ __r_aws_dev_a.k8s_auth.api_key }}"
          validate_certs: false
          state: present
          kind: Namespace
          name: "stackrox"
          api_version: v1

      - name: Create init-bundle on AWS Dev A
        k8s:
          host: "{{ __r_aws_dev_a.k8s_auth.host }}"
          username: "{{ __r_aws_dev_a.k8s_auth.username }}"
          api_key: "{{ __r_aws_dev_a.k8s_auth.api_key }}"
          validate_certs: false
          namespace: stackrox
          state: present
          definition: "{{ __rhacs_init_bundle }}"

      - name: Install Sensor on AWS Dev A
        k8s:
          host: "{{ __r_aws_dev_a.k8s_auth.host }}"
          username: "{{ __r_aws_dev_a.k8s_auth.username }}"
          api_key: "{{ __r_aws_dev_a.k8s_auth.api_key }}"
          validate_certs: false
          state: present
          definition: "{{ lookup('template', 'secured_cluster.yaml.j2') }}"

- name: Step 005 Post Software - Report to Cloudforms
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tags:
  - step005
  - post_software
  tasks:

  - name: Print string expected by Cloudforms
    debug:
      msg: "Post-Software checks completed successfully"

  - name: Exiting the open-hybrid-cloud-binder post_software.yml
    debug:
      msg:
      - Exiting the open-hybrid-cloud-binder post_software.yml
...
