---
- name: Step 004 - Software
  hosts: bastions
  gather_facts: false
  become: true
  tasks:
  - name: Debug ocp4-ha-lab software playbook
    debug:
      msg: "ocp4-ha-lab Software playbook"

- name: Step 004.1 - Set up rootless podman
  hosts: bastions,utility
  gather_facts: false
  become: true
  tasks:
  - name: Install slirp4netns
    package:
      name: slirp4netns

  - name: Update max_user_namespaces in sysctl
    sysctl:
      name: user.max_user_namespaces
      value: "28633"
      sysctl_file: /etc/sysctl.d/userns.conf
      reload: true

- name: Step 004.2 - Set up student resources
  hosts: bastions
  gather_facts: false
  become: true
  tasks:
  - name: Set up student resources
    when: install_student_resources | bool
    block:
    - name: Create resources directory
      file:
        path: "/home/{{ student_name }}/resources"
        state: directory
        owner: "{{ student_name }}"
        group: users
        mode: 0744

    - name: Add AWS template and pararameter files to resources directory
      copy:
        dest: "/home/{{ student_name }}/resources/{{ item }}"
        src: "{{ item }}"
        owner: "{{ student_name }}"
        group: users
        mode: 0664
      loop:
      - aws_upi_bootstrap_parameters.json.j2
      - aws_upi_bootstrap_template.yaml
      - aws_upi_control_plane_parameters.json.j2
      - aws_upi_control_plane_template.yaml
      - aws_upi_route53_parameters.json.j2
      - aws_upi_route53_template.yaml
      - aws_upi_sec_parameters.json.j2
      - aws_upi_sec_template.yaml
      - aws_upi_vpc_parameters.json
      - aws_upi_vpc_template.yaml
      - aws_upi_worker_parameters.json.j2
      - aws_upi_worker_template.yaml
      - process.yaml

- name: Step 004.3 - Configure Utility VM
  hosts: utility
  gather_facts: false
  become: true
  tasks:
  - name: Set up Utility VM
    when: install_utilityvm | bool
    block:
    - name: Install httpd and NFS server on utility VM
      package:
        name:
        - httpd
        - nfs-utils

    - name: Start and enable httpd on utilityVM
      service:
        name: httpd
        state: started
        enabled: true

    - name: Create user volumes for NFS
      shell: "mkdir -p /srv/nfs/user_vols/vol{1..{{user_vols}}}"

    - name: Change permissions for user volumes
      shell: "chmod -R 777 /srv/nfs"

    - name: Ensure /etc/exports.d directory exists
      file:
        path: /etc/exports.d
        state: directory
        owner: root
        group: root
        mode: 775

    - name: Create NFS exports file
      file:
        path: /etc/exports.d/{{ env_type }}-{{ guid }}.exports
        state: touch
        owner: root
        group: root
        mode: 664

    - name: Configure NFS exports file
      lineinfile:
        dest: /etc/exports.d/{{ env_type }}-{{ guid }}.exports
        line: '/srv/nfs {{ nfs_exports_config }}'
        state: present

    - name: Enable and start NFS server
      service:
        name: nfs-server
        state: restarted
        enabled: true

    - name: Set up GUID environment variable for ec2-user
      lineinfile:
        state: present
        path: /home/ec2-user/.bashrc
        insertafter: EOF
        line: "export GUID={{ guid }}"

- name: Step 004.4 LE certs
  hosts: bastions
  gather_facts: false
  become: true
  vars:
    _certbot_dns_provider: route53
    _certbot_domain: "api.cluster-{{ guid }}{{ subdomain_base_suffix }}"
    _certbot_wildcard_domain: "*.apps.cluster-{{ guid }}{{ subdomain_base_suffix }}"
    _certbot_remote_dir: "/home/{{ student_name }}"
    _certbot_remote_dir_owner: "{{ student_name }}"
    _certbot_remote_dir_group: "users"
    _certbot_install_dir: "/home/{{ student_name }}/certificates"
    _certbot_install_dir_owner: "{{ student_name }}"
    _certbot_production: true
    _certbot_user: "{{ student_name }}"
    _certbot_cache_archive_file: "{{ output_dir | default('/tmp') }}/{{ guid }}-certs.tar.gz"
    _certbot_use_cache: false
    use_python3: true
  tasks:
  - name: Request LE Certificates
    when: install_certificates | bool
    block:
    - name: Create {{ _certbot_remote_dir }}/.aws directory
      file:
        state: directory
        path: "{{ _certbot_remote_dir }}/.aws"
        owner: "{{ _certbot_remote_dir_owner }}"
        mode: 0700

    - name: Write Route53 credentials into {{ _certbot_remote_dir }}/.aws/credentials
      when: hostvars.localhost.route53user_access_key is defined
      blockinfile:
        dest: "{{ _certbot_remote_dir }}/.aws/credentials"
        create: true
        owner: "{{ _certbot_remote_dir_owner }}"
        group: "{{ _certbot_remote_dir_group }}"
        mode: 0600
        content: |
          [default]
          # {{ hostvars.localhost.student_stack_user }}
          aws_access_key_id={{ hostvars.localhost.student_access_key_id }}
          aws_secret_access_key={{ hostvars.localhost.student_secret_access_key }}

    - name: Import certbot role
      import_role:
        name: host-lets-encrypt-certs-certbot

    - name: Remove credentials once LE certs complete
      when: _certbot_setup_complete
      file:
        state: absent
        path: "{{ _certbot_remote_dir }}/.aws"

    - name: Copy the LE root certs into trusted bundle
      copy:
        dest: /etc/pki/ca-trust/source/anchors/le-chain.pem
        src: /home/{{ student_name }}/certificates/chain.pem
        remote_src: true

    - name: Update CA trust
      command: update-ca-trust
