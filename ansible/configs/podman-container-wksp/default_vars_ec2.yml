---
# -------------------------------------------------
# AWS Network settings
# -------------------------------------------------
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{ subdomain_base_short }}{{ subdomain_base_suffix }}"
aws_dns_zone_private: "example.com."
aws_dns_zone_private_chomped: "example.com"
zone_internal_dns: "{{ guid }}.internal."
chomped_zone_internal_dns: "{{ guid }}.internal"

control_user_ssh_config: ./files/ssh_config.j2

# -------------------------------------------------
# AWS EC2 Environment Sizing
# -------------------------------------------------
default_instance_type: "t3a.medium"
default_instance_image: "RHEL91GOLD-latest"
default_rootfs_size_node: 30
rootfs_size_workstation: 30
rootfs_size_node: 30

# -------------------------------------------------
# AWS EC2 Security Groups
# -------------------------------------------------
security_groups:
  - name: BastionSG
    rules:
      - name: ClientSSHPort
        description: "Client SSH Public"
        from_port: 22
        to_port: 22
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
      - name: BastionHTTPSPorts
        description: "Cockpit HTTPS Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress        
  - name: NodeSG
    rules:
      - name: NodeHTTPSPorts
        description: "General HTTPS Public"
        from_port: 443
        to_port: 443
        protocol: tcp
        cidr: "0.0.0.0/0"
        rule_type: Ingress
        
      - name: FromNodeSGtcp
        description: "Allow everything from HostSG nodes"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: NodeSG
        rule_type: Ingress

      - name: FromNodeSGudp
        description: "Allow everything from HostSG nodes"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: NodeSG
        rule_type: Ingress

      - name: FromBastionTCP
        description: "Allow everything from Bastion"
        from_port: 0
        to_port: 65535
        protocol: tcp
        from_group: BastionSG
        rule_type: Ingress

      - name: FromBastionUDP
        description: "Allow everything from Bastion"
        from_port: 0
        to_port: 65535
        protocol: udp
        from_group: BastionSG
        rule_type: Ingress
# -------------------------------------------------
# AWS EC2 Instances
# -------------------------------------------------
instances:
  - name: bastion
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: true
    floating_ip: true
    image: "{{ bastion_instance_image | default(default_instance_image) }}"
    flavor:
      ec2: "{{ bastion_instance_type | default(default_instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ bastion_rootfs_size_node | default(default_rootfs_size_node) }}"
    security_groups:
      - BastionSG
      
  - name: "node"
    count: 1
    public_dns: true
    image: "{{ node_instance_image | default(default_instance_image) }}"
    flavor:
      ec2: "{{node_instance_type | default(default_instance_type) }}"
    tags:
      - key: "AnsibleGroup"
        value: "nodes"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_node }}"
    volumes:
      - name: /dev/sdb
        ec2:
          type: standard
        size: 5
      - name: /dev/sdc
        ec2:
          type: standard
        size: 5
      - name: /dev/sdd
        ec2:
          type: standard
        size: 5
      - name: /dev/sde
        ec2:
          type: standard
        size: 5
    security_groups:
      - NodeSG
