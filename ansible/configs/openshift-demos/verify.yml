---
- name: Verify Coolstore Microservices Demo Deployment
  hosts: all
  gather_facts: false
  run_once: true
  tasks:
  - include_role:
      name: "{{ ANSIBLE_REPO_PATH }}/roles/openshift_commons_facts"
    vars:
      set_hostname_suffix: false
      
  # verify default project
  - name: check if project {{ project_default }} exists
    shell: "{{ openshift_cli }} get project {{ project_default }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: get database deployment config names in {{ project_default }}
    shell: "{{ openshift_cli }} get dc -l comp-type=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_default }}"
    register: database_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get other deployment config names in {{ project_default }}
    shell: "{{ openshift_cli }} get dc -l comp-type!=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_default }}"
    register: other_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get deployment config replica counts in {{ project_default }}
    shell: "{{ openshift_cli }} get dc {{ database_deploymentconfigs_list.stdout }} {{ other_deploymentconfigs_list.stdout }} -o json -n {{ project_default }}"
    register: deploymentconfigs_list_json
    when: result|success
    changed_when: false

  - name: redeploy if deployment has failed
    shell: |
      {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_default }}
      sleep 5
      {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_default }}
      {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_default }}
    when: result|success and dc.status.availableReplicas != dc.spec.replicas
    loop_control:
      loop_var: dc
      label: "{{ dc.metadata.name }}"
    with_items: "{{ deploymentconfigs_list_json.stdout|from_json|json_query('items') }}"


  # verify cicd project
  - name: check if project {{ project_cicd }} exists
    shell: "{{ openshift_cli }} get project {{ project_cicd }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: get database deployment config names in {{ project_cicd }}
    shell: "{{ openshift_cli }} get dc -l comp-type=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_cicd }}"
    register: database_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get other deployment config names in {{ project_cicd }}
    shell: "{{ openshift_cli }} get dc -l comp-type!=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_cicd }}"
    register: other_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get deployment config replica counts in {{ project_cicd }}
    shell: "{{ openshift_cli }} get dc {{ database_deploymentconfigs_list.stdout }} {{ other_deploymentconfigs_list.stdout }} -o json -n {{ project_cicd }}"
    register: deploymentconfigs_list_json
    when: result|success
    changed_when: false

  - name: redeploy if deployment has failed
    shell: |
      {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_cicd }}
      sleep 5
      {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_cicd }}
      {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_cicd }}
    when: result|success and dc.status.availableReplicas != dc.spec.replicas
    loop_control:
      loop_var: dc
      label: "{{ dc.metadata.name }}"
    with_items: "{{ deploymentconfigs_list_json.stdout|from_json|json_query('items') }}"

  # verify prod project
  - name: check if project {{ project_prod }} exists
    shell: "{{ openshift_cli }} get project {{ project_prod }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: get database deployment config names in {{ project_prod }}
    shell: "{{ openshift_cli }} get dc -l comp-type=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_prod }}"
    register: database_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get other deployment config names in {{ project_prod }}
    shell: "{{ openshift_cli }} get dc -l comp-type!=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_prod }}"
    register: other_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get deployment config replica counts in {{ project_prod }}
    shell: "{{ openshift_cli }} get dc {{ database_deploymentconfigs_list.stdout }} {{ other_deploymentconfigs_list.stdout }} -o json -n {{ project_prod }}"
    register: deploymentconfigs_list_json
    when: result|success
    changed_when: false

  - name: redeploy if deployment has failed
    shell: |
      {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_prod }}
      sleep 5
      {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_prod }}
      {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_prod }}
    when: result|success and dc.status.availableReplicas != dc.spec.replicas
    loop_control:
      loop_var: dc
      label: "{{ dc.metadata.name }}"
    with_items: "{{ deploymentconfigs_list_json.stdout|from_json|json_query('items') }}"

  # verify stage project
  - name: check if project {{ project_stage }} exists
    shell: "{{ openshift_cli }} get project {{ project_stage }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: get database deployment config names in {{ project_stage }}
    shell: "{{ openshift_cli }} get dc -l comp-type=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_stage }}"
    register: database_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get other deployment config names in {{ project_stage }}
    shell: "{{ openshift_cli }} get dc -l comp-type!=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_stage }}"
    register: other_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get deployment config replica counts in {{ project_stage }}
    shell: "{{ openshift_cli }} get dc {{ database_deploymentconfigs_list.stdout }} {{ other_deploymentconfigs_list.stdout }} -o json -n {{ project_stage }}"
    register: deploymentconfigs_list_json
    when: result|success
    changed_when: false

  - name: redeploy if deployment has failed
    shell: |
      {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_stage }}
      sleep 5
      {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_stage }}
      {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_stage }}
    when: result|success and dc.status.availableReplicas != dc.spec.replicas
    loop_control:
      loop_var: dc
      label: "{{ dc.metadata.name }}"
    with_items: "{{ deploymentconfigs_list_json.stdout|from_json|json_query('items') }}"

  # verify test project
  - name: check if project {{ project_test }} exists
    shell: "{{ openshift_cli }} get project {{ project_test }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: get database deployment config names in {{ project_test }}
    shell: "{{ openshift_cli }} get dc -l comp-type=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_test }}"
    register: database_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get other deployment config names in {{ project_test }}
    shell: "{{ openshift_cli }} get dc -l comp-type!=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_test }}"
    register: other_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get deployment config replica counts in {{ project_test }}
    shell: "{{ openshift_cli }} get dc {{ database_deploymentconfigs_list.stdout }} {{ other_deploymentconfigs_list.stdout }} -o json -n {{ project_test }}"
    register: deploymentconfigs_list_json
    when: result|success
    changed_when: false

  - name: redeploy if deployment has failed
    shell: |
      {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_test }}
      sleep 5
      {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_test }}
      {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_test }}
    when: result|success and dc.status.availableReplicas != dc.spec.replicas
    loop_control:
      loop_var: dc
      label: "{{ dc.metadata.name }}"
    with_items: "{{ deploymentconfigs_list_json.stdout|from_json|json_query('items') }}"

  # verify dev project
  - name: check if project {{ project_dev }} exists
    shell: "{{ openshift_cli }} get project {{ project_dev }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: get database deployment config names in {{ project_dev }}
    shell: "{{ openshift_cli }} get dc -l comp-type=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_dev }}"
    register: database_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get other deployment config names in {{ project_dev }}
    shell: "{{ openshift_cli }} get dc -l comp-type!=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_dev }}"
    register: other_deploymentconfigs_list
    when: result|success
    changed_when: false

  - name: get deployment config replica counts in {{ project_dev }}
    shell: "{{ openshift_cli }} get dc {{ database_deploymentconfigs_list.stdout }} {{ other_deploymentconfigs_list.stdout }} -o json -n {{ project_dev }}"
    register: deploymentconfigs_list_json
    when: result|success
    changed_when: false

  - name: redeploy if deployment has failed
    shell: |
      {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_dev }}
      sleep 5
      {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_dev }}
      {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_dev }}
    when: result|success and dc.status.availableReplicas != dc.spec.replicas
    loop_control:
      loop_var: dc
      label: "{{ dc.metadata.name }}"
    with_items: "{{ deploymentconfigs_list_json.stdout|from_json|json_query('items') }}"
