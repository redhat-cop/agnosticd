---
- name: Deploy Coolstore Microservices Demo - CI/CD with JBoss EAP
  hosts: all
  gather_facts: false
  run_once: true
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
  tasks:
    - include_role:
        name: "{{ ANSIBLE_REPO_PATH }}/roles/openshift_commons_facts"
      tags:
        - cicd
        - guides
        - demo

    - import_role:
        name: "{{ ANSIBLE_REPO_PATH }}/roles/openshift_gogs"
      vars:
        project_name: "{{ project_cicd }}"
        project_display_name: "{{ project_cicd_name }}"
        project_desc: "{{ project_cicd_desc }}"
        project_annotations: "demo=demo-modern-arch-{{ project_suffix }}"
        gogs_route: "gogs-{{ project_cicd }}.{{ apps_hostname_suffix }}"
      tags: cicd

    - import_role:
        name: "{{ ANSIBLE_REPO_PATH }}/roles/openshift_sonatype_nexus"
      vars:
        project_name: "{{ project_cicd }}"
      when: >
        maven_mirror_url is not defined or
        maven_mirror_url is none or
        maven_mirror_url|trim() == ""
      tags: cicd

    - import_role:
        name: "{{ ANSIBLE_REPO_PATH }}/roles/openshift_jenkins"
      vars:
        project_name: "{{ project_cicd }}"
        jenkins_image_tag: "v3.7"
        jenkins_image_force_import: "true"
      tags: cicd

    - import_role:
        name: "{{ ANSIBLE_REPO_PATH }}/roles/openshift_workshopper"
      vars:
        project_name: "{{ project_cicd }}"
        workshopper_content_url_prefix: https://raw.githubusercontent.com/siamaksade/coolstore-demo-guides/openshift-3.7
        workshopper_workshop_urls: "{{ workshopper_content_url_prefix }}/demo-cicd-eap-full.yml"
        workshopper_env_vars:
          PROJECT_SUFFIX: "{{ project_suffix }}"
          GOGS_URL: "http://gogs-{{ project_cicd }}.{{ apps_hostname_suffix }}"
          GOGS_DEV_REPO_URL_PREFIX: "http://gogs-{{ project_cicd }}.{{ apps_hostname_suffix }}/{{ gogs_user }}/coolstore-microservice"
          JENKINS_URL: "http://jenkins-{{ project_prod }}.{{ apps_hostname_suffix }}"
          COOLSTORE_WEB_PROD_URL: "http://web-ui-{{ project_prod }}.{{ apps_hostname_suffix }}"
          HYSTRIX_PROD_URL: "http://hystrix-dashboard-{{ project_prod }}.{{ apps_hostname_suffix }}"
          GOGS_DEV_USER: "{{ gogs_user }}"
          GOGS_DEV_PASSWORD: "{{ gogs_password }}"
          GOGS_REVIEWER_USER: "{{ gogs_admin_user }}"
          GOGS_REVIEWER_PASSWORD: "{{ gogs_admin_password }}"
      when: deploy_guides
      tags: guides

    - import_role:
        name: "{{ ANSIBLE_REPO_PATH }}/roles/openshift_coolstore"
      vars:
        project_annotations: "demo=demo-msa-cicd-eap-{{ project_suffix }}"
        hostname_suffix: "{{ apps_hostname_suffix }}"
        gogs_hostname: "gogs-{{ project_cicd }}.{{ apps_hostname_suffix }}"
        prune_deployments_selector_prod: ""
        prune_deployments_selector_stage: "comp-required!=true,app!=inventory"
      tags: demo

    # verify database deployments in cicd project
    - name: wait for database deployments in project {{ project_cicd }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_cicd }} -l comp-type=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_cicd }} selector="comp-type=database"
      tags: verify

    # verify database deployments in prod project
    - name: wait for database deployments in project {{ project_prod }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_prod }} -l comp-type=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_prod }} selector="comp-type=database"

    # verify database deployments in test project
    - name: wait for database deployments in project {{ project_test }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_test }} -l comp-type=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_test }} selector="comp-type=database"

    # verify database deployments in dev project
    - name: wait for database deployments in project {{ project_dev }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_dev }} -l comp-type=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_dev }} selector="comp-type=database"
      tags: verify

    # verify other deployments in cicd project
    - name: wait for other deployments in project {{ project_cicd }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_cicd }} -l comp-type!=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_cicd }} selector="comp-type!=database"
      tags: verify


    # verify other deployments in prod project
    - name: wait for other deployments in project {{ project_prod }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_prod }} -l comp-type!=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_prod }} selector="comp-type!=database"
      tags: verify

    # verify other deployments in stage project
    - name: wait for other deployments in project {{ project_stage }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_stage }} -l comp-type!=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_stage }} selector="comp-type!=database"
      tags: verify

    # verify other deployments in test project
    - name: wait for other deployments in project {{ project_test }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_test }} -l comp-type!=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_test }} selector="comp-type!=database"
      tags: verify

    # verify other deployments in dev project
    - name: wait for other deployments in project {{ project_dev }} to complete (succeed or fail)
      shell: "oc get pods -n {{ project_dev }} -l comp-type!=database | grep '\\-deploy\\s' | grep 'Running'"
      register: deployment_running
      until: deployment_running|failed
      retries: 20
      delay: 30
      ignore_errors: true
      tags: verify

    - include_tasks: verify_tasks.yml project_name={{ project_dev }} selector="comp-type!=database"
      tags: verify
