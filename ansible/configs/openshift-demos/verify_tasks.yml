---
- name: check if project {{ project_name }} exists
  shell: "{{ openshift_cli }} get project {{ project_name }}"
  register: result
  ignore_errors: true
  changed_when: false

- name: get database deployment config names in {{ project_name }}
  shell: "{{ openshift_cli }} get dc -l comp-type=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_name }}"
  register: database_deploymentconfigs_list
  when: result|succeeded
  changed_when: false

- name: get other deployment config names in {{ project_name }}
  shell: "{{ openshift_cli }} get dc -l comp-type!=database -o jsonpath='{.items[*].metadata.name}' -n {{ project_name }}"
  register: other_deploymentconfigs_list
  when: result|succeeded
  changed_when: false

- name: get deployment config replica counts in {{ project_name }}
  shell: "{{ openshift_cli }} get dc {{ database_deploymentconfigs_list.stdout }} {{ other_deploymentconfigs_list.stdout }} -o json -n {{ project_name }}"
  register: deploymentconfigs_list_json
  when: result|succeeded
  changed_when: false

- name: redeploy if deployment has failed
  shell: |
    {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_name }}
    sleep 5
    {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_name }}
    {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_name }}
  when: result|succeeded and dc.status.availableReplicas != dc.spec.replicas
  loop_control:
    loop_var: dc
    label: "{{ dc.metadata.name }}"
  with_items: "{{ deploymentconfigs_list_json.stdout|default('[]')|from_json|json_query('items') }}"