---
# verify cicd 
- name: check if project {{ project_cicd }} exists
  shell: "{{ openshift_cli }} get project {{ project_cicd }}"
  register: result
  ignore_errors: true
  changed_when: false

- name: get deploymentconfig names in {{ project_cicd }}
  shell: "{{ openshift_cli }} get dc -l {{ selector }} -o jsonpath='{.items[*].metadata.name}' -n {{ project_cicd }}"
  register: deploymentconfigs_list
  when: result is succeeded
  changed_when: false

- name: get deployment config replica counts in {{ project_cicd }}
  shell: "{{ openshift_cli }} get dc {{ deploymentconfigs_list.stdout }} -o json -n {{ project_cicd }}"
  register: deploymentconfigs_list_json
  when: result is succeeded
  changed_when: false

- name: redeploy if deployment has failed
  shell: |
    {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_cicd }} | true
    sleep 30
    {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_cicd }}
    {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_cicd }}
  when: 
    - result is succeeded
    - deploymentconfigs_list_json is succeeded
    - dc.metadata is defined
    - dc.status is defined
    - dc.spec is defined
    - dc.status.availableReplicas != dc.spec.replicas
  loop_control:
    loop_var: dc
    label: "{{ dc.metadata.name if dc.metadata is defined else dc }}"
  with_items: "{{ deploymentconfigs_list_json.stdout|default('[]')|from_json|json_query('items') }}"
  ignore_errors: true

# verify prod 
- name: check if project {{ project_prod }} exists
  shell: "{{ openshift_cli }} get project {{ project_prod }}"
  register: result
  ignore_errors: true
  changed_when: false

- name: get deploymentconfig names in {{ project_prod }}
  shell: "{{ openshift_cli }} get dc -l {{ selector }} -o jsonpath='{.items[*].metadata.name}' -n {{ project_prod }}"
  register: deploymentconfigs_list
  when: result is succeeded
  changed_when: false

- name: get deployment config replica counts in {{ project_prod }}
  shell: "{{ openshift_cli }} get dc {{ deploymentconfigs_list.stdout }} -o json -n {{ project_prod }}"
  register: deploymentconfigs_list_json
  when: result is succeeded
  changed_when: false

- name: redeploy if deployment has failed
  shell: |
    {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_prod }} | true
    sleep 30
    {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_prod }}
    {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_prod }}
  when: 
    - result is succeeded
    - deploymentconfigs_list_json is succeeded
    - dc.metadata is defined
    - dc.status is defined
    - dc.spec is defined
    - dc.status.availableReplicas != dc.spec.replicas
  loop_control:
    loop_var: dc
    label: "{{ dc.metadata.name if dc.metadata is defined else dc }}"
  with_items: "{{ deploymentconfigs_list_json.stdout|default('[]')|from_json|json_query('items') }}"
  ignore_errors: true

# verify stage 
- name: check if project {{ project_stage }} exists
  shell: "{{ openshift_cli }} get project {{ project_stage }}"
  register: result
  ignore_errors: true
  changed_when: false

- name: get deploymentconfig names in {{ project_stage }}
  shell: "{{ openshift_cli }} get dc -l {{ selector }} -o jsonpath='{.items[*].metadata.name}' -n {{ project_stage }}"
  register: deploymentconfigs_list
  when: result is succeeded
  changed_when: false

- name: get deployment config replica counts in {{ project_stage }}
  shell: "{{ openshift_cli }} get dc {{ deploymentconfigs_list.stdout }} -o json -n {{ project_stage }}"
  register: deploymentconfigs_list_json
  when: result is succeeded
  changed_when: false

- name: redeploy if deployment has failed
  shell: |
    {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_stage }} | true
    sleep 30
    {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_stage }}
    {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_stage }}
  when: 
    - result is succeeded
    - deploymentconfigs_list_json is succeeded
    - dc.metadata is defined
    - dc.status is defined
    - dc.spec is defined
    - dc.status.availableReplicas != dc.spec.replicas
  loop_control:
    loop_var: dc
    label: "{{ dc.metadata.name if dc.metadata is defined else dc }}"
  with_items: "{{ deploymentconfigs_list_json.stdout|default('[]')|from_json|json_query('items') }}"
  ignore_errors: true

# verify test 
- name: check if project {{ project_test }} exists
  shell: "{{ openshift_cli }} get project {{ project_test }}"
  register: result
  ignore_errors: true
  changed_when: false

- name: get deploymentconfig names in {{ project_test }}
  shell: "{{ openshift_cli }} get dc -l {{ selector }} -o jsonpath='{.items[*].metadata.name}' -n {{ project_test }}"
  register: deploymentconfigs_list
  when: result is succeeded
  changed_when: false

- name: get deployment config replica counts in {{ project_test }}
  shell: "{{ openshift_cli }} get dc {{ deploymentconfigs_list.stdout }} -o json -n {{ project_test }}"
  register: deploymentconfigs_list_json
  when: result is succeeded
  changed_when: false

- name: redeploy if deployment has failed
  shell: |
    {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_test }} | true
    sleep 30
    {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_test }}
    {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_test }}
  when: 
    - result is succeeded
    - deploymentconfigs_list_json is succeeded
    - dc.metadata is defined
    - dc.status is defined
    - dc.spec is defined
    - dc.status.availableReplicas != dc.spec.replicas
  loop_control:
    loop_var: dc
    label: "{{ dc.metadata.name if dc.metadata is defined else dc }}"
  with_items: "{{ deploymentconfigs_list_json.stdout|default('[]')|from_json|json_query('items') }}"
  ignore_errors: true

# verify dev 
- name: check if project {{ project_dev }} exists
  shell: "{{ openshift_cli }} get project {{ project_dev }}"
  register: result
  ignore_errors: true
  changed_when: false

- name: get deploymentconfig names in {{ project_dev }}
  shell: "{{ openshift_cli }} get dc -l {{ selector }} -o jsonpath='{.items[*].metadata.name}' -n {{ project_dev }}"
  register: deploymentconfigs_list
  when: result is succeeded
  changed_when: false

- name: get deployment config replica counts in {{ project_dev }}
  shell: "{{ openshift_cli }} get dc {{ deploymentconfigs_list.stdout }} -o json -n {{ project_dev }}"
  register: deploymentconfigs_list_json
  when: result is succeeded
  changed_when: false

- name: redeploy if deployment has failed
  shell: |
    {{ openshift_cli }} rollout cancel dc/{{ dc.metadata.name }} -n {{ project_dev }} | true
    sleep 30
    {{ openshift_cli }} rollout latest dc/{{ dc.metadata.name }} -n {{ project_dev }}
    {{ openshift_cli }} rollout status dc/{{ dc.metadata.name }} -n {{ project_dev }}
  when: 
    - result is succeeded
    - deploymentconfigs_list_json is succeeded
    - dc.metadata is defined
    - dc.status is defined
    - dc.spec is defined
    - dc.status.availableReplicas != dc.spec.replicas
  loop_control:
    loop_var: dc
    label: "{{ dc.metadata.name if dc.metadata is defined else dc }}"
  with_items: "{{ deploymentconfigs_list_json.stdout|default('[]')|from_json|json_query('items') }}"
  ignore_errors: true
