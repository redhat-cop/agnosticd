---
- name: Idle Coolstore Microservices Demo
  hosts: all
  gather_facts: false
  run_once: true
  tasks:
  - include_role:
      name: "openshift_commons_facts"

  # default project
  - name: check if {{ project_default }} exists
    shell: "{{ openshift_cli }} get project {{ project_default }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: list deployment configs in {{ project_default }}
    shell: "{{ openshift_cli }} get dc -o json -n {{ project_default }}"
    register: deploymentconfigs_list
    when: result is succeeded
    changed_when: false

  - name: unidle all deployments in project {{ project_default }}"
    shell: "{{ openshift_cli }} scale --replicas={{ item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] }} dc {{ item.metadata.name }} -n {{ project_default }}"
    with_items: "{{ deploymentconfigs_list.stdout|from_json|json_query('items') }}"
    when: >
      result is succeeded and
      item.metadata.annotations is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is not none and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale']|trim() != ""

  # cicd project
  - name: check if {{ project_cicd }} exists
    shell: "{{ openshift_cli }} get project {{ project_cicd }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: list deployment configs in {{ project_cicd }}
    shell: "{{ openshift_cli }} get dc -o json -n {{ project_cicd }}"
    register: deploymentconfigs_list
    when: result is succeeded
    changed_when: false

  - name: unidle all deployments in project {{ project_cicd }}"
    shell: "{{ openshift_cli }} scale --replicas={{ item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] }} dc {{ item.metadata.name }} -n {{ project_cicd }}"
    with_items: "{{ deploymentconfigs_list.stdout|from_json|json_query('items') }}"
    when: >
      result is succeeded and
      item.metadata.annotations is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is not none and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale']|trim() != ""

  # prod project
  - name: check if {{ project_prod }} exists
    shell: "{{ openshift_cli }} get project {{ project_prod }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: list deployment configs in {{ project_prod }}
    shell: "{{ openshift_cli }} get dc -o json -n {{ project_prod }}"
    register: deploymentconfigs_list
    when: result is succeeded
    changed_when: false

  - name: unidle all deployments in project {{ project_prod }}"
    shell: "{{ openshift_cli }} scale --replicas={{ item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] }} dc {{ item.metadata.name }} -n {{ project_prod }}"
    with_items: "{{ deploymentconfigs_list.stdout|from_json|json_query('items') }}"
    when: >
      result is succeeded and
      item.metadata.annotations is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is not none and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale']|trim() != ""

  # stage project
  - name: check if {{ project_stage }} exists
    shell: "{{ openshift_cli }} get project {{ project_stage }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: list deployment configs in {{ project_stage }}
    shell: "{{ openshift_cli }} get dc -o json -n {{ project_stage }}"
    register: deploymentconfigs_list
    when: result is succeeded
    changed_when: false

  - name: unidle all deployments in project {{ project_stage }}"
    shell: "{{ openshift_cli }} scale --replicas={{ item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] }} dc {{ item.metadata.name }} -n {{ project_stage }}"
    with_items: "{{ deploymentconfigs_list.stdout|from_json|json_query('items') }}"
    when: >
      result is succeeded and
      item.metadata.annotations is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is not none and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale']|trim() != ""

  # test project
  - name: check if {{ project_test }} exists
    shell: "{{ openshift_cli }} get project {{ project_test }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: list deployment configs in {{ project_test }}
    shell: "{{ openshift_cli }} get dc -o json -n {{ project_test }}"
    register: deploymentconfigs_list
    when: result is succeeded
    changed_when: false

  - name: unidle all deployments in project {{ project_test }}"
    shell: "{{ openshift_cli }} scale --replicas={{ item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] }} dc {{ item.metadata.name }} -n {{ project_test }}"
    with_items: "{{ deploymentconfigs_list.stdout|from_json|json_query('items') }}"
    when: >
      result is succeeded and
      item.metadata.annotations is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is not none and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale']|trim() != ""

  # dev project
  - name: check if {{ project_dev }} exists
    shell: "{{ openshift_cli }} get project {{ project_dev }}"
    register: result
    ignore_errors: true
    changed_when: false

  - name: list deployment configs in {{ project_dev }}
    shell: "{{ openshift_cli }} get dc -o json -n {{ project_dev }}"
    register: deploymentconfigs_list
    when: result is succeeded
    changed_when: false

  - name: unidle all deployments in project {{ project_dev }}"
    shell: "{{ openshift_cli }} scale --replicas={{ item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] }} dc {{ item.metadata.name }} -n {{ project_dev }}"
    with_items: "{{ deploymentconfigs_list.stdout|from_json|json_query('items') }}"
    when: >
      result is succeeded and
      item.metadata.annotations is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is defined and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale'] is not none and
      item.metadata.annotations['idling.alpha.openshift.io/previous-scale']|trim() != ""
