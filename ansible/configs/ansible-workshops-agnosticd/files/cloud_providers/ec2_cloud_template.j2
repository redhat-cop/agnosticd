#jinja2: lstrip_blocks: "True"
---
AWSTemplateFormatVersion: "2010-09-09"
Mappings:
  RegionMapping: {{ aws_ami_region_mapping | to_json }}

Resources:
  WorkshopVpc1:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "{{ ec2_subnet }}"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "{{ ec2_name_prefix }}-vpc"
        - Key: Hostlication
          Value:
            Ref: "AWS::StackId"
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: Workshop_type
          Value: "{{ workshop_type }}"
        - Key: Workshop
          Value: "{{ ec2_name_prefix }}"
        - Key: ansible-workshops
          Value: "true"

  WorkshopVpc1SecondaryCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      CidrBlock: "{{ ec2_subnet2 }}"
      VpcId:
        Ref: WorkshopVpc1

  Subnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn:
      - WorkshopVpc1
    Properties:
      AvailabilityZone: "{{ ec2_az }}"
      CidrBlock: "{{ ec2_subnet }}"
      Tags:
        - Key: Name
          Value: "{{ ec2_name_prefix }}-subnet"
        - Key: Hostlication
          Value:
            Ref: "AWS::StackId"
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: Workshop_type
          Value: "{{ workshop_type }}"
        - Key: Workshop
          Value: "{{ ec2_name_prefix }}"
        - Key: ansible-workshops
          Value: "true"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: WorkshopVpc1

  Subnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn:
      - WorkshopVpc1
      - WorkshopVpc1SecondaryCidrBlock
    Properties:
      AvailabilityZone: "{{ ec2_az }}"
      CidrBlock: "{{ ec2_subnet2 }}"
      Tags:
        - Key: Name
          Value: "{{ ec2_name_prefix }}-subnet2"
        - Key: Hostlication
          Value:
            Ref: "AWS::StackId"
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: Workshop_type
          Value: "{{ workshop_type }}"
        - Key: Workshop
          Value: "{{ ec2_name_prefix }}"
        - Key: ansible-workshops
          Value: "true"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: WorkshopVpc1

  WorkshopVpc1InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: Workshop_type
          Value: "{{ workshop_type }}"
        - Key: Workshop
          Value: "{{ ec2_name_prefix }}"
        - Key: ansible-workshops
          Value: "true"

  WorkshopVpc1GA:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId:
        Ref: WorkshopVpc1InternetGateway
      VpcId:
        Ref: WorkshopVpc1

  WorkshopVpc1RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: WorkshopVpc1
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: Workshop_type
          Value: "{{ workshop_type }}"
        - Key: Workshop
          Value: "{{ ec2_name_prefix }}"
        - Key: ansible-workshops
          Value: "true"

  VPCRouteInternetGateway:
    DependsOn: WorkshopVpc1GA
    Type: "AWS::EC2::Route"
    Properties:
      GatewayId:
        Ref: WorkshopVpc1InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId:
        Ref: WorkshopVpc1RouteTable

  Subnet1RTA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: WorkshopVpc1RouteTable
      SubnetId:
        Ref: Subnet1

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone|lower }}.private"
      Tags:
        - Key: ansible-workshops
          Value: "true"

  AllWorkshopVpc1Secgroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "{{ ec2_name_prefix }}-insecure_all"
      GroupDescription: all ports open
      VpcId:
        Ref: WorkshopVpc1
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: Workshop_type
          Value: "{{ workshop_type }}"
        - Key: Workshop
          Value: "{{ ec2_name_prefix }}"
        - Key: ansible-workshops
          Value: "true"

  AllWorkshopVpc1SecgroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"
      GroupId:
        Ref: AllWorkshopVpc1Secgroup






{% if workshop_type == 'demo' %}
    {% set all_ports = workshops.common.ports + workshops.f5.ports + workshops.network.ports %}
{% else %}
    {% if workshops[workshop_type].ports is defined %}
        {% set all_ports = workshops.common.ports + workshops[workshop_type].ports %}
    {% else %}
        {% set all_ports = workshops.common.ports %}
    {% endif %}
{% endif %}

{% for rule in all_ports %}

  AllWorkshopVpc1SecgroupIngress{{ loop.index }}:
    Type: "AWS::EC2::SecurityGroupIngress"
    {% if rule['description'] is defined %}
    Description: {{ rule.rule_desc }}
    {% endif %}
    Properties:
      CidrIp: "{{ rule.cidr_ip }}"
      IpProtocol: "{{ rule.proto }}"
      FromPort: "{{ rule.from_port }}"
      ToPort: "{{ rule.to_port }}"
      GroupId:
        Ref: AllWorkshopVpc1Secgroup

{% endfor %}






{% if workshop_type == 'network' or workshop_type == 'demo' %}

  NetworkWorkshopVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "{{ ec2_network_vpc2 }}"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "{{ ec2_name_prefix }}-vpc2"
        - Key: Hostlication
          Value:
            Ref: "AWS::StackId"
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"

  NetworkWorkshopSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn:
      - NetworkWorkshopVpc
    Properties:
      AvailabilityZone: "{{ ec2_az }}"
      CidrBlock: "{{ ec2_network_vpc2 }}"
      Tags:
        - Key: Name
          Value: "{{ ec2_name_prefix }}-subnet2"
        - Key: Hostlication
          Value:
            Ref: "AWS::StackId"
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: NetworkWorkshopVpc

  NetworkWorkshopAllVpcSecgroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "{{ ec2_name_prefix }}-insecure_all2"
      GroupDescription: all ports open
      VpcId:
        Ref: NetworkWorkshopVpc
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"

  NetworkWorkshopAllVpcSecgroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"
      GroupId:
        Ref: NetworkWorkshopAllVpcSecgroup

{% for rule in network_demo_second_vpc_ingress %}
  NetworkWorkshopAllVpcSecgroupIngress{{ loop.index }}:
    Type: "AWS::EC2::SecurityGroupIngress"
    {% if rule['description'] is defined %}
    Description: {{ rule.rule_desc }}
    {% endif %}
    Properties:
      CidrIp: "{{ rule.cidr_ip }}"
      IpProtocol: "{{ rule.proto }}"
      FromPort: "{{ rule.from_port }}"
      ToPort: "{{ rule.to_port }}"
      GroupId:
        Ref: NetworkWorkshopAllVpcSecgroup
{% endfor %}

 NetworkWorkshopVpcInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"

  NetworkWorkshopVpcGA:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId:
        Ref: NetworkWorkshopVpcInternetGateway
      VpcId:
        Ref: NetworkWorkshopVpc
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"

  NetworkWorkshopVpcRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: NetworkWorkshopVpc
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"

  NetworkWorkshopVPCRouteInternetGateway:
    DependsOn: NetworkWorkshopVpcGA
    Type: "AWS::EC2::Route"
    Properties:
      GatewayId:
        Ref: NetworkWorkshopVpcInternetGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId:
        Ref: NetworkWorkshopVpcRouteTable
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"

  NetworkWorkshopSubnet1RTA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: NetworkWorkshopVpcRouteTable
      SubnetId:
        Ref: NetworkWorkshopSubnet1
      Tags:
        - Key: Username
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "Username that provisioned this-> {{ aws_user }}"
        - Key: Linklight
          Value: "This was provisioned through the linklight provisioner"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: ansible-workshops
          Value: "true"

{% endif %}







{% if tower_node_aws_api_access|default(false)|bool %}
{% for student_index in range(1, student_total + 1) %}

  LockdownRole{{ student_index }}:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "VPCLockDown_{{ ec2_name_prefix }}_student{{ student_index }}"
      Description: VPC Lockdown role for "{{ ec2_name_prefix }}" workshop
      AssumeRolePolicyDocument: "{{ lookup('file','AssumeRole_policy.json') }}"
  LockdownRole{{ loop.index }}InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ToLockdownRole{{ loop.index }}InstanceProfile
      Roles:
        - Ref: LockdownRole{{ loop.index }}

  ControlNodeRole{{ student_index }}:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "ControlNode_{{ ec2_name_prefix }}_student{{ student_index }}"
      Description: Control node instance role for "{{ ec2_name_prefix }}" workshop
      AssumeRolePolicyDocument: "{{ lookup('file','AssumeRole_policy.json') }}"
  ControlNodeRole{{ loop.index }}InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ControlNodeRole{{ loop.index }}InstanceProfile
      Roles:
        - Ref: ControlNodeRole{{ loop.index }}

  ControlNodePolicy{{ student_index }}:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument: "{{ lookup( 'template', 'iam_vpc_lockdown_policy.json.j2') }}"
      PolicyName: "IAMPolicy_{{ ec2_name_prefix }}_student{{ student_index }}"
      Roles:
        - "ControlNode_{{ ec2_name_prefix }}_student{{ student_index }}"


{% endfor %}
{% endif %}






# merges directly defined instances and (conditionally) included instances from other workshops
{% set mandatory_instances = workshop_instances.cluster.instances + workshop_instances.attendance.instances + workshop_instances.automation_hub.instances %}
{% set all_instances = mandatory_instances + workshop_instances[workshop_type].instances %}

{% for include_spec in workshop_instances[workshop_type].include_instances_from %}
    {% if include_spec.when_variable is none or (
         lookup("vars", include_spec.when_variable) is not none
         and lookup("vars", include_spec.when_variable)
       )
    %}
        {% set all_instances = all_instances + workshop_instances[include_spec.workshop_type].instances %}
    {% endif %}
{% endfor %}




# merges directly defined instances and (conditionally) included instances from other workshops
{% for instance in all_instances %}
{% if instance.lateeval_conditional is none or not instance.lateeval_conditional or lookup("vars", instance.lateeval_conditional.when_variable) == instance.lateeval_conditional.is_value %}
{% for student_index in range(1, (instance.number_of_instances | int) + 1) %}
{% for replica_index in range(1, (instance.number_of_replicas | int) + 1) %}

{% set instance_identifier = "Workshop" + workshop_type + "Instance" + instance.name + "Student" + (student_index | string) + "Replica" + (replica_index | string) %}


  {{ instance_identifier }}:
    Type: AWS::EC2::Instance
    Properties:
      CreditSpecification:
        CPUCredits: standard
      EbsOptimized: {{ instance.ebs_optimized }}
      ImageId: "{{ instance.image }}"
      InstanceType: "{{ instance.flavour }}"
      KeyName: "{{ instance.keypair_name }}"
      SourceDestCheck: {{ instance.source_dest_check }}
      NetworkInterfaces:
        - AssociatePublicIpAddress: {{ instance.assign_public_ip }}
          DeleteOnTermination: true
          DeviceIndex: "0"
          SubnetId:
            Ref: {{ instance.vpc_subnet_cloudformation_ref }}
          GroupSet:
            - Ref: AllWorkshopVpc1Secgroup
{% for additional_eni in instance.additional_enis %}
        - DeleteOnTermination: {{ additional_eni.delete_on_termination }}
          DeviceIndex: "{{ additional_eni.device_index }}"
          SubnetId:
            Ref: "{{ additional_eni.vpc_subnet_cloudformation_ref }}"
          GroupSet:
            - Ref: AllWorkshopVpc1Secgroup
{% endfor %}  # additional_eni
      Tags:
        - Key: Workshop
          Value: "{{ ec2_name_prefix }}"
        - Key: Workshop_guid
          Value: "{{ guid }}"
        - Key: Workshop_type
          Value: "{{ workshop_type }}"
        - Key: owner
          Value: "{{ aws_user }}"
        - Key: Info
          Value: "AWS_USERNAME that provisioned this -> {{ aws_user }}"
        - Key: ansible-workshops
          Value: "true"
        - Key: ansible-workshop-groups
          Value: "{{ instance.groups }}"
        - Key: short_name
          Value: "{{ instance.name }}"
{% if (instance.number_of_replicas | int) > 1 or (instance.force_replica_suffix | bool) %}
        - Key: Name
          Value: "{{ ec2_name_prefix }}-student{{ student_index }}-{{ instance.name }}-{{ replica_index }}"
{% else %}
        - Key: Name
          Value: "{{ ec2_name_prefix }}-student{{ student_index }}-{{ instance.name }}"
{% endif %}  # number_of_replicas > 1
        - Key: Index
          Value: "{{ student_index - 1 }}"
        - Key: Student
          Value: "student{{ student_index }}"
        - Key: Students
          Value: "{{ student_total }}"
        - Key: Replica
          Value: "{{ replica_index }}"
        - Key: AWS_USERNAME
          Value: "{{ aws_user }}"
        - Key: launch_time
          Value: "{{ now(utc=True) }}"
        - Key: dns
          Value: "{% if dns_type != 'none' %}student{{ student_index }}.{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }} {% else %} none {% endif %}"
        # agnosticd hooks
        - Key: AnsibleGroup
          Value: "{{ instance.groups + ",bastions" }}"
        - Key: internaldns
          Value: "{{ instance.name }}"
        - Key: Project
          Value: "{{ project_tag }}"
{% for tag in instance.tags %}
        - Key: "{{ tag.key }}"
          Value: "{{ tag.value }}"
{% endfor %}  # tag

{% if instance.user_data is not none and instance.user_data %}
      UserData: "{{ instance.user_data }}"
{% endif %}  # user_data

{% if instance.associate_instance_profile is not none and instance.associate_instance_profile and tower_node_aws_api_access|default(false)|bool %}
      IamInstanceProfile:
        {# this was "item.0 + 1", loop.index is 1-based #}
        Ref: "{{ instance.associate_instance_profile }}Role{{ loop.index }}InstanceProfile"
{% endif %}  # associate_instance_profile

{% if instance.volumes | length > 0 %}
      BlockDeviceMappings:
{% endif %}  # instance.volumes | length
{% for volume in instance.volumes %}
        - DeviceName: "{{ volume.device_name }}"
          Ebs:
            DeleteOnTermination: {{ volume.delete_on_termination }}
{% if volume.iops is not none and volume.iops %}
            Iops: {{ volume.iops }}
{% endif %}  # volume.iops
            VolumeSize: "{{ volume.size }}"
            VolumeType: "{{ volume.type }}"
{% endfor %}  # volumes


{% endfor %}  # replica_index
{% endfor %}  # student_index
{% endif %}  # lateeval_conditional
{% endfor %}  # instance
