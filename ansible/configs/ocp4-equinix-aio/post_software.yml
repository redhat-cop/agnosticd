---
- name: Step 005 Post Software
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
    - debug:
        msg: "Step 005 Post Software"

- name: Deploy some operators
  hosts: bastion
  tasks:
    - name: Setting up OCS Storage
      include_role:
        name: ocp4_aio_role_deploy_ocs
      vars:
        deploy_type: "{{ ocp4_aio_deploy_type }}"
        deploy_sno: "{{ ocp4_aio_deploy_sno }}"
        deploy_ipi: "{{ ocp4_aio_deploy_ipi }}"
        deploy_ocs: "{{ ocp4_aio_deploy_ocs }}"
      when: ocp4_aio_dpeloy_ocs

    - name: Setting up NFS Storage
      include_role:
        name: ocp4_aio_role_nfsmount
      vars:
        deploy_type: "{{ ocp4_aio_deploy_type }}"
        deploy_sno: "{{ ocp4_aio_deploy_sno }}"
        deploy_ipi: "{{ ocp4_aio_deploy_ipi }}"
        deploy_ocs: "{{ ocp4_aio_deploy_ocs }}"
      when: not ocp4_aio_deploy_ocs

    - name: Installing ACM Operator
      include_role:
        name: ocp4_aio_role_acm
      vars:
        deploy_type: "{{ ocp4_aio_deploy_type }}"
        deploy_sno: "{{ ocp4_aio_deploy_sno }}"
        deploy_ipi: "{{ ocp4_aio_deploy_ipi }}"
        deploy_ocs: "{{ ocp4_aio_deploy_ocs }}"
      when: ocp4_aio_deploy_acm or ocp4_aio_deploy_ocp_plus or deploy_sno

    - name: Installing ACS operator
      include_role:
        name: ocp4_aio_role_acs
      vars:
        deploy_type: "{{ ocp4_aio_deploy_type }}"
        deploy_sno: "{{ ocp4_aio_deploy_sno }}"
        deploy_ipi: "{{ ocp4_aio_deploy_ipi }}"
        deploy_ocs: "{{ ocp4_aio_deploy_ocs }}"
      when: ocp4_aio_deploy_acs or ocp4_aio_deploy_ocp_plus or ocp4_aio_deploy_sno

    - name: Installing CNV Operator
      include_role:
        name: ocp4_aio_role_cnv
      vars:
        deploy_type: "{{ ocp4_aio_deploy_type }}"
        deploy_sno: "{{ ocp4_aio_deploy_sno }}"
        deploy_ipi: "{{ ocp4_aio_deploy_ipi }}"
        deploy_ocs: "{{ ocp4_aio_deploy_ocs }}"
      when: ocp4_aio_deploy_cnv

    - name: Enable internal registry
      include_role:
        name: ocp4_aio_role_imgreg
      vars:
        deploy_type: "{{ ocp4_aio_deploy_type }}"
        deploy_sno: "{{ ocp4_aio_deploy_sno }}"
        deploy_ipi: "{{ ocp4_aio_deploy_ipi }}"
        deploy_ocs: "{{ ocp4_aio_deploy_ocs }}"


- name: Display generic deploy infos
  hosts: bastion
  tasks:
    - name: Print Base Information
      vars:
        msg: |
          To get started, you'll first need to connect to your {{ baremetal_provider }} system.
          - Open a shell session to this machine: `ssh root@{{ groups['hypervisor'][0] }}`
          - All tasks should then be performed on the bastion machine, hop to this: `ssh root@192.168.123.100`.
          - Here you'll find all of the tools you'll likely need, feel free to install more.
      debug:
        msg: "{{ msg.split('\n') }}"
    - name: Print Guacamole Information
      vars:
        msg: |
          As you've enabled Guacamole support, you can access everything you need without a proxy.
          To access the environment via your web-browser only (Guacamole)

          Use this URL: http://{{ groups['hypervisor'][0] }}:8080/guacamole
          Username: guacadmin
          Password: {{ hostvars['guac_holder']['guac_shared_password'] }}

          The 'Lab Desktop' will give you a GNOME desktop environment, and 'Bastion SSH' just CLI access.
      debug:
        msg: "{{ msg.split('\n') }}"
      when: ocp4_aio_deploy_guacamole

- name: Display kube infos for IPI
  hosts: bastion
  tasks:
    - name: Print Kube Configuration
      vars:
        msg: |
          As you've requested OpenShift to be installed, you can access the console either via proxy or Guacamole (if enabled).
          To access the environment via a Squid Proxy, open a port-forwarded session:

          $ ssh root@{{ groups['hypervisor'][0] }} -L 8080:192.168.123.100:3128

          Then set your local proxy server to localhost:8080 and enable DNS over SOCKS

          The console is available at: https://console-openshift-console.apps.aio.example.com
          The kubeadmin password is: {{ hostvars['kube_holder']['kubeadmin_password'] }}

          If you'd like CLI access, the bastion host will have already been setup - `ssh root@192.168.123.100`
          You should then automatically have oc/kubectl access to the cluster. Check out ~/ocp-install/auth/.
      debug:
        msg: "{{ msg.split('\n') }}"
      when: ocp4_aio_deploy_ipi

- name: Display kube infos for SNO
  hosts: bastion
  tasks:
    - name: Print Kube Configuration
      vars:
        msg: |
          As you've requested OpenShift to be installed, you can access the console either via proxy or Guacamole (if enabled).
          To access the environment via a Squid Proxy, open a port-forwarded session:

          $ ssh root@{{ groups['target'][0] }} -L 8080:192.168.123.100:3128

          Then set your local proxy server to localhost:8080 and enable DNS over SOCKS

          The console for rhacm cluster is available at: https://console-openshift-console.apps.rhacm.example.com
          The kubeadmin password is: {{ hostvars['rhacm_holder']['kubeadmin_password'] }}

          The console for edge1 cluster is available at: https://console-openshift-console.apps.edge1.example.com
          The kubeadmin password is: {{ hostvars['edge1_holder']['kubeadmin_password'] }}

          The console for edge2 cluster is available at: https://console-openshift-console.apps.edge2.example.com
          The kubeadmin password is: {{ hostvars['edge2_holder']['kubeadmin_password'] }}

          If you'd like CLI access, the bastion host will have already been setup - `ssh root@192.168.123.100`
          You should then automatically have oc/kubectl access to the cluster. Check out ~/sno-{rhacm,edge1,edge2}/auth/.
      debug:
        msg: "{{ msg.split('\n') }}"
      when: ocp4_aio_deploy_sno

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
