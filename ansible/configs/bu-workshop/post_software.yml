# vim: set ft=ansible:
---
- name: Bastion hostname config
  hosts: localhost
  connection: local
  become: false
  tags:
    - workshop
    - workshop_bastion_hostname
  tasks:
    - name: Store bastion hostname as a fact
      set_fact:
        bastion_hostname: "{{ hostvars[ groups[ ('tag_' ~ env_type ~ '_' ~ guid ~ '_bastion') | replace('-', '_') ].0 ]['ec2_public_dns_name'] }}"

- name: User volumes on NFS server
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_support') | replace('-', '_') }}"
  gather_facts: False
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_user_nfs_volume_dirs
  tasks:
    - name: Create user vols
      shell: "mkdir -p /srv/nfs/user-vols/vol{1..{{ user_vols }}}"
    - name: chmod the user vols
      shell: "chmod -R 777 /srv/nfs/user-vols"

- name: Create Workshop NFS shares
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_support') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_nfs
  tasks:
    - name: Create workshop nfs directory
      file:
        name: '/srv/nfs/{{ item }}'
        state: directory
        mode: 0777
        owner: nfsnobody
        group: nfsnobody
        recurse: True
      with_items:
        - '{{ workshop_shares }}'

    - name: Create workshop exports file
      file:
        path: "/etc/exports.d/{{ env_type }}-{{ guid }}-workshop.exports"
        state: touch
        mode: 755

    - name: Update workshop exports file
      lineinfile:
        dest: "/etc/exports.d/{{ env_type }}-{{ guid }}-workshop.exports"
        line: "/srv/nfs/{{ item }} *(rw,root_squash,no_wdelay,sync)"
        state: present
      with_items:
        - '{{ workshop_shares }}'
      run_once: True

    - name: Reload NFS exports
      shell: "exportfs -r"

- name: NFS volume configuration
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_nfs_user_base_pv
  tasks:
    - name: Set NFS related facts
      set_fact:
        nfs_host: "{{ hostvars[ groups[ ('tag_' ~ env_type ~ '_' ~ guid ~ '_support') | replace('-', '_') ].0 ]['ec2_public_dns_name'] }}"
        pv_size: '10Gi'
        pv_list: "{{ nfs_shares }}"
        persistentVolumeReclaimPolicy: Retain

    # TODO: I think I can get rid of this pvs because I do it later
    - name: Generate PV file
      template:
        src: "{{ ANSIBLE_REPO_PATH }}/configs/bu-workshop/files/pvs.j2"
        dest: "/root/pvs-{{ env_type }}-{{ guid }}.yml"
      tags: 
        - gen_pv_file

    - set_fact:
        pv_size: "{{ user_vols_size }}"
        persistentVolumeReclaimPolicy: Recycle

    - name: Generate user vol PV file
      template:
        src: "{{ ANSIBLE_REPO_PATH }}/configs/bu-workshop//files/userpvs.j2"
        dest: "/root/userpvs-{{ env_type }}-{{ guid }}.yml"
      tags:
        - gen_user_vol_pv

    - name: Create base PVs from file
      shell: '{{ oc_path }} create -f /root/pvs-{{ env_type }}-{{ guid }}.yml || {{ oc_path }} update -f /root/pvs-{{ env_type }}-{{ guid }}.yml'

    - name: Create user PVs from file
      shell: '{{ oc_path }} create -f /root/userpvs-{{ env_type }}-{{ guid }}.yml || {{ oc_path }} update -f /root/userpvs-{{ env_type }}-{{ guid }}.yml'

- name: Workshop admins
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_admins
  tasks:
    - name: check admin password is set
      fail: msg="Bailing out. You need to set 'admin_user_password'"
      when: admin_user_password is undefined
    - name: check admin password is not empty string
      fail: msg="Bailing out. 'admin_user_password' can not be empty string"
      when: admin_user_password == ""
    - name: Add administrative user to htpasswd file
      htpasswd:
        dest: "/etc/origin/master/htpasswd"
        name: "admin"
        password: "{{ admin_user_password }}"
        state: present

    - name: Give administrative user cluster-admin privileges
      command: "{{ oc_path }} adm policy add-cluster-role-to-user cluster-admin admin"

- name: Workshop PVs
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - create_workshop_vol_pvs
  tasks:
    - set_fact:
        pv_size: '10Gi'
        pv_list: "{{ workshop_shares }}"
        persistentVolumeReclaimPolicy: Retain
        nfs_hostname: "{{ hostvars[ groups[ ('tag_' ~ env_type ~ '_' ~ guid ~ '_support') | replace('-', '_') ].0 ]['ansible_fqdn'] }}"

    - name: Generate workshop PV file
      template:
        src: "files/{{ env_type }}_pvs.j2"
        dest: "/root/pvs-{{ env_type }}-{{ guid }}.yml"

    - name: Create workshop PVs
      shell: '{{ oc_path }} create -f /root/pvs-{{ env_type }}-{{ guid }}.yml || {{ oc_path }} update -f /root/pvs-{{ env_type }}-{{ guid }}.yml'

- name: Workshop prerequisites
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_prereq
  tasks:
    - name: Fix for logging BZ (1466626)
      shell: "{{ oc_path }} get configmap logging-elasticsearch -n logging -o yaml | sed '/io.fabric8.elasticsearch.kibana.mapping.ops/a \\    io.fabric8.elasticsearch.kibana.mapping.empty: /usr/share/elasticsearch/index_patterns/com.redhat.viaq-openshift.index-pattern.json' | {{ oc_path }} replace configmap -n logging logging-elasticsearch -f -"

    - name: Check for workshop-infra project
      command: "{{ oc_path }}  get project workshop-infra"
      register: result
      ignore_errors: true

    - name: Create workshop-infra project
      command: "{{ oc_path }} adm new-project workshop-infra --admin admin --node-selector='env=infra'"
      when: result | failed

    - name: Make workshop-infra project network global
      command: "{{ oc_path }} adm pod-network make-projects-global workshop-infra"

    - name: Set workshop-infra SCC for anyuid
      command: "{{ oc_path }} adm policy add-scc-to-group anyuid system:serviceaccounts:workshop-infra"

    - name: Add capabilities within anyuid which is not really ideal
      command: "{{ oc_path }} patch scc/anyuid --patch '{\"requiredDropCapabilities\":[\"MKNOD\",\"SYS_CHROOT\"]}'"

    - name: Copy RH official JDK IS to server
      copy:
        src: "files/openjdk-is.yaml"
        dest: "/root/openjdk-is.yaml"

    - name: Delete the existing IS becuase it is defined wrong
      command: "{{ oc_path }} delete is redhat-openjdk18-openshift -n openshift"

    - name: Create RH official JDK IS in openshift namespace
      shell: "{{ oc_path }} create -f /root/openjdk-is.yaml -n openshift || {{ oc_path }} replace -f /root/openjdk-is.yaml -n openshift"

    - name: Create Jenkins pipeline template in openshift namespace
      shell: "{{ oc_path }} create -f https://raw.githubusercontent.com/openshift-roadshow/nationalparks/1.0.0/ose3/pipeline-template.yaml -n openshift || {{ oc_path }} replace -f https://raw.githubusercontent.com/openshift-roadshow/nationalparks/1.0.0/ose3/pipeline-template.yaml -n openshift"
      tags:
        - create-pipeline-template

- name: Gitlab
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_gitlab
  tasks:
    - name: Copy gitlab-template.yaml to master
      copy:
        src: "files/gitlab-template.yaml"
        dest: "/root/gitlab-template.yaml"

    - name: Check if Gitlab was already provisioned
      command: "{{ oc_path }} get service gitlab-ce -n workshop-infra"

      register: install_gitlab
      ignore_errors: true

    - name: Instantiate Gitlab from template
      shell: >
        {{ oc_path }} process -f /root/gitlab-template.yaml
        -v APPLICATION_HOSTNAME=gitlab-ce-workshop-infra.{{ cloudapps_suffix }}
        -v GITLAB_ROOT_PASSWORD=password | {{ oc_path }} create -f - -n workshop-infra

      when: install_gitlab | failed
      tags:
        - instantiate-gitlab

    - name: Scale gitlab to four instances
      command: "{{ oc_path }} scale dc/gitlab-ce --replicas=4 -n workshop-infra"

    - name: Wait for Gitlab to be running
      command: "{{ oc_path }} get dc/gitlab-ce -o yaml -n workshop-infra"

      register: result
      until: '" availableReplicas: 4" in result.stdout'
      retries: 8
      delay: 60
      tags:
        - wait-for-gitlab

    - name: Annotate gitlab service to group database
      shell: >
        {{ oc_path }} annotate service gitlab-ce
        service.alpha.openshift.io/dependencies='[{"name":"gitlab-ce-postgresql","namespace":"","kind":"Service"},{"name":"gitlab-ce-redis","namespace":"","kind":"Service"}]' 
        --overwrite
        -n workshop-infra
        
- name: Lab guide
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_lab_guide
  tasks:
    - name: Check for workshop lab service
      command: "{{ oc_path }} get svc/labs -n workshop-infra"
      ignore_errors: true
      register: labs_service_out

    - name: Deploy workshop lab server if not present
      shell: >
        {{ oc_path }} new-app
        --name=labs docker.io/osevg/workshopper:{{ workshopper_tag }}
        -e ROUTER_ADDRESS={{cloudapps_suffix}}
        -e CONSOLE_ADDRESS=master.{{subdomain_base}}
        -e DEFAULT_LAB=roadshow
        -e NODES={{ num_nodes }}
        -e NUM_USERS={{ user_vols }}
        -e WORKSHOPS_URLS={{ lab_content }}
        -e CONTENT_URL_PREFIX={{ content_url_prefix }}
        -n workshop-infra;
        {{ oc_path }} expose service labs -n workshop-infra
      when: labs_service_out | failed
      tags:
        - deploy_workshop_labs

- name: GitLab nfs permissions hack
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_support') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_nfs_hack
  tasks:
    - name: Fix ownership and permission of git-data
      file:
        dest: "/srv/nfs/gitlab-data"
        mode: "0700"
        owner: "998"
        group: root
        recurse: yes

    - name: Fix permission on git-data/repositories
      file:
        dest: "/srv/nfs/gitlab-data/git-data/repositories"
        mode: "2770"
        recurse: yes

- name: Project Request Template
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - project_request
  tasks:

    - name: Copy project request template to master
      copy:
        src: files/project-template.yaml
        dest: /root/project-template.yaml


    - name: Create project request template in default project
      shell: "{{ oc_path }} create -f /root/project-template.yaml -n default || {{ oc_path }} replace -f /root/project-template.yaml -n default"

- name: Workshop Users
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_users
  tasks:

    - name: Add log path to Ansible configuration
      lineinfile:
        regexp: "^#log_path"
        dest: "/etc/ansible/ansible.cfg"
        line: "log_path = /root/ansible.log"
        state: present

    - name: Copy vars file to master
      copy:
        src: "env_vars.yml"
        dest: "/root/{{ env_type }}_vars.yml"

    - name: Copy user provision Ansible script remotely
      copy:
        src: "files/userprovision.yaml"
        dest: "/root/userprovision.yaml"

    - name: Set Gitlab internal hostname
      set_fact:
        gitlab_hostname: 'gitlab-ce.workshop-infra.svc.cluster.local'

    - name: Get root user token
      uri:
        url: 'http://gitlab-ce.workshop-infra.svc.cluster.local/api/v3/session'
        body: 'login=root&password=password'
        method: POST
        status_code: 201
      register: root_token_out
      until: root_token_out|success
      retries: 3
      delay: 60

    - name: Create root token fact
      set_fact:
        root_token: '{{ root_token_out.json.private_token }}'

    - name: Execute user provision Ansible script remotely
      shell: >
        ansible-playbook
        -i localhost /root/userprovision.yaml
        -e config={{ env_type }}
        -e user={{ item }}
        -e root_token={{ root_token }}
        -e gitlab_hostname={{ gitlab_hostname }}
      with_sequence: start=0 end={{ user_vols }} format=%02d

- name: Deploy etherpad
  hosts: 
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_master') | replace('-', '_') }}"
  vars_files:
    - "env_vars.yml"
    - "env_secret_vars.yml"
    - "ssh_vars.yml"
  tags:
    - workshop
    - workshop_etherpad
  tasks:
    - name: Check if MySQL for etherpad was already provisioned
      command: "{{ oc_path }} get service mysql-pad -n workshop-infra"
      register: install_pad_db
      ignore_errors: true

    - name: Etherpad MySQL
      shell: >
        {{ oc_path }} new-app 
        --name=mysql-pad
        --template=mysql-ephemeral
        -p MYSQL_USER=etherpad
        -p MYSQL_PASSWORD=etherpad
        -p MYSQL_DATABASE=etherpad
        -p DATABASE_SERVICE_NAME=mysql-pad
        -n workshop-infra
      when: install_pad_db | failed

    - name: Wait for Etherpad MySQL to be running
      command: "{{ oc_path }} get dc/mysql-pad -o yaml -n workshop-infra"
      register: result
      until: '"availableReplicas: 1" in result.stdout'
      retries: 5
      delay: 60

    - name: Check if Etherpad was already provisioned
      command: "{{ oc_path }} get service etherpad -n workshop-infra"
      register: install_pad
      ignore_errors: true

    # TODO: etherpad template or health check or something
    - name: Deploy Etherpad Docker image
      shell: >
        {{ oc_path }} new-app
        --name=etherpad
        centos/etherpad
        -e DB_HOST=mysql-pad
        -e DB_DBID=etherpad
        -e DB_PASS=etherpad
        -e DB_USER=etherpad
        -e DB_PORT=3306
        -n workshop-infra
      when: install_pad | failed

    - name: Wait for Etherpad to be running
      command: "{{ oc_path }} get dc/etherpad -o yaml -n workshop-infra"
      register: result
      until: '"availableReplicas: 1" in result.stdout'
      retries: 5
      delay: 60

    - name: Expose etherpad service
      shell: "{{ oc_path }} expose service etherpad -n workshop-infra"
      when: install_pad | failed

    - name: Annotate etherpad service to group database
      shell: >
        {{ oc_path }} annotate service etherpad 
        service.alpha.openshift.io/dependencies='[{"name":"mysql-pad","namespace":"","kind":"Service"}]' 
        --overwrite
        -n workshop-infra

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_secret_vars.yml"
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
