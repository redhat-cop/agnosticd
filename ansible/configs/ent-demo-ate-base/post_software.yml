---
- name: Step 005 post software
  hosts: localhost
  gather_facts: false
  become: true
  tags:
    - step005
    - post_software

  tasks:

    - name: "Post-Software tasks Started"
      ansible.builtin.debug:
        msg: "Post-Software tasks Started"

- name: Output user_info
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step005

  tasks:

    - name: Generate very annoying normalization of domain name
      ansible.builtin.set_fact:
        agnosticd_domain_name: >-
         {% if cloud_provider == 'osp' -%}
           .{{ osp_cluster_dns_zone }}
         {%- elif cloud_provider == 'ec2' -%}
           {{ subdomain_base_suffix }}
         {%- endif %}

    - name: Set installed ansible automation controller user_info
      agnosticd_user_info:
        msg: "{{ __user_info }}"
      loop:
        - "To Access Ansible Controller via browser:"
        - "Ansible Controller URL: https://{{ groups['automationcontroller'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ agnosticd_domain_name }}"
        - "Ansible Controller Username: {{ deploy_automationcontroller_admin_user }}"
        - "Ansible Controller Admin Password: {{ deploy_automationcontroller_admin_password }}"
        - ""
        - "To Access Ansible Hub via browser:"
        - "Ansible Hub URL: https://{{ groups['automationcontroller'][0] | regex_replace('\\..*$') | regex_replace('controller','hub') }}.{{ guid }}{{ agnosticd_domain_name }}"
        - "Ansible Hub Username: {{ deploy_automationcontroller_admin_user }}"
        - "Ansible Hub Admin Password: {{ deploy_automationcontroller_admin_password }}"
        - ""
      loop_control:
        loop_var: __user_info

    - name: Set installed ansible automation controller user_info data
      agnosticd_user_info:
        data:
          controller_host: "https://{{ groups['automationcontroller'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ agnosticd_domain_name }}"
          hub_host: "https://{{ groups['automationhub'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ agnosticd_domain_name }}"
          controller_username: "{{ deploy_automationcontroller_admin_user }}"
          controller_password: "{{ deploy_automationcontroller_admin_password }}"
          ssh_public_key: "{{ lookup('file', ssh_provision_pubkey_path) }}"
          ssh_private_key: "{{ lookup('file', ssh_provision_key_path) }}"

    - name: Output ssh user_info for osp or ec2 based deploys
      block:

        - name: Set ssh user_info
          agnosticd_user_info:
            msg: "{{ __user_info }}"
          loop:
            - "To Access Control node via SSH:"
            - "ssh {{ ansible_service_account_user_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ agnosticd_domain_name }}"
            - "Enter ssh password when prompted: {{ student_password }}"
            - ""
          loop_control:
            loop_var: __user_info

        - name: Set agnosticd_user_info ssh data
          agnosticd_user_info:
            data:
              ssh_command: "ssh {{ ansible_service_account_user_name }}@{{ groups['bastions'][0] | regex_replace('\\..*$') }}.{{ guid }}{{ agnosticd_domain_name }}"
              ssh_password: "{{ student_password }}"

    - name: Deploy Bookbag
      when: bookbag_git_repo is defined
      ansible.builtin.include_role:
        name: bookbag
      vars:
        ACTION: create

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:

    - name: "Post-Software checks completed successfully"
      ansible.builtin.debug:
        msg: "Post-Software checks completed successfully"

- name: Run post_software_validation playbook
  when: >-
    agd_post_software_validation | default(false) | bool
      or agd_validation | default(false) | bool
  ansible.builtin.import_playbook: post_software_validation.yml
  tags:
    - post_software_validation
    - agd_validation

...
