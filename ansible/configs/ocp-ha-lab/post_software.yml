# vim: set ft=ansible:
---
- name: Step 005 - Post Software deployment
  hosts: localhost
  connection: local
  become: false
  tags:
    - step005
  tasks:
    - name: Generate /etc/ansible/hosts file with lab inv template
      template:
        src: "./files/labs_hosts_template.{{ osrelease }}.j2"
        dest: "{{output_dir}}/labs_hosts-{{ env_type }}-{{ guid }}"
    - name: Generate /etc/ansible/hosts file with homework8 inv template
      template:
        src: "./files/hosts_homework8_template.{{ osrelease }}.j2"
        dest: "{{output_dir}}/hosts_homework8-{{ env_type }}-{{ guid }}"
      when: homework8|bool

- name: Run openshift host provision on the bastion
  gather_facts: False
  become: yes
  hosts:
    - bastions
  roles:
    - role: "host-ocp-provisioner"

- name: Configure NFS host for user-vols if required
  hosts: support
  gather_facts: False
  become: yes
  tasks:
    - name: Create user vols
      shell: "mkdir -p /srv/nfs/user-vols/vol{1..{{user_vols}}}"
      tags:
        - openshift_nfs_config
    - name: chmod the user vols
      shell: "chmod -R 777 /srv/nfs/user-vols"
      tags:
        - openshift_nfs_config

- name: Step lab post software deployment
  hosts: bastions
  gather_facts: False
  become: yes
  tags:
    - opentlc_bastion_tasks
  tasks:
    - name: Copy complete inventory file to bastion /var/preserve/hosts
      copy:
        src: "{{output_dir}}/hosts-{{ env_type }}-{{ guid }}"
        dest: /var/preserve/hosts
      tags: preserve_complete_ansible_inventory

    - name: copy prometheus rules file to bastion
      copy:
        src: "./files/prometheus_alerts_rules.yml"
        dest: /root/prometheus_alerts_rules.yml

    - name: Copy over homework8 hosts file, lab version
      copy:
        backup: no
        src: "{{output_dir}}/hosts_homework8-{{ env_type }}-{{ guid }}"
        dest: /etc/ansible/hosts
      when: homework8|bool
      tags:
        - overwrite_hosts_with_hosts_homework8

    - name: Copy over ansible hosts file, lab version
      copy:
        backup: no
        src: "{{output_dir}}/labs_hosts-{{ env_type }}-{{ guid }}"
        dest: /etc/ansible/hosts
      tags:
        - overwrite_hosts_with_lab_hosts

    ## Create PV objects for uservols if required
    - name: get nfs Hostname
      set_fact:
        nfs_host: "{{ groups['support']|sort|first }}"
      tags:
        - openshift_nfs_config
    - set_fact:
        pv_size: '10Gi'
        pv_list: "{{ ocp_pvs }}"
        persistentVolumeReclaimPolicy: Retain
      tags:
        - openshift_nfs_config
    - name: Generate PV file
      template:
        src: "./files/pvs.j2"
        dest: "/root/pvs-{{ env_type }}-{{ guid }}.yml"
      when: pv_list.0 is defined
      tags:
        - openshift_nfs_config
        - gen_pv_file
    - set_fact:
        pv_size: "{{user_vols_size}}"
        persistentVolumeReclaimPolicy: Recycle
      tags:
        - openshift_nfs_config
      notify: restart nfs services
      run_once: True

    - name: Generate user vol PV file
      template:
        src: "./files/userpvs.j2"
        dest: "/root/userpvs-{{ env_type }}-{{ guid }}.yml"
      tags:
        - gen_user_vol_pv
        - openshift_nfs_config

    - shell: 'oc create -f /root/pvs-{{ env_type }}-{{ guid }}.yml || oc replace -f /root/pvs-{{ env_type }}-{{ guid }}.yml'
      when: pv_list.0 is defined
      tags:
        - openshift_nfs_config
        - create_user_pv

    - shell: 'oc create -f /root/userpvs-{{ env_type }}-{{ guid }}.yml || oc replace -f /root/userpvs-{{ env_type }}-{{ guid }}.yml'
      tags:
        - create_user_pv
        - openshift_nfs_config

    - import_role:
        name: "bastion-opentlc-ipa"
      when: install_ipa_client|bool

- name: Step dev tools
  hosts: bastions
  ignore_errors: true
  gather_facts: false
  become: true
  tags:
    - devops_tools
  tasks:
  - name: Add epel-release repo
    yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

  - name: vim8 repo exists?
    stat:
      path: /etc/yum.repos.d/lantw44-vim8-epel-7.repo
    register: vim8_repo

  - name: install Vim8 repo
    get_url:
      url: https://copr.fedorainfracloud.org/coprs/lantw44/vim-latest/repo/epel-7/lantw44-vim-latest-epel-7.repo
      dest: /etc/yum.repos.d/lantw44-vim-latest-epel-7.repo
    when: not vim8_repo.stat.exists

  - name: install vim8 packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: true
    vars:
      packages:
        - vim-minimal
        - vim-common
        - vim-enhanced
        - yamllint

  - name: create vimrc path
    file:
      path: /root/.vim
      state: directory

  - name: get Judds vimrc
    get_url:
      url: https://raw.githubusercontent.com/newgoliath/vim/master/home/.vim/vimrc
      dest: /root/.vim/vimrc2
      backup: true

  - name: prep vim plugins
    shell: |
      git clone https://github.com/VundleVim/Vundle.vim.git \
      ~/.vim/bundle/Vundle.vim
      vim +PluginInstall +qall &>/dev/null
      #        tmux -c 'vim "+Tmuxline airline" "+qall"'
      #tmux -c 'vim "+TmuxlineSnapshot .vim/tmux.line" "+qall"'

  - name: download tmux latest
    get_url:
      url: http://admin.na.shared.opentlc.com/labs/ocp_advanced_deployment/tmux
      dest: /usr/local/bin/tmux

  - name: Install mosh
    yum:
      name: mosh

  - name: Open UDP Ports 60001 - 60010 for Mosh
    iptables:
      action: insert
      protocol: udp
      destination_port: "60001:600059"
      state: present
      chain: INPUT
      jump: ACCEPT

  - name: Open iptables Mosh firewall ports for future sessions
    lineinfile:
      insertbefore: "-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT"
      state: present
      dest: /etc/sysconfig/iptables
      line: "-A INPUT -p udp -m multiport --dports 60001:60005 -j ACCEPT"

- name: PostSoftware flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Post-Software checks completed successfully"
