---

- name: Determine if Organization Exists
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/organizations?name={{ tower_org_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Create Organization
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/organizations/"
    method: POST
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    body:
      name: "{{ tower_org_name }}"
    body_format: json
    status_code:
    - 201
  register: response
  changed_when: response.status == 201
  when: response.json.count == 0

- name: Get Organization
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/organizations?name={{ tower_org_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Set Organization ID
  set_fact:
    tower_org_id: "{{ response.json | json_query('results[*].id') | first | int }}"

- name: Determine if Project Exists
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/projects?name={{ tower_project_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Create Project
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/projects/"
    method: POST
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    body:
      name: "{{ tower_project_name }}"
      scm_url: "{{ tower_project_scm_url }}"
      scm_type: "{{ tower_project_scm }}"
      organization: "{{ tower_org_id }}"
    body_format: json
    status_code:
    - 201
  register: response
  changed_when: response.status == 201
  when: response.json.count == 0

- name: Get Project
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/projects?name={{ tower_project_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Set Project ID
  set_fact:
    tower_project_id: "{{ response.json | json_query('results[*].id') | first | int }}"

- name: Determine if Inventory Exists
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/inventories?name={{ tower_inventory_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Create Inventory
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/inventories/"
    method: POST
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    body:
      name: "{{ tower_inventory_name }}"
      organization: "{{ tower_org_id }}"
    body_format: json
    status_code:
    - 201
  register: response
  changed_when: response.status == 201
  when: response.json.count == 0

- name: Get Inventory
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/inventories?name={{ tower_inventory_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Set Inventory ID
  set_fact:
    tower_inventory_id: "{{ response.json | json_query('results[*].id') | first | int }}"

- name: Create App Hosts
  include_tasks: create_host.yml
  when:  item.startswith('app')
  loop: "{{ groups['all'] }}"
  vars:
    lab_host: "{{ item }}"
    inventory_id: "{{ tower_inventory_id }}"

- name: Determine if Credential Exists
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/credentials?name={{ tower_credential_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Obtain SSH Key
  become: true
  slurp:
    src: "/root/.ssh/{{ guid }}key.pem"
  register: credential_ssh_key
  no_log: True
  when: response.json.count == 0

- name: Create Credential
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/credentials/"
    method: POST
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    body:
      name: "{{ tower_inventory_name }}"
      organization: "{{ tower_org_id }}"
      credential_type: 1
      inputs:
        ssh_key_data: "{{ credential_ssh_key.content | b64decode }}"
        username: "{{ tower_credential_username }}"
    body_format: json
    no_log: True
    status_code:
    - 201
  register: response
  changed_when: response.status == 201
  when: response.json.count == 0

- name: Get Credential
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/credentials?name={{ tower_credential_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Set Credential ID
  set_fact:
    tower_credential_id: "{{ response.json | json_query('results[*].id') | first | int }}"

- name: Get Inventory
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/inventories?name={{ tower_inventory_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Determine if Job Template Exists
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/job_templates?name={{ tower_job_template_name }}"
    method: GET
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    status_code:
    - 200
  register: response
  changed_when: false

- name: Create Job Template
  uri:
    url: "https://{{ ansible_tower_ip }}/api/v2/job_templates/"
    method: POST
    user: "{{tower_admin}}"
    password: "{{tower_admin_password}}"
    validate_certs: False
    body:
      name: "{{ tower_job_template_name }}"
      organization: "{{ tower_org_id }}"
      project: "{{ tower_project_id }}"
      inventory: "{{ tower_inventory_id }}"
      credential: "{{ tower_credential_id }}"
      playbook: "{{ tower_job_template_playbook }}"
    body_format: json
    status_code:
    - 201
  register: response
  changed_when: response.status == 201
  when: response.json.count == 0
