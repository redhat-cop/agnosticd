## TODO: What variables can we strip out of here to build complex variables?
## i.e. what can we add into group_vars as opposed to config_vars?
## Example: We don't really need "subdomain_base_short". If we want to use this,
## should just toss in group_vars/all.
### Also, we should probably just create a variable reference in the README.md
### For now, just tagging comments in line with configuration file.

### Vars that can be removed:
# use_satellite: true
# use_subscription_manager: false
# use_own_repos: false

###### VARIABLES YOU SHOULD CONFIGURE FOR YOUR DEPLOYEMNT
###### OR PASS as "-e" args to ansible-playbook command


### Common Host settings

repo_method: file # Other Options are: file, satellite and rhn
install_ipa_client: false
license_file_url: "https://admin.example.com/download/ansible_bootcamp/tower/licenses/license.txt"
# Do you want to run a full yum update
update_packages: false
#If using repo_method: satellite, you must set these values as well.
# satellite_url: satellite.example.com
# satellite_org: Sat_org_name
# satellite_activationkey: "rhel7basic"

## guid is the deployment unique identifier, it will be appended to all tags,
## files and anything that identifies this environment from another "just like it"
guid: defaultguid

# This var is used to identify stack (cloudformation, azure resourcegroup, ...)
project_tag: "{{ env_type }}-{{ guid }}"

# This is where the ssh_config file will be created, this file is used to
# define the communication method to all the hosts in the deployment
deploy_local_ssh_config_location: "{{output_dir}}/"

install_bastion: true
install_common: true
## SB Don't set software_to_deploy from here, always use extra vars (-e) or "none" will be used
#software_to_deploy: tower
deploy_tower_demo: true
tower_admin_password: somepassword
install_student_user: false

repo_version: "3.6"

### If you want a Key Pair name created and injected into the hosts,
# set `set_env_authorized_key` to true and set the keyname in `env_authorized_key`
# you can use the key used to create the environment or use your own self generated key
# if you set "use_own_key" to false your PRIVATE key will be copied to the bastion. (This is {{key_name}})
use_own_key: true
env_authorized_key: "{{guid}}key"


# This varialbe is no longer needed.
#ansible_ssh_private_key_file: ~/.ssh/{{key_name}}.pem

set_env_authorized_key: true

# Is this running from Red Hat Ansible Tower
tower_run: false
### Azure

# Create a dedicated resourceGroup for this deployment
az_destroy_method: resource_group
az_resource_group: "{{ project_tag }}"

# you can operate differently: if you share on resourceGroup for all you deployments,
# you can specify a different resourceGroup and method:
#az_destroy_method: deployment
#az_resource_group: my-shared-resource-group

# use --insecure flag when adding the tower license; leave empty or undefined if the flag is not needed
tower_cli_insecure_flag: "--insecure"

### AWS EC2 Environment settings

### Route 53 Zone ID (AWS)
# This is the Route53 HostedZoneId where you will create your Public DNS entries
# This only needs to be defined if your CF template uses route53
HostedZoneId: Z3IHLWJZOU9SRT
# The region to be used, if not specified by -e in the command line
aws_region: ap-southeast-2
# pick a or c availability zone.
aws_availability_zone: "{{ aws_region }}{{ ['a','c']|random}}"
# The key that is used to
key_name: "default_key_name"

## Networking (AWS)
subdomain_base_short: "{{ guid }}"
subdomain_base_suffix: ".example.opentlc.com"
subdomain_base: "{{subdomain_base_short}}{{subdomain_base_suffix}}"

## Environment Sizing

bastion_instance_type: "m4.large"
tower_instance_type: "m4.xlarge"
cicd_instance_type: "m4.xlarge"
app_instance_type: "m4.large"
appdb_instance_type: "m4.large"
support_instance_type: "m4.large"

tower_instance_count: 1
cicd_instance_count: 1
app_instance_count: 1
appdb_instance_count: 1
support_instance_count: 1
rootfs_size_bastion: 50

instances:
  - name: "bastion"
    count: 1
    unique: true
    public_dns: true
    dns_loadbalancer: false
    flavor:
      ec2: "{{bastion_instance_type}}"
      azure: Standard_A2_V2
    tags:
      - key: "AnsibleGroup"
        value: "bastions"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    rootfs_size: "{{ rootfs_size_bastion }}"

  - name: "tower"
    count: "{{tower_instance_count}}"
    public_dns: true
    dns_loadbalancer: false
    flavor:
      ec2: "{{tower_instance_type}}"
      azure: "Standard_A2_V2"
    tags:
      - key: "AnsibleGroup"
        value: "towers"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"

  - name: "cicd"
    count: "{{cicd_instance_count}}"
    public_dns: true
    dns_loadbalancer: false
    flavor:
      ec2: "{{cicd_instance_type}}"
      azure: "Standard_A2_V2"
    tags:
      - key: "AnsibleGroup"
        value: "cicd"
      - key: "ostype"
        value: "linux"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"

  - name: "app"
    count: "{{app_instance_count}}"
    public_dns: true
    flavor:
      ec2: "{{app_instance_type}}"
      azure: "Standard_A2_V2"
    tags:
      - key: "AnsibleGroup"
        value: "apps"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"

  - name: "appdb"
    count: "{{appdb_instance_count}}"
    public_dns: true
    flavor:
      ec2: "{{appdb_instance_type}}"
      azure: "Standard_A2_V2"
    tags:
      - key: "AnsibleGroup"
        value: "appdbs"
      - key: "ostype"
        value: "rhel"
      - key: "instance_filter"
        value: "{{ env_type }}-{{ email }}"
    key_name: "{{key_name}}"

###### VARIABLES YOU SHOULD ***NOT*** CONFIGURE FOR YOUR DEPLOYEMNT
###### You can, but you usually wouldn't need to.
ansible_user: ec2-user
remote_user: ec2-user

common_packages:
  - python
  - unzip
  - bash-completion
  - tmux
  - bind-utils
  - wget
  - git
  - vim-enhanced
  - at
  - ansible

rhel_repos:
  - rhel-7-server-rpms
  - rhel-7-server-extras-rpms
  - epel-release-latest-7
## Currently there is no NFS created for this Environment - See ocp-workshop for clues.
# ## NFS Server settings
# nfs_vg: nfsvg
# nfs_pvs: /dev/xvdb
# nfs_export_path: /srv/nfs
#
# nfs_shares:
#   - es-storage
#   - user-vols
#   - jenkins
#   - nexus
#   - nexus2


zone_internal_dns: "{{guid}}.internal."
chomped_zone_internal_dns: "{{guid}}.internal"

frontend_public_dns: "frontendlb.{{subdomain_base}}."
#tower_public_dns: "tower.{{subdomain_base}}."
bastion_public_dns: "bastion.{{subdomain_base}}."
bastion_public_dns_chomped: "bastion.{{subdomain_base}}"
vpcid_cidr_block: "192.168.0.0/16"
vpcid_name_tag: "{{subdomain_base}}"

az_1_name: "{{ aws_region }}a"
az_2_name: "{{ aws_region }}b"

subnet_private_1_cidr_block: "192.168.2.0/24"
subnet_private_1_az: "{{ az_2_name }}"
subnet_private_1_name_tag: "{{subdomain_base}}-private"

subnet_private_2_cidr_block: "192.168.1.0/24"
subnet_private_2_az: "{{ az_1_name }}"
subnet_private_2_name_tag: "{{subdomain_base}}-private"

subnet_public_1_cidr_block: "192.168.10.0/24"
subnet_public_1_az: "{{ az_1_name }}"
subnet_public_1_name_tag: "{{subdomain_base}}-public"

subnet_public_2_cidr_block: "192.168.20.0/24"
subnet_public_2_az: "{{ az_2_name }}"
subnet_public_2_name_tag: "{{subdomain_base}}-public"

dopt_domain_name: "{{ aws_region }}.compute.internal"

rtb_public_name_tag: "{{subdomain_base}}-public"
rtb_private_name_tag: "{{subdomain_base}}-private"


cf_template_description: "{{ env_type }}-{{ guid }} Ansible Agnostic Deployer "

### variables necessary for Jenkins deployment

java_packages:
  - java-1.8.0-openjdk # newer Jenkins don't work with older versions
  - java-1.8.0-openjdk-devel # for Roman
jenkins_plugins:
  - git                   # Git Plugin
  - multiple-scms         # Multiple SCMs Plugin
  - tap                   # Tap Plugin
  - conditional-buildstep # Conditional BuildStep Plugin
  - workflow-aggregator   # Pipeline Plugin
  - parameterized-trigger # Parameterized Trigger Plugin
  - extended-choice-parameter # Extended Choice Parameter
  - ansible-tower         # Ansible Tower Plugin
#  - gogs-webhook          # Gogs Webhook Plugin
jenkins_plugin_timeout: 240 # Jenkins tends to run into timeout while installing plug-ins
jenkins_admin_password: "{{ tower_admin_password }}"
jenkins_protocol: "https"
jenkins_selfsigned_certificate: yes
jenkins_port: 8443
jenkins_home: /var/lib/jenkins
jenkins_keystore_path: "/opt/jenkins/jenkins.jks"
jenkins_keystore_password: "{{ tower_admin_password }}"
jenkins_url_prefix: ""
jenkins_java_options_env_var: JENKINS_JAVA_OPTIONS
jenkins_java_options: "-Djenkins.install.runSetupWizard=false"


### Tower Variables

tower_setup_version: "3.2.6" # default would be latest, which is dangerous
tower_admin: admin # don't change this! There are places where no variable is used.
tower_org_name: Acme
tower_project_name: Acme
tower_project_scm: git
tower_project_scm_url: https://github.com/redhat-cop/automate-cicd
tower_inventory_name: Acme
tower_job_template_name: Acme
tower_credential_name: Acme
tower_job_template_playbook: hackathons/rhte-2018-emea/playbook-ansible-role-httpd.yaml
tower_credential_username: ec2-user


### Gogs Variables
ansible_service_mgr: systemd
gogs_admin_username: cicduser1 # can't be called admin or it fails
gogs_admin_password: "{{ tower_admin_password }}"
gogs_webhook_skip_tls_verify: True

### Docker variables (Docker is needed by Molecule)
docker_users:
  - jenkins
  - git
  - "{{ remote_user }}"
