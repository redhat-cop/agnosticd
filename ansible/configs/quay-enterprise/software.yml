---
- name: Step 00xxxxx software
  hosts: localhost
  gather_facts: False
  become: false
  tasks:
    - debug:
        msg: "Software tasks started"

- name: Preflight Checks
  hosts: localhost
  tasks:
    - name: Validate Required Group Configuration
      fail:
        msg: "'quay_database', 'redis' and 'quay_enterprise' groups must be specified"
      when:
        - "'redis' not in groups or groups['redis']| length == 0 or 'quay_database' not in groups or groups['quay_database']| length == 0 or 'quay_enterprise' not in groups or groups['quay_enterprise']| length == 0"
    - name: Validate Required Clair Group Configuration
      fail:
        msg: "'clair' and 'clair_database' groups must be defined when quay_clair_enable=True"
      when:
        - quay_clair_enable|d(False)|bool
        - "'clair' not in groups or groups['clair']|length == 0 or 'clair_database' not in groups or groups['clair_database']|length == 0"

- name: Set cert/key file locations
  hosts:
  - quay_enterprise
  gather_facts: false
  run_once: true
  tasks:
  - name: Set Cert/Key file locations
    set_fact:
      qe_quay_ssl_key_file: ""
      qe_quay_ssl_cert_file: ""
    when:
    - qe_quay_ssl_key_file is undefined or qe_quay_ssl_cert_file is undefined

- name: Set up Let's Encrypt Certificates
  hosts:
  - quay_enterprise
  gather_facts: false
  become: true
  tasks:
  - name: Request Certificates
    when:
    - qe_quay_ssl_lets_encrypt_certs|d(False)|bool
    block:
    - name: Open iptables port 80
      iptables:
        action: insert
        protocol: tcp
        destination_port: "80"
        state: present
        chain: INPUT
        jump: ACCEPT
    - name: Request and install Let's Encrypt Certificates
      include_role:
        name: ../../roles/host-lets-encrypt-certs
      vars:
      - acme_domain: "{{ qe_quay_hostname }}.{{ subdomain_base }}"
      - acme_remote_dir: "/root"
      - acme_install_dir: "/root/certificates"
      - acme_cache_cert_file: "{{output_dir}}/{{guid}}.cert"
      - acme_cache_key_file: "{{output_dir}}/{{guid}}.key"
      - acme_cache_archive_file: "{{output_dir}}/{{guid}}_acme.tgz"
      - acme_cache_fullchain_file: "{{output_dir}}/{{guid}}_fullchain.cer"
      - acme_production: "{{ qe_quay_ssl_lets_encrypt_production|d(False)|bool }}"
      - acme_renew_automatically: "{{ qe_quay_ssl_lets_encrypt_renew_automatically|d(False)|bool }}"
      - acme_force_issue: "{{ qe_quay_ssl_lets_encrypt_force_renew|d(False)|bool }}"
    - name: Set Cert/Key file locations to cached locations
      set_fact:
        qe_quay_ssl_key_file: "{{output_dir}}/{{guid}}.key"
        qe_quay_ssl_cert_file: "{{output_dir}}/{{guid}}_fullchain.cer"

- name: Set up Node Software (Docker)
  hosts:
    - all_vms
  gather_facts: false
  become: true
  tasks:
    - name: Ensure that iptables service is installed
      yum:
        name: iptables-services
        state: latest
    - name: Ensure that iptables service is enabled and started
      systemd:
        name: iptables
        daemon_reload: yes
        enabled: yes
        state: started
        no_block: yes
    - name: Set up Node Software (Docker)
      include_role:
        name: ../../roles/host-ocp-node

- name: Install and Configure Quay Database
  hosts: quay_database
  gather_facts: false
  become: true
  tasks:
    - name: Install and Configure PostgreSQL
      block:
        - name: Install PostgreSQL
          include_role:
            name: ../../roles/config-postgresql
          vars:
            mode: containerized
            postgresql_name: "{{ qe_quay_database_service_name|d('postgresql-quay') }}"
            postgresql_username: "{{ qe_quay_database_username }}"
            postgresql_password: "{{ qe_quay_database_password }}"
            postgresql_admin_user: "{{ qe_quay_database_admin_username }}"
            postgresql_admin_password: "{{ qe_quay_database_admin_password }}"
            postgresql_host_port: "{{ qe_quay_database_port|d('5432') }}"
            postgresql_database: "{{ qe_quay_database_name }}"

        - name: Sleep to give PostgreSQL a chance to finish starting up
          pause:
            seconds: 10

        - name: Locate PostgreSQL Container
          command: docker ps --filter=name="{{ qe_quay_database_service_name | d('postgresql-quay') }}" -q
          register: postgresql_container

        - name: Configure PostgreSQL
          shell: docker exec -i {{ postgresql_container.stdout }} /bin/bash -c 'PGPASSWORD={{ qe_quay_database_admin_password }} psql {{ qe_quay_database_name }} -c "CREATE EXTENSION pg_trgm;"'
          register: shell_result
          failed_when:
            - shell_result.rc != 0
            - "'already exists' not in shell_result.stderr"

- name: Install Redis
  hosts: redis
  become: true
  tasks:
    - name: Install Redis
      include_role:
        name: ../../roles/config-redis
      vars:
        mode: containerized

- name: Install Quay Enterprise
  hosts: quay_enterprise
  gather_facts: false
  become: true
  tasks:
    - name: Install Quay
      include_role:
        name: ../../roles/config-quay-enterprise
      vars:
        quay_database_type: "postgresql"
        quay_database_username: "{{ qe_quay_database_username }}"
        quay_database_password: "{{ qe_quay_database_password }}"
        quay_database_name: "{{ qe_quay_database_name }}"
        quay_database_port: "{{ qe_quay_database_port|d('5432') }}"
        quay_database_host: "{{ qe_quay_database_host }}"
        quay_ssl_cert_file: "{{ qe_quay_ssl_cert_file }}"
        quay_ssl_key_file: "{{ qe_quay_ssl_key_file }}"
        quay_registry_auth: "{{ qe_quay_registry_auth }}"
        quay_superuser_username: "{{ qe_quay_superuser_username }}"
        quay_superuser_password: "{{ qe_quay_superuser_password }}"
        quay_superuser_email: "{{ qe_quay_superuser_email }}"
        redis_host: "{{ qe_quay_hostname }}"
        quay_server_hostname: "{{ qe_quay_hostname }}.{{subdomain_base}}"
        quay_clair_enable: "{{ qe_quay_clair_enable }}"
        quay_clair_endpoint: "http://{{qe_quay_clair_hostname}}.{{ guid }}.internal:6060"

- name: Install and Configure Clair Database
  hosts: clair_database
  tasks:
    - name: Install PostgreSQL for Clair
      include_role:
        name: ../../roles/config-postgresql
      vars:
        mode: containerized
        postgresql_name: "{{ qe_quay_clair_database_service_name|d('postgresql-clair') }}"
        postgresql_username: "{{ qe_clair_database_username }}"
        postgresql_password: "{{ qe_clair_database_password }}"
        postgresql_host_port: "{{ qe_clair_database_port|d('5433') }}"
        postgresql_admin_user: "{{ qe_clair_database_admin_username }}"
        postgresql_admin_password: "{{ qe_clair_database_admin_password }}"
        postgresql_database: "{{ qe_clair_database_name }}"
      when:
        - groups['clair_database']| length > 0
        - qe_quay_clair_enable|d(False)|bool

- name: Install Clair
  hosts: clair
  tasks:
  - name: Set Clair SSL Certificate
    set_fact:
      qe_quay_ssl_cert_file: "{{output_dir}}/{{guid}}.cert"
    when:
    - qe_quay_ssl_lets_encrypt_certs|d(False)|bool
  - name: Set SSL Certificate to self signed certificate if no certificate file specified
    set_fact:
      qe_quay_ssl_cert_file: "/tmp/ssl.cert"
    when:
    - qe_quay_ssl_cert_file is not defined or qe_quay_ssl_cert_file|trim == ""
  - name: Debug qe_quay_ssl_cert_file
    debug:
      msg: "Quay SSL Cert File: {{qe_quay_ssl_cert_file}}"
  - name: Install Clair
    block:
    - name: Gather facts from machine
      setup:
      with_items:
      - "{{ groups['quay_enterprise'] }}"
    - name: Install Clair
      include_role:
        name: ../../roles/config-clair
      vars:
        database_host: "{{ qe_quay_clair_hostname }}"
        quay_enterprise_address: "{{ (qe_quay_ssl_enable|bool)| ternary('https','http') }}://{{ qe_quay_hostname }}.{{ subdomain_base }}"
        clair_address: "http://clair.{{ guid }}.internal"
        clair_ssl_trust_configure: "{{ qe_quay_ssl_enable|d(False)|bool }}"
        clair_ssl_trust_src_file: "{{ qe_quay_ssl_cert_file }}"
        postgresql_username: "{{ qe_clair_database_username }}"
        postgresql_password: "{{ qe_clair_database_password }}"
        postgresql_port: "{{ qe_clair_database_port | d('5433') }}"
    when:
    - groups['clair']| length > 0
    - qe_quay_clair_enable|d(False)|bool

- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Software checks completed successfully"
