---
- name: Step 001 Deploy Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - deploy_infrastructure
  environment:
    AZURE_CLIENT_ID: "{{azure_service_principal}}"
    AZURE_TENANT: "{{azure_tenant}}"
    AZURE_SECRET: "{{azure_password}}"
    AZURE_SUBSCRIPTION_ID: "{{azure_subscription_id}}"
    AZURE_CONFIG_DIR: "{{ output_dir }}/.azure-{{project_tag}}"
  tasks:
    - name: Create ssh provision key
      include_role:
        name: create_ssh_provision_key
      when:
        - ssh_provision_key_name is undefined

    - name: Locate environment SSH key
      include_role:
        name: locate_env_authorized_key

    - name: Ensure az is installed
      command: which az
      register: az_result

    - name: Fail if az not available
      fail:
        msg: you need azure-cli installed
      when: az_result is failed

    # use command line 'az' to validate template and deploy
    - name: Login to Azure
      command: >-
        az login --service-principal
        -u {{ azure_service_principal | quote }}
        -p {{ azure_password | quote }}
        --tenant {{ azure_tenant | quote }}
      tags:
        - create_inventory
        - must
    - name: Create the resource group
      tags:
        - azure_infrastructure_deployment
        - validate_azure_template
      azure.azcollection.azure_rm_resourcegroup:
        name: "{{ az_resource_group }}"
        location: "{{ azure_region }}"
        tags:
          guid: "{{ guid }}"

    - name: Setting windows_password variable
      set_fact:
        windows_password: "{{hostvars.localhost.generated_windows_password}}"
      when:
        - windows_password is not defined
        - generated_windows_password is defined

    - name: Check if deployment exists
      azure.azcollection.azure_rm_deployment_info:
        name: "{{ env_type }}.{{ guid }}"
        resource_group: "{{ az_resource_group }}"
      register: az_dg_check
      ignore_errors: true

    - name: ARM deployment create
      when: az_dg_check.deployments | length == 0
      azure.azcollection.azure_rm_deployment:
        name: "{{ env_type }}.{{ guid }}"
        resource_group: "{{ az_resource_group }}"
        location: "{{ azure_region }}"
        parameters: "{{ lookup('ansible.builtin.template', '../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_parameters_template.j2') }}"
        template: "{{ lookup('ansible.builtin.template', '../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.j2') }}"
        state: present
      register: az_deploy
      tags:
        - azure_infrastructure_deployment
        - az_rm_deploy
      until: az_deploy is succeeded
      retries: 5
      delay: 10

    - name: Fetch DNS zone NS entries
      azure.azcollection.azure_rm_dnsrecordset_info:
        zone_name: "{{guid}}.{{HostedZoneId}}"
        resource_group: "{{az_resource_group}}"
        record_type: NS
        relative_name: '@'
      register: subzone_ns
      tags:
        - azure_infrastructure_deployment
      when:
        - dns_delegation is defined
        - dns_delegation == true

    - name: Add delegation for NS to the main DNSZone
      azure.azcollection.azure_rm_dnsrecordset:
        resource_group: "{{az_dnszone_resource_group|default('dns')}}"
        relative_name: "{{guid}}"
        zone_name: "{{HostedZoneId}}"
        record_type: NS
        state: present
        records: "{{ subzone_ns | json_query('ansible_facts.azure_dnsrecordset[0].properties.NSRecords[*].{entry: nsdname}') }}"
      tags:
        - azure_infrastructure_deployment
      when:
        - dns_delegation is defined
        - dns_delegation == true

    - name: Add CNAME for bastion to the main DNSZone
      azure.azcollection.azure_rm_dnsrecordset:
        resource_group: "{{az_dnszone_resource_group|default('dns')}}"
        relative_name: "bastion.{{guid}}"
        zone_name: "{{HostedZoneId}}"
        record_type: CNAME
        state: present
        records:
          - entry: '{{"bastion-" + guid + "." + azure_region + ".cloudapp.azure.com"}}'
      tags:
        - azure_infrastructure_deployment
      when:
        - dns_bastion is defined
        - dns_bastion == true

    - name: Run infra-azure-create-inventory Role
      import_role:
        name: infra-azure-create-inventory

# Copy env_vars variables from the config to all hosts
- import_playbook: ../include_vars.yml

- name: Step 001.2 Create Inventory and SSH config setup
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - must
    - step001
    - step001.2
    - create_inventory
    - create_ssh_config
  tasks:
    - when: create_ssh_config | default(true) | bool
      block:
        - name: Run Common SSH Config Generator Role
          when:
            - groups.bastions is defined
            - groups.bastions | length > 0
          include_role:
            name: infra-common-ssh-config-generate

- name: wait_for_connection for all non-windows machines and set hostname
  hosts:
    - all:!windows:!network
  gather_facts: false
  become: true
  tags:
    - step001
    - wait_ssh
    - set_hostname
  tasks:
    - name: set facts for remote access
      tags:
        - create_inventory
      set_fact:
        ansible_ssh_extra_args: "{{ ansible_ssh_extra_args|default('') }} -F {{ hostvars.localhost.ansible_ssh_config }}"

    - name: wait for linux host to be available
      wait_for_connection:
        timeout: 300
      register: rwait
      ignore_errors: true

    - name: restart instance if wait_for_connection failed
      become: false
      environment:
        AZURE_CLIENT_ID: "{{azure_service_principal}}"
        AZURE_TENANT: "{{azure_tenant}}"
        AZURE_SECRET: "{{azure_password}}"
        AZURE_SUBSCRIPTION_ID: "{{azure_subscription_id}}"
        AZURE_CONFIG_DIR: "{{ output_dir }}/.azure-{{project_tag}}"
      command: "az vm restart --resource-group {{az_resource_group}} --name '{{inventory_hostname}}'"
      delegate_to: localhost
      when: rwait is failed

    - name: wait for linux host to be available (retry)
      wait_for_connection:
      when: rwait is failed

    - ping:
      register: rping
      retries: 3
      delay: 10
      until: rping is succeeded

    # < get internal domain name for later use
    - name: Get internal fqdn
      command: domainname -d
      register: internalfqdn_r
      changed_when: false

    - name: NetworkManager get active interface uuid
      command: nmcli --get-values UUID connection show --active
      register: result_active_uuid
      changed_when: false

    - name: set fact internal_azure_dns_suffix for later use
      set_fact:
        internal_azure_dns_suffix: "{{internalfqdn_r.stdout}}"
        nm_active_connection: "{{result_active_uuid.stdout}}"

    - name: Stat /etc/cloud/cloud.cf file
      stat:
        path: /etc/cloud/cloud.cfg
      register: cloud_cfg_file

    - name: disable updating hostname in /etc/cloud/cloud.cfg
      lineinfile:
        dest: /etc/cloud/cloud.cfg
        regexp: 'update_hostname$'
        line: '# - update_hostname'
        backup: true
      when: cloud_cfg_file.stat.exists
      tags: disable_cloud_cfg_hostname

    - name: Populate /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: " {{ hostvars[item].internaldns }}$"
        line: "{{ hostvars[item].private_ip_address }} {{ hostvars[item].internaldns }}"
      with_items: "{{ groups.all }}"

- name: Set facts for Windows hosts if any exist and wait_for_connection
  gather_facts: false
  hosts:
    - windows
  tasks:
    - name: set facts for remote access
      set_fact:
        ansible_become: false
        ansible_connection: winrm
        ansible_host: "{{ public_dns_name }}"
        ansible_password: "{{ windows_password | default(hostvars.localhost.generated_windows_password) }}"
        ansible_port: 5986
        ansible_user: "{{ remote_user | default('Administrator') }}"
        ansible_winrm_server_cert_validation: ignore

    - name: wait for windows host to be available
      wait_for_connection:
        timeout: 900
        connect_timeout: 60
        delay: 120
      register: rwait
      ignore_errors: true

    - name: restart instance if wait_for_connection failed
      become: false
      environment:
        AZURE_CLIENT_ID: "{{azure_service_principal}}"
        AZURE_TENANT: "{{azure_tenant}}"
        AZURE_SECRET: "{{azure_password}}"
        AZURE_SUBSCRIPTION_ID: "{{azure_subscription_id}}"
        AZURE_CONFIG_DIR: "{{ output_dir }}/.azure-{{project_tag}}"
      command: "az vm restart --resource-group {{az_resource_group}} --name '{{inventory_hostname}}'"
      delegate_to: localhost
      when: rwait is failed

    - name: wait for windows host to be available (retry)
      wait_for_connection:
        timeout: 900
        connect_timeout: 60
        delay: 120
      when: rwait is failed

    - name: Add authorized_keys
      include_role:
        name: ssh_authorized_keys
      when: >-
        ssh_authorized_keys | default([]) | length > 0
        or
        all_ssh_authorized_keys | default([]) | length > 0

- name: Detect and map data disks for Azure
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - when: instances is defined
      block:
        - name: Map Azure disks using LUN.
          include_role:
            name: infra-azure-disk-map
          vars:
            disk_map_device:
              name: "{{ item.name }}"
              lun: "{{ index }}"
          when: item.enable|default(true)
          loop_control:
            index_var: index
          loop: >-
            {{ instances
            | json_query("
                [?name == '" + instance_canonical_name + "']
                | [].volumes[]
              ")
            }}
          ignore_errors: true

- name: Create Azure Service Principal for OSBA/Cloud Provider
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - env-specific
    - create_azure_service_principal
  environment:
    AZURE_CLIENT_ID: "{{azure_service_principal}}"
    AZURE_TENANT: "{{azure_tenant}}"
    AZURE_SECRET: "{{azure_password}}"
    AZURE_SUBSCRIPTION_ID: "{{azure_subscription_id}}"
    # AZURE_CONFIG_DIR: create a specific config dir for this stack to allow concurrent access
    AZURE_CONFIG_DIR: "{{ output_dir }}/.azure-{{project_tag}}"
  tasks:
    - include_role:
        name: infra-azure-create-service-principal
      when: env_type == "ocp-workshop"
