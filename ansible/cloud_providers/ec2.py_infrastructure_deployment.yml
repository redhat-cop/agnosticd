---
- name: Step 001 Deploy Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_secret_vars.yml"
  tags:
    - step001
    - deploy_infrastructure
  tasks:
  - name: AWS Generate CloudFormation Template
    template:
      src: "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.j2"
      dest: "{{ ANSIBLE_REPO_PATH }}/workdir/{{cloud_provider}}_cloud_template.{{ env_type }}.{{ guid }}.json"
    tags:
      - aws_infrastructure_deployment
      - gen_cf_template
  ######################### Launch CF Template

  - name: Launch CloudFormation template
    environment:
      AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
      AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
      AWS_DEFAULT_REGION: "{{aws_region}}"
    cloudformation:
      stack_name: "{{ project_tag }}"
      state: "present"
      region: "{{ aws_region }}"
      disable_rollback: true
      template: "{{ ANSIBLE_REPO_PATH }}/workdir/{{cloud_provider}}_cloud_template.{{ env_type }}.{{ guid }}.json"
      tags:
        Stack: "project {{ project_tag }}"
    tags:
      - aws_infrastructure_deployment
      - provision_cf_template
    register: cloudformation_out
    until:
      - cloudformation_out|succeeded
      - cloudformation_out.output in ["Stack CREATE complete", "Stack is already up-to-date."]
    retries: "{{ cloudformation_retries | default(25) }}"
    delay: 60
    ignore_errors: yes

  - debug:
     var: cloudformation_out

  - name: report Cloudformation error
    fail:
      msg: "FAIL {{ project_tag }} Create Cloudformation"
    when: not cloudformation_out|succeeded
    tags:
      - provision_cf_template

  - name: Refresh cloud_provider cache
    environment:
      AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
      AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
      AWS_DEFAULT_REGION: "{{aws_region}}"
    shell: "{{ ANSIBLE_REPO_PATH }}/inventory/{{cloud_provider }}.py --refresh-cache"
    when: "not tower_run == 'true'"
    register: task_result
    until: task_result.rc == 0
    retries: 5
    delay: 60
    ignore_errors: yes
    changed_when: task_result.rc == 0
    tags:
      - refresh_inventory
      - refresh_inventory_script

  - name: report Cache refresh error
    fail:
      msg: "FAIL {{ project_tag }} Cache refresh error"
    when: not task_result|succeeded

  - name: Refresh in-memory cloud_provider cache
    environment:
      AWS_ACCESS_KEY_ID: "{{aws_access_key_id}}"
      AWS_SECRET_ACCESS_KEY: "{{aws_secret_access_key}}"
      AWS_DEFAULT_REGION: "{{aws_region}}"
    meta: refresh_inventory
    tags:
      - refresh_inventory

- name: Configure local ssh config for bastion proxy use
  include: "{{ ANSIBLE_REPO_PATH }}/cloud_providers/{{cloud_provider}}_ssh_config_setup.yml"
  when: ('tag_' ~ env_type ~ '_' ~ guid ~ '_bastion') | replace('-', '_') in groups



- name: wait_for_connection for all non-windows machines and set hostname
  hosts:
    - "{{ ('tag_Project_' ~ env_type ~ '_' ~ guid) | replace('-', '_') }}:!{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_ostype_windows') | replace('-', '_') }}"
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_secret_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/ssh_vars.yml"
  gather_facts: false
  any_errors_fatal: true
  ignore_errors: false
  become: true
  tags:
    - step001
    - wait_ssh
    - set_hostname
  tasks:
    - name: wait for linux host to be available
      wait_for_connection:
    - name: Set hostname based on ec2_tag_internaldns
      hostname:
        name: "{{ec2_tag_internaldns}}"
      when: ec2_tag_internaldns is defined


- name: Set facts for Windows hosts if any exist and wait_for_connection
  gather_facts: false
  hosts:
    - "{{ ('tag_' ~ env_type ~ '_' ~ guid ~ '_ostype_windows') | replace('-', '_') }}"
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_secret_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/ssh_vars.yml"
  tasks:
    - name: set facts for remote access
      set_fact:
        ansible_become: false
        ansible_connection: winrm
        ansible_host: "{{ ec2_public_dns_name }}"
        ansible_password: "{{ windows_password | default(hostvars['localhost'].generated_windows_password) }}"
        ansible_port: 5986
        ansible_user: Administrator
        ansible_ssh_user: Administrator
        ansible_winrm_server_cert_validation: ignore

    - name: wait for windows host to be available
      wait_for_connection:
