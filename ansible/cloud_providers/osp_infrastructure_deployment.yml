---
- name: Step 001.1 Deploy Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - step001.1
    - deploy_infrastructure
  environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "admin"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
  tasks:
    - name: Create project and quota
      block:
        - name: Create project for user
          os_project:
            name: "{{ osp_project_name }}"
            state: present
            description: Project for user {{ student_name }}
            enabled: True
            domain_id: "Default"
            endpoint_type: public
        
        - name: Grant access to admin account on new project
          os_user_role:
            state: present
            user: "{{ admin_user }}"
            role: "admin"
            project: "{{ osp_project_name }}"
        
        - name: Set quotas on new project
          os_quota:
            name: "{{ osp_project_name }}"
            instances: "{{ quota_num_instances }}"
            cores: "{{ quota_num_cores }}"
            ram: "{{ quota_memory }}" #in MB
            volumes: "{{ quota_num_volumes }}"
            gigabytes: "{{ quota_volumes_gigs }}" #volume storage
            #loadbalancer: #when Octavia is available
            #pool: #when Octavia is available
            network: "{{ quota_networks }}"
            subnet: "{{ quota_subnets }}"
            router: "{{ quota_routers }}"
            floatingip: "{{ quota_fip }}"
            security_group: "{{ quota_sg }}"
            security_group_rule: "{{ quota_sg_rules }}"
      when: osp_project_create

    - name: Get project info
      # This changes to os_project_info in Ansible 2.9
      os_project_facts:
        name: "{{ osp_project_name }}"
      register: r_osp_project

    # TODO: Add check for the existence of the project if creation was set to false

    - set_fact:
        osp_project_info: "{{ r_osp_project.ansible_facts.openstack_projects }}"

    - name: Run infra-osp-template-generate Role
      import_role:
        name: infra-osp-template-generate

    - name: Run infra-osp-template-create Role
      import_role:
        name: infra-osp-template-create

- name: Step 001.2 Create Inventory and SSH config setup
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - step001.2
    - create_inventory
    - create_ssh_config
  environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "{{ osp_project_name }}"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
  tasks:
    - name: Gather instance facts
      os_server_facts:
        server: "*"
        # TODO: filter using guid
        # filters:
        #   project: "{{ project_tag }}"
      register: r_osp_facts

    - name: debug osp_facts
      debug:
        var: r_osp_facts
        verbosity: 2

    - debug:
        msg: The floating IP for {{ item }} is {{ r_osp_facts | json_query(query) }}
      vars:
        query: "ansible_facts.openstack_servers[?@.name=='{{ item }}'].public_v4|[0]"
      with_items:
        - "bastion"

    - name: Create DNS entries
      debug:
        msg: Currently using {{ ocp_cluster_dns_zone }} on server {{ ocp_cluster_dns_server }}

    - name: Add DNS entry for bastion
      nsupdate:
        server: "{{ ocp_cluster_dns_server }}"
        zone: "{{ ocp_cluster_dns_zone }}"
        record: bastion.{{ guid }} #.{{ ocp_cluster_dns_zone }}
        type: A
        ttl: 5
        value: "{{ r_osp_facts | json_query(query) }}"
        key_name: "{{ ddns_key_name }}"
        key_secret: "{{ ddns_key_secret }}"
      vars:
        query: "ansible_facts.openstack_servers[?@.name=='bastion'].public_v4|[0]"

    - name: Run infra-osp-create-inventory Role
      import_role:
        name: infra-osp-create-inventory
    
    - name: Run Common SSH Config Generator Role
      import_role:
        name: infra-common-ssh-config-generate

# include global vars again, this time for all hosts now that the inventory is built
- import_playbook: ../include_vars.yml
  tags:
    - create_inventory
    - must

- name: Step 001.3 Configure Linux Hosts and Wait for Connection
  hosts:
    - all:!windows:!network
  gather_facts: false
  any_errors_fatal: true
  ignore_errors: false
  tags:
    - step001
    - step001.3
    - wait_ssh
    - set_hostname
  tasks:
    - name: set facts for remote access
      tags:
        - create_inventory
      set_fact:
        # set python interpreter: Useful when the distrib running ansible has a different path
        # ex: when running using the alpine image
        #ansible_python_interpreter: env python
        ansible_ssh_common_args: >-
          {{ ansible_ssh_extra_args|d() }}
          -F {{ output_dir }}/{{ env_type }}_{{ guid }}_ssh_conf
          -o ControlPath=/tmp/{{ guid }}-%r-%h-%p

    - name: Run infra-osp-wait_for_linux_hosts Role
      import_role:
        name: infra-osp-wait_for_linux_hosts
