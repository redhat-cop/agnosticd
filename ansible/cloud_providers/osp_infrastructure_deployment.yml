---
- name: Step 001.1 Deploy Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - step001.1
    - deploy_infrastructure
  tasks:
    - name: Run infra-osp-template-generate Role
      import_role:
        name: infra-osp-template-generate

    - name: Run infra-osp-template-create Role
      import_role:
        name: infra-osp-template-create

- name: Step 001.2 Create Inventory and SSH config setup
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - step001
    - step001.2
    - create_inventory
    - create_ssh_config
  environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "{{ osp_project_creation.project.name }}"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"
  tasks:
    - name: Gather instance facts
      os_server_facts:
        server: "*"
        # filters:
        #   project: "{{ project_tag }}"
      register: r_osp_facts

    - name: debug osp_facts
      debug:
        var: r_osp_facts
        verbosity: 2

    - debug:
        msg: The floating IP for {{ item }} is {{ r_osp_facts | json_query(query) }}
      vars:
        query: "ansible_facts.openstack_servers[?@.name=='{{ item }}'].public_v4|[0]"
      with_items:
        - "bastion"

    - name: Create DNS entries
      debug:
        msg: Currently using {{ ocp_cluster_dns_zone }} on server {{ ocp_cluster_dns_server }}

    - name: Add DNS entry for bastion
      nsupdate:
        server: "{{ ocp_cluster_dns_server }}"
        zone: "{{ ocp_cluster_dns_zone }}"
        record: bastion.{{ guid }} #.{{ ocp_cluster_dns_zone }}
        type: A
        ttl: 5
        value: "{{ r_osp_facts | json_query(query) }}"
        key_name: "{{ ddns_key_name }}"
        key_secret: "{{ ddns_key_secret }}"
      vars:
        query: "ansible_facts.openstack_servers[?@.name=='bastion'].public_v4|[0]"

    # - name: Get HOSTEDZONEID
    #   route53_zone:
    #     zone: "{{ ocp_cluster_dns_zone }}"
    #     aws_access_key: "{{ aws_access_key_id }}"
    #     aws_secret_key: "{{ aws_secret_access_key }}"
    #   register: r_dns_hostedzone

    # - name: Add DNS entry for bastion
    #   route53:
    #     state: present
    #     record: bastion.{{ guid }}.{{ ocp_cluster_dns_zone }}
    #     zone: "{{ ocp_cluster_dns_zone }}"
    #     type: A
    #     value: "{{ hot_output | json_query(query) }}"
    #     wait: "{{ wait_for_dns }}"
    #     hosted_zone_id: "{{ r_dns_hostedzone.zone_id }}"
    #     overwrite: true
    #     aws_access_key: "{{ aws_access_key_id }}"
    #     aws_secret_key: "{{ aws_secret_access_key }}"
    #   vars:
    #     query: "stack.outputs[?output_key=='bastion_fip'].output_value"

    # - name: Add DNS entries for OpenShift
    #   route53:
    #     state: present
    #     record: "{{ item.dns }}.{{ cluster_name }}.{{ guid }}.{{ ocp_cluster_dns_zone }}"
    #     zone: "{{ ocp_cluster_dns_zone }}"
    #     type: A
    #     value: "{{ hot_output | json_query(query) }}"
    #     wait: "{{ wait_for_dns }}"
    #     hosted_zone_id: "{{ r_dns_hostedzone.zone_id }}"
    #     overwrite: true
    #     aws_access_key: "{{ aws_access_key_id }}"
    #     aws_secret_key: "{{ aws_secret_access_key }}"
    #   vars:
    #     query: "stack.outputs[?output_key=='{{ item.name }}'].output_value"
    #   with_items:
    #     - { name: "ocp_api_fip", dns: "api" }
    #     - { name: "ocp_ingress_fip", dns: "apps" }
    
    # - name: Get RRs in hosted zone
    #   route53_facts:
    #     hosted_zone_id: "{{ r_dns_hostedzone.zone_id }}"
    #     query: record_sets
    #     type: A
    #     start_record_name: bastion.{{ guid }}.{{ ocp_cluster_dns_zone }}
    #     aws_access_key: "{{ aws_access_key_id }}"
    #     aws_secret_key: "{{ aws_secret_access_key }}"
    #   register: r_dns_records
    
    - name: Run infra-osp-create-inventory Role
      import_role:
        name: infra-osp-create-inventory
    
    - name: Run Common SSH Config Generator Role
      import_role:
        name: infra-common-ssh-config-generate

# include global vars again, this time for all hosts now that the inventory is built
- import_playbook: ../include_vars.yml
  tags:
    - create_inventory
    - must

- name: Step 001.3 Configure Linux Hosts and Wait for Connection
  hosts:
    - all:!windows:!network
  gather_facts: false
  any_errors_fatal: true
  ignore_errors: false
  tags:
    - step001
    - step001.3
    - wait_ssh
    - set_hostname
  tasks:
    - name: set facts for remote access
      tags:
        - create_inventory
      set_fact:
        # set python interpreter: Useful when the distrib running ansible has a different path
        # ex: when running using the alpine image
        #ansible_python_interpreter: env python
        ansible_ssh_extra_args: >-
          {{ ansible_ssh_extra_args|d() }}
          -F {{ output_dir }}/{{ env_type }}_{{ guid }}_ssh_conf

    - name: Run infra-osp-wait_for_linux_hosts Role
      import_role:
        name: infra-osp-wait_for_linux_hosts

    # - name: Run infra-ec2-linux-set-hostname Role
    #   import_role:
    #     name: infra-ec2-linux-set-hostname
