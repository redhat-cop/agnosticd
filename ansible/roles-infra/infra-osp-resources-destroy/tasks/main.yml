---
# Delete (SWIFT) containers first. They do not
# get cleaned up by deleting all project resources
- name: Get all containers the user has access to
  environment: >-
    {{ __infra_osp_resources_destroy_environment }}
  command: openstack container list -f json
  register: r_osp_containers
- name: Delete containers if any have been found
  when: r_osp_containers.rc == 0
  block:
  - name: Parse JSON reply
    set_fact:
      osp_containers: "{{ r_osp_containers.stdout | from_json }}"
  - name: Print number of containers
    debug:
      msg: "Found {{ osp_containers | length }} containers to clean up."
  - name: Print Containers
    debug:
      msg: "Container to be deleted: {{ item.Name }}"
    loop: "{{ osp_containers }}"
  - name: Delete Containers
    environment: >-
      {{ __infra_osp_resources_destroy_environment }}
    os_object:
      container: "{{ item.Name }}"
      state: absent
    loop: "{{ osp_containers }}"

- name: Detect project if no Project ID specified
  when: osp_project_id is not defined
  include_tasks: detect_project.yml

# If project exists
- name: Cleanup OpenStack project
  when: >-
    osp_project_info | default([]) | length > 0
    or osp_project_id is defined
  block:
  - name: Delete all project resources
    # Delete resources only if the project was created for this environment
    when: >-
      osp_project_create | bool
      or osp_force_delete_all_resources
    include_tasks: project_resources.yml

  # Delete the heat stack **after** resources:
  # The heat stack creates resources like network and router.
  # Over the course of the lifetime of a project, users may
  # create instances, ports, etc. that are outside of the heat
  # stack. If you try to tear the heat stack down without deleting
  # those extra ports, for instance, the heat stack teardown will fail.
  - name: Delete the Heat template
    include_tasks: heat.yml

  # Leaving this as a loop in case we add additional users in the future.
  - name: Loop through and delete user keypairs
    when: osp_project_create | bool
    include_tasks: keypairs.yml
    loop:
    - "{{ osp_auth_username_member }}"
    loop_control:
      loop_var: _keypair_owner

  - name: Delete the project
    when: osp_project_create | bool
    include_tasks: project.yml

# If project doesn't exist
- name: Print error if no project found
  when:
  - osp_project_info | default([]) | length == 0
  - osp_project_id is not defined
  debug:
    msg: "No project found for {{ osp_project_name }}. Nothing done."
