---
- name: Remove OpenStack resources from project
  environment: >-
    {{ __infra_osp_resources_destroy_environment
     | combine({'OS_PROJECT_ID': osp_project_info[0].id | default(osp_project_id)})
    }}
  block:
  - name: Do dry-run of compute and storage purge
    command: |
      openstack project purge --dry-run --keep-project
      --project {{ osp_project_id | default(osp_project_name) | quote }}
    register: project_purge_out

  - name: Purge compute and storage
    command: |
      openstack project purge --keep-project
      --project {{ osp_project_id | default(osp_project_name) | quote }}
    when: project_purge_out is succeeded

  - pause:
      seconds: 30

  - name: Get all remaining volumes in project
    command: >-
      openstack volume list
      --project {{ osp_project_id | default(osp_project_name) | quote }}
      -f json -c ID
    register: r_volumes

  - name: Detach and delete all remaining volumes
    vars:
      __all_volumes: >-
        {{ r_volumes.stdout
        | from_json
        | json_query('[*].ID')
        | list }}
    block:
    - name: Show volumes to delete
      debug:
        var: __all_volumes
        verbosity: 2

    - name: Reset all volumes state to error
      command: >-
        openstack volume set --state error {{ item | quote }}
      loop: "{{ __all_volumes }}"
      failed_when: false

    - name: Detach all volumes
      command: >-
        openstack volume set --detached {{ item | quote }}
      loop: "{{ __all_volumes }}"
      failed_when: false

    - name: Delete all volumes
      command: >-
        openstack volume delete {{ item | quote }}
      loop: "{{ __all_volumes }}"
      retries: 10
      delay: 10
      register: r_openstack_volume_delete
      until: >-
        r_openstack_volume_delete.rc == 0 or
        'No volume with a name or ID' in r_openstack_volume_delete.stderr
      failed_when: >-
        r_openstack_volume_delete.rc != 0 and
        'No volume with a name or ID' not in r_openstack_volume_delete.stderr

  - name: Get all remaining trunk ports in project
    command: >-
      openstack port list
      --project {{ osp_project_id | default(osp_project_name) | quote }}
      -f json -c trunk_details
    register: r_ports

  - name: Delete any trunk ports in project
    vars:
      __all_ports: >-
        {{ r_ports.stdout
        | from_json
        | json_query('[?trunk_details != null].trunk_details.trunk_id')
        | list }}
    when: __all_ports | length > 0
    command: openstack network trunk delete {{ __all_ports | map('quote') | join(' ') }}

  - name: Purge network resources
    command: |
      neutron purge
      --project {{ osp_project_info[0].id | default(osp_project_id) | quote }}
