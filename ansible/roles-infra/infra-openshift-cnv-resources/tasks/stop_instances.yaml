---
- name: Get a list of VMIs
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachine
    namespace: "{{ openshift_cnv_namespace }}"
  register: r_vm_list
  until: r_vm_list is success
  retries: "{{ openshift_cnv_retries }}"
  delay: "{{ openshift_cnv_delay }}"


- name: Stop the Virtual Machines (running)
  loop: "{{ r_vm_list.resources }}"
  loop_control:
    loop_var: _instance
  when:
    - _instance.spec.running is defined
    - _instance.spec.running | bool
  kubevirt.core.kubevirt_vm:
    host: "{{ sandbox_openshift_api_url }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key | default(sandbox_openshift_api_key) }}"
    validate_certs: false
    running: false
    name: "{{ _instance.metadata.name }}"
    namespace: "{{ openshift_cnv_namespace }}"
  register: r_stop_vm
  until: r_stop_vm is success
  retries: "{{ openshift_cnv_retries }}"
  delay: "{{ openshift_cnv_delay }}"

- name: Stop the Virtual Machines (run_strategy)
  loop: "{{ r_vm_list.resources }}"
  loop_control:
    loop_var: _instance
  when: _instance.spec.runStrategy | default("") == "Always"
  kubevirt.core.kubevirt_vm:
    host: "{{ sandbox_openshift_api_url }}"
    api_key: "{{ k8s_auth_results.k8s_auth.api_key | default(sandbox_openshift_api_key) }}"
    validate_certs: false
    run_strategy: "Halted"
    name: "{{ _instance.metadata.name }}"
    namespace: "{{ openshift_cnv_namespace }}"
  register: r_stop_vm
  until: r_stop_vm is success
  retries: "{{ openshift_cnv_retries }}"
  delay: "{{ openshift_cnv_delay }}"
