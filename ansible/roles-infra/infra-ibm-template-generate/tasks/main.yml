---
- name: Check if template exists for the environment
  stat:
    path: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.tf.j2"
  register: stat_template

- name: Use template from the environment
  set_fact:
    ibm_template_src: "../configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.tf.j2"
  when: stat_template.stat.exists

- name: Use the default template
  set_fact:
    ibm_template_src: "templates/cloud_template.tf.j2"
  when: not stat_template.stat.exists

- name: Print ibm_template_src
  debug:
    var: ibm_template_src

- name: Create directory for TF files
  file:
    state: directory
    path: "{{ ibm_cloud_template_directory }}"

- name: Generate terraform from template
  template:
    src: "{{ ibm_template_src }}"
    dest: "{{ ibm_cloud_template }}"

# If we can figure out out to use archive module and preserve directory structure, then switch
- name: Create tarball with tf file in directory
  command: >
    tar cf {{ ibm_cloud_template_tar }} {{ ibm_cloud_template_directory }}
  # archive:
  #   path: "{{ ibm_cloud_template_directory }}"
  #   dest: "{{ output_dir }}/tf_template.tar"
  #   format: tar
    # tar cf {{ ibm_cloud_template_tar }} -C {{ ibm_cloud_template_directory }} .