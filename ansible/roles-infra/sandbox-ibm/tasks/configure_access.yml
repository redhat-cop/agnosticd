---
- name: Create auth token for IBM Cloud
  uri:
    url: "https://iam.cloud.ibm.com/identity/token"
    method: POST
    body_format: form-urlencoded
    body:
      grant_type: "urn:ibm:params:oauth:grant-type:apikey"
      apikey: "{{ sandbox_master_api_key }}"
  register: r_sandbox_token

- name: Set auth bearer token
  set_fact:
    auth_token: "{{ r_sandbox_token['json']['access_token'] }}"

- name: Get list of SIDs in account
  uri:
    url: "https://iam.cloud.ibm.com/v1/serviceids?account_id={{ sandbox_account_id }}"
    headers:
      Authorization: Bearer {{ auth_token }}
  register: r_sandbox_serviceids
    
- name: Delete SID if it exists
  uri:
    url: "https://iam.cloud.ibm.com/v1/serviceids/{{ item }}"
    method: DELETE
    headers:
      Authorization: Bearer {{ auth_token }}
    status_code: 204
  loop: "{{ r_sandbox_serviceids['json']['serviceids'] | json_query(sid_query) }}"
  vars:
    sid_query: "[?name=='{{ guid }}-sid'].id"

- name: Create service ID (SID) in account
  uri:
    url: "https://iam.cloud.ibm.com/v1/serviceids"
    method: POST
    headers:
      Authorization: Bearer {{ auth_token }}
    status_code: 201
    body_format: json
    body:
      name: "{{ guid }}-sid"
      description: "Service ID for {{ guid }}"
      account_id: "{{ sandbox_account_id }}"
  register: r_sandbox_sid

- name: Set sandbox_sid_id
  set_fact:
    sandbox_sid_id: "{{ r_sandbox_sid['json']['iam_id'] }}"

- name: Create API key for SID
  uri:
    url: "https://iam.cloud.ibm.com/v1/apikeys"
    method: POST
    headers:
      Authorization: Bearer {{ auth_token }}
    status_code: 201
    body_format: json
    body:
      name: "{{ guid }}-sid-key"
      description: "{{ guid }}-sid API Key"
      iam_id: "{{ sandbox_sid_id }}"
      account_id: "{{ sandbox_account_id }}"
      store_value: false
  register: r_sandbox_sid_apikey

- name: Set SID API key
  set_fact:
    sandbox_sid_apikey: "{{ r_sandbox_sid_apikey['json']['apikey'] }}"

- name: Get Access Group ID
  uri:
    url: "https://iam.cloud.ibm.com/v2/groups?account_id={{ sandbox_account_id }}"
    headers:
      Authorization: Bearer {{ auth_token }}
  register: r_sandbox_access_groups

- name: Set access group ID
  set_fact: 
    sandbox_access_group: "{{ r_sandbox_access_groups['json']['groups'] | json_query(ag_query) }}"
  vars:
    ag_query: "[?name=='sandbox_ag'].id | [0]"

- name: Add SID to access group
  uri:
    url: "https://iam.cloud.ibm.com/v2/groups/{{ sandbox_access_group }}/members"
    method: PUT
    headers:
      Authorization: Bearer {{ auth_token }}
    status_code: 207
    body_format: json
    body:
      members: |
        [
          {
            "iam_id": "{{ sandbox_sid_id }}",
            "type": "service"
          }
        ]
  register: r_sid_access_group

- name: Store account information in vars
  agnosticd_user_info:
    data:
      sandbox_name: "{{ sandbox_account_name }}"
      sandbox_account: "{{ sandbox_account_id }}"