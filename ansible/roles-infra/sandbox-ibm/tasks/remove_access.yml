---
- name: Create auth token for IBM Cloud
  uri:
    url: "https://iam.cloud.ibm.com/identity/token"
    method: POST
    body_format: form-urlencoded
    body:
      grant_type: "urn:ibm:params:oauth:grant-type:apikey"
      apikey: "{{ sandbox_master_api_key }}"
  register: r_sandbox_token

- name: Set auth bearer token
  set_fact:
    auth_token: "{{ r_sandbox_token['json']['access_token'] }}"

- name: Get list of SIDs in account
  uri:
    url: "https://iam.cloud.ibm.com/v1/serviceids?account_id={{ sandbox_account_id }}"
    headers:
      Authorization: Bearer {{ auth_token }}
  register: r_sandbox_serviceids
    
- name: Delete all SIDs
  uri:
    url: "https://iam.cloud.ibm.com/v1/serviceids/{{ item.id }}"
    method: DELETE
    status_code: 204
    headers:
      Authorization: Bearer {{ auth_token }}
  loop: "{{ r_sandbox_serviceids['json']['serviceids'] }}"

- name: Clean up IBM ROKS policies and access groups
  when: ibm_roks_install
  block:
    - name: Get a list of access groups
      url: "https://iam.cloud.ibm.com/v2/groups?account_id={{ sandbox_account_id }}"
      headers:
        Authorization: Bearer {{ auth_token }}
      register: r_sandbox_access_groups
    
    - name: Set access group ID
      set_fact: 
        sandbox_roks_access_group: "{{ r_sandbox_access_groups['json']['groups'] | json_query(ag_query) }}"
      vars:
        ag_query: "[?name=='sandbox_ibm_roks_ag'].id | [0]"

    - name: Get a list of policies associated to access group
      uri:
        url: "https://iam.cloud.ibm.com/v1/policies?account_id={{ sandbox_account_id }}"
        headers:
          Authorization: Bearer {{ auth_token }}
        body_format: json
        body:
          access_group_id: "{{ sandbox_roks_access_group }}"
      register: r_sandbox_roks_policies

    - name: Delete ROKS access policies
      uri:
        url: "https://iam.cloud.ibm.com/v1/policies/{{ item }}"
        method: DELETE
        headers:
          Authorization: Bearer {{ auth_token }}
        status_code: 204
      loop: "{{ r_sandbox_roks_policies }}"

    - name: Delete ROKS access group
      uri:
        url: "https://iam.cloud.ibm.com/v2/groups/{{ sandbox_roks_access_group }}"
        method: DELETE
        headers:
          Authorization: Bearer {{ auth_token }}
        status_code: 204

- name: Remove UI access
  when: sandbox_enable_ui | default(false)
  block:
    - name: Get a list of users in account
      uri:
        url: "https://user-management.cloud.ibm.com/v2/accounts/{{ sandbox_account_id }}/users"
        headers:
          Authorization: Bearer {{ auth_token }}
      register: r_sandbox_users

    - name: Remove user from account
      uri:
        url: "https://user-management.cloud.ibm.com/v2/accounts/{{ sandbox_account_id }}/users/{{ item }}"
        method: DELETE
        status_code: 204
        headers:
          Authorization: Bearer {{ auth_token }}
        body_format: json
      loop: "{{ r_sandbox_users['json']['resources'] | json_query(user_query) }}"
      vars:
        user_query: "[?user_id=='{{ email }}'].iam_id"
    