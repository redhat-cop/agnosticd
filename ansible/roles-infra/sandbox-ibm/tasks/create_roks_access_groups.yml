---
- name: Create access group for ROKS
  uri:
    url: "https://iam.cloud.ibm.com/v2/groups?account_id={{ sandbox_account_id }}"
    method: POST
    headers:
      Authorization: Bearer {{ auth_token }}
    status_code: 201
    body_format: json
    body:
      name: "sandbox_ibm_roks_ag"
      description: "Access group with additional permissions for IBM ROKS"
  register: r_roks_access_group
  until: r_roks_access_group.status == 201
  retries: 3
  delay: 10

- name: Set ROKS access group ID
  set_fact:
    sandbox_roks_access_group: "{{ r_roks_access_group.json.id }}"

- name: Get resource groups
  uri:
    url: "https://resource-controller.cloud.ibm.com/v2/resource_groups?account_id={{ sandbox_account_id }}"
    headers:
      Authorization: Bearer {{ auth_token }}
  register: r_resource_groups
  until: r_resource_groups.status == 200
  retries: 3
  delay: 10

- name: Set default resource group ID
  set_fact:
    sandbox_default_resource_group: "{{ r_resource_groups.json | to_json | from_json | json_query(_rg_query) }}"
  vars:
    _rg_query: "resources[?contains(keys(@), 'name')] | [?name=='Default'].id | [0]"

- name: Create policies for ROKS access group
  include_tasks: create_roks_policies.yml

- name: Add SID to access group
  uri:
    url: "https://iam.cloud.ibm.com/v2/groups/{{ sandbox_roks_access_group }}/members"
    method: PUT
    headers:
      Authorization: Bearer {{ auth_token }}
    status_code: 207
    body_format: json
    body:
      members:
        - iam_id: "{{ sandbox_sid_id }}"
          type: "service"
  register: r_sid_access_group
  until: r_sid_access_group.status == 207
  retries: 3
  delay: 10
