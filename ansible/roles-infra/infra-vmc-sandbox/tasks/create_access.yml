- name: create sandbox user on IPA
  ipa_user:
    name: "{{ env_type }}-{{ guid }}"
    state: present
    sn: "{{ env_type }}-{{ guid }}"
    validate_certs: False
    givenname: Sanbox User {{ guid }}
    password: "{{ vmc_sandbox_generated_password }}"
    ipa_host: "{{ vc_ipa_host }}"
    ipa_user: "{{ vc_ipa_user }}"
    ipa_pass: "{{ vc_ipa_pass }}"

#- name: Add user to the vmware-sandboxes group
#  community.general.ipa_group:
#    name: vmware-sandboxes
#    user:
#    - "{{ env_type }}-{{ guid }}"
#    append: true
#    state: present
#    validate_certs: False
#    ipa_host: "{{ vc_ipa_host }}"
#    ipa_user: "{{ vc_ipa_user }}"
#    ipa_pass: "{{ vc_ipa_pass }}"


- name: Assign user to roles for different objects on VCenter
  vmware_object_role_permission:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    role: "{{ vcenter_role }}"
    principal: "{{ env_type }}-{{ guid }}@{{ vcenter_domain }}"
    recursive: "{{ True if item.key == 'Folder' else False }}"
    object_name: "{{ item.value }}"
    object_type: "{{ item.key }}"
  register: r_vmware_object_role_permission
  until: r_vmware_object_role_permission is success
  retries: 5
  delay: 10  
  loop: "{{ vcenter_permissions | dict2items }}"

- name: Assign user read-only permission for different objects on VCenter
  vmware_object_role_permission:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    role: "ReadOnly"
    principal: "{{ env_type }}-{{ guid }}@{{ vcenter_domain }}"
    recursive: "{{ True if item.key == 'Folder' else False }}"
    object_name: "{{ item.value }}"
    object_type: "{{ item.key }}"
  register: r_vmware_object_role_permission
  until: r_vmware_object_role_permission is success
  retries: 5
  delay: 10  
  loop: "{{ vcenter_permissions_readonly | dict2items }}"
