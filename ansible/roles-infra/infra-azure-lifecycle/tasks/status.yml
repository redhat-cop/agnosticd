---
- set_fact:
    vmids: []

- name: Get Azure instances filtering by guid
  command:
    az vm list -g {{ item }} --query "[].id" -o tsv
  register: all_instances
  loop: "{{ rgs }}"

- name: Append to instance list
  when: item.stdout|length>0
  set_fact:
    vmids: "{{ vmids + [ item.stdout ] }}"
  loop: "{{ all_instances.results }}"

- name: Get instances
  command:
    az vm show -d --ids {{ vmids | join(' ') | replace('\n', ' ') }}
  register: r_instances

- name: Set instance dict
  set_fact:
    j_instances: "{{ r_instances.stdout | from_json }}"

- name: If JSON returned is dictionary (one instance), convert it to a list, because microsoft
  when: ( j_instances is mapping )
  set_fact:
    o_instances: "{{ [ j_instances ] }}"

- name: If JSON returned is list (multi instances), pass the var through as-is
  when: ( j_instances is not mapping )
  set_fact:
    o_instances: "{{ j_instances }}"

- name: Report status in user info
  agnosticd_user_info:
    msg: |-
      {{ "%-60s %-10s %s" | format("Instance", "State", "Type") }}
      ----------------------------------------------------------------
      {% for instance in o_instances %}
      {{ "%-60s %-10s %s" | format(instance.name, instance.powerState, instance.hardwareProfile.vmSize) }}
      {% endfor %}

- name: Print status information to a file
  copy:
    dest: "{{ output_dir }}/status.txt"
    content: |-
      {{ "%-60s %-10s %s" | format("Instance", "State", "Type") }}
      ----------------------------------------------------------------
      {% for instance in o_instances %}
      {{ "%-60s %-10s %s" | format(instance.name, instance.powerState, instance.hardwareProfile.vmSize) }}
      {% endfor %}
