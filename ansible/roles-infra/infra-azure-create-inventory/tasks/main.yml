# Setting the stack_tag
- set_fact:
    stack_tag: "{{env_type | replace('-', '_')}}_{{guid}}"
  tags:
    - create_inventory
    - must

# use command line 'az' to validate template and deploy
- name: Login to Azure
  command: >-
    az login --service-principal
    -u "{{azure_service_principal}}"
    -p {{azure_password}}
    --tenant {{azure_tenant}}
  environment:
    PATH: "/tmp/.azure-{{project_tag}}:/usr/local/bin:/usr/bin"
    AZURE_CONFIG_DIR: "/tmp/.azure-{{project_tag}}"
  tags:
    - validate_azure_template
    - create_inventory
    - must

# use '--show-details' feature from the cli, it groups instances and their public IPs.
# It saves us API calls.
- name: Get list of VMs
  command: az vm list --resource-group "{{az_resource_group}}" --show-details
  # specify path to use azure-cli from system and not from python virtualenv
  environment:
    AZURE_CONFIG_DIR: "/tmp/.azure-{{project_tag}}"
    PATH: "/tmp/.azure-{{project_tag}}:/usr/local/bin:/usr/bin"
  changed_when: false
  register: result_list
  tags:
    - create_inventory
    - must

- name: Translate JSON output from 'az vm list' to ansible variable
  set_fact:
    vm_list: "{{ result_list.stdout | from_json }}"
  tags:
    - create_inventory
    - must

- debug:
    var: vm_list
    verbosity: 2
  tags:
    - create_inventory
    - must

- name: Build inventory
  add_host:
    name: "{{item.osProfile.computerName|default(item.name)}}"
    shortname: "{{item.tags.Name|default(item.name)}}"
    groups:
      - "tag_Project_{{stack_tag}}"
      - "tag_{{stack_tag}}_{{item.tags.AnsibleGroup | default('unknowns')}}"
      - "tag_{{stack_tag}}_ostype_{{item.tags.ostype | default('unknown')}}"
      - "{{item.tags.ostype | default('unknowns')}}"
      - "{{ 'newnodes' if (item.tags.newnode|d()|bool) else 'all'}}"
    ansible_user: "{{ remote_user }}"
    remote_user: "{{ remote_user | d('azure') }}"
    ansible_ssh_private_key_file: "{{ssh_key}}"
    key_name: "{{key_name}}"
    state: "{{item.powerState|d('unknown')}}"
    internaldns: "{{item.tags.internaldns | d(item.osProfile.computerName) |d(item.name)}}"
    instance_id: "{{ item.vmId | d('unknown')}}"
    region: "{{azure_region}}"
    public_dns_name: "{{item.fqdns|d(item.publicIps)|d('')}}"
    private_dns_name: "{{item.tags.internaldns|d(item.name)}}"
    private_ip_address: "{{item.privateIps}}"
    public_ip_address: "{{item.publicIps}}"
    placement: "{{item.zones}}"
    image_id: "{{item.storageProfile.osDisk.image|d('unknown')}}"
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    instance_canonical_name: "{{ item.tags.canonical_name }}"
  with_items: "{{vm_list}}"
  when:
    - item.tags is defined
    - item.tags.Project is defined
    - item.tags.Project == project_tag
  loop_control:
    label: "{{ item.name }}"
  tags:
    - create_inventory
    - must

# AnsibleGroup tag can have several comma-separated values. Ex: activedirectories,windows
- add_host:
    name: "{{item.osProfile.computerName|default(item.name)}}"
    groups: "{{item.tags.AnsibleGroup}}"
  with_items: "{{vm_list}}"
  when:
    - item.tags is defined
    - item.tags.Project is defined
    - item.tags.Project == project_tag
  loop_control:
    label: "{{ item.name }}"
  tags:
    - create_inventory
    - must

- name: debug hostvars
  debug:
    var: hostvars
    verbosity: 2

- name: debug groups
  debug:
    var: groups
    verbosity: 2

