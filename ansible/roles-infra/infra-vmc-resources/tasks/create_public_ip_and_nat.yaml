- name: Check if Public IP exists
  uri:
    url: "{{ nsxt_proxy_url }}/cloud-service/api/v1/infra/public-ips/{{ env_type }}-{{ guid }}-{{ item.instance.hw_name }}"
    method: GET
    status_code: [200,404,500]
    headers:
      csp-auth-token: "{{ _nsxt_token }}"
    return_content: yes
  register: _public_ip_exists

- name: Get Lab admins IPs
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/domains/mgw/groups/Lab_Public_IPS"
    method: GET
    headers:
      csp-auth-token: "{{ _nsxt_token }}"
    return_content: yes
  register: _lab_public_ips

- name: Request a Public IP
  when: _public_ip_exists.status in [404,500]
  uri:
    url: "{{ nsxt_proxy_url }}/cloud-service/api/v1/infra/public-ips/{{ env_type }}-{{ guid }}-{{ item.instance.hw_name }}"
    method: PUT
    headers:
      csp-auth-token: "{{ _nsxt_token }}"
    body_format: json
    body:
      display_name: "{{ env_type }}-{{ guid }}-{{ item.instance.hw_name }}"
    return_content: yes
  register: _public_ip_request

- name: Set the IP in a variable
  set_fact:
    _vm_public_ip: "{{ _public_ip_request.json.ip | default(_public_ip_exists.json.ip)}}"

- name: Add public IP to VM guest attributes
  community.vmware.vmware_guest_custom_attributes:
    folder: "/Workloads/{{env_type}}-{{ guid }}"
    name: "{{ item.instance.hw_name }}"
    state: present
    attributes: "{{ [{'name':'public_ip', 'value': _vm_public_ip}]  }}"
  register: r_vmware_guest_custom_attributes
  until: r_vmware_guest_custom_attributes is success
  retries: 5
  delay: 10      

- name: Set a new variable appending the IP to the lab public ips 
  set_fact: 
    _lab_public_ips_new: "{{ _lab_public_ips.json.expression.0.ip_addresses|default([]) + [_vm_public_ip] }}"

- name: Update list of IPs for Public Admin IPs
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/domains/mgw/groups/Lab_Public_IPS"
    method: PATCH
    headers:
      csp-auth-token: "{{ _nsxt_token }}"
    body_format: json
    body:
      display_name: "Lab Public IPS"
      group_type: ["IPAddress"]
      expression:
      - resource_type: "IPAddressExpression"
        ip_addresses: "{{ _lab_public_ips_new }}"
    return_content: yes

- name: Create a NAT configuration
  when: _public_ip_exists.status in [404,500]
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-1s/cgw/nat/USER/nat-rules/nat-{{ env_type }}-{{ guid }}-{{ item.instance.hw_name }}"
    method: PUT
    headers:
      csp-auth-token: "{{ _nsxt_token }}"
    body_format: json
    body:
      display_name: "nat-{{ env_type }}-{{ guid }}-{{ item.instance.hw_name }}"
      action: REFLEXIVE
      translated_network: "{{ _vm_public_ip }}"
      source_network: "{{ item.instance.ipv4 }}"
    return_content: yes
  register: _nat_request

- set_fact:
    publicips: "{{ publicips + [{'name': item.instance.hw_name, 'ip': _vm_public_ip}] }}"
