- name: Create a list of possible subnets
  set_fact:
    _possible_subnets: "{% for i in range(2,254) %}{{ '192.168.0.0/16' | ipsubnet(24, i) }},{% endfor %}"


- name: Check if segment exits
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-1s/cgw/segments/segment-{{ env_type }}-{{ guid }}"
    method: GET
    status_code: [200, 404]
    headers:
      csp-auth-token: "{{ _nsxt_token }}"
    return_content: yes
  register: _check_segment

- name: Add a new segment if doesnt exist
  when: _check_segment.status == 404
  block:
  - name: Get segments
    uri:
      url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-1s/cgw/segments"
      method: GET
      headers:
        csp-auth-token: "{{ _nsxt_token }}"
      return_content: yes 
    register: _segments

  - name: Get list used subnets
    set_fact:
      _segments_subnets: "{{ _segments_subnets|default([]) + [item.subnets[0].network] }}"
    loop: "{{ _segments.json.results }}"
  - name: Set a variable for availablesubnet
    set_fact: 
      _available_subnet: "{{ _possible_subnets.split(',')|difference(_segments_subnets) | first }}"

  - name: Create segment
    uri:
      url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-1s/cgw/segments/segment-{{ env_type }}-{{ guid }}"
      method: PATCH
      headers:
        csp-auth-token: "{{ _nsxt_token }}"
      body_format: json
      body:
        display_name: "segment-{{ env_type }}-{{ guid }}"
        subnets:
          - gateway_address: "{{ _available_subnet | ansible.utils.ipaddr('next_usable') }}/24"
            dhcp_ranges:
              - "{{ _available_subnet | nthhost(10) }}-{{ _available_subnet | nthhost(200) }}"
        connectivity_path: '/infra/tier-1s/cgw'
        type: ROUTED
      return_content: yes 
    register: _segments

- name: Set facts for segment name and cidr
  set_fact:
    project_segment_name: "segment-{{ env_type }}-{{ guid }}"
    project_segment_cidr: "{{ _available_subnet | default(_check_segment.json.subnets.0.network) }}"
