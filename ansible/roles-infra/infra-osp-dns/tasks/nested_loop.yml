---
# yamllint disable rule:line-length
- name: Set a variable with public IPv4 IP of the instance
  set_fact:
    _floating_ip: "{{ r_osp_server_facts.servers | selectattr('name', '==', _instance_name) | map(attribute='access_ipv4') | first }}"

- when: _dns_state == 'present'
  block:
    - name: Print floating IP
      debug:
        msg: >-
          The floating IP for {{ _instance_name }}
          is {{ _floating_ip }}

    - name: DNS entry ({{ _dns_state | default('present') }})
      community.general.nsupdate:
        server: >-
          {{ osp_cluster_dns_server
          | ansible.utils.ipaddr
          | ternary(osp_cluster_dns_server, lookup('community.general.dig', osp_cluster_dns_server + "."))
          }}
        zone: "{{ osp_cluster_dns_zone }}"
        record: "{{ _instance_name }}.{{ guid }}"
        type: A
        ttl: "{{ infra_osp_dns_default_ttl }}"
        value: "{{ _floating_ip }}"
        port: "{{ osp_cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"

    - name: Add public_dns entry to host
      add_host:
        name: "{{ _instance_name }}"
        public_dns_name: "{{ _instance_name }}.{{ guid }}.{{ osp_cluster_dns_zone | default(cluster_dns_zone) }}"

    - name: DNS alternative entry ({{ _dns_state | default('present') }})
      when: _alt_names | length > 0
      loop: "{{ _alt_names }}"
      loop_control:
        loop_var: _alt_name
      community.general.nsupdate:
        server: >-
          {{ osp_cluster_dns_server
          | ansible.utils.ipaddr
          | ternary(osp_cluster_dns_server, lookup('community.general.dig', osp_cluster_dns_server + "."))
          }}
        zone: "{{ osp_cluster_dns_zone | default(cluster_dns_zone) }}"
        record: "{{ _alt_name }}{{_index}}.{{ guid }}"
        type: CNAME
        ttl: "{{ infra_osp_dns_default_ttl }}"
        value: "{{ _instance_name }}.{{ guid }}"
        port: "{{ osp_cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"

# When state == absent, don't use r_osp_server_facts (should not be needed)
- when: _dns_state == 'absent'
  block:
    - name: DNS entry ({{ _dns_state | default('present') }})
      community.general.nsupdate:
        server: >-
          {{ osp_cluster_dns_server
          | ansible.utils.ipaddr
          | ternary(osp_cluster_dns_server, lookup('community.general.dig', osp_cluster_dns_server + "."))
          }}
        zone: "{{ osp_cluster_dns_zone }}"
        record: "{{ _instance_name }}.{{ guid }}"
        type: A
        ttl: "{{ infra_osp_dns_default_ttl }}"
        port: "{{ osp_cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"
        state: absent

    - name: DNS alternative entry ({{ _dns_state | default('present') }})
      when: _alt_names | length > 0
      loop: "{{ _alt_names }}"
      loop_control:
        loop_var: _alt_name
      community.general.nsupdate:
        server: >-
          {{ osp_cluster_dns_server
          | ansible.utils.ipaddr
          | ternary(osp_cluster_dns_server, lookup('community.general.dig', osp_cluster_dns_server + "."))
          }}
        zone: "{{ osp_cluster_dns_zone | default(cluster_dns_zone) }}"
        record: "{{ _alt_name }}{{_index}}.{{ guid }}"
        type: CNAME
        ttl: "{{ infra_osp_dns_default_ttl }}"
        value: "{{ _instance_name }}.{{ guid }}"
        port: "{{ osp_cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"
        state: absent
