---
- name: Get list of the VMs
  register: r_vmc_vms
  community.vmware.vmware_vm_info:
    folder: "/{{ vcenter_datacenter }}/vm/Workloads/{{ env_type }}-{{ guid }}"
    show_attribute: true
  ignore_errors: True

- name: Create inventory if folder exists
  when: r_vmc_vms.failed == False
  block:
  - name: Get VM Info for each 
    register: r_vmc_instances
    community.vmware.vmware_guest_info:
      folder: "/Workloads/{{env_type}}-{{ guid }}"
      name: "{{ item.guest_name }}"
    loop: "{{ r_vmc_vms.virtual_machines }}"


  # Find the bastion
  - name: Find the bastion in this batch of hosts
    loop: "{{ r_vmc_instances.results | list }}"
    set_fact:
      local_bastion: "{{ item.instance.hw_name }}"
    when:
      - item.instance.customvalues.AnsibleGroup|default("") == "bastions"
    ignore_errors: true

  - name: Create inventory (add_host)
    loop: "{{ r_vmc_instances.results | list }}"
    add_host:
      name: "{{ item.instance.hw_name }}"
      shortname: "{{ item.instance.hw_name }}"
      ansible_ssh_host: "{{ item.instance.hw_name }}"
      private_ip_address: "{{ item.instance.ipv4 }}"
      public_ip_address: "{{ item.instance.customvalues.public_ip | default(omit) }}"
      groups: "{{ item.instance.customvalues.AnsibleGroup | default(omit) }}"
      bastion: "{{ local_bastion | default('') }}"
      isolated: "{{ item.instance.customvalues.isolated | default(False) }}"

