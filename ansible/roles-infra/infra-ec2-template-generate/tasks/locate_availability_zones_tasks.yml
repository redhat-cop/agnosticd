---
- name: Get the possible AZs
  loop: "{{ __all_instance_types }}"
  loop_control:
    loop_var: _type
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_DEFAULT_REGION: "{{ aws_region_final | default(aws_region) }}"
  command: >-
    aws ec2 describe-instance-type-offerings
    --location-type availability-zone
    --filters "Name=instance-type,Values={{ _type }}"
    --query "InstanceTypeOfferings[].Location"
    --output json
  register: r_possible_azs

- debug:
    var: r_possible_azs
    verbosity: 3

- name: Fail if return code is not 0
  fail:
    msg: "The command ({{ item.cmd }}) did not have a 0 return code"
  when: item.rc != 0
  loop: "{{ r_possible_azs.results }}"
  loop_control:
    label: "{{ item.cmd | default(item) }}"

- name: Set fact of the possible Availability Zones
  set_fact:
    __all_possible_azs: >-
      {{ r_possible_azs
      | json_query('results[].stdout')
      | map('from_json')
      | list
      }}

- name: Calculate intersection of all AZs and set_fact
  loop: "{{ __all_possible_azs }}"
  loop_control:
    loop_var: __azs
  set_fact:
    infra_ec2_template_generate_possible_azs: >-
      {{
      infra_ec2_template_generate_possible_azs
      | default(__all_possible_azs[0])
      | default([])
      | intersect(__azs)
      }}

- name: Abort if no AZ is found
  assert:
    that: infra_ec2_template_generate_possible_azs | length > 0
    msg: >-
      No availability Zone in region {{ aws_region_final | default(aws_region) }}
      can host all the specified instance types.

- name: Print possible availability zones
  debug:
    var: infra_ec2_template_generate_possible_azs

- name: Select the first AZ in the possible AZs and set fact aws_availability_zone
  set_fact:
    aws_availability_zone: "{{ infra_ec2_template_generate_possible_azs | first }}"

- name: Debug
  debug:
    var: aws_availability_zone
