---
- name: Set the query to find the public IPv4 IP of the instance
  set_fact:
    find_ip_query: >-
      {%- if cloud_provider == 'osp' -%}
      openstack_servers[?name=='{{ _instance_name }}'].public_v4 | [0]
      {%- elif cloud_provider == 'equinix_metal' -%}
      results[].devices[?hostname=='{{ _instance_name }}'].public_ipv4[]|[0]
      {%- elif cloud_provider == 'vmc' -%}
      localhost.publicips[?name=='{{ _instance_name }}'].ip
      {%- endif -%}

- when: _dns_state == 'present'
  block:
    - name: Print floating IP
      debug:
        msg: >-
          The floating IP for {{ _instance_name }}
          is {{ vars[infra_dns_inventory_var] | json_query(find_ip_query) }}

    - name: DNS entry ({{ _dns_state | default('present') }})
      nsupdate:
        server: >-
          {{ cluster_dns_server
          | ipaddr
          | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
          }}
        zone: "{{ cluster_dns_zone }}"
        record: "{{ _instance_name }}.{{ guid }}"
        type: A
        ttl: "{{ infra_dns_default_ttl }}"
        value: "{{ vars[infra_dns_inventory_var] | json_query(find_ip_query) }}"
        port: "{{ cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"

    - name: Add public_dns entry to host
      add_host:
        name: "{{ _instance_name }}"
        public_dns_name: "{{ _instance_name }}.{{ guid }}.{{ cluster_dns_zone }}"

    - name: DNS alternative entry ({{ _dns_state | default('present') }})
      when: _alt_names | length > 0
      loop: "{{ _alt_names }}"
      loop_control:
        loop_var: _alt_name
      nsupdate:
        server: >-
          {{ cluster_dns_server
          | ipaddr
          | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
          }}
        zone: "{{ cluster_dns_zone }}"
        record: "{{ _alt_name }}{{_index}}.{{ guid }}"
        type: CNAME
        ttl: "{{ infra_dns_default_ttl }}"
        value: "{{ _instance_name }}.{{ guid }}"
        port: "{{ cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"

# When state == absent, don't use inventory var (should not be needed)
- when: _dns_state == 'absent'
  block:
    - name: DNS entry ({{ _dns_state | default('present') }})
      nsupdate:
        server: >-
          {{ cluster_dns_server
          | ipaddr
          | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
          }}
        zone: "{{ cluster_dns_zone }}"
        record: "{{ _instance_name }}.{{ guid }}"
        type: A
        ttl: "{{ infra_dns_default_ttl }}"
        port: "{{ cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"
        state: absent

    - name: DNS alternative entry ({{ _dns_state | default('present') }})
      when: _alt_names | length > 0
      loop: "{{ _alt_names }}"
      loop_control:
        loop_var: _alt_name
      nsupdate:
        server: >-
          {{ cluster_dns_server
          | ipaddr
          | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
          }}
        zone: "{{ cluster_dns_zone }}"
        record: "{{ _alt_name }}{{_index}}.{{ guid }}"
        type: CNAME
        ttl: "{{ infra_dns_default_ttl }}"
        value: "{{ _instance_name }}.{{ guid }}"
        port: "{{ cluster_dns_port | d('53') }}"
        key_name: "{{ ddns_key_name }}"
        key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
        key_secret: "{{ ddns_key_secret }}"
        state: absent
