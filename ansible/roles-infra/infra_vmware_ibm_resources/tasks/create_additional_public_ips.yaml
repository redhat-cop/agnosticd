---
- name: Check if Public IP exists
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/ip-pools/public-ips/ip-allocations/{{ env_type }}-{{ guid }}-{{ _additional.name }}"
    method: GET
    status_code: [200, 404, 500]
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    return_content: true
  register: _public_ip_exists

- name: Request a Public IP
  when: _public_ip_exists.status in [404,500]
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/ip-pools/public-ips/ip-allocations/{{ env_type }}-{{ guid }}-{{ _additional.name }}"
    method: PUT
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    body_format: json
    body:
      display_name: "{{ env_type }}-{{ guid }}-{{ _additional.name }}"
    return_content: true
  register: _public_ip_request

# On IBM NSX-T doesnt return the IP from the ip-allocations, we need to find it
- name: Get the IP assigned
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/realized-state/realized-entities?intent_path=/infra/ip-pools/public-ips/ip-allocations/{{ env_type }}-{{ guid }}-{{ _additional.name }}"
    method: GET
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    body_format: json
    body:
      display_name: "{{ env_type }}-{{ guid }}-{{ _additional.name }}"
    return_content: false
  register: _public_ip_info

- name: Set the IP in a variable
  set_fact:
    _additional_public_ip: "{{ _public_ip_info.json.results[0]['extended_attributes'][0]['values'][0] }}"

- name: Create a DNAT configuration
  when: _public_ip_exists.status in [404,500]
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-0s/T0-workload-vcs-nsx-vcs-shared/nat/USER/nat-rules/dnat-{{ env_type }}-{{ guid }}-{{ _additional.name }}"
    method: PUT
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    body_format: json
    body:
      display_name: "dnat-{{ env_type }}-{{ guid }}-{{ _additional.name }}"
      action: DNAT
      sequence_number: 100
      destination_network: "{{ _additional_public_ip }}"
      translated_network: "{{ project_segment_cidr | nthhost(_additional.nthhost) }}"
    return_content: true
  register: _nat_request

- name: Create a SNAT configuration
  when: _public_ip_exists.status in [404,500]
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-0s/T0-workload-vcs-nsx-vcs-shared/nat/USER/nat-rules/snat-{{ env_type }}-{{ guid }}-{{ _additional.name }}"
    method: PUT
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    body_format: json
    body:
      display_name: "snat-{{ env_type }}-{{ guid }}-{{ _additional.name }}"
      action: SNAT
      sequence_number: 100
      translated_network: "{{ _additional_public_ip }}"
      source_network: "{{ project_segment_cidr | nthhost(_additional.nthhost) }}"
    return_content: true
  register: _nat_request

- name: Add additional dns records
  amazon.aws.route53:
    state: present
    aws_access_key_id: "{{ route53_aws_access_key_id }}"
    aws_secret_access_key: "{{ route53_aws_secret_access_key }}"
    hosted_zone_id: "{{ route53_aws_zone_id }}"
    record: "{{ _additional.dns }}.{{ cluster_dns_zone }}"
    zone: "{{ cluster_dns_zone  }}"
    value: "{{ _additional_public_ip }}"
    type: A
  register: r_route53_add_record
  until: r_route53_add_record is success
  retries: 3
  delay: 10
