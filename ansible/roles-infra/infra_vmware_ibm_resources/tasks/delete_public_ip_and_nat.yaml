---
- name: Check if Public IP exists
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/ip-pools/public-ips/ip-allocations/{{ env_type }}-{{ guid }}-{{ item.guest_name }}"
    method: GET
    status_code: [200, 404, 500]
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    return_content: true
  register: _public_ip_exists

- name: Remove a DNAT configuration
  when: _public_ip_exists.status == 200
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-0s/T0-workload-vcs-nsx-vcs-shared/nat/USER/nat-rules/dnat-{{ env_type }}-{{ guid }}-{{ item.guest_name }}"
    method: DELETE
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    body_format: json
    return_content: true
  register: _nat_request

- name: Remove a SNAT configuration
  when: _public_ip_exists.status == 200
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/tier-0s/T0-workload-vcs-nsx-vcs-shared/nat/USER/nat-rules/snat-{{ env_type }}-{{ guid }}-{{ item.guest_name }}"
    method: DELETE
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    body_format: json
    return_content: true
  register: _nat_request


- name: Remove associated Public IP
  when: _public_ip_exists.status == 200
  uri:
    url: "{{ nsxt_proxy_url }}/policy/api/v1/infra/ip-pools/public-ips/ip-allocations/{{ env_type }}-{{ guid }}-{{ item.guest_name }}"
    method: DELETE
    url_username: "{{ nsxt_username }}"
    url_password: "{{ nsxt_password }}"
    force_basic_auth: true
    body_format: json
    body:
      display_name: "{{ env_type }}-{{ guid }}-{{ item.guest_name }}"
    return_content: true
  register: _public_ip_request
