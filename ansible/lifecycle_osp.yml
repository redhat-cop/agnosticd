---
- environment:
    OS_AUTH_URL: "{{ osp_auth_url }}"
    OS_USERNAME: "{{ osp_auth_username }}"
    OS_PASSWORD: "{{ osp_auth_password }}"
    OS_PROJECT_NAME: "{{ osp_project_name }}"
    OS_PROJECT_DOMAIN_ID: "{{ osp_auth_project_domain }}"
    OS_USER_DOMAIN_NAME: "{{ osp_auth_user_domain }}"

- debug:
  msg: Entering lifecycle_osp playbook

- name: Debug ACTION, use -v to display
  debug:
    verbosity: 1
    var: ACTION

- name: Gather Instances using guid & env_type
  os_server_info:
    filters:
      metadata:
        guid: "{{ guid }}"
        env_type: "{{ env_type }}"
  register: osp_info

- name: Debug osp_info var, use -v to display
  debug:
    verbosity: 3
    var: osp_info

- name: Create all_instances fact
  set_fact:
    all_instances: >-
      {{ osp_info.openstack_servers
      | json_query('[*].id') }}    

- name: Debug all_instances fact, use -v to display
  debug:
  verbosity: 1
  var: all_instances   

- name: Creating instance status report
  when: ACTION == 'status'
  block:
    - name: Report status in user info
      agnosticd_user_info:
         msg: |-
           {{ "%-30s %s" | format('Instance', 'State') }}
           -------------------------------------------
           {% for instance in osp_info.openstack_servers %}
           {{ "%-30s %s" | format(instance.name, instance.vm_state) }}
           {% endfor %}
    - name: Print status information to a file
      copy:
        dest: "{{ output_dir }}/status.txt"
        content: |-
          {{ "%-30s %s" | format('Instance', 'State') }}
          -------------------------------------------
          {% for instance in osp_info.openstack_servers %}
          {{ "%-30s %s" | format(instance.name, instance.vm_state) }}
          {% endfor %}

- name: Start all Instances
  when: ACTION == 'start'
  os_server_action:
    cloud: "red-admin"
    action: unshelve
    server: "{{ item }}"
    timeout: "{{ osp_timeout | default(300) }}"
  register: start_results
  loop: "{{ all_instances }}"

- name: Stop all Instances
  when: ACTION == 'stop'
  os_server_action:
    cloud: "red-admin"
    action: shelve
    server: "{{ item }}"
    timeout: "{{ osp_timeout | default(300) }}"
  register: stop_results
  loop: "{{ all_instances }}"
